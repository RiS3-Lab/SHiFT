
USBCDCH745FUZZERModBus_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000155cc  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0801d5cc  0801d5cc  00047404  2**0
                  CONTENTS
  3 .ARM          00000008  0801d5cc  0801d5cc  0002d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .preinit_array 00000000  0801d5d4  0801d5d4  00047404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array   00000008  0801d5d4  0801d5d4  0002d5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801d5dc  0801d5dc  0002d5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .privileged_data 00008000  24000000  0801d5e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  24008000  080255e0  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024d3c  24010000  08025b60  00040000  2**16
                  ALLOC
 10 ._user_heap_stack 00001400  24036000  24036000  00046000  2**13
                  ALLOC
 11 ._asan_var    00000004  24037400  24037400  00047400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00047404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032fee  00000000  00000000  00047432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c8f  00000000  00000000  0007a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028f0  00000000  00000000  000810b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000025f8  00000000  00000000  000839a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00044936  00000000  00000000  00085f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030ef6  00000000  00000000  000ca8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001975a6  00000000  00000000  000fb7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  00292d6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b2e4  00000000  00000000  00292db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .privileged_functions:

08000000 <g_pfnVectors>:
 8000000:	00 00 08 24 3d b2 00 08 77 a2 00 08 99 a2 00 08     ...$=...w.......
 8000010:	55 a2 00 08 bb a2 00 08 dd a2 00 08 00 00 00 00     U...............
	...
 800002c:	a5 73 00 08 6d b0 00 08 00 00 00 00 ad 72 00 08     .s..m........r..
 800003c:	57 73 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     Ws..............
 800004c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800005c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800006c:	7d b0 00 08 91 b0 00 08 8d b2 00 08 8d b2 00 08     }...............
 800007c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800008c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800009c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80000ac:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80000bc:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80000cc:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80000dc:	a5 b0 00 08 8d b2 00 08 8d b2 00 08 00 00 00 00     ................
 80000ec:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80000fc:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800010c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800011c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800012c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800013c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 00 00 00 00     ................
 800014c:	00 00 00 00 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800015c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800016c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800017c:	00 00 00 00 b9 b0 00 08 8d b2 00 08 8d b2 00 08     ................
 800018c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800019c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80001ac:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80001bc:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80001cc:	8d b2 00 08 8d b2 00 08 cd b0 00 08 8d b2 00 08     ................
 80001dc:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80001ec:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 80001fc:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800020c:	8d b2 00 08 8d b2 00 08 e1 b0 00 08 8d b2 00 08     ................
 800021c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800022c:	00 00 00 00 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800023c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800024c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800025c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800026c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800027c:	8d b2 00 08 8d b2 00 08 8d b2 00 08 8d b2 00 08     ................
 800028c:	00 00 00 00 8d b2 00 08 8d b2 00 08                 ............

08000298 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800029e:	2020      	movs	r0, #32
 80002a0:	f007 f90c 	bl	80074bc <pvPortMalloc>
 80002a4:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00a      	beq.n	80002c2 <xEventGroupCreate+0x2a>
        {
            pxEventBits->uxEventBits = 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3304      	adds	r3, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fb70 	bl	800099c <vListInitialise>
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Both static and dynamic allocation can be used, so note this
                     * event group was allocated statically in case the event group is
                     * later deleted. */
                    pxEventBits->ucStaticallyAllocated = pdFALSE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	771a      	strb	r2, [r3, #28]
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80002c2:	687b      	ldr	r3, [r7, #4]
    }
 80002c4:	4618      	mov	r0, r3
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <xEventGroupCreateStatic>:
    {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
        configASSERT( pxEventGroupBuffer );
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d10a      	bne.n	80002f0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80002da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002de:	f383 8811 	msr	BASEPRI, r3
 80002e2:	f3bf 8f6f 	isb	sy
 80002e6:	f3bf 8f4f 	dsb	sy
 80002ea:	613b      	str	r3, [r7, #16]
        "	msr basepri, %0											\n"\
        "	isb														\n"\
        "	dsb														\n"\
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80002ec:	bf00      	nop
 80002ee:	e7fe      	b.n	80002ee <xEventGroupCreateStatic+0x22>
                volatile size_t xSize = sizeof( StaticEventGroup_t );
 80002f0:	2320      	movs	r3, #32
 80002f2:	60bb      	str	r3, [r7, #8]
                configASSERT( xSize == sizeof( EventGroup_t ) );
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	2b20      	cmp	r3, #32
 80002f8:	d00a      	beq.n	8000310 <xEventGroupCreateStatic+0x44>
    __asm volatile
 80002fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002fe:	f383 8811 	msr	BASEPRI, r3
 8000302:	f3bf 8f6f 	isb	sy
 8000306:	f3bf 8f4f 	dsb	sy
 800030a:	60fb      	str	r3, [r7, #12]
}
 800030c:	bf00      	nop
 800030e:	e7fe      	b.n	800030e <xEventGroupCreateStatic+0x42>
        pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	617b      	str	r3, [r7, #20]
        if( pxEventBits != NULL )
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d00a      	beq.n	8000330 <xEventGroupCreateStatic+0x64>
            pxEventBits->uxEventBits = 0;
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	3304      	adds	r3, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fb39 	bl	800099c <vListInitialise>
                    pxEventBits->ucStaticallyAllocated = pdTRUE;
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	2201      	movs	r2, #1
 800032e:	771a      	strb	r2, [r3, #28]
        return pxEventBits;
 8000330:	697b      	ldr	r3, [r7, #20]
    }
 8000332:	4618      	mov	r0, r3
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 800033a:	b580      	push	{r7, lr}
 800033c:	b090      	sub	sp, #64	; 0x40
 800033e:	af00      	add	r7, sp, #0
 8000340:	60f8      	str	r0, [r7, #12]
 8000342:	60b9      	str	r1, [r7, #8]
 8000344:	607a      	str	r2, [r7, #4]
 8000346:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8000350:	2300      	movs	r3, #0
 8000352:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10a      	bne.n	8000370 <xEventGroupWaitBits+0x36>
    __asm volatile
 800035a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035e:	f383 8811 	msr	BASEPRI, r3
 8000362:	f3bf 8f6f 	isb	sy
 8000366:	f3bf 8f4f 	dsb	sy
 800036a:	623b      	str	r3, [r7, #32]
}
 800036c:	bf00      	nop
 800036e:	e7fe      	b.n	800036e <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00a      	beq.n	8000390 <xEventGroupWaitBits+0x56>
    __asm volatile
 800037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800037e:	f383 8811 	msr	BASEPRI, r3
 8000382:	f3bf 8f6f 	isb	sy
 8000386:	f3bf 8f4f 	dsb	sy
 800038a:	61fb      	str	r3, [r7, #28]
}
 800038c:	bf00      	nop
 800038e:	e7fe      	b.n	800038e <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10a      	bne.n	80003ac <xEventGroupWaitBits+0x72>
    __asm volatile
 8000396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800039a:	f383 8811 	msr	BASEPRI, r3
 800039e:	f3bf 8f6f 	isb	sy
 80003a2:	f3bf 8f4f 	dsb	sy
 80003a6:	61bb      	str	r3, [r7, #24]
}
 80003a8:	bf00      	nop
 80003aa:	e7fe      	b.n	80003aa <xEventGroupWaitBits+0x70>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80003ac:	f005 fa06 	bl	80057bc <xTaskGetSchedulerState>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d102      	bne.n	80003bc <xEventGroupWaitBits+0x82>
 80003b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d101      	bne.n	80003c0 <xEventGroupWaitBits+0x86>
 80003bc:	2301      	movs	r3, #1
 80003be:	e000      	b.n	80003c2 <xEventGroupWaitBits+0x88>
 80003c0:	2300      	movs	r3, #0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d10a      	bne.n	80003dc <xEventGroupWaitBits+0xa2>
    __asm volatile
 80003c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003ca:	f383 8811 	msr	BASEPRI, r3
 80003ce:	f3bf 8f6f 	isb	sy
 80003d2:	f3bf 8f4f 	dsb	sy
 80003d6:	617b      	str	r3, [r7, #20]
}
 80003d8:	bf00      	nop
 80003da:	e7fe      	b.n	80003da <xEventGroupWaitBits+0xa0>
        }
    #endif

    vTaskSuspendAll();
 80003dc:	f003 fd58 	bl	8003e90 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80003e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80003e6:	683a      	ldr	r2, [r7, #0]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80003ec:	f000 fab3 	bl	8000956 <prvTestWaitCondition>
 80003f0:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 80003f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00e      	beq.n	8000416 <xEventGroupWaitBits+0xdc>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 80003f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d028      	beq.n	8000458 <xEventGroupWaitBits+0x11e>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	43db      	mvns	r3, r3
 800040e:	401a      	ands	r2, r3
 8000410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	e020      	b.n	8000458 <xEventGroupWaitBits+0x11e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8000416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000418:	2b00      	cmp	r3, #0
 800041a:	d104      	bne.n	8000426 <xEventGroupWaitBits+0xec>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 800041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 8000420:	2301      	movs	r3, #1
 8000422:	633b      	str	r3, [r7, #48]	; 0x30
 8000424:	e018      	b.n	8000458 <xEventGroupWaitBits+0x11e>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d003      	beq.n	8000434 <xEventGroupWaitBits+0xfa>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800042c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800042e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000432:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d003      	beq.n	8000442 <xEventGroupWaitBits+0x108>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800043a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800043c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000440:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000444:	1d18      	adds	r0, r3, #4
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800044a:	4313      	orrs	r3, r2
 800044c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800044e:	4619      	mov	r1, r3
 8000450:	f004 fe88 	bl	8005164 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8000458:	f003 fd28 	bl	8003eac <xTaskResumeAll>
 800045c:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 800045e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000460:	2b00      	cmp	r3, #0
 8000462:	d031      	beq.n	80004c8 <xEventGroupWaitBits+0x18e>
    {
        if( xAlreadyYielded == pdFALSE )
 8000464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000466:	2b00      	cmp	r3, #0
 8000468:	d107      	bne.n	800047a <xEventGroupWaitBits+0x140>
        {
            portYIELD_WITHIN_API();
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <xEventGroupWaitBits+0x19a>)
 800046c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	f3bf 8f4f 	dsb	sy
 8000476:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 800047a:	f005 f967 	bl	800574c <uxTaskResetEventItemValue>
 800047e:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d11a      	bne.n	80004c0 <xEventGroupWaitBits+0x186>
        {
            taskENTER_CRITICAL();
 800048a:	f009 fc1d 	bl	8009cc8 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 800048e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8000494:	683a      	ldr	r2, [r7, #0]
 8000496:	68b9      	ldr	r1, [r7, #8]
 8000498:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800049a:	f000 fa5c 	bl	8000956 <prvTestWaitCondition>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d009      	beq.n	80004b8 <xEventGroupWaitBits+0x17e>
                {
                    if( xClearOnExit != pdFALSE )
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d006      	beq.n	80004b8 <xEventGroupWaitBits+0x17e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80004aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004b6:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 80004b8:	2301      	movs	r3, #1
 80004ba:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 80004bc:	f009 fc22 	bl	8009d04 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80004c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 80004c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3740      	adds	r7, #64	; 0x40
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	e000ed04 	.word	0xe000ed04

080004d8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10a      	bne.n	8000502 <xEventGroupClearBits+0x2a>
    __asm volatile
 80004ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004f0:	f383 8811 	msr	BASEPRI, r3
 80004f4:	f3bf 8f6f 	isb	sy
 80004f8:	f3bf 8f4f 	dsb	sy
 80004fc:	60fb      	str	r3, [r7, #12]
}
 80004fe:	bf00      	nop
 8000500:	e7fe      	b.n	8000500 <xEventGroupClearBits+0x28>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00a      	beq.n	8000522 <xEventGroupClearBits+0x4a>
    __asm volatile
 800050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000510:	f383 8811 	msr	BASEPRI, r3
 8000514:	f3bf 8f6f 	isb	sy
 8000518:	f3bf 8f4f 	dsb	sy
 800051c:	60bb      	str	r3, [r7, #8]
}
 800051e:	bf00      	nop
 8000520:	e7fe      	b.n	8000520 <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
 8000522:	f009 fbd1 	bl	8009cc8 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	43db      	mvns	r3, r3
 8000534:	401a      	ands	r2, r3
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 800053a:	f009 fbe3 	bl	8009d04 <vPortExitCritical>

    return uxReturn;
 800053e:	693b      	ldr	r3, [r7, #16]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <xEventGroupClearBitsFromISR>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
                                            const EventBits_t uxBitsToClear )
    {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000552:	2300      	movs	r3, #0
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <xEventGroupClearBitsFromISR+0x24>)
 800055a:	f005 ffff 	bl	800655c <xTimerPendFunctionCallFromISR>
 800055e:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8000560:	68fb      	ldr	r3, [r7, #12]
    }
 8000562:	4618      	mov	r0, r3
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	080008f5 	.word	0x080008f5

08000570 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	; 0x38
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800057a:	2300      	movs	r3, #0
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 8000582:	2300      	movs	r3, #0
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d10a      	bne.n	80005a2 <xEventGroupSetBits+0x32>
    __asm volatile
 800058c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000590:	f383 8811 	msr	BASEPRI, r3
 8000594:	f3bf 8f6f 	isb	sy
 8000598:	f3bf 8f4f 	dsb	sy
 800059c:	613b      	str	r3, [r7, #16]
}
 800059e:	bf00      	nop
 80005a0:	e7fe      	b.n	80005a0 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00a      	beq.n	80005c2 <xEventGroupSetBits+0x52>
    __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	60fb      	str	r3, [r7, #12]
}
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	3304      	adds	r3, #4
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	3308      	adds	r3, #8
 80005cc:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 80005ce:	f003 fc5f 	bl	8003e90 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	431a      	orrs	r2, r3
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 80005e4:	e03c      	b.n	8000660 <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 80005e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80005ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005fc:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000604:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800060c:	2b00      	cmp	r3, #0
 800060e:	d108      	bne.n	8000622 <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4013      	ands	r3, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00b      	beq.n	8000634 <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000620:	e008      	b.n	8000634 <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	4013      	ands	r3, r2
 800062a:	69ba      	ldr	r2, [r7, #24]
 800062c:	429a      	cmp	r2, r3
 800062e:	d101      	bne.n	8000634 <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8000634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000636:	2b00      	cmp	r3, #0
 8000638:	d010      	beq.n	800065c <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8000644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	4313      	orrs	r3, r2
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000654:	4619      	mov	r1, r3
 8000656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000658:	f004 ff1a 	bl	8005490 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 8000660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	429a      	cmp	r2, r3
 8000666:	d1be      	bne.n	80005e6 <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066e:	43db      	mvns	r3, r3
 8000670:	401a      	ands	r2, r3
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8000676:	f003 fc19 	bl	8003eac <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 800067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067c:	681b      	ldr	r3, [r3, #0]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3738      	adds	r7, #56	; 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <xEventGroupSetBitsFromISR>:
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                          const EventBits_t uxBitsToSet,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;

        traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	68f9      	ldr	r1, [r7, #12]
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <xEventGroupSetBitsFromISR+0x26>)
 800069a:	f005 ff5f 	bl	800655c <xTimerPendFunctionCallFromISR>
 800069e:	6178      	str	r0, [r7, #20]

        return xReturn;
 80006a0:	697b      	ldr	r3, [r7, #20]
    }
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	080008db 	.word	0x080008db

080006b0 <xEventGroupSync>:
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xTimeoutOccurred = pdFALSE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00a      	beq.n	80006e6 <xEventGroupSync+0x36>
    __asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	61bb      	str	r3, [r7, #24]
}
 80006e2:	bf00      	nop
 80006e4:	e7fe      	b.n	80006e4 <xEventGroupSync+0x34>
    configASSERT( uxBitsToWaitFor != 0 );
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10a      	bne.n	8000702 <xEventGroupSync+0x52>
    __asm volatile
 80006ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f0:	f383 8811 	msr	BASEPRI, r3
 80006f4:	f3bf 8f6f 	isb	sy
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	617b      	str	r3, [r7, #20]
}
 80006fe:	bf00      	nop
 8000700:	e7fe      	b.n	8000700 <xEventGroupSync+0x50>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000702:	f005 f85b 	bl	80057bc <xTaskGetSchedulerState>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <xEventGroupSync+0x62>
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <xEventGroupSync+0x66>
 8000712:	2301      	movs	r3, #1
 8000714:	e000      	b.n	8000718 <xEventGroupSync+0x68>
 8000716:	2300      	movs	r3, #0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10a      	bne.n	8000732 <xEventGroupSync+0x82>
    __asm volatile
 800071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000720:	f383 8811 	msr	BASEPRI, r3
 8000724:	f3bf 8f6f 	isb	sy
 8000728:	f3bf 8f4f 	dsb	sy
 800072c:	613b      	str	r3, [r7, #16]
}
 800072e:	bf00      	nop
 8000730:	e7fe      	b.n	8000730 <xEventGroupSync+0x80>
    vTaskSuspendAll();
 8000732:	f003 fbad 	bl	8003e90 <vTaskSuspendAll>
        uxOriginalBitValue = pxEventBits->uxEventBits;
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	623b      	str	r3, [r7, #32]
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f7ff ff16 	bl	8000570 <xEventGroupSetBits>
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000744:	6a3a      	ldr	r2, [r7, #32]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4013      	ands	r3, r2
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	d10d      	bne.n	8000770 <xEventGroupSync+0xc0>
            uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8000754:	6a3a      	ldr	r2, [r7, #32]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	4313      	orrs	r3, r2
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	43db      	mvns	r3, r3
 8000764:	401a      	ands	r2, r3
 8000766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000768:	601a      	str	r2, [r3, #0]
            xTicksToWait = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	e013      	b.n	8000798 <xEventGroupSync+0xe8>
            if( xTicksToWait != ( TickType_t ) 0 )
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00b      	beq.n	800078e <xEventGroupSync+0xde>
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8000776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000778:	1d18      	adds	r0, r3, #4
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	f004 fcee 	bl	8005164 <vTaskPlaceOnUnorderedEventList>
                uxReturn = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800078c:	e004      	b.n	8000798 <xEventGroupSync+0xe8>
                uxReturn = pxEventBits->uxEventBits;
 800078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
                xTimeoutOccurred = pdTRUE;
 8000794:	2301      	movs	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
    xAlreadyYielded = xTaskResumeAll();
 8000798:	f003 fb88 	bl	8003eac <xTaskResumeAll>
 800079c:	61f8      	str	r0, [r7, #28]
    if( xTicksToWait != ( TickType_t ) 0 )
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d02c      	beq.n	80007fe <xEventGroupSync+0x14e>
        if( xAlreadyYielded == pdFALSE )
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d107      	bne.n	80007ba <xEventGroupSync+0x10a>
            portYIELD_WITHIN_API();
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <xEventGroupSync+0x158>)
 80007ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	f3bf 8f6f 	isb	sy
        uxReturn = uxTaskResetEventItemValue();
 80007ba:	f004 ffc7 	bl	800574c <uxTaskResetEventItemValue>
 80007be:	62f8      	str	r0, [r7, #44]	; 0x2c
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d115      	bne.n	80007f6 <xEventGroupSync+0x146>
            taskENTER_CRITICAL();
 80007ca:	f009 fa7d 	bl	8009cc8 <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 80007ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80007d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4013      	ands	r3, r2
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d106      	bne.n	80007ee <xEventGroupSync+0x13e>
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	401a      	ands	r2, r3
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	601a      	str	r2, [r3, #0]
            taskEXIT_CRITICAL();
 80007ee:	f009 fa89 	bl	8009d04 <vPortExitCritical>
            xTimeoutOccurred = pdTRUE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return uxReturn;
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000800:	4618      	mov	r0, r3
 8000802:	3730      	adds	r7, #48	; 0x30
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	e000ed04 	.word	0xe000ed04

0800080c <xEventGroupGetBitsFromISR>:
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    EventGroup_t const * const pxEventBits = xEventGroup;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000818:	f3ef 8211 	mrs	r2, BASEPRI
 800081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000820:	f383 8811 	msr	BASEPRI, r3
 8000824:	f3bf 8f6f 	isb	sy
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	60fa      	str	r2, [r7, #12]
 800082e:	60bb      	str	r3, [r7, #8]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000830:	68fb      	ldr	r3, [r7, #12]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000832:	61bb      	str	r3, [r7, #24]
        uxReturn = pxEventBits->uxEventBits;
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	f383 8811 	msr	BASEPRI, r3
    (
        "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000844:	bf00      	nop
    return uxReturn;
 8000846:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8000848:	4618      	mov	r0, r3
 800084a:	3724      	adds	r7, #36	; 0x24
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <vEventGroupDelete>:
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	617b      	str	r3, [r7, #20]
    configASSERT( pxEventBits );
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10a      	bne.n	800087c <vEventGroupDelete+0x28>
    __asm volatile
 8000866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086a:	f383 8811 	msr	BASEPRI, r3
 800086e:	f3bf 8f6f 	isb	sy
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	60fb      	str	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	e7fe      	b.n	800087a <vEventGroupDelete+0x26>
    pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3304      	adds	r3, #4
 8000880:	613b      	str	r3, [r7, #16]
    vTaskSuspendAll();
 8000882:	f003 fb05 	bl	8003e90 <vTaskSuspendAll>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000886:	e017      	b.n	80008b8 <vEventGroupDelete+0x64>
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	3308      	adds	r3, #8
 8000890:	429a      	cmp	r2, r3
 8000892:	d10a      	bne.n	80008aa <vEventGroupDelete+0x56>
    __asm volatile
 8000894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000898:	f383 8811 	msr	BASEPRI, r3
 800089c:	f3bf 8f6f 	isb	sy
 80008a0:	f3bf 8f4f 	dsb	sy
 80008a4:	60bb      	str	r3, [r7, #8]
}
 80008a6:	bf00      	nop
 80008a8:	e7fe      	b.n	80008a8 <vEventGroupDelete+0x54>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fdec 	bl	8005490 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e3      	bne.n	8000888 <vEventGroupDelete+0x34>
                if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	7f1b      	ldrb	r3, [r3, #28]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <vEventGroupDelete+0x7a>
                    vPortFree( pxEventBits );
 80008c8:	6978      	ldr	r0, [r7, #20]
 80008ca:	f006 fedb 	bl	8007684 <vPortFree>
    ( void ) xTaskResumeAll();
 80008ce:	f003 faed 	bl	8003eac <xTaskResumeAll>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <vEventGroupSetBitsCallback>:
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80008e4:	6839      	ldr	r1, [r7, #0]
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fe42 	bl	8000570 <xEventGroupSetBits>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <vEventGroupClearBitsCallback>:
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80008fe:	6839      	ldr	r1, [r7, #0]
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fde9 	bl	80004d8 <xEventGroupClearBits>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
    {
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
        UBaseType_t xReturn;
        EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60bb      	str	r3, [r7, #8]

        if( xEventGroup == NULL )
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <uxEventGroupGetNumber+0x18>
        {
            xReturn = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e002      	b.n	800092c <uxEventGroupGetNumber+0x1e>
        }
        else
        {
            xReturn = pxEventBits->uxEventGroupNumber;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800092c:	68fb      	ldr	r3, [r7, #12]
    }
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <vEventGroupSetNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vEventGroupSetNumber( void * xEventGroup,
                               UBaseType_t uxEventGroupNumber )
    {
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
        ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	619a      	str	r2, [r3, #24]
    }
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <prvTestWaitCondition>:
{
 8000956:	b480      	push	{r7}
 8000958:	b087      	sub	sp, #28
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
    if( xWaitForAllBits == pdFALSE )
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d107      	bne.n	800097c <prvTestWaitCondition+0x26>
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	4013      	ands	r3, r2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00a      	beq.n	800098c <prvTestWaitCondition+0x36>
            xWaitConditionMet = pdTRUE;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	e007      	b.n	800098c <prvTestWaitCondition+0x36>
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4013      	ands	r3, r2
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	429a      	cmp	r2, r3
 8000986:	d101      	bne.n	800098c <prvTestWaitCondition+0x36>
            xWaitConditionMet = pdTRUE;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
    return xWaitConditionMet;
 800098c:	697b      	ldr	r3, [r7, #20]
}
 800098e:	4618      	mov	r0, r3
 8000990:	371c      	adds	r7, #28
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f103 0208 	add.w	r2, r3, #8
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f103 0208 	add.w	r2, r3, #8
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f103 0208 	add.w	r2, r3, #8
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a0c:	d103      	bne.n	8000a16 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	e00c      	b.n	8000a30 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3308      	adds	r3, #8
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e002      	b.n	8000a24 <vListInsert+0x2e>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d2f6      	bcs.n	8000a1e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <vListInsertEnd>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	60fb      	str	r3, [r7, #12]
    pxNewListItem->pxNext = pxIndex;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	609a      	str	r2, [r3, #8]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxContainer = pxList;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )++;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6892      	ldr	r2, [r2, #8]
 8000ac6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6852      	ldr	r2, [r2, #4]
 8000ad0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d103      	bne.n	8000ae4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000b12:	2300      	movs	r3, #0
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10a      	bne.n	8000b36 <xQueueGenericSend+0x32>
    __asm volatile
 8000b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b24:	f383 8811 	msr	BASEPRI, r3
 8000b28:	f3bf 8f6f 	isb	sy
 8000b2c:	f3bf 8f4f 	dsb	sy
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000b32:	bf00      	nop
 8000b34:	e7fe      	b.n	8000b34 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d103      	bne.n	8000b44 <xQueueGenericSend+0x40>
 8000b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <xQueueGenericSend+0x44>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <xQueueGenericSend+0x46>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10a      	bne.n	8000b64 <xQueueGenericSend+0x60>
    __asm volatile
 8000b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b52:	f383 8811 	msr	BASEPRI, r3
 8000b56:	f3bf 8f6f 	isb	sy
 8000b5a:	f3bf 8f4f 	dsb	sy
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000b60:	bf00      	nop
 8000b62:	e7fe      	b.n	8000b62 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d103      	bne.n	8000b72 <xQueueGenericSend+0x6e>
 8000b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <xQueueGenericSend+0x72>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <xQueueGenericSend+0x74>
 8000b76:	2300      	movs	r3, #0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10a      	bne.n	8000b92 <xQueueGenericSend+0x8e>
    __asm volatile
 8000b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b80:	f383 8811 	msr	BASEPRI, r3
 8000b84:	f3bf 8f6f 	isb	sy
 8000b88:	f3bf 8f4f 	dsb	sy
 8000b8c:	623b      	str	r3, [r7, #32]
}
 8000b8e:	bf00      	nop
 8000b90:	e7fe      	b.n	8000b90 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b92:	f004 fe13 	bl	80057bc <xTaskGetSchedulerState>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <xQueueGenericSend+0x9e>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <xQueueGenericSend+0xa2>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <xQueueGenericSend+0xa4>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10a      	bne.n	8000bc2 <xQueueGenericSend+0xbe>
    __asm volatile
 8000bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	61fb      	str	r3, [r7, #28]
}
 8000bbe:	bf00      	nop
 8000bc0:	e7fe      	b.n	8000bc0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000bc2:	f009 f881 	bl	8009cc8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d302      	bcc.n	8000bd8 <xQueueGenericSend+0xd4>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d129      	bne.n	8000c2c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bde:	f001 fa82 	bl	80020e6 <prvCopyDataToQueue>
 8000be2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d010      	beq.n	8000c0e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	3324      	adds	r3, #36	; 0x24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 fb59 	bl	80052a8 <xTaskRemoveFromEventList>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d013      	beq.n	8000c24 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	e00a      	b.n	8000c24 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000c24:	f009 f86e 	bl	8009d04 <vPortExitCritical>
                return pdPASS;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e063      	b.n	8000cf4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c32:	f009 f867 	bl	8009d04 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e05c      	b.n	8000cf4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d106      	bne.n	8000c4e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4618      	mov	r0, r3
 8000c46:	f005 f829 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c4e:	f009 f859 	bl	8009d04 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c52:	f003 f91d 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c56:	f009 f837 	bl	8009cc8 <vPortEnterCritical>
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c66:	d103      	bne.n	8000c70 <xQueueGenericSend+0x16c>
 8000c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c7c:	d103      	bne.n	8000c86 <xQueueGenericSend+0x182>
 8000c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c86:	f009 f83d 	bl	8009d04 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c8a:	1d3a      	adds	r2, r7, #4
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 f880 	bl	8004d98 <xTaskCheckForTimeOut>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d124      	bne.n	8000ce8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ca0:	f001 fa09 	bl	80020b6 <prvIsQueueFull>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d018      	beq.n	8000cdc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cac:	3310      	adds	r3, #16
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 fa32 	bl	800511c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cba:	f001 f994 	bl	8001fe6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000cbe:	f003 f8f5 	bl	8003eac <xTaskResumeAll>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f47f af7c 	bne.w	8000bc2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	f3bf 8f6f 	isb	sy
 8000cda:	e772      	b.n	8000bc2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cde:	f001 f982 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ce2:	f003 f8e3 	bl	8003eac <xTaskResumeAll>
 8000ce6:	e76c      	b.n	8000bc2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cea:	f001 f97c 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cee:	f003 f8dd 	bl	8003eac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000cf2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	e000ed04 	.word	0xe000ed04

08000d00 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <xQueuePeek+0x30>
    __asm volatile
 8000d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1e:	f383 8811 	msr	BASEPRI, r3
 8000d22:	f3bf 8f6f 	isb	sy
 8000d26:	f3bf 8f4f 	dsb	sy
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000d2c:	bf00      	nop
 8000d2e:	e7fe      	b.n	8000d2e <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <xQueuePeek+0x3e>
 8000d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <xQueuePeek+0x42>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <xQueuePeek+0x44>
 8000d42:	2300      	movs	r3, #0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10a      	bne.n	8000d5e <xQueuePeek+0x5e>
    __asm volatile
 8000d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4c:	f383 8811 	msr	BASEPRI, r3
 8000d50:	f3bf 8f6f 	isb	sy
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	623b      	str	r3, [r7, #32]
}
 8000d5a:	bf00      	nop
 8000d5c:	e7fe      	b.n	8000d5c <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d5e:	f004 fd2d 	bl	80057bc <xTaskGetSchedulerState>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <xQueuePeek+0x6e>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <xQueuePeek+0x72>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <xQueuePeek+0x74>
 8000d72:	2300      	movs	r3, #0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10a      	bne.n	8000d8e <xQueuePeek+0x8e>
    __asm volatile
 8000d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7c:	f383 8811 	msr	BASEPRI, r3
 8000d80:	f3bf 8f6f 	isb	sy
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	61fb      	str	r3, [r7, #28]
}
 8000d8a:	bf00      	nop
 8000d8c:	e7fe      	b.n	8000d8c <xQueuePeek+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d8e:	f008 ff9b 	bl	8009cc8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d021      	beq.n	8000de2 <xQueuePeek+0xe2>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000da8:	f001 fa07 	bl	80021ba <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db0:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00f      	beq.n	8000dda <xQueuePeek+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbc:	3324      	adds	r3, #36	; 0x24
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fa72 	bl	80052a8 <xTaskRemoveFromEventList>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <xQueuePeek+0xda>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000dca:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <xQueuePeek+0x1c0>)
 8000dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	f3bf 8f4f 	dsb	sy
 8000dd6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000dda:	f008 ff93 	bl	8009d04 <vPortExitCritical>
                return pdPASS;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e069      	b.n	8000eb6 <xQueuePeek+0x1b6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <xQueuePeek+0xf0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000de8:	f008 ff8c 	bl	8009d04 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e062      	b.n	8000eb6 <xQueuePeek+0x1b6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d106      	bne.n	8000e04 <xQueuePeek+0x104>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 ff4e 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e04:	f008 ff7e 	bl	8009d04 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8000e08:	f003 f842 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e0c:	f008 ff5c 	bl	8009cc8 <vPortEnterCritical>
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e1c:	d103      	bne.n	8000e26 <xQueuePeek+0x126>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e32:	d103      	bne.n	8000e3c <xQueuePeek+0x13c>
 8000e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e3c:	f008 ff62 	bl	8009d04 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e40:	1d3a      	adds	r2, r7, #4
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 ffa5 	bl	8004d98 <xTaskCheckForTimeOut>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d123      	bne.n	8000e9c <xQueuePeek+0x19c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e56:	f001 f918 	bl	800208a <prvIsQueueEmpty>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d017      	beq.n	8000e90 <xQueuePeek+0x190>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e62:	3324      	adds	r3, #36	; 0x24
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 f957 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e70:	f001 f8b9 	bl	8001fe6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e74:	f003 f81a 	bl	8003eac <xTaskResumeAll>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d187      	bne.n	8000d8e <xQueuePeek+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <xQueuePeek+0x1c0>)
 8000e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	e77e      	b.n	8000d8e <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8000e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e92:	f001 f8a8 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e96:	f003 f809 	bl	8003eac <xTaskResumeAll>
 8000e9a:	e778      	b.n	8000d8e <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8000e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e9e:	f001 f8a2 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ea2:	f003 f803 	bl	8003eac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ea8:	f001 f8ef 	bl	800208a <prvIsQueueEmpty>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f43f af6d 	beq.w	8000d8e <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000eb4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3738      	adds	r7, #56	; 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000ed04 	.word	0xe000ed04

08000ec4 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10a      	bne.n	8000eee <xQueuePeekFromISR+0x2a>
    __asm volatile
 8000ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000edc:	f383 8811 	msr	BASEPRI, r3
 8000ee0:	f3bf 8f6f 	isb	sy
 8000ee4:	f3bf 8f4f 	dsb	sy
 8000ee8:	61fb      	str	r3, [r7, #28]
}
 8000eea:	bf00      	nop
 8000eec:	e7fe      	b.n	8000eec <xQueuePeekFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <xQueuePeekFromISR+0x38>
 8000ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <xQueuePeekFromISR+0x3c>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <xQueuePeekFromISR+0x3e>
 8000f00:	2300      	movs	r3, #0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <xQueuePeekFromISR+0x58>
    __asm volatile
 8000f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
 8000f12:	f3bf 8f4f 	dsb	sy
 8000f16:	61bb      	str	r3, [r7, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	e7fe      	b.n	8000f1a <xQueuePeekFromISR+0x56>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10a      	bne.n	8000f3a <xQueuePeekFromISR+0x76>
    __asm volatile
 8000f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	617b      	str	r3, [r7, #20]
}
 8000f36:	bf00      	nop
 8000f38:	e7fe      	b.n	8000f38 <xQueuePeekFromISR+0x74>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f3a:	f008 ff53 	bl	8009de4 <vPortValidateInterruptPriority>
    __asm volatile
 8000f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8000f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f46:	f383 8811 	msr	BASEPRI, r3
 8000f4a:	f3bf 8f6f 	isb	sy
 8000f4e:	f3bf 8f4f 	dsb	sy
 8000f52:	613a      	str	r2, [r7, #16]
 8000f54:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8000f56:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00c      	beq.n	8000f7c <xQueuePeekFromISR+0xb8>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	623b      	str	r3, [r7, #32]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f68:	6839      	ldr	r1, [r7, #0]
 8000f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f6c:	f001 f925 	bl	80021ba <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f72:	6a3a      	ldr	r2, [r7, #32]
 8000f74:	60da      	str	r2, [r3, #12]

            xReturn = pdPASS;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f7a:	e001      	b.n	8000f80 <xQueuePeekFromISR+0xbc>
        }
        else
        {
            xReturn = pdFAIL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	f383 8811 	msr	BASEPRI, r3
}
 8000f8a:	bf00      	nop
            traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <xQueueReceive>:
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b08c      	sub	sp, #48	; 0x30
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Queue_t * const pxQueue = xQueue;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    configASSERT( ( pxQueue ) );
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10a      	bne.n	8000fc6 <xQueueReceive+0x30>
    __asm volatile
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	623b      	str	r3, [r7, #32]
}
 8000fc2:	bf00      	nop
 8000fc4:	e7fe      	b.n	8000fc4 <xQueueReceive+0x2e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <xQueueReceive+0x3e>
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <xQueueReceive+0x42>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <xQueueReceive+0x44>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10a      	bne.n	8000ff4 <xQueueReceive+0x5e>
    __asm volatile
 8000fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	61fb      	str	r3, [r7, #28]
}
 8000ff0:	bf00      	nop
 8000ff2:	e7fe      	b.n	8000ff2 <xQueueReceive+0x5c>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ff4:	f004 fbe2 	bl	80057bc <xTaskGetSchedulerState>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <xQueueReceive+0x6e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <xQueueReceive+0x72>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <xQueueReceive+0x74>
 8001008:	2300      	movs	r3, #0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10a      	bne.n	8001024 <xQueueReceive+0x8e>
    __asm volatile
 800100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001012:	f383 8811 	msr	BASEPRI, r3
 8001016:	f3bf 8f6f 	isb	sy
 800101a:	f3bf 8f4f 	dsb	sy
 800101e:	61bb      	str	r3, [r7, #24]
}
 8001020:	bf00      	nop
 8001022:	e7fe      	b.n	8001022 <xQueueReceive+0x8c>
        taskENTER_CRITICAL();
 8001024:	f008 fe50 	bl	8009cc8 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01f      	beq.n	8001074 <xQueueReceive+0xde>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001038:	f001 f8bf 	bl	80021ba <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00f      	beq.n	800106c <xQueueReceive+0xd6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	3310      	adds	r3, #16
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f929 	bl	80052a8 <xTaskRemoveFromEventList>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <xQueueReceive+0xd6>
                        queueYIELD_IF_USING_PREEMPTION();
 800105c:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <xQueueReceive+0x1ba>)
 800105e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800106c:	f008 fe4a 	bl	8009d04 <vPortExitCritical>
                return pdPASS;
 8001070:	2301      	movs	r3, #1
 8001072:	e069      	b.n	8001148 <xQueueReceive+0x1b2>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <xQueueReceive+0xec>
                    taskEXIT_CRITICAL();
 800107a:	f008 fe43 	bl	8009d04 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 800107e:	2300      	movs	r3, #0
 8001080:	e062      	b.n	8001148 <xQueueReceive+0x1b2>
                else if( xEntryTimeSet == pdFALSE )
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <xQueueReceive+0x100>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fe05 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001092:	2301      	movs	r3, #1
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
        taskEXIT_CRITICAL();
 8001096:	f008 fe35 	bl	8009d04 <vPortExitCritical>
        vTaskSuspendAll();
 800109a:	f002 fef9 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800109e:	f008 fe13 	bl	8009cc8 <vPortEnterCritical>
 80010a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ae:	d103      	bne.n	80010b8 <xQueueReceive+0x122>
 80010b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c4:	d103      	bne.n	80010ce <xQueueReceive+0x138>
 80010c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010ce:	f008 fe19 	bl	8009d04 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010d2:	1d3a      	adds	r2, r7, #4
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fe5c 	bl	8004d98 <xTaskCheckForTimeOut>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d123      	bne.n	800112e <xQueueReceive+0x198>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010e8:	f000 ffcf 	bl	800208a <prvIsQueueEmpty>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d017      	beq.n	8001122 <xQueueReceive+0x18c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	3324      	adds	r3, #36	; 0x24
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 f80e 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001102:	f000 ff70 	bl	8001fe6 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001106:	f002 fed1 	bl	8003eac <xTaskResumeAll>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d189      	bne.n	8001024 <xQueueReceive+0x8e>
                    portYIELD_WITHIN_API();
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <xQueueReceive+0x1ba>)
 8001112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	f3bf 8f4f 	dsb	sy
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	e780      	b.n	8001024 <xQueueReceive+0x8e>
                prvUnlockQueue( pxQueue );
 8001122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001124:	f000 ff5f 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001128:	f002 fec0 	bl	8003eac <xTaskResumeAll>
 800112c:	e77a      	b.n	8001024 <xQueueReceive+0x8e>
            prvUnlockQueue( pxQueue );
 800112e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001130:	f000 ff59 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001134:	f002 feba 	bl	8003eac <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800113a:	f000 ffa6 	bl	800208a <prvIsQueueEmpty>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f43f af6f 	beq.w	8001024 <xQueueReceive+0x8e>
                return errQUEUE_EMPTY;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	e000ed04 	.word	0xe000ed04

08001154 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <uxQueueMessagesWaiting+0x24>
    __asm volatile
 8001162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001166:	f383 8811 	msr	BASEPRI, r3
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	60bb      	str	r3, [r7, #8]
}
 8001174:	bf00      	nop
 8001176:	e7fe      	b.n	8001176 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8001178:	f008 fda6 	bl	8009cc8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8001182:	f008 fdbf 	bl	8009d04 <vPortExitCritical>

    return uxReturn;
 8001186:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10a      	bne.n	80011b8 <uxQueueSpacesAvailable+0x28>
    __asm volatile
 80011a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	f3bf 8f6f 	isb	sy
 80011ae:	f3bf 8f4f 	dsb	sy
 80011b2:	60fb      	str	r3, [r7, #12]
}
 80011b4:	bf00      	nop
 80011b6:	e7fe      	b.n	80011b6 <uxQueueSpacesAvailable+0x26>

    taskENTER_CRITICAL();
 80011b8:	f008 fd86 	bl	8009cc8 <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 80011c8:	f008 fd9c 	bl	8009d04 <vPortExitCritical>

    return uxReturn;
 80011cc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10a      	bne.n	80011fe <vQueueDelete+0x28>
    __asm volatile
 80011e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	60bb      	str	r3, [r7, #8]
}
 80011fa:	bf00      	nop
 80011fc:	e7fe      	b.n	80011fc <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fcea 	bl	8001bd8 <vQueueUnregisterQueue>
        }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
        {
            /* The queue could have been allocated statically or dynamically, so
             * check before attempting to free the memory. */
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <vQueueDelete+0x3e>
            {
                vPortFree( pxQueue );
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f006 fa38 	bl	8007684 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <xQueueGenericSendFromISR>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	; 0x40
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 800122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10a      	bne.n	800124a <xQueueGenericSendFromISR+0x2e>
    __asm volatile
 8001234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001246:	bf00      	nop
 8001248:	e7fe      	b.n	8001248 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <xQueueGenericSendFromISR+0x3c>
 8001250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <xQueueGenericSendFromISR+0x40>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <xQueueGenericSendFromISR+0x42>
 800125c:	2300      	movs	r3, #0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <xQueueGenericSendFromISR+0x5c>
    __asm volatile
 8001262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001266:	f383 8811 	msr	BASEPRI, r3
 800126a:	f3bf 8f6f 	isb	sy
 800126e:	f3bf 8f4f 	dsb	sy
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001274:	bf00      	nop
 8001276:	e7fe      	b.n	8001276 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d103      	bne.n	8001286 <xQueueGenericSendFromISR+0x6a>
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <xQueueGenericSendFromISR+0x6e>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <xQueueGenericSendFromISR+0x70>
 800128a:	2300      	movs	r3, #0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10a      	bne.n	80012a6 <xQueueGenericSendFromISR+0x8a>
    __asm volatile
 8001290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001294:	f383 8811 	msr	BASEPRI, r3
 8001298:	f3bf 8f6f 	isb	sy
 800129c:	f3bf 8f4f 	dsb	sy
 80012a0:	623b      	str	r3, [r7, #32]
}
 80012a2:	bf00      	nop
 80012a4:	e7fe      	b.n	80012a4 <xQueueGenericSendFromISR+0x88>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012a6:	f008 fd9d 	bl	8009de4 <vPortValidateInterruptPriority>
    __asm volatile
 80012aa:	f3ef 8211 	mrs	r2, BASEPRI
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	61fa      	str	r2, [r7, #28]
 80012c0:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80012c2:	69fb      	ldr	r3, [r7, #28]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d302      	bcc.n	80012d8 <xQueueGenericSendFromISR+0xbc>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d13e      	bne.n	8001356 <xQueueGenericSendFromISR+0x13a>
            const int8_t cTxLock = pxQueue->cTxLock;
 80012d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012ee:	f000 fefa 	bl	80020e6 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 80012f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012fa:	d112      	bne.n	8001322 <xQueueGenericSendFromISR+0x106>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	2b00      	cmp	r3, #0
 8001302:	d025      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001306:	3324      	adds	r3, #36	; 0x24
 8001308:	4618      	mov	r0, r3
 800130a:	f003 ffcd 	bl	80052a8 <xTaskRemoveFromEventList>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01d      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01a      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e016      	b.n	8001350 <xQueueGenericSendFromISR+0x134>
                configASSERT( cTxLock != queueINT8_MAX );
 8001322:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001326:	2b7f      	cmp	r3, #127	; 0x7f
 8001328:	d10a      	bne.n	8001340 <xQueueGenericSendFromISR+0x124>
    __asm volatile
 800132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132e:	f383 8811 	msr	BASEPRI, r3
 8001332:	f3bf 8f6f 	isb	sy
 8001336:	f3bf 8f4f 	dsb	sy
 800133a:	617b      	str	r3, [r7, #20]
}
 800133c:	bf00      	nop
 800133e:	e7fe      	b.n	800133e <xQueueGenericSendFromISR+0x122>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001344:	3301      	adds	r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	b25a      	sxtb	r2, r3
 800134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8001350:	2301      	movs	r3, #1
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001354:	e001      	b.n	800135a <xQueueGenericSendFromISR+0x13e>
            xReturn = errQUEUE_FULL;
 8001356:	2300      	movs	r3, #0
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135c:	613b      	str	r3, [r7, #16]
    __asm volatile
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	f383 8811 	msr	BASEPRI, r3
}
 8001364:	bf00      	nop
    return xReturn;
 8001366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001368:	4618      	mov	r0, r3
 800136a:	3740      	adds	r7, #64	; 0x40
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <xQueueGiveFromISR>:
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( pxQueue );
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10a      	bne.n	800139a <xQueueGiveFromISR+0x2a>
    __asm volatile
 8001384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001388:	f383 8811 	msr	BASEPRI, r3
 800138c:	f3bf 8f6f 	isb	sy
 8001390:	f3bf 8f4f 	dsb	sy
 8001394:	623b      	str	r3, [r7, #32]
}
 8001396:	bf00      	nop
 8001398:	e7fe      	b.n	8001398 <xQueueGiveFromISR+0x28>
    configASSERT( pxQueue->uxItemSize == 0 );
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <xQueueGiveFromISR+0x48>
    __asm volatile
 80013a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a6:	f383 8811 	msr	BASEPRI, r3
 80013aa:	f3bf 8f6f 	isb	sy
 80013ae:	f3bf 8f4f 	dsb	sy
 80013b2:	61fb      	str	r3, [r7, #28]
}
 80013b4:	bf00      	nop
 80013b6:	e7fe      	b.n	80013b6 <xQueueGiveFromISR+0x46>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <xQueueGiveFromISR+0x58>
 80013c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <xQueueGiveFromISR+0x5c>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <xQueueGiveFromISR+0x5e>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10a      	bne.n	80013e8 <xQueueGiveFromISR+0x78>
    __asm volatile
 80013d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d6:	f383 8811 	msr	BASEPRI, r3
 80013da:	f3bf 8f6f 	isb	sy
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	61bb      	str	r3, [r7, #24]
}
 80013e4:	bf00      	nop
 80013e6:	e7fe      	b.n	80013e6 <xQueueGiveFromISR+0x76>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80013e8:	f008 fcfc 	bl	8009de4 <vPortValidateInterruptPriority>
    __asm volatile
 80013ec:	f3ef 8211 	mrs	r2, BASEPRI
 80013f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013f4:	f383 8811 	msr	BASEPRI, r3
 80013f8:	f3bf 8f6f 	isb	sy
 80013fc:	f3bf 8f4f 	dsb	sy
 8001400:	617a      	str	r2, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8001404:	697b      	ldr	r3, [r7, #20]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
        if( uxMessagesWaiting < pxQueue->uxLength )
 800140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001414:	429a      	cmp	r2, r3
 8001416:	d23a      	bcs.n	800148e <xQueueGiveFromISR+0x11e>
            const int8_t cTxLock = pxQueue->cTxLock;
 8001418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800141e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 800142a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800142e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001432:	d112      	bne.n	800145a <xQueueGiveFromISR+0xea>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2b00      	cmp	r3, #0
 800143a:	d025      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143e:	3324      	adds	r3, #36	; 0x24
 8001440:	4618      	mov	r0, r3
 8001442:	f003 ff31 	bl	80052a8 <xTaskRemoveFromEventList>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01d      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                                if( pxHigherPriorityTaskWoken != NULL )
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e016      	b.n	8001488 <xQueueGiveFromISR+0x118>
                configASSERT( cTxLock != queueINT8_MAX );
 800145a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800145e:	2b7f      	cmp	r3, #127	; 0x7f
 8001460:	d10a      	bne.n	8001478 <xQueueGiveFromISR+0x108>
    __asm volatile
 8001462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001466:	f383 8811 	msr	BASEPRI, r3
 800146a:	f3bf 8f6f 	isb	sy
 800146e:	f3bf 8f4f 	dsb	sy
 8001472:	60fb      	str	r3, [r7, #12]
}
 8001474:	bf00      	nop
 8001476:	e7fe      	b.n	8001476 <xQueueGiveFromISR+0x106>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800147c:	3301      	adds	r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	b25a      	sxtb	r2, r3
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8001488:	2301      	movs	r3, #1
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
 800148c:	e001      	b.n	8001492 <xQueueGiveFromISR+0x122>
            xReturn = errQUEUE_FULL;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f383 8811 	msr	BASEPRI, r3
}
 800149c:	bf00      	nop
    return xReturn;
 800149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3738      	adds	r7, #56	; 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <xQueueReceiveFromISR>:
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10a      	bne.n	80014d4 <xQueueReceiveFromISR+0x2c>
    __asm volatile
 80014be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c2:	f383 8811 	msr	BASEPRI, r3
 80014c6:	f3bf 8f6f 	isb	sy
 80014ca:	f3bf 8f4f 	dsb	sy
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80014d0:	bf00      	nop
 80014d2:	e7fe      	b.n	80014d2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <xQueueReceiveFromISR+0x3a>
 80014da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <xQueueReceiveFromISR+0x3e>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <xQueueReceiveFromISR+0x40>
 80014e6:	2300      	movs	r3, #0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10a      	bne.n	8001502 <xQueueReceiveFromISR+0x5a>
    __asm volatile
 80014ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f0:	f383 8811 	msr	BASEPRI, r3
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	f3bf 8f4f 	dsb	sy
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80014fe:	bf00      	nop
 8001500:	e7fe      	b.n	8001500 <xQueueReceiveFromISR+0x58>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001502:	f008 fc6f 	bl	8009de4 <vPortValidateInterruptPriority>
    __asm volatile
 8001506:	f3ef 8211 	mrs	r2, BASEPRI
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	623a      	str	r2, [r7, #32]
 800151c:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 800151e:	6a3b      	ldr	r3, [r7, #32]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03e      	beq.n	80015ac <xQueueReceiveFromISR+0x104>
            const int8_t cRxLock = pxQueue->cRxLock;
 800152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800153c:	f000 fe3d 	bl	80021ba <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	639a      	str	r2, [r3, #56]	; 0x38
            if( cRxLock == queueUNLOCKED )
 8001548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001550:	d112      	bne.n	8001578 <xQueueReceiveFromISR+0xd0>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d025      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155c:	3310      	adds	r3, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fea2 	bl	80052a8 <xTaskRemoveFromEventList>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01d      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                        if( pxHigherPriorityTaskWoken != NULL )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01a      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e016      	b.n	80015a6 <xQueueReceiveFromISR+0xfe>
                configASSERT( cRxLock != queueINT8_MAX );
 8001578:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800157c:	2b7f      	cmp	r3, #127	; 0x7f
 800157e:	d10a      	bne.n	8001596 <xQueueReceiveFromISR+0xee>
    __asm volatile
 8001580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	61bb      	str	r3, [r7, #24]
}
 8001592:	bf00      	nop
 8001594:	e7fe      	b.n	8001594 <xQueueReceiveFromISR+0xec>
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800159a:	3301      	adds	r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            xReturn = pdPASS;
 80015a6:	2301      	movs	r3, #1
 80015a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015aa:	e001      	b.n	80015b0 <xQueueReceiveFromISR+0x108>
            xReturn = pdFAIL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	617b      	str	r3, [r7, #20]
    __asm volatile
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f383 8811 	msr	BASEPRI, r3
}
 80015ba:	bf00      	nop
    return xReturn;
 80015bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3740      	adds	r7, #64	; 0x40
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <xQueueIsQueueEmptyFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10a      	bne.n	80015ee <xQueueIsQueueEmptyFromISR+0x28>
    __asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	60fb      	str	r3, [r7, #12]
}
 80015ea:	bf00      	nop
 80015ec:	e7fe      	b.n	80015ec <xQueueIsQueueEmptyFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <xQueueIsQueueEmptyFromISR+0x36>
    {
        xReturn = pdTRUE;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e001      	b.n	8001600 <xQueueIsQueueEmptyFromISR+0x3a>
    }
    else
    {
        xReturn = pdFALSE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001600:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001602:	4618      	mov	r0, r3
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800160e:	b480      	push	{r7}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10a      	bne.n	8001636 <xQueueIsQueueFullFromISR+0x28>
    __asm volatile
 8001620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001624:	f383 8811 	msr	BASEPRI, r3
 8001628:	f3bf 8f6f 	isb	sy
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	60fb      	str	r3, [r7, #12]
}
 8001632:	bf00      	nop
 8001634:	e7fe      	b.n	8001634 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	429a      	cmp	r2, r3
 8001640:	d102      	bne.n	8001648 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e001      	b.n	800164c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800164c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800164e:	4618      	mov	r0, r3
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <uxQueueMessagesWaitingFromISR>:
{
 800165a:	b480      	push	{r7}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	617b      	str	r3, [r7, #20]
    configASSERT( pxQueue );
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <uxQueueMessagesWaitingFromISR+0x28>
    __asm volatile
 800166c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001670:	f383 8811 	msr	BASEPRI, r3
 8001674:	f3bf 8f6f 	isb	sy
 8001678:	f3bf 8f4f 	dsb	sy
 800167c:	60fb      	str	r3, [r7, #12]
}
 800167e:	bf00      	nop
 8001680:	e7fe      	b.n	8001680 <uxQueueMessagesWaitingFromISR+0x26>
    uxReturn = pxQueue->uxMessagesWaiting;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	613b      	str	r3, [r7, #16]
    return uxReturn;
 8001688:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800168a:	4618      	mov	r0, r3
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <xQueueCreateMutex>:
    {
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	461a      	mov	r2, r3
 80016ac:	6939      	ldr	r1, [r7, #16]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f000 fafe 	bl	8001cb0 <xQueueGenericCreate>
 80016b4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fdc8 	bl	800224c <prvInitialiseMutex>
        return xNewQueue;
 80016bc:	68fb      	ldr	r3, [r7, #12]
    }
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <xQueueCreateMutexStatic>:
    {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af02      	add	r7, sp, #8
 80016cc:	4603      	mov	r3, r0
 80016ce:	6039      	str	r1, [r7, #0]
 80016d0:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	6939      	ldr	r1, [r7, #16]
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f000 fb35 	bl	8001d54 <xQueueGenericCreateStatic>
 80016ea:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fdad 	bl	800224c <prvInitialiseMutex>
        return xNewQueue;
 80016f2:	68fb      	ldr	r3, [r7, #12]
    }
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <xQueueCreateCountingSemaphore>:
    {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
        if( ( uxMaxCount != 0 ) &&
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d010      	beq.n	8001732 <xQueueCreateCountingSemaphore+0x36>
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	d80c      	bhi.n	8001732 <xQueueCreateCountingSemaphore+0x36>
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001718:	2202      	movs	r2, #2
 800171a:	2100      	movs	r1, #0
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fac7 	bl	8001cb0 <xQueueGenericCreate>
 8001722:	60f8      	str	r0, [r7, #12]
            if( xHandle != NULL )
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d011      	beq.n	800174e <xQueueCreateCountingSemaphore+0x52>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8001730:	e00d      	b.n	800174e <xQueueCreateCountingSemaphore+0x52>
            configASSERT( xHandle );
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <xQueueCreateCountingSemaphore+0x52>
    __asm volatile
 8001738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173c:	f383 8811 	msr	BASEPRI, r3
 8001740:	f3bf 8f6f 	isb	sy
 8001744:	f3bf 8f4f 	dsb	sy
 8001748:	60bb      	str	r3, [r7, #8]
}
 800174a:	bf00      	nop
 800174c:	e7fe      	b.n	800174c <xQueueCreateCountingSemaphore+0x50>
        return xHandle;
 800174e:	68fb      	ldr	r3, [r7, #12]
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <xQueueCreateCountingSemaphoreStatic>:
    {
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
        if( ( uxMaxCount != 0 ) &&
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d013      	beq.n	8001796 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d80f      	bhi.n	8001796 <xQueueCreateCountingSemaphoreStatic+0x3e>
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001776:	2302      	movs	r3, #2
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fae7 	bl	8001d54 <xQueueGenericCreateStatic>
 8001786:	6178      	str	r0, [r7, #20]
            if( xHandle != NULL )
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d011      	beq.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8001794:	e00d      	b.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
            configASSERT( xHandle );
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
    __asm volatile
 800179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a0:	f383 8811 	msr	BASEPRI, r3
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	f3bf 8f4f 	dsb	sy
 80017ac:	613b      	str	r3, [r7, #16]
}
 80017ae:	bf00      	nop
 80017b0:	e7fe      	b.n	80017b0 <xQueueCreateCountingSemaphoreStatic+0x58>
        return xHandle;
 80017b2:	697b      	ldr	r3, [r7, #20]
    }
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <xQueueSemaphoreTake>:
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
    Queue_t * const pxQueue = xQueue;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        BaseType_t xInheritanceOccurred = pdFALSE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( ( pxQueue ) );
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10a      	bne.n	80017ee <xQueueSemaphoreTake+0x32>
    __asm volatile
 80017d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017dc:	f383 8811 	msr	BASEPRI, r3
 80017e0:	f3bf 8f6f 	isb	sy
 80017e4:	f3bf 8f4f 	dsb	sy
 80017e8:	623b      	str	r3, [r7, #32]
}
 80017ea:	bf00      	nop
 80017ec:	e7fe      	b.n	80017ec <xQueueSemaphoreTake+0x30>
    configASSERT( pxQueue->uxItemSize == 0 );
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00a      	beq.n	800180c <xQueueSemaphoreTake+0x50>
    __asm volatile
 80017f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	61fb      	str	r3, [r7, #28]
}
 8001808:	bf00      	nop
 800180a:	e7fe      	b.n	800180a <xQueueSemaphoreTake+0x4e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800180c:	f003 ffd6 	bl	80057bc <xTaskGetSchedulerState>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <xQueueSemaphoreTake+0x60>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <xQueueSemaphoreTake+0x64>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <xQueueSemaphoreTake+0x66>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <xQueueSemaphoreTake+0x80>
    __asm volatile
 8001826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	61bb      	str	r3, [r7, #24]
}
 8001838:	bf00      	nop
 800183a:	e7fe      	b.n	800183a <xQueueSemaphoreTake+0x7e>
        taskENTER_CRITICAL();
 800183c:	f008 fa44 	bl	8009cc8 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d024      	beq.n	8001896 <xQueueSemaphoreTake+0xda>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	1e5a      	subs	r2, r3, #1
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <xQueueSemaphoreTake+0xaa>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800185c:	f004 fa07 	bl	8005c6e <pvTaskIncrementMutexHeldCount>
 8001860:	4602      	mov	r2, r0
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	609a      	str	r2, [r3, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00f      	beq.n	800188e <xQueueSemaphoreTake+0xd2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	3310      	adds	r3, #16
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fd18 	bl	80052a8 <xTaskRemoveFromEventList>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <xQueueSemaphoreTake+0xd2>
                        queueYIELD_IF_USING_PREEMPTION();
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <xQueueSemaphoreTake+0x214>)
 8001880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800188e:	f008 fa39 	bl	8009d04 <vPortExitCritical>
                return pdPASS;
 8001892:	2301      	movs	r3, #1
 8001894:	e097      	b.n	80019c6 <xQueueSemaphoreTake+0x20a>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d111      	bne.n	80018c0 <xQueueSemaphoreTake+0x104>
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <xQueueSemaphoreTake+0xfc>
    __asm volatile
 80018a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a6:	f383 8811 	msr	BASEPRI, r3
 80018aa:	f3bf 8f6f 	isb	sy
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	617b      	str	r3, [r7, #20]
}
 80018b4:	bf00      	nop
 80018b6:	e7fe      	b.n	80018b6 <xQueueSemaphoreTake+0xfa>
                    taskEXIT_CRITICAL();
 80018b8:	f008 fa24 	bl	8009d04 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80018bc:	2300      	movs	r3, #0
 80018be:	e082      	b.n	80019c6 <xQueueSemaphoreTake+0x20a>
                else if( xEntryTimeSet == pdFALSE )
 80018c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <xQueueSemaphoreTake+0x118>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 f9e6 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
        taskEXIT_CRITICAL();
 80018d4:	f008 fa16 	bl	8009d04 <vPortExitCritical>
        vTaskSuspendAll();
 80018d8:	f002 fada 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018dc:	f008 f9f4 	bl	8009cc8 <vPortEnterCritical>
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ec:	d103      	bne.n	80018f6 <xQueueSemaphoreTake+0x13a>
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001902:	d103      	bne.n	800190c <xQueueSemaphoreTake+0x150>
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800190c:	f008 f9fa 	bl	8009d04 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001910:	463a      	mov	r2, r7
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fa3d 	bl	8004d98 <xTaskCheckForTimeOut>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d132      	bne.n	800198a <xQueueSemaphoreTake+0x1ce>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001926:	f000 fbb0 	bl	800208a <prvIsQueueEmpty>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d026      	beq.n	800197e <xQueueSemaphoreTake+0x1c2>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <xQueueSemaphoreTake+0x190>
                            taskENTER_CRITICAL();
 8001938:	f008 f9c6 	bl	8009cc8 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4618      	mov	r0, r3
 8001942:	f003 ff59 	bl	80057f8 <xTaskPriorityInherit>
 8001946:	6338      	str	r0, [r7, #48]	; 0x30
                            taskEXIT_CRITICAL();
 8001948:	f008 f9dc 	bl	8009d04 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194e:	3324      	adds	r3, #36	; 0x24
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fbe1 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800195a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800195c:	f000 fb43 	bl	8001fe6 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001960:	f002 faa4 	bl	8003eac <xTaskResumeAll>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f af68 	bne.w	800183c <xQueueSemaphoreTake+0x80>
                    portYIELD_WITHIN_API();
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <xQueueSemaphoreTake+0x214>)
 800196e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	e75e      	b.n	800183c <xQueueSemaphoreTake+0x80>
                prvUnlockQueue( pxQueue );
 800197e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001980:	f000 fb31 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001984:	f002 fa92 	bl	8003eac <xTaskResumeAll>
 8001988:	e758      	b.n	800183c <xQueueSemaphoreTake+0x80>
            prvUnlockQueue( pxQueue );
 800198a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800198c:	f000 fb2b 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001990:	f002 fa8c 	bl	8003eac <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001996:	f000 fb78 	bl	800208a <prvIsQueueEmpty>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	f43f af4d 	beq.w	800183c <xQueueSemaphoreTake+0x80>
                        if( xInheritanceOccurred != pdFALSE )
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <xQueueSemaphoreTake+0x208>
                            taskENTER_CRITICAL();
 80019a8:	f008 f98e 	bl	8009cc8 <vPortEnterCritical>
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80019ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ae:	f000 fc67 	bl	8002280 <prvGetDisinheritPriorityAfterTimeout>
 80019b2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 f86e 	bl	8005a9c <vTaskPriorityDisinheritAfterTimeout>
                            taskEXIT_CRITICAL();
 80019c0:	f008 f9a0 	bl	8009d04 <vPortExitCritical>
                return errQUEUE_EMPTY;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3738      	adds	r7, #56	; 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000ed04 	.word	0xe000ed04

080019d4 <xQueueGetMutexHolder>:
    {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
        Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	613b      	str	r3, [r7, #16]
        configASSERT( xSemaphore );
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <xQueueGetMutexHolder+0x28>
    __asm volatile
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	60fb      	str	r3, [r7, #12]
}
 80019f8:	bf00      	nop
 80019fa:	e7fe      	b.n	80019fa <xQueueGetMutexHolder+0x26>
        taskENTER_CRITICAL();
 80019fc:	f008 f964 	bl	8009cc8 <vPortEnterCritical>
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <xQueueGetMutexHolder+0x3c>
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e001      	b.n	8001a14 <xQueueGetMutexHolder+0x40>
                pxReturn = NULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8001a14:	f008 f976 	bl	8009d04 <vPortExitCritical>
        return pxReturn;
 8001a18:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <xQueueGetMutexHolderFromISR>:
    {
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
        configASSERT( xSemaphore );
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <xQueueGetMutexHolderFromISR+0x24>
    __asm volatile
 8001a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	f3bf 8f6f 	isb	sy
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	60bb      	str	r3, [r7, #8]
}
 8001a42:	bf00      	nop
 8001a44:	e7fe      	b.n	8001a44 <xQueueGetMutexHolderFromISR+0x22>
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <xQueueGetMutexHolderFromISR+0x34>
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e001      	b.n	8001a5a <xQueueGetMutexHolderFromISR+0x38>
            pxReturn = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
        return pxReturn;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <xQueueTakeMutexRecursive>:
    {
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <xQueueTakeMutexRecursive+0x2a>
    __asm volatile
 8001a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a80:	f383 8811 	msr	BASEPRI, r3
 8001a84:	f3bf 8f6f 	isb	sy
 8001a88:	f3bf 8f4f 	dsb	sy
 8001a8c:	60fb      	str	r3, [r7, #12]
}
 8001a8e:	bf00      	nop
 8001a90:	e7fe      	b.n	8001a90 <xQueueTakeMutexRecursive+0x28>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	689c      	ldr	r4, [r3, #8]
 8001a96:	f003 fe75 	bl	8005784 <xTaskGetCurrentTaskHandle>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	429c      	cmp	r4, r3
 8001a9e:	d107      	bne.n	8001ab0 <xQueueTakeMutexRecursive+0x48>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e00c      	b.n	8001aca <xQueueTakeMutexRecursive+0x62>
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	6938      	ldr	r0, [r7, #16]
 8001ab4:	f7ff fe82 	bl	80017bc <xQueueSemaphoreTake>
 8001ab8:	6178      	str	r0, [r7, #20]
            if( xReturn != pdFAIL )
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <xQueueTakeMutexRecursive+0x62>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	60da      	str	r2, [r3, #12]
        return xReturn;
 8001aca:	697b      	ldr	r3, [r7, #20]
    }
 8001acc:	4618      	mov	r0, r3
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <xQueueGiveMutexRecursive>:
    {
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <xQueueGiveMutexRecursive+0x28>
    __asm volatile
 8001ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aea:	f383 8811 	msr	BASEPRI, r3
 8001aee:	f3bf 8f6f 	isb	sy
 8001af2:	f3bf 8f4f 	dsb	sy
 8001af6:	60fb      	str	r3, [r7, #12]
}
 8001af8:	bf00      	nop
 8001afa:	e7fe      	b.n	8001afa <xQueueGiveMutexRecursive+0x26>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	689c      	ldr	r4, [r3, #8]
 8001b00:	f003 fe40 	bl	8005784 <xTaskGetCurrentTaskHandle>
 8001b04:	4603      	mov	r3, r0
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d111      	bne.n	8001b2e <xQueueGiveMutexRecursive+0x5a>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	60da      	str	r2, [r3, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <xQueueGiveMutexRecursive+0x54>
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	6938      	ldr	r0, [r7, #16]
 8001b24:	f7fe ffee 	bl	8000b04 <xQueueGenericSend>
            xReturn = pdPASS;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e001      	b.n	8001b32 <xQueueGiveMutexRecursive+0x5e>
            xReturn = pdFAIL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
        return xReturn;
 8001b32:	697b      	ldr	r3, [r7, #20]
    }
 8001b34:	4618      	mov	r0, r3
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <vQueueAddToRegistry+0x26>
    __asm volatile
 8001b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b50:	f383 8811 	msr	BASEPRI, r3
 8001b54:	f3bf 8f6f 	isb	sy
 8001b58:	f3bf 8f4f 	dsb	sy
 8001b5c:	60fb      	str	r3, [r7, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	e7fe      	b.n	8001b60 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d024      	beq.n	8001bb6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e01e      	b.n	8001bb0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001b72:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d105      	bne.n	8001b8e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
                    break;
 8001b8c:	e013      	b.n	8001bb6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <vQueueAddToRegistry+0x6e>
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	d9dd      	bls.n	8001b72 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	24000000 	.word	0x24000000

08001bd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10a      	bne.n	8001bfc <vQueueUnregisterQueue+0x24>
    __asm volatile
 8001be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	60bb      	str	r3, [r7, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	e7fe      	b.n	8001bfa <vQueueUnregisterQueue+0x22>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e016      	b.n	8001c30 <vQueueUnregisterQueue+0x58>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10b      	bne.n	8001c2a <vQueueUnregisterQueue+0x52>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2100      	movs	r1, #0
 8001c18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
                break;
 8001c28:	e006      	b.n	8001c38 <vQueueUnregisterQueue+0x60>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	d9e5      	bls.n	8001c02 <vQueueUnregisterQueue+0x2a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	24000000 	.word	0x24000000

08001c48 <pcQueueGetName>:
    {
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
        configASSERT( xQueue );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <pcQueueGetName+0x28>
    __asm volatile
 8001c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	60fb      	str	r3, [r7, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	e7fe      	b.n	8001c6e <pcQueueGetName+0x26>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e010      	b.n	8001c98 <pcQueueGetName+0x50>
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <pcQueueGetName+0x64>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d105      	bne.n	8001c92 <pcQueueGetName+0x4a>
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <pcQueueGetName+0x64>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c8e:	613b      	str	r3, [r7, #16]
                break;
 8001c90:	e005      	b.n	8001c9e <pcQueueGetName+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d9eb      	bls.n	8001c76 <pcQueueGetName+0x2e>
        return pcReturn;
 8001c9e:	693b      	ldr	r3, [r7, #16]
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	24000000 	.word	0x24000000

08001cb0 <xQueueGenericCreate>:
    {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d032      	beq.n	8001d2e <xQueueGenericCreate+0x7e>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001cc8:	2100      	movs	r1, #0
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <xQueueGenericCreate+0x28>
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d127      	bne.n	8001d2e <xQueueGenericCreate+0x7e>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ce6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001cea:	d820      	bhi.n	8001d2e <xQueueGenericCreate+0x7e>
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	61bb      	str	r3, [r7, #24]
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3350      	adds	r3, #80	; 0x50
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fbde 	bl	80074bc <pvPortMalloc>
 8001d00:	61f8      	str	r0, [r7, #28]
            if( pxNewQueue != NULL )
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <xQueueGenericCreate+0x9a>
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3350      	adds	r3, #80	; 0x50
 8001d10:	617b      	str	r3, [r7, #20]
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fa6d 	bl	8002206 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001d2c:	e00d      	b.n	8001d4a <xQueueGenericCreate+0x9a>
            configASSERT( pxNewQueue );
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <xQueueGenericCreate+0x9a>
    __asm volatile
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	613b      	str	r3, [r7, #16]
}
 8001d46:	bf00      	nop
 8001d48:	e7fe      	b.n	8001d48 <xQueueGenericCreate+0x98>
        return pxNewQueue;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
    }
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <xQueueGenericCreateStatic>:
    {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( pxStaticQueue );
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <xQueueGenericCreateStatic+0x2e>
    __asm volatile
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	623b      	str	r3, [r7, #32]
}
 8001d7e:	bf00      	nop
 8001d80:	e7fe      	b.n	8001d80 <xQueueGenericCreateStatic+0x2c>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d030      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02d      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <xQueueGenericCreateStatic+0x46>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d027      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d121      	bne.n	8001dea <xQueueGenericCreateStatic+0x96>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8001da6:	2350      	movs	r3, #80	; 0x50
 8001da8:	617b      	str	r3, [r7, #20]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b50      	cmp	r3, #80	; 0x50
 8001dae:	d00a      	beq.n	8001dc6 <xQueueGenericCreateStatic+0x72>
    __asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	61fb      	str	r3, [r7, #28]
}
 8001dc2:	bf00      	nop
 8001dc4:	e7fe      	b.n	8001dc4 <xQueueGenericCreateStatic+0x70>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8001dc6:	697b      	ldr	r3, [r7, #20]
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dd4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fa0f 	bl	8002206 <prvInitialiseNewQueue>
 8001de8:	e00d      	b.n	8001e06 <xQueueGenericCreateStatic+0xb2>
            configASSERT( pxNewQueue );
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <xQueueGenericCreateStatic+0xb2>
    __asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	61bb      	str	r3, [r7, #24]
}
 8001e02:	bf00      	nop
 8001e04:	e7fe      	b.n	8001e04 <xQueueGenericCreateStatic+0xb0>
        return pxNewQueue;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3728      	adds	r7, #40	; 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001e20:	f007 ff52 	bl	8009cc8 <vPortEnterCritical>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e30:	d103      	bne.n	8001e3a <vQueueWaitForMessageRestricted+0x2a>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e46:	d103      	bne.n	8001e50 <vQueueWaitForMessageRestricted+0x40>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e50:	f007 ff58 	bl	8009d04 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3324      	adds	r3, #36	; 0x24
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 f9d7 	bl	8005218 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f000 f8bb 	bl	8001fe6 <prvUnlockQueue>
    }
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <xQueueGenericReset>:
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	613b      	str	r3, [r7, #16]
    configASSERT( pxQueue );
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <xQueueGenericReset+0x2e>
    __asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	60fb      	str	r3, [r7, #12]
}
 8001ea2:	bf00      	nop
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueGenericReset+0x2c>
    if( ( pxQueue != NULL ) &&
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05d      	beq.n	8001f68 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d059      	beq.n	8001f68 <xQueueGenericReset+0xf0>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d000      	beq.n	8001ec8 <xQueueGenericReset+0x50>
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d14c      	bne.n	8001f68 <xQueueGenericReset+0xf0>
        taskENTER_CRITICAL();
 8001ece:	f007 fefb 	bl	8009cc8 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	6939      	ldr	r1, [r7, #16]
 8001edc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	441a      	add	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2200      	movs	r2, #0
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	441a      	add	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d114      	bne.n	8001f4e <xQueueGenericReset+0xd6>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01a      	beq.n	8001f62 <xQueueGenericReset+0xea>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	3310      	adds	r3, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f9b9 	bl	80052a8 <xTaskRemoveFromEventList>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d012      	beq.n	8001f62 <xQueueGenericReset+0xea>
                        queueYIELD_IF_USING_PREEMPTION();
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <xQueueGenericReset+0x11c>)
 8001f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	e009      	b.n	8001f62 <xQueueGenericReset+0xea>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	3310      	adds	r3, #16
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fd22 	bl	800099c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3324      	adds	r3, #36	; 0x24
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fd1d 	bl	800099c <vListInitialise>
        taskEXIT_CRITICAL();
 8001f62:	f007 fecf 	bl	8009d04 <vPortExitCritical>
 8001f66:	e001      	b.n	8001f6c <xQueueGenericReset+0xf4>
        xReturn = pdFAIL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
    configASSERT( xReturn != pdFAIL );
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <xQueueGenericReset+0x110>
    __asm volatile
 8001f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	60bb      	str	r3, [r7, #8]
}
 8001f84:	bf00      	nop
 8001f86:	e7fe      	b.n	8001f86 <xQueueGenericReset+0x10e>
    return xReturn;
 8001f88:	697b      	ldr	r3, [r7, #20]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <vQueueSetQueueNumber>:
    {
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <uxQueueGetQueueNumber>:
    {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <ucQueueGetQueueType>:
    {
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    }
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <prvUnlockQueue>:
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8001fee:	f007 fe6b 	bl	8009cc8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ff8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ffa:	e011      	b.n	8002020 <prvUnlockQueue+0x3a>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <prvUnlockQueue+0x44>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3324      	adds	r3, #36	; 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f003 f94d 	bl	80052a8 <xTaskRemoveFromEventList>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <prvUnlockQueue+0x32>
                            vTaskMissedYield();
 8002014:	f003 fbc6 	bl	80057a4 <vTaskMissedYield>
            --cTxLock;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	3b01      	subs	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dce9      	bgt.n	8001ffc <prvUnlockQueue+0x16>
 8002028:	e000      	b.n	800202c <prvUnlockQueue+0x46>
                        break;
 800202a:	bf00      	nop
        pxQueue->cTxLock = queueUNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    taskEXIT_CRITICAL();
 8002034:	f007 fe66 	bl	8009d04 <vPortExitCritical>
    taskENTER_CRITICAL();
 8002038:	f007 fe46 	bl	8009cc8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002042:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002044:	e011      	b.n	800206a <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <prvUnlockQueue+0x8e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3310      	adds	r3, #16
 8002052:	4618      	mov	r0, r3
 8002054:	f003 f928 	bl	80052a8 <xTaskRemoveFromEventList>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800205e:	f003 fba1 	bl	80057a4 <vTaskMissedYield>
                --cRxLock;
 8002062:	7bbb      	ldrb	r3, [r7, #14]
 8002064:	3b01      	subs	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800206a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800206e:	2b00      	cmp	r3, #0
 8002070:	dce9      	bgt.n	8002046 <prvUnlockQueue+0x60>
 8002072:	e000      	b.n	8002076 <prvUnlockQueue+0x90>
                break;
 8002074:	bf00      	nop
        pxQueue->cRxLock = queueUNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    taskEXIT_CRITICAL();
 800207e:	f007 fe41 	bl	8009d04 <vPortExitCritical>
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <prvIsQueueEmpty>:
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8002092:	f007 fe19 	bl	8009cc8 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800209e:	2301      	movs	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e001      	b.n	80020a8 <prvIsQueueEmpty+0x1e>
            xReturn = pdFALSE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 80020a8:	f007 fe2c 	bl	8009d04 <vPortExitCritical>
    return xReturn;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <prvIsQueueFull>:
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 80020be:	f007 fe03 	bl	8009cc8 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d102      	bne.n	80020d4 <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 80020ce:	2301      	movs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e001      	b.n	80020d8 <prvIsQueueFull+0x22>
            xReturn = pdFALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 80020d8:	f007 fe14 	bl	8009d04 <vPortExitCritical>
    return xReturn;
 80020dc:	68fb      	ldr	r3, [r7, #12]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <prvCopyDataToQueue>:
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	613b      	str	r3, [r7, #16]
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <prvCopyDataToQueue+0x3a>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d14d      	bne.n	80021a8 <prvCopyDataToQueue+0xc2>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 fc19 	bl	8005948 <xTaskPriorityDisinherit>
 8002116:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	e043      	b.n	80021a8 <prvCopyDataToQueue+0xc2>
    else if( xPosition == queueSEND_TO_BACK )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d119      	bne.n	800215a <prvCopyDataToQueue+0x74>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6858      	ldr	r0, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	461a      	mov	r2, r3
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	f01a fab3 	bl	801c69c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d32b      	bcc.n	80021a8 <prvCopyDataToQueue+0xc2>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	e026      	b.n	80021a8 <prvCopyDataToQueue+0xc2>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68d8      	ldr	r0, [r3, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	461a      	mov	r2, r3
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	f01a fa99 	bl	801c69c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	425b      	negs	r3, r3
 8002174:	441a      	add	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d207      	bcs.n	8002196 <prvCopyDataToQueue+0xb0>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	425b      	negs	r3, r3
 8002190:	441a      	add	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	60da      	str	r2, [r3, #12]
        if( xPosition == queueOVERWRITE )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d105      	bne.n	80021a8 <prvCopyDataToQueue+0xc2>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <prvCopyDataToQueue+0xc2>
                --uxMessagesWaiting;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
    return xReturn;
 80021b0:	697b      	ldr	r3, [r7, #20]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <prvCopyDataFromQueue>:
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d018      	beq.n	80021fe <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	441a      	add	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d303      	bcc.n	80021ee <prvCopyDataFromQueue+0x34>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60da      	str	r2, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68d9      	ldr	r1, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	461a      	mov	r2, r3
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f01a fa4f 	bl	801c69c <memcpy>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <prvInitialiseNewQueue>:
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	70fb      	strb	r3, [r7, #3]
    if( uxItemSize == ( UBaseType_t ) 0 )
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <prvInitialiseNewQueue+0x1c>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e002      	b.n	8002228 <prvInitialiseNewQueue+0x22>
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	601a      	str	r2, [r3, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002234:	2101      	movs	r1, #1
 8002236:	69b8      	ldr	r0, [r7, #24]
 8002238:	f7ff fe1e 	bl	8001e78 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <prvInitialiseMutex>:
    {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00e      	beq.n	8002278 <prvInitialiseMutex+0x2c>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fc46 	bl	8000b04 <xQueueGenericSend>
    }
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <prvGetDisinheritPriorityAfterTimeout>:
    {
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <prvGetDisinheritPriorityAfterTimeout+0x1e>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e001      	b.n	80022a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
        return uxHighestPriorityOfWaitingTasks;
 80022a2:	68fb      	ldr	r3, [r7, #12]
    }
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b092      	sub	sp, #72	; 0x48
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
    size_t xReturn, xSpace = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t xRequiredSpace = xDataLengthBytes;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;
    size_t xMaxReportedSpace = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pvTxData );
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xStreamBufferSend+0x3a>
    __asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xStreamBufferSend+0x38>
    configASSERT( pxStreamBuffer );
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <xStreamBufferSend+0x56>
    __asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002302:	bf00      	nop
 8002304:	e7fe      	b.n	8002304 <xStreamBufferSend+0x54>

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	3b01      	subs	r3, #1
 800230c:	633b      	str	r3, [r7, #48]	; 0x30

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	7f1b      	ldrb	r3, [r3, #28]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d018      	beq.n	800234c <xStreamBufferSend+0x9c>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	3304      	adds	r3, #4
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8002320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	d80a      	bhi.n	800233e <xStreamBufferSend+0x8e>
    __asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	623b      	str	r3, [r7, #32]
}
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xStreamBufferSend+0x8c>

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 800233e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	429a      	cmp	r2, r3
 8002344:	d908      	bls.n	8002358 <xStreamBufferSend+0xa8>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	e005      	b.n	8002358 <xStreamBufferSend+0xa8>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 800234c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	429a      	cmp	r2, r3
 8002352:	d901      	bls.n	8002358 <xStreamBufferSend+0xa8>
        {
            xRequiredSpace = xMaxReportedSpace;
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d041      	beq.n	80023e2 <xStreamBufferSend+0x132>
    {
        vTaskSetTimeOutState( &xTimeOut );
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fcf2 	bl	8004d4c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 8002368:	f007 fcae 	bl	8009cc8 <vPortEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800236c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800236e:	f000 faa1 	bl	80028b4 <xStreamBufferSpacesAvailable>
 8002372:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( xSpace < xRequiredSpace )
 8002374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	429a      	cmp	r2, r3
 800237a:	d218      	bcs.n	80023ae <xStreamBufferSend+0xfe>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 800237c:	2100      	movs	r1, #0
 800237e:	2000      	movs	r0, #0
 8002380:	f002 fc78 	bl	8004c74 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <xStreamBufferSend+0xf2>
    __asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	61fb      	str	r3, [r7, #28]
}
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xStreamBufferSend+0xf0>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80023a2:	f003 f9ef 	bl	8005784 <xTaskGetCurrentTaskHandle>
 80023a6:	4602      	mov	r2, r0
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	e002      	b.n	80023b4 <xStreamBufferSend+0x104>
                }
                else
                {
                    taskEXIT_CRITICAL();
 80023ae:	f007 fca9 	bl	8009d04 <vPortExitCritical>
                    break;
 80023b2:	e016      	b.n	80023e2 <xStreamBufferSend+0x132>
                }
            }
            taskEXIT_CRITICAL();
 80023b4:	f007 fca6 	bl	8009d04 <vPortExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	2000      	movs	r0, #0
 80023c4:	f002 fa40 	bl	8004848 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	2200      	movs	r2, #0
 80023cc:	615a      	str	r2, [r3, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80023ce:	463a      	mov	r2, r7
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fcde 	bl	8004d98 <xTaskCheckForTimeOut>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0c2      	beq.n	8002368 <xStreamBufferSend+0xb8>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <xStreamBufferSend+0x140>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80023e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023ea:	f000 fa63 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80023ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80023f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023fc:	f000 fd84 	bl	8002f08 <prvWriteMessageToBuffer>
 8002400:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( xReturn > ( size_t ) 0 )
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <xStreamBufferSend+0x190>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002408:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800240a:	f000 fcb3 	bl	8002d74 <prvBytesInBuffer>
 800240e:	4602      	mov	r2, r0
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d313      	bcc.n	8002440 <xStreamBufferSend+0x190>
        {
            sbSEND_COMPLETED( pxStreamBuffer );
 8002418:	f001 fd3a 	bl	8003e90 <vTaskSuspendAll>
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <xStreamBufferSend+0x18c>
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	6918      	ldr	r0, [r3, #16]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2300      	movs	r3, #0
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	f001 ff4d 	bl	80042d0 <xTaskGenericNotify>
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	f001 fd36 	bl	8003eac <xTaskResumeAll>
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002442:	4618      	mov	r0, r3
 8002444:	3740      	adds	r7, #64	; 0x40
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b090      	sub	sp, #64	; 0x40
 800244e:	af02      	add	r7, sp, #8
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvTxData );
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xStreamBufferSendFromISR+0x32>
    __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	623b      	str	r3, [r7, #32]
}
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xStreamBufferSendFromISR+0x30>
    configASSERT( pxStreamBuffer );
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <xStreamBufferSendFromISR+0x4e>
    __asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	61fb      	str	r3, [r7, #28]
}
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xStreamBufferSendFromISR+0x4c>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	7f1b      	ldrb	r3, [r3, #28]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <xStreamBufferSendFromISR+0x60>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a6:	3304      	adds	r3, #4
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80024aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ac:	f000 fa02 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80024b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80024b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024be:	f000 fd23 	bl	8002f08 <prvWriteMessageToBuffer>
 80024c2:	62b8      	str	r0, [r7, #40]	; 0x28

    if( xReturn > ( size_t ) 0 )
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d02d      	beq.n	8002526 <xStreamBufferSendFromISR+0xdc>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80024ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024cc:	f000 fc52 	bl	8002d74 <prvBytesInBuffer>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d325      	bcc.n	8002526 <xStreamBufferSendFromISR+0xdc>
    __asm volatile
 80024da:	f3ef 8211 	mrs	r2, BASEPRI
 80024de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	61ba      	str	r2, [r7, #24]
 80024f0:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 80024f2:	69bb      	ldr	r3, [r7, #24]
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <xStreamBufferSendFromISR+0xd0>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6918      	ldr	r0, [r3, #16]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	f002 f81e 	bl	8004550 <xTaskGenericNotifyFromISR>
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	613b      	str	r3, [r7, #16]
    __asm volatile
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f383 8811 	msr	BASEPRI, r3
}
 8002524:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002528:	4618      	mov	r0, r3
 800252a:	3738      	adds	r7, #56	; 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002542:	2300      	movs	r3, #0
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <xStreamBufferReceive+0x32>
    __asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	61fb      	str	r3, [r7, #28]
}
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <xStreamBufferReceive+0x4e>
    __asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	61bb      	str	r3, [r7, #24]
}
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	7f1b      	ldrb	r3, [r3, #28]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800258a:	2304      	movs	r3, #4
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e001      	b.n	8002594 <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d037      	beq.n	800260a <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 800259a:	f007 fb95 	bl	8009cc8 <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800259e:	6a38      	ldr	r0, [r7, #32]
 80025a0:	f000 fbe8 	bl	8002d74 <prvBytesInBuffer>
 80025a4:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 80025a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d817      	bhi.n	80025de <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 80025ae:	2100      	movs	r1, #0
 80025b0:	2000      	movs	r0, #0
 80025b2:	f002 fb5f 	bl	8004c74 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <xStreamBufferReceive+0xa4>
    __asm volatile
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	617b      	str	r3, [r7, #20]
}
 80025d0:	bf00      	nop
 80025d2:	e7fe      	b.n	80025d2 <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80025d4:	f003 f8d6 	bl	8005784 <xTaskGetCurrentTaskHandle>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80025de:	f007 fb91 	bl	8009d04 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 80025e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d813      	bhi.n	8002612 <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2300      	movs	r3, #0
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	2000      	movs	r0, #0
 80025f6:	f002 f927 	bl	8004848 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002600:	6a38      	ldr	r0, [r7, #32]
 8002602:	f000 fbb7 	bl	8002d74 <prvBytesInBuffer>
 8002606:	62b8      	str	r0, [r7, #40]	; 0x28
 8002608:	e003      	b.n	8002612 <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800260a:	6a38      	ldr	r0, [r7, #32]
 800260c:	f000 fbb2 	bl	8002d74 <prvBytesInBuffer>
 8002610:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	429a      	cmp	r2, r3
 8002618:	d91d      	bls.n	8002656 <xStreamBufferReceive+0x126>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	6a38      	ldr	r0, [r7, #32]
 8002622:	f000 fc34 	bl	8002e8e <prvReadMessageFromBuffer>
 8002626:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d013      	beq.n	8002656 <xStreamBufferReceive+0x126>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 800262e:	f001 fc2f 	bl	8003e90 <vTaskSuspendAll>
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <xStreamBufferReceive+0x122>
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	6958      	ldr	r0, [r3, #20]
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	f001 fe42 	bl	80042d0 <xTaskGenericNotify>
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	f001 fc2b 	bl	8003eac <xTaskResumeAll>
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002658:	4618      	mov	r0, r3
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b090      	sub	sp, #64	; 0x40
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvRxData );
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <xStreamBufferReceiveFromISR+0x32>
    __asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	623b      	str	r3, [r7, #32]
}
 800268e:	bf00      	nop
 8002690:	e7fe      	b.n	8002690 <xStreamBufferReceiveFromISR+0x30>
    configASSERT( pxStreamBuffer );
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <xStreamBufferReceiveFromISR+0x4e>
    __asm volatile
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	61fb      	str	r3, [r7, #28]
}
 80026aa:	bf00      	nop
 80026ac:	e7fe      	b.n	80026ac <xStreamBufferReceiveFromISR+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	7f1b      	ldrb	r3, [r3, #28]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <xStreamBufferReceiveFromISR+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80026ba:	2304      	movs	r3, #4
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
 80026be:	e001      	b.n	80026c4 <xStreamBufferReceiveFromISR+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80026c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026c6:	f000 fb55 	bl	8002d74 <prvBytesInBuffer>
 80026ca:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 80026cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d92f      	bls.n	8002734 <xStreamBufferReceiveFromISR+0xd4>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026dc:	f000 fbd7 	bl	8002e8e <prvReadMessageFromBuffer>
 80026e0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d025      	beq.n	8002734 <xStreamBufferReceiveFromISR+0xd4>
    __asm volatile
 80026e8:	f3ef 8211 	mrs	r2, BASEPRI
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	61ba      	str	r2, [r7, #24]
 80026fe:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 8002700:	69bb      	ldr	r3, [r7, #24]
        {
            sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <xStreamBufferReceiveFromISR+0xc8>
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	6958      	ldr	r0, [r3, #20]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2300      	movs	r3, #0
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	f001 ff17 	bl	8004550 <xTaskGenericNotifyFromISR>
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	613b      	str	r3, [r7, #16]
    __asm volatile
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f383 8811 	msr	BASEPRI, r3
}
 8002732:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

    return xReceivedLength;
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002736:	4618      	mov	r0, r3
 8002738:	3738      	adds	r7, #56	; 0x38
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <vStreamBufferDelete>:
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]
    configASSERT( pxStreamBuffer );
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <vStreamBufferDelete+0x28>
    __asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60bb      	str	r3, [r7, #8]
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <vStreamBufferDelete+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <vStreamBufferDelete+0x3c>
                vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f004 ff86 	bl	8007684 <vPortFree>
}
 8002778:	e004      	b.n	8002784 <vStreamBufferDelete+0x46>
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	2100      	movs	r1, #0
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f019 ff9a 	bl	801c6b8 <memset>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <xStreamBufferIsFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    size_t xBytesToStoreMessageLength;
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60fb      	str	r3, [r7, #12]

    configASSERT( pxStreamBuffer );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <xStreamBufferIsFull+0x28>
    __asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	60bb      	str	r3, [r7, #8]
}
 80027b0:	bf00      	nop
 80027b2:	e7fe      	b.n	80027b2 <xStreamBufferIsFull+0x26>

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	7f1b      	ldrb	r3, [r3, #28]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <xStreamBufferIsFull+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80027c0:	2304      	movs	r3, #4
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	e001      	b.n	80027ca <xStreamBufferIsFull+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f872 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d302      	bcc.n	80027de <xStreamBufferIsFull+0x52>
    {
        xReturn = pdTRUE;
 80027d8:	2301      	movs	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e001      	b.n	80027e2 <xStreamBufferIsFull+0x56>
    }
    else
    {
        xReturn = pdFALSE;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80027e2:	697b      	ldr	r3, [r7, #20]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xStreamBufferIsEmpty>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <xStreamBufferIsEmpty+0x28>
    __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	60bb      	str	r3, [r7, #8]
}
 8002810:	bf00      	nop
 8002812:	e7fe      	b.n	8002812 <xStreamBufferIsEmpty+0x26>
    xTail = pxStreamBuffer->xTail;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
    if( pxStreamBuffer->xHead == xTail )
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d102      	bne.n	800282a <xStreamBufferIsEmpty+0x3e>
        xReturn = pdTRUE;
 8002824:	2301      	movs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e001      	b.n	800282e <xStreamBufferIsEmpty+0x42>
        xReturn = pdFALSE;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
    return xReturn;
 800282e:	697b      	ldr	r3, [r7, #20]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <xStreamBufferReset>:
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	613b      	str	r3, [r7, #16]
    BaseType_t xReturn = pdFAIL;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <xStreamBufferReset+0x2c>
    __asm volatile
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	60bb      	str	r3, [r7, #8]
}
 8002864:	bf00      	nop
 8002866:	e7fe      	b.n	8002866 <xStreamBufferReset+0x2a>
            uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	60fb      	str	r3, [r7, #12]
    taskENTER_CRITICAL();
 800286e:	f007 fa2b 	bl	8009cc8 <vPortEnterCritical>
        if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <xStreamBufferReset+0x6a>
            if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d111      	bne.n	80028a6 <xStreamBufferReset+0x6a>
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6999      	ldr	r1, [r3, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	68d8      	ldr	r0, [r3, #12]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	7f1b      	ldrb	r3, [r3, #28]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4603      	mov	r3, r0
 8002896:	6938      	ldr	r0, [r7, #16]
 8002898:	f000 fbd6 	bl	8003048 <prvInitialiseNewStreamBuffer>
                xReturn = pdPASS;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
                        pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	621a      	str	r2, [r3, #32]
    taskEXIT_CRITICAL();
 80028a6:	f007 fa2d 	bl	8009d04 <vPortExitCritical>
    return xReturn;
 80028aa:	697b      	ldr	r3, [r7, #20]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <xStreamBufferSpacesAvailable>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <xStreamBufferSpacesAvailable+0x28>
    __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	60bb      	str	r3, [r7, #8]
}
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <xStreamBufferSpacesAvailable+0x26>
        xOriginalTail = pxStreamBuffer->xTail;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
        xSpace -= pxStreamBuffer->xHead;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d1ec      	bne.n	80028dc <xStreamBufferSpacesAvailable+0x28>
    xSpace -= ( size_t ) 1;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3b01      	subs	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
    if( xSpace >= pxStreamBuffer->xLength )
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	429a      	cmp	r2, r3
 8002910:	d304      	bcc.n	800291c <xStreamBufferSpacesAvailable+0x68>
        xSpace -= pxStreamBuffer->xLength;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
    return xSpace;
 800291c:	697b      	ldr	r3, [r7, #20]
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <xStreamBufferBytesAvailable>:
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xStreamBufferBytesAvailable+0x28>
    __asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	60fb      	str	r3, [r7, #12]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xStreamBufferBytesAvailable+0x26>
    xReturn = prvBytesInBuffer( pxStreamBuffer );
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f000 fa0e 	bl	8002d74 <prvBytesInBuffer>
 8002958:	6138      	str	r0, [r7, #16]
    return xReturn;
 800295a:	693b      	ldr	r3, [r7, #16]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <xStreamBufferSetTriggerLevel>:
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xStreamBufferSetTriggerLevel+0x2a>
    __asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	60fb      	str	r3, [r7, #12]
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xStreamBufferSetTriggerLevel+0x28>
    if( xTriggerLevel == ( size_t ) 0 )
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <xStreamBufferSetTriggerLevel+0x34>
        xTriggerLevel = ( size_t ) 1;
 8002994:	2301      	movs	r3, #1
 8002996:	603b      	str	r3, [r7, #0]
    if( xTriggerLevel < pxStreamBuffer->xLength )
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d205      	bcs.n	80029ae <xStreamBufferSetTriggerLevel+0x4a>
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	60da      	str	r2, [r3, #12]
        xReturn = pdPASS;
 80029a8:	2301      	movs	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e001      	b.n	80029b2 <xStreamBufferSetTriggerLevel+0x4e>
        xReturn = pdFALSE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
    return xReturn;
 80029b2:	697b      	ldr	r3, [r7, #20]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xStreamBufferSendCompletedFromISR+0x2a>
    __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	61bb      	str	r3, [r7, #24]
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xStreamBufferSendCompletedFromISR+0x28>
    __asm volatile
 80029ea:	f3ef 8211 	mrs	r2, BASEPRI
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	617a      	str	r2, [r7, #20]
 8002a00:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8002a02:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002a04:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <xStreamBufferSendCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	6918      	ldr	r0, [r3, #16]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f001 fd96 	bl	8004550 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
            xReturn = pdTRUE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e001      	b.n	8002a34 <xStreamBufferSendCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f383 8811 	msr	BASEPRI, r3
}
 8002a3e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3728      	adds	r7, #40	; 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08c      	sub	sp, #48	; 0x30
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <xStreamBufferReceiveCompletedFromISR+0x2a>
    __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	61bb      	str	r3, [r7, #24]
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <xStreamBufferReceiveCompletedFromISR+0x28>
    __asm volatile
 8002a74:	f3ef 8211 	mrs	r2, BASEPRI
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	617a      	str	r2, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8002a8c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002a8e:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <xStreamBufferReceiveCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	6958      	ldr	r0, [r3, #20]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f001 fd51 	bl	8004550 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]
            xReturn = pdTRUE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab8:	e001      	b.n	8002abe <xStreamBufferReceiveCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f383 8811 	msr	BASEPRI, r3
}
 8002ac8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <xStreamBufferGenericCreate>:
    {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
        if( xIsMessageBuffer == pdTRUE )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d110      	bne.n	8002b08 <xStreamBufferGenericCreate+0x34>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d81b      	bhi.n	8002b2a <xStreamBufferGenericCreate+0x56>
    __asm volatile
 8002af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	61fb      	str	r3, [r7, #28]
}
 8002b04:	bf00      	nop
 8002b06:	e7fe      	b.n	8002b06 <xStreamBufferGenericCreate+0x32>
            ucFlags = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > 0 );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xStreamBufferGenericCreate+0x56>
    __asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	61bb      	str	r3, [r7, #24]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xStreamBufferGenericCreate+0x54>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d90a      	bls.n	8002b48 <xStreamBufferGenericCreate+0x74>
    __asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	617b      	str	r3, [r7, #20]
}
 8002b44:	bf00      	nop
 8002b46:	e7fe      	b.n	8002b46 <xStreamBufferGenericCreate+0x72>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xStreamBufferGenericCreate+0x7e>
            xTriggerLevelBytes = ( size_t ) 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f113 0f26 	cmn.w	r3, #38	; 0x26
 8002b58:	d809      	bhi.n	8002b6e <xStreamBufferGenericCreate+0x9a>
            xBufferSizeBytes++;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3324      	adds	r3, #36	; 0x24
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fca9 	bl	80074bc <pvPortMalloc>
 8002b6a:	6278      	str	r0, [r7, #36]	; 0x24
 8002b6c:	e001      	b.n	8002b72 <xStreamBufferGenericCreate+0x9e>
            pucAllocatedMemory = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
        if( pucAllocatedMemory != NULL )
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <xStreamBufferGenericCreate+0xba>
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b8a:	f000 fa5d 	bl	8003048 <prvInitialiseNewStreamBuffer>
        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b90:	4618      	mov	r0, r3
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <xStreamBufferGenericCreateStatic>:
    {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b090      	sub	sp, #64	; 0x40
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        configASSERT( pucStreamBufferStorageArea );
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xStreamBufferGenericCreateStatic+0x2e>
    __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xStreamBufferGenericCreateStatic+0x2c>
        configASSERT( pxStaticStreamBuffer );
 8002bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xStreamBufferGenericCreateStatic+0x4a>
    __asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xStreamBufferGenericCreateStatic+0x48>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d90a      	bls.n	8002c00 <xStreamBufferGenericCreateStatic+0x68>
    __asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	623b      	str	r3, [r7, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <xStreamBufferGenericCreateStatic+0x66>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <xStreamBufferGenericCreateStatic+0x72>
            xTriggerLevelBytes = ( size_t ) 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
        if( xIsMessageBuffer != pdFALSE )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <xStreamBufferGenericCreateStatic+0x80>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c10:	2303      	movs	r3, #3
 8002c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002c16:	e002      	b.n	8002c1e <xStreamBufferGenericCreateStatic+0x86>
            ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d80a      	bhi.n	8002c3a <xStreamBufferGenericCreateStatic+0xa2>
    __asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61fb      	str	r3, [r7, #28]
}
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xStreamBufferGenericCreateStatic+0xa0>
                volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8002c3a:	2324      	movs	r3, #36	; 0x24
 8002c3c:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b24      	cmp	r3, #36	; 0x24
 8002c42:	d00a      	beq.n	8002c5a <xStreamBufferGenericCreateStatic+0xc2>
    __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	61bb      	str	r3, [r7, #24]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xStreamBufferGenericCreateStatic+0xc0>
        if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <xStreamBufferGenericCreateStatic+0xf4>
 8002c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <xStreamBufferGenericCreateStatic+0xf4>
            prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c74:	f000 f9e8 	bl	8003048 <prvInitialiseNewStreamBuffer>
            pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	7f1b      	ldrb	r3, [r3, #28]
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	771a      	strb	r2, [r3, #28]
            xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8002c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	e001      	b.n	8002c90 <xStreamBufferGenericCreateStatic+0xf8>
            xReturn = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
        return xReturn;
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c92:	4618      	mov	r0, r3
 8002c94:	3738      	adds	r7, #56	; 0x38
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <xStreamBufferNextMessageLengthBytes>:
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b088      	sub	sp, #32
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	61bb      	str	r3, [r7, #24]
    configASSERT( pxStreamBuffer );
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xStreamBufferNextMessageLengthBytes+0x28>
    __asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	613b      	str	r3, [r7, #16]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xStreamBufferNextMessageLengthBytes+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	7f1b      	ldrb	r3, [r3, #28]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d022      	beq.n	8002d14 <xStreamBufferNextMessageLengthBytes+0x7a>
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002cce:	69b8      	ldr	r0, [r7, #24]
 8002cd0:	f000 f850 	bl	8002d74 <prvBytesInBuffer>
 8002cd4:	6178      	str	r0, [r7, #20]
        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d90a      	bls.n	8002cf2 <xStreamBufferNextMessageLengthBytes+0x58>
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f107 0108 	add.w	r1, r7, #8
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	69b8      	ldr	r0, [r7, #24]
 8002ce8:	f000 f944 	bl	8002f74 <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e012      	b.n	8002d18 <xStreamBufferNextMessageLengthBytes+0x7e>
            configASSERT( xBytesAvailable == 0 );
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <xStreamBufferNextMessageLengthBytes+0x74>
    __asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	60fb      	str	r3, [r7, #12]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xStreamBufferNextMessageLengthBytes+0x72>
            xReturn = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e001      	b.n	8002d18 <xStreamBufferNextMessageLengthBytes+0x7e>
        xReturn = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    return xReturn;
 8002d18:	69fb      	ldr	r3, [r7, #28]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <vStreamBufferSetStreamBufferNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer,
                                             UBaseType_t uxStreamBufferNumber )
    {
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
        xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	621a      	str	r2, [r3, #32]
    }
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <uxStreamBufferGetStreamBufferNumber>:
    {
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
        return xStreamBuffer->uxStreamBufferNumber;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
    }
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <ucStreamBufferGetStreamBufferType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )
    {
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
        return( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER );
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7f1b      	ldrb	r3, [r3, #28]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
    }
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <prvBytesInBuffer>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	60fb      	str	r3, [r7, #12]
    if( xCount >= pxStreamBuffer->xLength )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d304      	bcc.n	8002da6 <prvBytesInBuffer+0x32>
        xCount -= pxStreamBuffer->xLength;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	60fb      	str	r3, [r7, #12]
    return xCount;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <prvWriteBytesToBuffer>:
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
    configASSERT( xCount > ( size_t ) 0 );
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <prvWriteBytesToBuffer+0x2a>
    __asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61bb      	str	r3, [r7, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <prvWriteBytesToBuffer+0x28>
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf28      	it	cs
 8002dec:	4613      	movcs	r3, r2
 8002dee:	61fb      	str	r3, [r7, #28]
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	441a      	add	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d90a      	bls.n	8002e14 <prvWriteBytesToBuffer+0x60>
    __asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	617b      	str	r3, [r7, #20]
}
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <prvWriteBytesToBuffer+0x5e>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f019 fc3b 	bl	801c69c <memcpy>
    if( xCount > xFirstLength )
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d91c      	bls.n	8002e68 <prvWriteBytesToBuffer+0xb4>
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	1ad2      	subs	r2, r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d90a      	bls.n	8002e52 <prvWriteBytesToBuffer+0x9e>
    __asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	613b      	str	r3, [r7, #16]
}
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <prvWriteBytesToBuffer+0x9c>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	18d1      	adds	r1, r2, r3
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	f019 fc1a 	bl	801c69c <memcpy>
    xHead += xCount;
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	603b      	str	r3, [r7, #0]
    if( xHead >= pxStreamBuffer->xLength )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d304      	bcc.n	8002e84 <prvWriteBytesToBuffer+0xd0>
        xHead -= pxStreamBuffer->xLength;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	603b      	str	r3, [r7, #0]
    return xHead;
 8002e84:	683b      	ldr	r3, [r7, #0]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <prvReadMessageFromBuffer>:
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b088      	sub	sp, #32
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
    size_t xNextTail = pxStreamBuffer->xTail;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	7f1b      	ldrb	r3, [r3, #28]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d013      	beq.n	8002ed6 <prvReadMessageFromBuffer+0x48>
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 8002eae:	f107 0110 	add.w	r1, r7, #16
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f85c 	bl	8002f74 <prvReadBytesFromBuffer>
 8002ebc:	61b8      	str	r0, [r7, #24]
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	61fb      	str	r3, [r7, #28]
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	3b04      	subs	r3, #4
 8002ec6:	603b      	str	r3, [r7, #0]
        if( xNextMessageLength > xBufferLengthBytes )
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d904      	bls.n	8002eda <prvReadMessageFromBuffer+0x4c>
            xNextMessageLength = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	e001      	b.n	8002eda <prvReadMessageFromBuffer+0x4c>
        xNextMessageLength = xBufferLengthBytes;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	61fb      	str	r3, [r7, #28]
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bf28      	it	cs
 8002ee2:	4613      	movcs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    if( xCount != ( size_t ) 0 )
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <prvReadMessageFromBuffer+0x70>
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f83e 	bl	8002f74 <prvReadBytesFromBuffer>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	601a      	str	r2, [r3, #0]
    return xCount;
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <prvWriteMessageToBuffer>:
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
    size_t xNextHead = pxStreamBuffer->xHead;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	617b      	str	r3, [r7, #20]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	7f1b      	ldrb	r3, [r3, #28]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <prvWriteMessageToBuffer+0x3e>
        if( xSpace >= xRequiredSpace )
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d307      	bcc.n	8002f40 <prvWriteMessageToBuffer+0x38>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 8002f30:	1d39      	adds	r1, r7, #4
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2204      	movs	r2, #4
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff3c 	bl	8002db4 <prvWriteBytesToBuffer>
 8002f3c:	6178      	str	r0, [r7, #20]
 8002f3e:	e008      	b.n	8002f52 <prvWriteMessageToBuffer+0x4a>
            xDataLengthBytes = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	e005      	b.n	8002f52 <prvWriteMessageToBuffer+0x4a>
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	bf28      	it	cs
 8002f4e:	4613      	movcs	r3, r2
 8002f50:	607b      	str	r3, [r7, #4]
    if( xDataLengthBytes != ( size_t ) 0 )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <prvWriteMessageToBuffer+0x62>
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff28 	bl	8002db4 <prvWriteBytesToBuffer>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
    return xDataLengthBytes;
 8002f6a:	687b      	ldr	r3, [r7, #4]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvReadBytesFromBuffer>:
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
    configASSERT( xCount != ( size_t ) 0 );
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <prvReadBytesFromBuffer+0x2a>
    __asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	61bb      	str	r3, [r7, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <prvReadBytesFromBuffer+0x28>
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf28      	it	cs
 8002fac:	4613      	movcs	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
    configASSERT( xFirstLength <= xCount );
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d90a      	bls.n	8002fce <prvReadBytesFromBuffer+0x5a>
    __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	617b      	str	r3, [r7, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <prvReadBytesFromBuffer+0x58>
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d90a      	bls.n	8002ff2 <prvReadBytesFromBuffer+0x7e>
    __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	613b      	str	r3, [r7, #16]
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <prvReadBytesFromBuffer+0x7c>
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	68b8      	ldr	r0, [r7, #8]
 8003000:	f019 fb4c 	bl	801c69c <memcpy>
    if( xCount > xFirstLength )
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	d90a      	bls.n	8003022 <prvReadBytesFromBuffer+0xae>
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	18d0      	adds	r0, r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	461a      	mov	r2, r3
 800301e:	f019 fb3d 	bl	801c69c <memcpy>
    xTail += xCount;
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	603b      	str	r3, [r7, #0]
    if( xTail >= pxStreamBuffer->xLength )
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d304      	bcc.n	800303e <prvReadBytesFromBuffer+0xca>
        xTail -= pxStreamBuffer->xLength;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	603b      	str	r3, [r7, #0]
    return xTail;
 800303e:	683b      	ldr	r3, [r7, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <prvInitialiseNewStreamBuffer>:
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
            const BaseType_t xWriteValue = 0x55;
 8003056:	2355      	movs	r3, #85	; 0x55
 8003058:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6979      	ldr	r1, [r7, #20]
 800305e:	68b8      	ldr	r0, [r7, #8]
 8003060:	f019 fb2a 	bl	801c6b8 <memset>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4293      	cmp	r3, r2
 800306a:	d00a      	beq.n	8003082 <prvInitialiseNewStreamBuffer+0x3a>
    __asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	613b      	str	r3, [r7, #16]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <prvInitialiseNewStreamBuffer+0x38>
    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	2100      	movs	r1, #0
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f019 fb16 	bl	801c6b8 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030a4:	771a      	strb	r2, [r3, #28]
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 f9f9 	bl	80074bc <pvPortMalloc>
 80030ca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <xTaskCreate+0x44>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030d2:	f44f 70a2 	mov.w	r0, #324	; 0x144
 80030d6:	f004 f9f1 	bl	80074bc <pvPortMalloc>
 80030da:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <xTaskCreate+0x3c>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80030ea:	e005      	b.n	80030f8 <xTaskCreate+0x48>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f004 fac9 	bl	8007684 <vPortFree>
 80030f2:	e001      	b.n	80030f8 <xTaskCreate+0x48>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d017      	beq.n	800312e <xTaskCreate+0x7e>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	2300      	movs	r3, #0
 800310a:	9303      	str	r3, [sp, #12]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	9302      	str	r3, [sp, #8]
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f002 ffb5 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003122:	69f8      	ldr	r0, [r7, #28]
 8003124:	f003 f890 	bl	8006248 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003128:	2301      	movs	r3, #1
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e002      	b.n	8003134 <xTaskCreate+0x84>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003132:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003134:	69bb      	ldr	r3, [r7, #24]
    }
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <xTaskCreateStatic>:
    {
 800313e:	b580      	push	{r7, lr}
 8003140:	b08e      	sub	sp, #56	; 0x38
 8003142:	af04      	add	r7, sp, #16
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
        configASSERT( puxStackBuffer != NULL );
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <xTaskCreateStatic+0x2a>
    __asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	623b      	str	r3, [r7, #32]
}
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <xTaskCreateStatic+0x46>
    __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	61fb      	str	r3, [r7, #28]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xTaskCreateStatic+0x44>
                volatile size_t xSize = sizeof( StaticTask_t );
 8003184:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8003188:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8003190:	d00a      	beq.n	80031a8 <xTaskCreateStatic+0x6a>
    __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	61bb      	str	r3, [r7, #24]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xTaskCreateStatic+0x68>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031a8:	693b      	ldr	r3, [r7, #16]
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01f      	beq.n	80031f0 <xTaskCreateStatic+0xb2>
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01c      	beq.n	80031f0 <xTaskCreateStatic+0xb2>
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031ca:	2300      	movs	r3, #0
 80031cc:	9303      	str	r3, [sp, #12]
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9302      	str	r3, [sp, #8]
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f002 ff52 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80031e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ea:	f003 f82d 	bl	8006248 <prvAddNewTaskToReadyList>
 80031ee:	e001      	b.n	80031f4 <xTaskCreateStatic+0xb6>
            xReturn = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
        return xReturn;
 80031f4:	697b      	ldr	r3, [r7, #20]
    }
 80031f6:	4618      	mov	r0, r3
 80031f8:	3728      	adds	r7, #40	; 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <xTaskCreateRestricted>:
    {
 80031fe:	b5b0      	push	{r4, r5, r7, lr}
 8003200:	b08a      	sub	sp, #40	; 0x28
 8003202:	af04      	add	r7, sp, #16
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800320c:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <xTaskCreateRestricted+0x2e>
    __asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	60fb      	str	r3, [r7, #12]
}
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <xTaskCreateRestricted+0x2c>
        if( pxTaskDefinition->puxStackBuffer != NULL )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02c      	beq.n	800328e <xTaskCreateRestricted+0x90>
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003234:	f44f 70a2 	mov.w	r0, #324	; 0x144
 8003238:	f004 f940 	bl	80074bc <pvPortMalloc>
 800323c:	6138      	str	r0, [r7, #16]
            if( pxNewTCB != NULL )
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d024      	beq.n	800328e <xTaskCreateRestricted+0x90>
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                        pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6859      	ldr	r1, [r3, #4]
                                      ( uint32_t ) pxTaskDefinition->usStackDepth,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	891b      	ldrh	r3, [r3, #8]
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003262:	461d      	mov	r5, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68dc      	ldr	r4, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
                                      pxTaskDefinition->xRegions );
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	3218      	adds	r2, #24
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003270:	9203      	str	r2, [sp, #12]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	9201      	str	r2, [sp, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4623      	mov	r3, r4
 800327e:	462a      	mov	r2, r5
 8003280:	f002 ff04 	bl	800608c <prvInitialiseNewTask>
                prvAddNewTaskToReadyList( pxNewTCB );
 8003284:	6938      	ldr	r0, [r7, #16]
 8003286:	f002 ffdf 	bl	8006248 <prvAddNewTaskToReadyList>
                xReturn = pdPASS;
 800328a:	2301      	movs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
        return xReturn;
 800328e:	697b      	ldr	r3, [r7, #20]
    }
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bdb0      	pop	{r4, r5, r7, pc}

08003298 <xTaskCreateRestrictedStatic>:
    {
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af04      	add	r7, sp, #16
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a6:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xTaskCreateRestrictedStatic+0x2e>
    __asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	60fb      	str	r3, [r7, #12]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xTaskCreateRestrictedStatic+0x2c>
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <xTaskCreateRestrictedStatic+0x4e>
    __asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	60bb      	str	r3, [r7, #8]
}
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <xTaskCreateRestrictedStatic+0x4c>
        if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02d      	beq.n	800334a <xTaskCreateRestrictedStatic+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d028      	beq.n	800334a <xTaskCreateRestrictedStatic+0xb2>
            pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032fe:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6859      	ldr	r1, [r3, #4]
                                  ( uint32_t ) pxTaskDefinition->usStackDepth,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	891b      	ldrh	r3, [r3, #8]
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800331e:	461d      	mov	r5, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68dc      	ldr	r4, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
                                  pxTaskDefinition->xRegions );
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	3218      	adds	r2, #24
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800332c:	9203      	str	r2, [sp, #12]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	9202      	str	r2, [sp, #8]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4623      	mov	r3, r4
 800333a:	462a      	mov	r2, r5
 800333c:	f002 fea6 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003340:	6938      	ldr	r0, [r7, #16]
 8003342:	f002 ff81 	bl	8006248 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003346:	2301      	movs	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
        return xReturn;
 800334a:	697b      	ldr	r3, [r7, #20]
    }
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bdb0      	pop	{r4, r5, r7, pc}

08003354 <vTaskAllocateMPURegions>:

#if ( portUSING_MPU_WRAPPERS == 1 )

    void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
                                  const MemoryRegion_t * const xRegions )
    {
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        /* If null is passed in here then we are modifying the MPU settings of
         * the calling task. */
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <vTaskAllocateMPURegions+0x16>
 8003364:	4b07      	ldr	r3, [pc, #28]	; (8003384 <vTaskAllocateMPURegions+0x30>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e000      	b.n	800336c <vTaskAllocateMPURegions+0x18>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60fb      	str	r3, [r7, #12]

        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1d18      	adds	r0, r3, #4
 8003372:	2300      	movs	r3, #0
 8003374:	2200      	movs	r2, #0
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	f003 fe36 	bl	8006fe8 <vPortStoreTaskMPUSettings>
    }
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	24000040 	.word	0x24000040

08003388 <vTaskDelete>:
    {
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8003390:	f006 fc9a 	bl	8009cc8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <vTaskDelete+0x18>
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <vTaskDelete+0xd0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e000      	b.n	80033a2 <vTaskDelete+0x1a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60fb      	str	r3, [r7, #12]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3384      	adds	r3, #132	; 0x84
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fb81 	bl	8000ab0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <vTaskDelete+0x3a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3398      	adds	r3, #152	; 0x98
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fb77 	bl	8000ab0 <uxListRemove>
            uxTaskNumber++;
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <vTaskDelete+0xd4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	4a24      	ldr	r2, [pc, #144]	; (800345c <vTaskDelete+0xd4>)
 80033ca:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <vTaskDelete+0xd0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10b      	bne.n	80033ee <vTaskDelete+0x66>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3384      	adds	r3, #132	; 0x84
 80033da:	4619      	mov	r1, r3
 80033dc:	4820      	ldr	r0, [pc, #128]	; (8003460 <vTaskDelete+0xd8>)
 80033de:	f7fd fb43 	bl	8000a68 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <vTaskDelete+0xdc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <vTaskDelete+0xdc>)
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e006      	b.n	80033fc <vTaskDelete+0x74>
                --uxCurrentNumberOfTasks;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <vTaskDelete+0xe0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <vTaskDelete+0xe0>)
 80033f6:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 80033f8:	f002 fe2c 	bl	8006054 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 80033fc:	f006 fc82 	bl	8009d04 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <vTaskDelete+0xd0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	429a      	cmp	r2, r3
 8003408:	d002      	beq.n	8003410 <vTaskDelete+0x88>
            prvDeleteTCB( pxTCB );
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f002 fcde 	bl	8005dcc <prvDeleteTCB>
        if( xSchedulerRunning != pdFALSE )
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <vTaskDelete+0xe4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <vTaskDelete+0xc8>
            if( pxTCB == pxCurrentTCB )
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <vTaskDelete+0xd0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	429a      	cmp	r2, r3
 8003420:	d116      	bne.n	8003450 <vTaskDelete+0xc8>
                configASSERT( uxSchedulerSuspended == 0 );
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <vTaskDelete+0xe8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <vTaskDelete+0xb8>
    __asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	60bb      	str	r3, [r7, #8]
}
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <vTaskDelete+0xb6>
                portYIELD_WITHIN_API();
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <vTaskDelete+0xec>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
    }
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	24000040 	.word	0x24000040
 800345c:	24000530 	.word	0x24000530
 8003460:	240004e8 	.word	0x240004e8
 8003464:	240004fc 	.word	0x240004fc
 8003468:	24000514 	.word	0x24000514
 800346c:	24000520 	.word	0x24000520
 8003470:	2400053c 	.word	0x2400053c
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <vTaskDelay>:
    {
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d017      	beq.n	80034ba <vTaskDelay+0x42>
            configASSERT( uxSchedulerSuspended == 0 );
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <vTaskDelay+0x60>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <vTaskDelay+0x30>
    __asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60bb      	str	r3, [r7, #8]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80034a8:	f000 fcf2 	bl	8003e90 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f002 fcee 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80034b4:	f000 fcfa 	bl	8003eac <xTaskResumeAll>
 80034b8:	60f8      	str	r0, [r7, #12]
        if( xAlreadyYielded == pdFALSE )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <vTaskDelay+0x58>
            portYIELD_WITHIN_API();
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <vTaskDelay+0x64>)
 80034c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
    }
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2400053c 	.word	0x2400053c
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <xTaskDelayUntil>:
    {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( pxPreviousWakeTime );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xTaskDelayUntil+0x2a>
    __asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	617b      	str	r3, [r7, #20]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xTaskDelayUntil+0x46>
    __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	613b      	str	r3, [r7, #16]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <xTaskDelayUntil+0xf0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <xTaskDelayUntil+0x64>
    __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60fb      	str	r3, [r7, #12]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <xTaskDelayUntil+0x62>
        vTaskSuspendAll();
 8003544:	f000 fca4 	bl	8003e90 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <xTaskDelayUntil+0xf4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	623b      	str	r3, [r7, #32]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4413      	add	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]
            if( xConstTickCount < *pxPreviousWakeTime )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	429a      	cmp	r2, r3
 8003560:	d20b      	bcs.n	800357a <xTaskDelayUntil+0x9a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	429a      	cmp	r2, r3
 800356a:	d211      	bcs.n	8003590 <xTaskDelayUntil+0xb0>
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	429a      	cmp	r2, r3
 8003572:	d90d      	bls.n	8003590 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e00a      	b.n	8003590 <xTaskDelayUntil+0xb0>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	d303      	bcc.n	800358c <xTaskDelayUntil+0xac>
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	429a      	cmp	r2, r3
 800358a:	d901      	bls.n	8003590 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
            *pxPreviousWakeTime = xTimeToWake;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	601a      	str	r2, [r3, #0]
            if( xShouldDelay != pdFALSE )
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <xTaskDelayUntil+0xca>
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 fc73 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
        xAlreadyYielded = xTaskResumeAll();
 80035aa:	f000 fc7f 	bl	8003eac <xTaskResumeAll>
 80035ae:	61b8      	str	r0, [r7, #24]
        if( xAlreadyYielded == pdFALSE )
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <xTaskDelayUntil+0xe6>
            portYIELD_WITHIN_API();
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <xTaskDelayUntil+0xf8>)
 80035b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	f3bf 8f6f 	isb	sy
        return xShouldDelay;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	2400053c 	.word	0x2400053c
 80035d4:	24000518 	.word	0x24000518
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <uxTaskPriorityGet>:
    {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 80035e4:	f006 fb70 	bl	8009cc8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <uxTaskPriorityGet+0x18>
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <uxTaskPriorityGet+0x34>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	e000      	b.n	80035f6 <uxTaskPriorityGet+0x1a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035fe:	60bb      	str	r3, [r7, #8]
        taskEXIT_CRITICAL();
 8003600:	f006 fb80 	bl	8009d04 <vPortExitCritical>
        return uxReturn;
 8003604:	68bb      	ldr	r3, [r7, #8]
    }
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	24000040 	.word	0x24000040

08003614 <uxTaskPriorityGetFromISR>:
    {
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800361c:	f006 fbe2 	bl	8009de4 <vPortValidateInterruptPriority>
    __asm volatile
 8003620:	f3ef 8211 	mrs	r2, BASEPRI
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	613a      	str	r2, [r7, #16]
 8003636:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8003638:	693b      	ldr	r3, [r7, #16]
        uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 800363a:	61fb      	str	r3, [r7, #28]
            pxTCB = prvGetTCBFromHandle( xTask );
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <uxTaskPriorityGetFromISR+0x34>
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <uxTaskPriorityGetFromISR+0x58>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	e000      	b.n	800364a <uxTaskPriorityGetFromISR+0x36>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	61bb      	str	r3, [r7, #24]
            uxReturn = pxTCB->uxPriority;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f383 8811 	msr	BASEPRI, r3
}
 800365e:	bf00      	nop
        return uxReturn;
 8003660:	697b      	ldr	r3, [r7, #20]
    }
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	24000040 	.word	0x24000040

08003670 <eTaskGetState>:
    {
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
        const TCB_t * const pxTCB = xTask;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	61fb      	str	r3, [r7, #28]
        configASSERT( pxTCB );
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <eTaskGetState+0x28>
    __asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	60fb      	str	r3, [r7, #12]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <eTaskGetState+0x26>
        if( pxTCB == pxCurrentTCB )
 8003698:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <eTaskGetState+0xe4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d103      	bne.n	80036aa <eTaskGetState+0x3a>
            eReturn = eRunning;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036a8:	e04e      	b.n	8003748 <eTaskGetState+0xd8>
            taskENTER_CRITICAL();
 80036aa:	f006 fb0d 	bl	8009cc8 <vPortEnterCritical>
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b4:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <eTaskGetState+0xe8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <eTaskGetState+0xec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	613b      	str	r3, [r7, #16]
            taskEXIT_CRITICAL();
 80036c2:	f006 fb1f 	bl	8009d04 <vPortExitCritical>
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d003      	beq.n	80036d6 <eTaskGetState+0x66>
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d103      	bne.n	80036de <eTaskGetState+0x6e>
                eReturn = eBlocked;
 80036d6:	2302      	movs	r3, #2
 80036d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036dc:	e034      	b.n	8003748 <eTaskGetState+0xd8>
                else if( pxStateList == &xSuspendedTaskList )
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <eTaskGetState+0xf0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d122      	bne.n	800372c <eTaskGetState+0xbc>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d119      	bne.n	8003724 <eTaskGetState+0xb4>
                                eReturn = eSuspended;
 80036f0:	2303      	movs	r3, #3
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	e00f      	b.n	800371c <eTaskGetState+0xac>
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	4413      	add	r3, r2
 8003702:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d103      	bne.n	8003716 <eTaskGetState+0xa6>
                                        eReturn = eBlocked;
 800370e:	2302      	movs	r3, #2
 8003710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        break;
 8003714:	e018      	b.n	8003748 <eTaskGetState+0xd8>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	3301      	adds	r3, #1
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	2b02      	cmp	r3, #2
 8003720:	ddec      	ble.n	80036fc <eTaskGetState+0x8c>
 8003722:	e011      	b.n	8003748 <eTaskGetState+0xd8>
                        eReturn = eBlocked;
 8003724:	2302      	movs	r3, #2
 8003726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800372a:	e00d      	b.n	8003748 <eTaskGetState+0xd8>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <eTaskGetState+0xf4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d002      	beq.n	800373a <eTaskGetState+0xca>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <eTaskGetState+0xd2>
                    eReturn = eDeleted;
 800373a:	2304      	movs	r3, #4
 800373c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003740:	e002      	b.n	8003748 <eTaskGetState+0xd8>
                eReturn = eReady;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return eReturn;
 8003748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800374c:	4618      	mov	r0, r3
 800374e:	3728      	adds	r7, #40	; 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	24000040 	.word	0x24000040
 8003758:	240004cc 	.word	0x240004cc
 800375c:	240004d0 	.word	0x240004d0
 8003760:	24000500 	.word	0x24000500
 8003764:	240004e8 	.word	0x240004e8

08003768 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <vTaskGetInfo+0x1a>
 800377c:	4b2f      	ldr	r3, [pc, #188]	; (800383c <vTaskGetInfo+0xd4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	e000      	b.n	8003784 <vTaskGetInfo+0x1c>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61da      	str	r2, [r3, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
            {
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	615a      	str	r2, [r3, #20]
            {
                pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
            }
        #else
            {
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d01b      	beq.n	8003802 <vTaskGetInfo+0x9a>
        {
            if( pxTCB == pxCurrentTCB )
 80037ca:	4b1c      	ldr	r3, [pc, #112]	; (800383c <vTaskGetInfo+0xd4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d103      	bne.n	80037dc <vTaskGetInfo+0x74>
            {
                pxTaskStatus->eCurrentState = eRunning;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	731a      	strb	r2, [r3, #12]
 80037da:	e019      	b.n	8003810 <vTaskGetInfo+0xa8>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* If the task is in the suspended list then there is a
                         *  chance it is actually just blocked indefinitely - so really
                         *  it should be reported as being in the Blocked state. */
                        if( eState == eSuspended )
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d113      	bne.n	8003810 <vTaskGetInfo+0xa8>
                        {
                            vTaskSuspendAll();
 80037e8:	f000 fb52 	bl	8003e90 <vTaskSuspendAll>
                            {
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <vTaskGetInfo+0x94>
                                {
                                    pxTaskStatus->eCurrentState = eBlocked;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2202      	movs	r2, #2
 80037fa:	731a      	strb	r2, [r3, #12]
                                }
                            }
                            ( void ) xTaskResumeAll();
 80037fc:	f000 fb56 	bl	8003eac <xTaskResumeAll>
 8003800:	e006      	b.n	8003810 <vTaskGetInfo+0xa8>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff34 	bl	8003670 <eTaskGetState>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <vTaskGetInfo+0xc4>
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
                }
            #else
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800381c:	4618      	mov	r0, r3
 800381e:	f002 fbfd 	bl	800601c <prvTaskCheckFreeStackSpace>
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 800382a:	e002      	b.n	8003832 <vTaskGetInfo+0xca>
            pxTaskStatus->usStackHighWaterMark = 0;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	841a      	strh	r2, [r3, #32]
    }
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	24000040 	.word	0x24000040

08003840 <vTaskPrioritySet>:
    {
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
        BaseType_t xYieldRequired = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b37      	cmp	r3, #55	; 0x37
 8003852:	d90a      	bls.n	800386a <vTaskPrioritySet+0x2a>
    __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	60bb      	str	r3, [r7, #8]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <vTaskPrioritySet+0x28>
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b37      	cmp	r3, #55	; 0x37
 800386e:	d901      	bls.n	8003874 <vTaskPrioritySet+0x34>
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003870:	2337      	movs	r3, #55	; 0x37
 8003872:	603b      	str	r3, [r7, #0]
        taskENTER_CRITICAL();
 8003874:	f006 fa28 	bl	8009cc8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <vTaskPrioritySet+0x44>
 800387e:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	e000      	b.n	8003886 <vTaskPrioritySet+0x46>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	61bb      	str	r3, [r7, #24]
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800388e:	617b      	str	r3, [r7, #20]
            if( uxCurrentBasePriority != uxNewPriority )
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	f000 809e 	beq.w	80039d6 <vTaskPrioritySet+0x196>
                if( uxNewPriority > uxCurrentBasePriority )
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d90e      	bls.n	80038c0 <vTaskPrioritySet+0x80>
                    if( pxTCB != pxCurrentTCB )
 80038a2:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d010      	beq.n	80038ce <vTaskPrioritySet+0x8e>
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80038ac:	4b4d      	ldr	r3, [pc, #308]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d309      	bcc.n	80038ce <vTaskPrioritySet+0x8e>
                            xYieldRequired = pdTRUE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e006      	b.n	80038ce <vTaskPrioritySet+0x8e>
                else if( pxTCB == pxCurrentTCB )
 80038c0:	4b48      	ldr	r3, [pc, #288]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d101      	bne.n	80038ce <vTaskPrioritySet+0x8e>
                    xYieldRequired = pdTRUE;
 80038ca:	2301      	movs	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038d4:	613b      	str	r3, [r7, #16]
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d103      	bne.n	80038ee <vTaskPrioritySet+0xae>
                            pxTCB->uxPriority = uxNewPriority;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                        pxTCB->uxBasePriority = uxNewPriority;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db05      	blt.n	800390c <vTaskPrioritySet+0xcc>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 800391e:	4413      	add	r3, r2
 8003920:	4299      	cmp	r1, r3
 8003922:	d14d      	bne.n	80039c0 <vTaskPrioritySet+0x180>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	3384      	adds	r3, #132	; 0x84
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd f8c1 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <vTaskPrioritySet+0x1ac>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d904      	bls.n	8003946 <vTaskPrioritySet+0x106>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003942:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <vTaskPrioritySet+0x1ac>)
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800394c:	4926      	ldr	r1, [pc, #152]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3304      	adds	r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	3284      	adds	r2, #132	; 0x84
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 8003994:	441a      	add	r2, r3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80039a2:	4911      	ldr	r1, [pc, #68]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	1c59      	adds	r1, r3, #1
 80039b2:	480d      	ldr	r0, [pc, #52]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4403      	add	r3, r0
 80039be:	6019      	str	r1, [r3, #0]
                if( xYieldRequired != pdFALSE )
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <vTaskPrioritySet+0x196>
                    taskYIELD_IF_USING_PREEMPTION();
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <vTaskPrioritySet+0x1b0>)
 80039c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80039d6:	f006 f995 	bl	8009d04 <vPortExitCritical>
    }
 80039da:	bf00      	nop
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	24000040 	.word	0x24000040
 80039e8:	24000044 	.word	0x24000044
 80039ec:	2400051c 	.word	0x2400051c
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <vTaskSuspend>:
    {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 80039fc:	f006 f964 	bl	8009cc8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <vTaskSuspend+0x18>
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	e000      	b.n	8003a0e <vTaskSuspend+0x1a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	613b      	str	r3, [r7, #16]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	3384      	adds	r3, #132	; 0x84
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fd f84b 	bl	8000ab0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <vTaskSuspend+0x3a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	3398      	adds	r3, #152	; 0x98
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd f841 	bl	8000ab0 <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3384      	adds	r3, #132	; 0x84
 8003a32:	4619      	mov	r1, r3
 8003a34:	482d      	ldr	r0, [pc, #180]	; (8003aec <vTaskSuspend+0xf8>)
 8003a36:	f7fd f817 	bl	8000a68 <vListInsertEnd>
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e012      	b.n	8003a66 <vTaskSuspend+0x72>
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d106      	bne.n	8003a60 <vTaskSuspend+0x6c>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	dde9      	ble.n	8003a40 <vTaskSuspend+0x4c>
        taskEXIT_CRITICAL();
 8003a6c:	f006 f94a 	bl	8009d04 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8003a70:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <vTaskSuspend+0xfc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <vTaskSuspend+0x90>
            taskENTER_CRITICAL();
 8003a78:	f006 f926 	bl	8009cc8 <vPortEnterCritical>
                prvResetNextTaskUnblockTime();
 8003a7c:	f002 faea 	bl	8006054 <prvResetNextTaskUnblockTime>
            taskEXIT_CRITICAL();
 8003a80:	f006 f940 	bl	8009d04 <vPortExitCritical>
        if( pxTCB == pxCurrentTCB )
 8003a84:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d127      	bne.n	8003ade <vTaskSuspend+0xea>
            if( xSchedulerRunning != pdFALSE )
 8003a8e:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <vTaskSuspend+0xfc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <vTaskSuspend+0xd2>
                configASSERT( uxSchedulerSuspended == 0 );
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <vTaskSuspend+0x100>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <vTaskSuspend+0xc0>
    __asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	60fb      	str	r3, [r7, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <vTaskSuspend+0xbe>
                portYIELD_WITHIN_API();
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <vTaskSuspend+0x104>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
    }
 8003ac4:	e00b      	b.n	8003ade <vTaskSuspend+0xea>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <vTaskSuspend+0xf8>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <vTaskSuspend+0x108>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d103      	bne.n	8003ada <vTaskSuspend+0xe6>
                    pxCurrentTCB = NULL;
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
    }
 8003ad8:	e001      	b.n	8003ade <vTaskSuspend+0xea>
                    vTaskSwitchContext();
 8003ada:	f001 fdad 	bl	8005638 <vTaskSwitchContext>
    }
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	24000040 	.word	0x24000040
 8003aec:	24000500 	.word	0x24000500
 8003af0:	24000520 	.word	0x24000520
 8003af4:	2400053c 	.word	0x2400053c
 8003af8:	e000ed04 	.word	0xe000ed04
 8003afc:	24000514 	.word	0x24000514

08003b00 <vTaskResume>:
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	617b      	str	r3, [r7, #20]
        configASSERT( xTaskToResume );
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <vTaskResume+0x28>
    __asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	60fb      	str	r3, [r7, #12]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <vTaskResume+0x26>
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003b28:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <vTaskResume+0x114>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d06b      	beq.n	8003c0a <vTaskResume+0x10a>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d068      	beq.n	8003c0a <vTaskResume+0x10a>
            taskENTER_CRITICAL();
 8003b38:	f006 f8c6 	bl	8009cc8 <vPortEnterCritical>
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f002 f8c3 	bl	8005cc8 <prvTaskIsTaskSuspended>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05e      	beq.n	8003c06 <vTaskResume+0x106>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3384      	adds	r3, #132	; 0x84
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc ffaf 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <vTaskResume+0x118>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d904      	bls.n	8003b6a <vTaskResume+0x6a>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b66:	4a2c      	ldr	r2, [pc, #176]	; (8003c18 <vTaskResume+0x118>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b70:	492a      	ldr	r1, [pc, #168]	; (8003c1c <vTaskResume+0x11c>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	3284      	adds	r2, #132	; 0x84
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <vTaskResume+0x11c>)
 8003bb8:	441a      	add	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bc6:	4915      	ldr	r1, [pc, #84]	; (8003c1c <vTaskResume+0x11c>)
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c59      	adds	r1, r3, #1
 8003bd6:	4811      	ldr	r0, [pc, #68]	; (8003c1c <vTaskResume+0x11c>)
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4403      	add	r3, r0
 8003be2:	6019      	str	r1, [r3, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <vTaskResume+0x114>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d307      	bcc.n	8003c06 <vTaskResume+0x106>
                        taskYIELD_IF_USING_PREEMPTION();
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <vTaskResume+0x120>)
 8003bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
            taskEXIT_CRITICAL();
 8003c06:	f006 f87d 	bl	8009d04 <vPortExitCritical>
    }
 8003c0a:	bf00      	nop
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	24000040 	.word	0x24000040
 8003c18:	2400051c 	.word	0x2400051c
 8003c1c:	24000044 	.word	0x24000044
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <xTaskResumeFromISR>:
    {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	623b      	str	r3, [r7, #32]
        configASSERT( xTaskToResume );
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xTaskResumeFromISR+0x2c>
    __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	617b      	str	r3, [r7, #20]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xTaskResumeFromISR+0x2a>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c50:	f006 f8c8 	bl	8009de4 <vPortValidateInterruptPriority>
    __asm volatile
 8003c54:	f3ef 8211 	mrs	r2, BASEPRI
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	613a      	str	r2, [r7, #16]
 8003c6a:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8003c6c:	693b      	ldr	r3, [r7, #16]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c6e:	61fb      	str	r3, [r7, #28]
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003c70:	6a38      	ldr	r0, [r7, #32]
 8003c72:	f002 f829 	bl	8005cc8 <prvTaskIsTaskSuspended>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d066      	beq.n	8003d4a <xTaskResumeFromISR+0x126>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7c:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <xTaskResumeFromISR+0x13c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d15c      	bne.n	8003d3e <xTaskResumeFromISR+0x11a>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <xTaskResumeFromISR+0x140>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d304      	bcc.n	8003ca0 <xTaskResumeFromISR+0x7c>
                        xYieldRequired = pdTRUE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
                        xYieldPending = pdTRUE;
 8003c9a:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <xTaskResumeFromISR+0x144>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	3384      	adds	r3, #132	; 0x84
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc ff03 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <xTaskResumeFromISR+0x148>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d904      	bls.n	8003cc2 <xTaskResumeFromISR+0x9e>
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cbe:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <xTaskResumeFromISR+0x148>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cc8:	4929      	ldr	r1, [pc, #164]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	3284      	adds	r2, #132	; 0x84
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d10:	441a      	add	r2, r3
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d1e:	4914      	ldr	r1, [pc, #80]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	4810      	ldr	r0, [pc, #64]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	6019      	str	r1, [r3, #0]
 8003d3c:	e005      	b.n	8003d4a <xTaskResumeFromISR+0x126>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	3398      	adds	r3, #152	; 0x98
 8003d42:	4619      	mov	r1, r3
 8003d44:	480b      	ldr	r0, [pc, #44]	; (8003d74 <xTaskResumeFromISR+0x150>)
 8003d46:	f7fc fe8f 	bl	8000a68 <vListInsertEnd>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f383 8811 	msr	BASEPRI, r3
}
 8003d54:	bf00      	nop
        return xYieldRequired;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2400053c 	.word	0x2400053c
 8003d64:	24000040 	.word	0x24000040
 8003d68:	24000528 	.word	0x24000528
 8003d6c:	2400051c 	.word	0x2400051c
 8003d70:	24000044 	.word	0x24000044
 8003d74:	240004d4 	.word	0x240004d4

08003d78 <vTaskStartScheduler>:
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af04      	add	r7, sp, #16
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d86:	463a      	mov	r2, r7
 8003d88:	1d39      	adds	r1, r7, #4
 8003d8a:	f107 0308 	add.w	r3, r7, #8
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f006 f8e2 	bl	8009f58 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	9202      	str	r2, [sp, #8]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	460a      	mov	r2, r1
 8003da8:	4924      	ldr	r1, [pc, #144]	; (8003e3c <vTaskStartScheduler+0xc4>)
 8003daa:	4825      	ldr	r0, [pc, #148]	; (8003e40 <vTaskStartScheduler+0xc8>)
 8003dac:	f7ff f9c7 	bl	800313e <xTaskCreateStatic>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a24      	ldr	r2, [pc, #144]	; (8003e44 <vTaskStartScheduler+0xcc>)
 8003db4:	6013      	str	r3, [r2, #0]
            if( xIdleTaskHandle != NULL )
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <vTaskStartScheduler+0xcc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <vTaskStartScheduler+0x4c>
                xReturn = pdPASS;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e001      	b.n	8003dc8 <vTaskStartScheduler+0x50>
                xReturn = pdFAIL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
            if( xReturn == pdPASS )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <vTaskStartScheduler+0x5c>
                xReturn = xTimerCreateTimerTask();
 8003dce:	f002 fcc7 	bl	8006760 <xTimerCreateTimerTask>
 8003dd2:	6178      	str	r0, [r7, #20]
    if( xReturn == pdPASS )
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d11b      	bne.n	8003e12 <vTaskStartScheduler+0x9a>
    __asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	613b      	str	r3, [r7, #16]
}
 8003dec:	bf00      	nop
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <vTaskStartScheduler+0xd0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	33d4      	adds	r3, #212	; 0xd4
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <vTaskStartScheduler+0xd4>)
 8003df6:	6013      	str	r3, [r2, #0]
        xNextTaskUnblockTime = portMAX_DELAY;
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <vTaskStartScheduler+0xd8>)
 8003dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dfe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <vTaskStartScheduler+0xdc>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <vTaskStartScheduler+0xe0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 8003e0c:	f003 f845 	bl	8006e9a <xPortStartScheduler>
 8003e10:	e00e      	b.n	8003e30 <vTaskStartScheduler+0xb8>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e18:	d10a      	bne.n	8003e30 <vTaskStartScheduler+0xb8>
    __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60fb      	str	r3, [r7, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vTaskStartScheduler+0xb6>
    ( void ) uxTopUsedPriority;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <vTaskStartScheduler+0xe4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	24008230 	.word	0x24008230
 8003e40:	08005db1 	.word	0x08005db1
 8003e44:	24000538 	.word	0x24000538
 8003e48:	24000040 	.word	0x24000040
 8003e4c:	240081cc 	.word	0x240081cc
 8003e50:	24000534 	.word	0x24000534
 8003e54:	24000520 	.word	0x24000520
 8003e58:	24000518 	.word	0x24000518
 8003e5c:	24008010 	.word	0x24008010

08003e60 <vTaskEndScheduler>:
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
    __asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	607b      	str	r3, [r7, #4]
}
 8003e78:	bf00      	nop
    xSchedulerRunning = pdFALSE;
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <vTaskEndScheduler+0x2c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
    vPortEndScheduler();
 8003e80:	f003 f896 	bl	8006fb0 <vPortEndScheduler>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	24000520 	.word	0x24000520

08003e90 <vTaskSuspendAll>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
    ++uxSchedulerSuspended;
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <vTaskSuspendAll+0x18>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	4a03      	ldr	r2, [pc, #12]	; (8003ea8 <vTaskSuspendAll+0x18>)
 8003e9c:	6013      	str	r3, [r2, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	2400053c 	.word	0x2400053c

08003eac <xTaskResumeAll>:
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
    configASSERT( uxSchedulerSuspended );
 8003eba:	4b7e      	ldr	r3, [pc, #504]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <xTaskResumeAll+0x2c>
    __asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <xTaskResumeAll+0x2a>
    taskENTER_CRITICAL();
 8003ed8:	f005 fef6 	bl	8009cc8 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8003edc:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	4a74      	ldr	r2, [pc, #464]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ee4:	6013      	str	r3, [r2, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 80da 	bne.w	80040a4 <xTaskResumeAll+0x1f8>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ef0:	4b71      	ldr	r3, [pc, #452]	; (80040b8 <xTaskResumeAll+0x20c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80d5 	beq.w	80040a4 <xTaskResumeAll+0x1f8>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003efa:	e0a4      	b.n	8004046 <xTaskResumeAll+0x19a>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efc:	4b6f      	ldr	r3, [pc, #444]	; (80040bc <xTaskResumeAll+0x210>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003f18:	609a      	str	r2, [r3, #8]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	3398      	adds	r3, #152	; 0x98
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d104      	bne.n	8003f3e <xTaskResumeAll+0x92>
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	601a      	str	r2, [r3, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3384      	adds	r3, #132	; 0x84
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d104      	bne.n	8003f8a <xTaskResumeAll+0xde>
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1e5a      	subs	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <xTaskResumeAll+0x214>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d904      	bls.n	8003fb4 <xTaskResumeAll+0x108>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fb0:	4a43      	ldr	r2, [pc, #268]	; (80040c0 <xTaskResumeAll+0x214>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003fba:	4942      	ldr	r1, [pc, #264]	; (80040c4 <xTaskResumeAll+0x218>)
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	3284      	adds	r2, #132	; 0x84
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <xTaskResumeAll+0x218>)
 8004002:	441a      	add	r2, r3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004010:	492c      	ldr	r1, [pc, #176]	; (80040c4 <xTaskResumeAll+0x218>)
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	4828      	ldr	r0, [pc, #160]	; (80040c4 <xTaskResumeAll+0x218>)
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4403      	add	r3, r0
 800402c:	6019      	str	r1, [r3, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004034:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <xTaskResumeAll+0x21c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <xTaskResumeAll+0x19a>
                        xYieldPending = pdTRUE;
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <xTaskResumeAll+0x220>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <xTaskResumeAll+0x210>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f47f af56 	bne.w	8003efc <xTaskResumeAll+0x50>
                if( pxTCB != NULL )
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <xTaskResumeAll+0x1ae>
                    prvResetNextTaskUnblockTime();
 8004056:	f001 fffd 	bl	8006054 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <xTaskResumeAll+0x224>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	617b      	str	r3, [r7, #20]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <xTaskResumeAll+0x1dc>
                            if( xTaskIncrementTick() != pdFALSE )
 8004066:	f000 ff25 	bl	8004eb4 <xTaskIncrementTick>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <xTaskResumeAll+0x1ca>
                                xYieldPending = pdTRUE;
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <xTaskResumeAll+0x220>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
                            --xPendedCounts;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3b01      	subs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f1      	bne.n	8004066 <xTaskResumeAll+0x1ba>
                        xPendedTicks = 0;
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <xTaskResumeAll+0x224>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <xTaskResumeAll+0x220>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <xTaskResumeAll+0x1f8>
                            xAlreadyYielded = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
                    taskYIELD_IF_USING_PREEMPTION();
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <xTaskResumeAll+0x228>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
    taskEXIT_CRITICAL();
 80040a4:	f005 fe2e 	bl	8009d04 <vPortExitCritical>
    return xAlreadyYielded;
 80040a8:	69bb      	ldr	r3, [r7, #24]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2400053c 	.word	0x2400053c
 80040b8:	24000514 	.word	0x24000514
 80040bc:	240004d4 	.word	0x240004d4
 80040c0:	2400051c 	.word	0x2400051c
 80040c4:	24000044 	.word	0x24000044
 80040c8:	24000040 	.word	0x24000040
 80040cc:	24000528 	.word	0x24000528
 80040d0:	24000524 	.word	0x24000524
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <xTaskGetTickCount>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
        xTicks = xTickCount;
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <xTaskGetTickCount+0x1c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	607b      	str	r3, [r7, #4]
    return xTicks;
 80040e4:	687b      	ldr	r3, [r7, #4]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	24000518 	.word	0x24000518

080040f8 <xTaskGetTickCountFromISR>:
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040fe:	f005 fe71 	bl	8009de4 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
        xReturn = xTickCount;
 8004106:	4b04      	ldr	r3, [pc, #16]	; (8004118 <xTaskGetTickCountFromISR+0x20>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	603b      	str	r3, [r7, #0]
    return xReturn;
 800410c:	683b      	ldr	r3, [r7, #0]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	24000518 	.word	0x24000518

0800411c <uxTaskGetNumberOfTasks>:
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
    return uxCurrentNumberOfTasks;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <uxTaskGetNumberOfTasks+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	24000514 	.word	0x24000514

08004134 <pcTaskGetName>:
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <pcTaskGetName+0x14>
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <pcTaskGetName+0x44>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	e000      	b.n	800414a <pcTaskGetName+0x16>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <pcTaskGetName+0x34>
    __asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60bb      	str	r3, [r7, #8]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <pcTaskGetName+0x32>
    return &( pxTCB->pcTaskName[ 0 ] );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	33b4      	adds	r3, #180	; 0xb4
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	24000040 	.word	0x24000040

0800417c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <uxTaskGetStackHighWaterMark+0x14>
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <uxTaskGetStackHighWaterMark+0x34>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	e000      	b.n	8004192 <uxTaskGetStackHighWaterMark+0x16>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800419a:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800419c:	6938      	ldr	r0, [r7, #16]
 800419e:	f001 ff3d 	bl	800601c <prvTaskCheckFreeStackSpace>
 80041a2:	4603      	mov	r3, r0
 80041a4:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 80041a6:	68fb      	ldr	r3, [r7, #12]
    }
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	24000040 	.word	0x24000040

080041b4 <uxTaskGetSystemState>:
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	2338      	movs	r3, #56	; 0x38
 80041c6:	613b      	str	r3, [r7, #16]
        vTaskSuspendAll();
 80041c8:	f7ff fe62 	bl	8003e90 <vTaskSuspendAll>
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <uxTaskGetSystemState+0x104>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d368      	bcc.n	80042a8 <uxTaskGetSystemState+0xf4>
                    uxQueue--;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3b01      	subs	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1898      	adds	r0, r3, r2
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4a31      	ldr	r2, [pc, #196]	; (80042bc <uxTaskGetSystemState+0x108>)
 80041f8:	4413      	add	r3, r2
 80041fa:	2201      	movs	r2, #1
 80041fc:	4619      	mov	r1, r3
 80041fe:	f001 febb 	bl	8005f78 <prvListTasksWithinSingleList>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e2      	bne.n	80041d6 <uxTaskGetSystemState+0x22>
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <uxTaskGetSystemState+0x10c>)
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	2202      	movs	r2, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fea6 	bl	8005f78 <prvListTasksWithinSingleList>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	4413      	add	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <uxTaskGetSystemState+0x110>)
 8004246:	6811      	ldr	r1, [r2, #0]
 8004248:	2202      	movs	r2, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fe94 	bl	8005f78 <prvListTasksWithinSingleList>
 8004250:	4602      	mov	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4413      	add	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	2204      	movs	r2, #4
 800426a:	4917      	ldr	r1, [pc, #92]	; (80042c8 <uxTaskGetSystemState+0x114>)
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fe83 	bl	8005f78 <prvListTasksWithinSingleList>
 8004272:	4602      	mov	r2, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4413      	add	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	461a      	mov	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	2203      	movs	r2, #3
 800428c:	490f      	ldr	r1, [pc, #60]	; (80042cc <uxTaskGetSystemState+0x118>)
 800428e:	4618      	mov	r0, r3
 8004290:	f001 fe72 	bl	8005f78 <prvListTasksWithinSingleList>
 8004294:	4602      	mov	r2, r0
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
                        if( pulTotalRunTime != NULL )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <uxTaskGetSystemState+0xf4>
                            *pulTotalRunTime = 0;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
        ( void ) xTaskResumeAll();
 80042a8:	f7ff fe00 	bl	8003eac <xTaskResumeAll>
        return uxTask;
 80042ac:	697b      	ldr	r3, [r7, #20]
    }
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	24000514 	.word	0x24000514
 80042bc:	24000044 	.word	0x24000044
 80042c0:	240004cc 	.word	0x240004cc
 80042c4:	240004d0 	.word	0x240004d0
 80042c8:	240004e8 	.word	0x240004e8
 80042cc:	24000500 	.word	0x24000500

080042d0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08e      	sub	sp, #56	; 0x38
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80042de:	2301      	movs	r3, #1
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d90a      	bls.n	80042fe <xTaskGenericNotify+0x2e>
    __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	623b      	str	r3, [r7, #32]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xTaskGenericNotify+0x4a>
    __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	61fb      	str	r3, [r7, #28]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800431e:	f005 fcd3 	bl	8009cc8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	334c      	adds	r3, #76	; 0x4c
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004336:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4413      	add	r3, r2
 800434e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004352:	2202      	movs	r2, #2
 8004354:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d841      	bhi.n	80043e0 <xTaskGenericNotify+0x110>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <xTaskGenericNotify+0x94>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	080043ff 	.word	0x080043ff
 8004368:	08004379 	.word	0x08004379
 800436c:	08004397 	.word	0x08004397
 8004370:	080043b3 	.word	0x080043b3
 8004374:	080043c3 	.word	0x080043c3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	334c      	adds	r3, #76	; 0x4c
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	431a      	orrs	r2, r3
 8004388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	334c      	adds	r3, #76	; 0x4c
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	605a      	str	r2, [r3, #4]
                    break;
 8004394:	e036      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	334c      	adds	r3, #76	; 0x4c
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	334c      	adds	r3, #76	; 0x4c
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	605a      	str	r2, [r3, #4]
                    break;
 80043b0:	e028      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	334c      	adds	r3, #76	; 0x4c
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	605a      	str	r2, [r3, #4]
                    break;
 80043c0:	e020      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80043c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d007      	beq.n	80043da <xTaskGenericNotify+0x10a>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	334c      	adds	r3, #76	; 0x4c
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80043d8:	e014      	b.n	8004404 <xTaskGenericNotify+0x134>
                        xReturn = pdFAIL;
 80043da:	2300      	movs	r3, #0
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80043de:	e011      	b.n	8004404 <xTaskGenericNotify+0x134>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80043e0:	4b56      	ldr	r3, [pc, #344]	; (800453c <xTaskGenericNotify+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <xTaskGenericNotify+0x132>
    __asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61bb      	str	r3, [r7, #24]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xTaskGenericNotify+0x12c>
                    break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <xTaskGenericNotify+0x134>

                    break;
 8004402:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 8090 	bne.w	800452e <xTaskGenericNotify+0x25e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441e:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	3384      	adds	r3, #132	; 0x84
 800443a:	429a      	cmp	r2, r3
 800443c:	d104      	bne.n	8004448 <xTaskGenericNotify+0x178>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1e5a      	subs	r2, r3, #1
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004460:	4b37      	ldr	r3, [pc, #220]	; (8004540 <xTaskGenericNotify+0x270>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d904      	bls.n	8004472 <xTaskGenericNotify+0x1a2>
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800446e:	4a34      	ldr	r2, [pc, #208]	; (8004540 <xTaskGenericNotify+0x270>)
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004478:	4932      	ldr	r1, [pc, #200]	; (8004544 <xTaskGenericNotify+0x274>)
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	3304      	adds	r3, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a2:	3284      	adds	r2, #132	; 0x84
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <xTaskGenericNotify+0x274>)
 80044c0:	441a      	add	r2, r3
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80044ce:	491d      	ldr	r1, [pc, #116]	; (8004544 <xTaskGenericNotify+0x274>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1c59      	adds	r1, r3, #1
 80044de:	4819      	ldr	r0, [pc, #100]	; (8004544 <xTaskGenericNotify+0x274>)
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4403      	add	r3, r0
 80044ea:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <xTaskGenericNotify+0x23c>
    __asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	617b      	str	r3, [r7, #20]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xTaskGenericNotify+0x23a>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <xTaskGenericNotify+0x278>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800451a:	429a      	cmp	r2, r3
 800451c:	d907      	bls.n	800452e <xTaskGenericNotify+0x25e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <xTaskGenericNotify+0x27c>)
 8004520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800452e:	f005 fbe9 	bl	8009d04 <vPortExitCritical>

        return xReturn;
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004534:	4618      	mov	r0, r3
 8004536:	3738      	adds	r7, #56	; 0x38
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	24000518 	.word	0x24000518
 8004540:	2400051c 	.word	0x2400051c
 8004544:	24000044 	.word	0x24000044
 8004548:	24000040 	.word	0x24000040
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b092      	sub	sp, #72	; 0x48
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800455e:	2301      	movs	r3, #1
 8004560:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xTaskGenericNotifyFromISR+0x2e>
    __asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d90a      	bls.n	800459a <xTaskGenericNotifyFromISR+0x4a>
    __asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800459a:	f005 fc23 	bl	8009de4 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	643b      	str	r3, [r7, #64]	; 0x40
    __asm volatile
 80045a2:	f3ef 8211 	mrs	r2, BASEPRI
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	623a      	str	r2, [r7, #32]
 80045b8:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 80045ba:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80045be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80045c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	334c      	adds	r3, #76	; 0x4c
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80045d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80045e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d841      	bhi.n	800467c <xTaskGenericNotifyFromISR+0x12c>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <xTaskGenericNotifyFromISR+0xb0>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	0800469b 	.word	0x0800469b
 8004604:	08004615 	.word	0x08004615
 8004608:	08004633 	.word	0x08004633
 800460c:	0800464f 	.word	0x0800464f
 8004610:	0800465f 	.word	0x0800465f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	334c      	adds	r3, #76	; 0x4c
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	431a      	orrs	r2, r3
 8004624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	334c      	adds	r3, #76	; 0x4c
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	605a      	str	r2, [r3, #4]
                    break;
 8004630:	e036      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	334c      	adds	r3, #76	; 0x4c
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	334c      	adds	r3, #76	; 0x4c
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	605a      	str	r2, [r3, #4]
                    break;
 800464c:	e028      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800464e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	334c      	adds	r3, #76	; 0x4c
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
                    break;
 800465c:	e020      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800465e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004662:	2b02      	cmp	r3, #2
 8004664:	d007      	beq.n	8004676 <xTaskGenericNotifyFromISR+0x126>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	334c      	adds	r3, #76	; 0x4c
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004674:	e014      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                        xReturn = pdFAIL;
 8004676:	2300      	movs	r3, #0
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800467a:	e011      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800467c:	4b6b      	ldr	r3, [pc, #428]	; (800482c <xTaskGenericNotifyFromISR+0x2dc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <xTaskGenericNotifyFromISR+0x14e>
    __asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61bb      	str	r3, [r7, #24]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xTaskGenericNotifyFromISR+0x148>
                    break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                    break;
 800469e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80046a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f040 80b5 	bne.w	8004814 <xTaskGenericNotifyFromISR+0x2c4>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80046aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <xTaskGenericNotifyFromISR+0x17a>
    __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	617b      	str	r3, [r7, #20]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xTaskGenericNotifyFromISR+0x178>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ca:	4b59      	ldr	r3, [pc, #356]	; (8004830 <xTaskGenericNotifyFromISR+0x2e0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d16f      	bne.n	80047b2 <xTaskGenericNotifyFromISR+0x262>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80046d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d8:	633b      	str	r3, [r7, #48]	; 0x30
 80046da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046e2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046f0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	429a      	cmp	r2, r3
 8004700:	d104      	bne.n	800470c <xTaskGenericNotifyFromISR+0x1bc>
 8004702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004704:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1e5a      	subs	r2, r3, #1
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004720:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004724:	4b43      	ldr	r3, [pc, #268]	; (8004834 <xTaskGenericNotifyFromISR+0x2e4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d904      	bls.n	8004736 <xTaskGenericNotifyFromISR+0x1e6>
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004732:	4a40      	ldr	r2, [pc, #256]	; (8004834 <xTaskGenericNotifyFromISR+0x2e4>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800473c:	493e      	ldr	r1, [pc, #248]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3304      	adds	r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004766:	3284      	adds	r2, #132	; 0x84
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004776:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 8004784:	441a      	add	r2, r3
 8004786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004788:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800478c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004792:	4929      	ldr	r1, [pc, #164]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	4825      	ldr	r0, [pc, #148]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4403      	add	r3, r0
 80047ae:	6019      	str	r1, [r3, #0]
 80047b0:	e01e      	b.n	80047f0 <xTaskGenericNotifyFromISR+0x2a0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
 80047b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d0:	3298      	adds	r2, #152	; 0x98
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047ee:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <xTaskGenericNotifyFromISR+0x2f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047fe:	429a      	cmp	r2, r3
 8004800:	d908      	bls.n	8004814 <xTaskGenericNotifyFromISR+0x2c4>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <xTaskGenericNotifyFromISR+0x2be>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <xTaskGenericNotifyFromISR+0x2f4>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004816:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f383 8811 	msr	BASEPRI, r3
}
 800481e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8004820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8004822:	4618      	mov	r0, r3
 8004824:	3748      	adds	r7, #72	; 0x48
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	24000518 	.word	0x24000518
 8004830:	2400053c 	.word	0x2400053c
 8004834:	2400051c 	.word	0x2400051c
 8004838:	24000044 	.word	0x24000044
 800483c:	240004d4 	.word	0x240004d4
 8004840:	24000040 	.word	0x24000040
 8004844:	24000528 	.word	0x24000528

08004848 <xTaskGenericNotifyWait>:
    {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d90a      	bls.n	8004872 <xTaskGenericNotifyWait+0x2a>
    __asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	613b      	str	r3, [r7, #16]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTaskGenericNotifyWait+0x28>
        taskENTER_CRITICAL();
 8004872:	f005 fa29 	bl	8009cc8 <vPortEnterCritical>
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d025      	beq.n	80048d6 <xTaskGenericNotifyWait+0x8e>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	334c      	adds	r3, #76	; 0x4c
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	43db      	mvns	r3, r3
 800489c:	4019      	ands	r1, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	334c      	adds	r3, #76	; 0x4c
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	6059      	str	r1, [r3, #4]
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80048a8:	4b29      	ldr	r3, [pc, #164]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <xTaskGenericNotifyWait+0x8e>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048be:	2101      	movs	r1, #1
 80048c0:	6a38      	ldr	r0, [r7, #32]
 80048c2:	f001 fae5 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 80048c6:	4b23      	ldr	r3, [pc, #140]	; (8004954 <xTaskGenericNotifyWait+0x10c>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80048d6:	f005 fa15 	bl	8009d04 <vPortExitCritical>
        taskENTER_CRITICAL();
 80048da:	f005 f9f5 	bl	8009cc8 <vPortEnterCritical>
            if( pulNotificationValue != NULL )
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <xTaskGenericNotifyWait+0xae>
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	334c      	adds	r3, #76	; 0x4c
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d002      	beq.n	8004910 <xTaskGenericNotifyWait+0xc8>
                xReturn = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e010      	b.n	8004932 <xTaskGenericNotifyWait+0xea>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	334c      	adds	r3, #76	; 0x4c
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	43db      	mvns	r3, r3
 8004922:	4019      	ands	r1, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	334c      	adds	r3, #76	; 0x4c
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 800492e:	2301      	movs	r3, #1
 8004930:	617b      	str	r3, [r7, #20]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004942:	f005 f9df 	bl	8009d04 <vPortExitCritical>
        return xReturn;
 8004946:	697b      	ldr	r3, [r7, #20]
    }
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	24000040 	.word	0x24000040
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004958:	b580      	push	{r7, lr}
 800495a:	b090      	sub	sp, #64	; 0x40
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <vTaskGenericNotifyGiveFromISR+0x28>
    __asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d90a      	bls.n	800499c <vTaskGenericNotifyGiveFromISR+0x44>
    __asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	623b      	str	r3, [r7, #32]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800499c:	f005 fa22 	bl	8009de4 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm volatile
 80049a4:	f3ef 8211 	mrs	r2, BASEPRI
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61fa      	str	r2, [r7, #28]
 80049ba:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80049bc:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80049c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80049d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80049de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	334c      	adds	r3, #76	; 0x4c
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	334c      	adds	r3, #76	; 0x4c
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80049f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f040 80b5 	bne.w	8004b6c <vTaskGenericNotifyGiveFromISR+0x214>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <vTaskGenericNotifyGiveFromISR+0xca>
    __asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	617b      	str	r3, [r7, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <vTaskGenericNotifyGiveFromISR+0xc8>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a22:	4b57      	ldr	r3, [pc, #348]	; (8004b80 <vTaskGenericNotifyGiveFromISR+0x228>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d16f      	bne.n	8004b0a <vTaskGenericNotifyGiveFromISR+0x1b2>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a48:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a54:	3384      	adds	r3, #132	; 0x84
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d104      	bne.n	8004a64 <vTaskGenericNotifyGiveFromISR+0x10c>
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	1e5a      	subs	r2, r3, #1
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a7c:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <vTaskGenericNotifyGiveFromISR+0x22c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d904      	bls.n	8004a8e <vTaskGenericNotifyGiveFromISR+0x136>
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a8a:	4a3e      	ldr	r2, [pc, #248]	; (8004b84 <vTaskGenericNotifyGiveFromISR+0x22c>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a90:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a94:	493c      	ldr	r1, [pc, #240]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004abe:	3284      	adds	r2, #132	; 0x84
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004adc:	441a      	add	r2, r3
 8004ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004aea:	4927      	ldr	r1, [pc, #156]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	4823      	ldr	r0, [pc, #140]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4403      	add	r3, r0
 8004b06:	6019      	str	r1, [r3, #0]
 8004b08:	e01e      	b.n	8004b48 <vTaskGenericNotifyGiveFromISR+0x1f0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b28:	3298      	adds	r2, #152	; 0x98
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	609a      	str	r2, [r3, #8]
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b3a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b46:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <vTaskGenericNotifyGiveFromISR+0x238>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d908      	bls.n	8004b6c <vTaskGenericNotifyGiveFromISR+0x214>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <vTaskGenericNotifyGiveFromISR+0x20e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <vTaskGenericNotifyGiveFromISR+0x23c>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f383 8811 	msr	BASEPRI, r3
}
 8004b76:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8004b78:	bf00      	nop
 8004b7a:	3740      	adds	r7, #64	; 0x40
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	2400053c 	.word	0x2400053c
 8004b84:	2400051c 	.word	0x2400051c
 8004b88:	24000044 	.word	0x24000044
 8004b8c:	240004d4 	.word	0x240004d4
 8004b90:	24000040 	.word	0x24000040
 8004b94:	24000528 	.word	0x24000528

08004b98 <ulTaskGenericNotifyTake>:
    {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d90a      	bls.n	8004bc0 <ulTaskGenericNotifyTake+0x28>
    __asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	613b      	str	r3, [r7, #16]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <ulTaskGenericNotifyTake+0x26>
        taskENTER_CRITICAL();
 8004bc0:	f005 f882 	bl	8009cc8 <vPortEnterCritical>
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	334c      	adds	r3, #76	; 0x4c
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <ulTaskGenericNotifyTake+0x6c>
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004bd6:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <ulTaskGenericNotifyTake+0x6c>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bec:	2101      	movs	r1, #1
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f001 f94e 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <ulTaskGenericNotifyTake+0xd8>)
 8004bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8004c04:	f005 f87e 	bl	8009d04 <vPortExitCritical>
        taskENTER_CRITICAL();
 8004c08:	f005 f85e 	bl	8009cc8 <vPortEnterCritical>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	334c      	adds	r3, #76	; 0x4c
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	617b      	str	r3, [r7, #20]
            if( ulReturn != 0UL )
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d014      	beq.n	8004c4c <ulTaskGenericNotifyTake+0xb4>
                if( xClearCountOnExit != pdFALSE )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <ulTaskGenericNotifyTake+0xa2>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	334c      	adds	r3, #76	; 0x4c
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	e008      	b.n	8004c4c <ulTaskGenericNotifyTake+0xb4>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1e5a      	subs	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	334c      	adds	r3, #76	; 0x4c
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	605a      	str	r2, [r3, #4]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004c5c:	f005 f852 	bl	8009d04 <vPortExitCritical>
        return ulReturn;
 8004c60:	697b      	ldr	r3, [r7, #20]
    }
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	24000040 	.word	0x24000040
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d90a      	bls.n	8004c9a <xTaskGenericNotifyStateClear+0x26>
    __asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	60fb      	str	r3, [r7, #12]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <xTaskGenericNotifyStateClear+0x32>
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <xTaskGenericNotifyStateClear+0x74>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	e000      	b.n	8004ca8 <xTaskGenericNotifyStateClear+0x34>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

        taskENTER_CRITICAL();
 8004caa:	f005 f80d 	bl	8009cc8 <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d109      	bne.n	8004cd4 <xTaskGenericNotifyStateClear+0x60>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e001      	b.n	8004cd8 <xTaskGenericNotifyStateClear+0x64>
            }
            else
            {
                xReturn = pdFAIL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8004cd8:	f005 f814 	bl	8009d04 <vPortExitCritical>

        return xReturn;
 8004cdc:	697b      	ldr	r3, [r7, #20]
    }
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	24000040 	.word	0x24000040

08004cec <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint32_t ulReturn;

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <ulTaskGenericNotifyValueClear+0x18>
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <ulTaskGenericNotifyValueClear+0x5c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e000      	b.n	8004d06 <ulTaskGenericNotifyValueClear+0x1a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	617b      	str	r3, [r7, #20]

        taskENTER_CRITICAL();
 8004d08:	f004 ffde 	bl	8009cc8 <vPortEnterCritical>
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	334c      	adds	r3, #76	; 0x4c
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	334c      	adds	r3, #76	; 0x4c
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	6979      	ldr	r1, [r7, #20]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	334c      	adds	r3, #76	; 0x4c
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	605a      	str	r2, [r3, #4]
        }
        taskEXIT_CRITICAL();
 8004d38:	f004 ffe4 	bl	8009d04 <vPortExitCritical>

        return ulReturn;
 8004d3c:	693b      	ldr	r3, [r7, #16]
    }
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	24000040 	.word	0x24000040

08004d4c <vTaskSetTimeOutState>:
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <vTaskSetTimeOutState+0x24>
    __asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	60fb      	str	r3, [r7, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 8004d70:	f004 ffaa 	bl	8009cc8 <vPortEnterCritical>
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <vTaskSetTimeOutState+0x44>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <vTaskSetTimeOutState+0x48>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]
    taskEXIT_CRITICAL();
 8004d84:	f004 ffbe 	bl	8009d04 <vPortExitCritical>
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	2400052c 	.word	0x2400052c
 8004d94:	24000518 	.word	0x24000518

08004d98 <xTaskCheckForTimeOut>:
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
    configASSERT( pxTimeOut );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xTaskCheckForTimeOut+0x26>
    __asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	613b      	str	r3, [r7, #16]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xTaskCheckForTimeOut+0x42>
    __asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTaskCheckForTimeOut+0x40>
    taskENTER_CRITICAL();
 8004dda:	f004 ff75 	bl	8009cc8 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8004dde:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <xTaskCheckForTimeOut+0xc4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]
            if( *pxTicksToWait == portMAX_DELAY )
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df6:	d102      	bne.n	8004dfe <xTaskCheckForTimeOut+0x66>
                xReturn = pdFALSE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	e026      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <xTaskCheckForTimeOut+0xc8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d00a      	beq.n	8004e20 <xTaskCheckForTimeOut+0x88>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d305      	bcc.n	8004e20 <xTaskCheckForTimeOut+0x88>
            xReturn = pdTRUE;
 8004e14:	2301      	movs	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e015      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d20b      	bcs.n	8004e42 <xTaskCheckForTimeOut+0xaa>
            *pxTicksToWait -= xElapsedTime;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	1ad2      	subs	r2, r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 ff30 	bl	8005c9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	e004      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
            *pxTicksToWait = ( TickType_t ) 0;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
    taskEXIT_CRITICAL();
 8004e4c:	f004 ff5a 	bl	8009d04 <vPortExitCritical>
    return xReturn;
 8004e50:	69fb      	ldr	r3, [r7, #28]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	24000518 	.word	0x24000518
 8004e60:	2400052c 	.word	0x2400052c

08004e64 <xTaskCatchUpTicks>:
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
    configASSERT( uxSchedulerSuspended == 0 );
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <xTaskCatchUpTicks+0x48>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <xTaskCatchUpTicks+0x26>
    __asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	60bb      	str	r3, [r7, #8]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xTaskCatchUpTicks+0x24>
    vTaskSuspendAll();
 8004e8a:	f7ff f801 	bl	8003e90 <vTaskSuspendAll>
    xPendedTicks += xTicksToCatchUp;
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <xTaskCatchUpTicks+0x4c>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <xTaskCatchUpTicks+0x4c>)
 8004e98:	6013      	str	r3, [r2, #0]
    xYieldOccurred = xTaskResumeAll();
 8004e9a:	f7ff f807 	bl	8003eac <xTaskResumeAll>
 8004e9e:	60f8      	str	r0, [r7, #12]
    return xYieldOccurred;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2400053c 	.word	0x2400053c
 8004eb0:	24000524 	.word	0x24000524

08004eb4 <xTaskIncrementTick>:
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af00      	add	r7, sp, #0
    BaseType_t xSwitchRequired = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebe:	4b8c      	ldr	r3, [pc, #560]	; (80050f0 <xTaskIncrementTick+0x23c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 8109 	bne.w	80050da <xTaskIncrementTick+0x226>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ec8:	4b8a      	ldr	r3, [pc, #552]	; (80050f4 <xTaskIncrementTick+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	623b      	str	r3, [r7, #32]
        xTickCount = xConstTickCount;
 8004ed0:	4a88      	ldr	r2, [pc, #544]	; (80050f4 <xTaskIncrementTick+0x240>)
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	6013      	str	r3, [r2, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d120      	bne.n	8004f1e <xTaskIncrementTick+0x6a>
            taskSWITCH_DELAYED_LISTS();
 8004edc:	4b86      	ldr	r3, [pc, #536]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <xTaskIncrementTick+0x48>
    __asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	607b      	str	r3, [r7, #4]
}
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xTaskIncrementTick+0x46>
 8004efc:	4b7e      	ldr	r3, [pc, #504]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	4b7e      	ldr	r3, [pc, #504]	; (80050fc <xTaskIncrementTick+0x248>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7c      	ldr	r2, [pc, #496]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	; (80050fc <xTaskIncrementTick+0x248>)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b7b      	ldr	r3, [pc, #492]	; (8005100 <xTaskIncrementTick+0x24c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a7a      	ldr	r2, [pc, #488]	; (8005100 <xTaskIncrementTick+0x24c>)
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	f001 f89b 	bl	8006054 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004f1e:	4b79      	ldr	r3, [pc, #484]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a3a      	ldr	r2, [r7, #32]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	f0c0 80c2 	bcc.w	80050ae <xTaskIncrementTick+0x1fa>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2a:	4b73      	ldr	r3, [pc, #460]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <xTaskIncrementTick+0x8a>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f34:	4b73      	ldr	r3, [pc, #460]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f3a:	601a      	str	r2, [r3, #0]
                    break;
 8004f3c:	e0b7      	b.n	80050ae <xTaskIncrementTick+0x1fa>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3e:	4b6e      	ldr	r3, [pc, #440]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4e:	617b      	str	r3, [r7, #20]
                    if( xConstTickCount < xItemValue )
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d203      	bcs.n	8004f60 <xTaskIncrementTick+0xac>
                        xNextTaskUnblockTime = xItemValue;
 8004f58:	4a6a      	ldr	r2, [pc, #424]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004f5e:	e0a6      	b.n	80050ae <xTaskIncrementTick+0x1fa>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004f74:	609a      	str	r2, [r3, #8]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3384      	adds	r3, #132	; 0x84
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d104      	bne.n	8004f9a <xTaskIncrementTick+0xe6>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	601a      	str	r2, [r3, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d025      	beq.n	8005002 <xTaskIncrementTick+0x14e>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3398      	adds	r3, #152	; 0x98
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d104      	bne.n	8004ff0 <xTaskIncrementTick+0x13c>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005008:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <xTaskIncrementTick+0x254>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d904      	bls.n	800501a <xTaskIncrementTick+0x166>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005016:	4a3c      	ldr	r2, [pc, #240]	; (8005108 <xTaskIncrementTick+0x254>)
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005020:	493a      	ldr	r1, [pc, #232]	; (800510c <xTaskIncrementTick+0x258>)
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3304      	adds	r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	3284      	adds	r2, #132	; 0x84
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4a29      	ldr	r2, [pc, #164]	; (800510c <xTaskIncrementTick+0x258>)
 8005068:	441a      	add	r2, r3
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005076:	4925      	ldr	r1, [pc, #148]	; (800510c <xTaskIncrementTick+0x258>)
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	4821      	ldr	r0, [pc, #132]	; (800510c <xTaskIncrementTick+0x258>)
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4403      	add	r3, r0
 8005092:	6019      	str	r1, [r3, #0]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800509a:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <xTaskIncrementTick+0x25c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050a2:	429a      	cmp	r2, r3
 80050a4:	f4ff af41 	bcc.w	8004f2a <xTaskIncrementTick+0x76>
                                xSwitchRequired = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ac:	e73d      	b.n	8004f2a <xTaskIncrementTick+0x76>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <xTaskIncrementTick+0x25c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80050b6:	4915      	ldr	r1, [pc, #84]	; (800510c <xTaskIncrementTick+0x258>)
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d901      	bls.n	80050cc <xTaskIncrementTick+0x218>
                    xSwitchRequired = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
                if( xYieldPending != pdFALSE )
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <xTaskIncrementTick+0x260>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <xTaskIncrementTick+0x230>
                    xSwitchRequired = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
 80050d8:	e004      	b.n	80050e4 <xTaskIncrementTick+0x230>
        ++xPendedTicks;
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <xTaskIncrementTick+0x264>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <xTaskIncrementTick+0x264>)
 80050e2:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	2400053c 	.word	0x2400053c
 80050f4:	24000518 	.word	0x24000518
 80050f8:	240004cc 	.word	0x240004cc
 80050fc:	240004d0 	.word	0x240004d0
 8005100:	2400052c 	.word	0x2400052c
 8005104:	24000534 	.word	0x24000534
 8005108:	2400051c 	.word	0x2400051c
 800510c:	24000044 	.word	0x24000044
 8005110:	24000040 	.word	0x24000040
 8005114:	24000528 	.word	0x24000528
 8005118:	24000524 	.word	0x24000524

0800511c <vTaskPlaceOnEventList>:
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <vTaskPlaceOnEventList+0x26>
    __asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60fb      	str	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <vTaskPlaceOnEventList+0x24>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vTaskPlaceOnEventList+0x44>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3398      	adds	r3, #152	; 0x98
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb fc53 	bl	80009f6 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005150:	2101      	movs	r1, #1
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f000 fe9c 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	24000040 	.word	0x24000040

08005164 <vTaskPlaceOnUnorderedEventList>:
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <vTaskPlaceOnUnorderedEventList+0x28>
    __asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	61bb      	str	r3, [r7, #24]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <vTaskPlaceOnUnorderedEventList+0x26>
    configASSERT( uxSchedulerSuspended != 0 );
 800518c:	4b20      	ldr	r3, [pc, #128]	; (8005210 <vTaskPlaceOnUnorderedEventList+0xac>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <vTaskPlaceOnUnorderedEventList+0x46>
    __asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	617b      	str	r3, [r7, #20]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <vTaskPlaceOnUnorderedEventList+0x44>
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80051b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	6892      	ldr	r2, [r2, #8]
 80051d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	3298      	adds	r2, #152	; 0x98
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fe44 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
}
 8005208:	bf00      	nop
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	2400053c 	.word	0x2400053c
 8005214:	24000040 	.word	0x24000040

08005218 <vTaskPlaceOnEventListRestricted>:
    {
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	613b      	str	r3, [r7, #16]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <vTaskPlaceOnEventListRestricted+0x26>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005250:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	3298      	adds	r2, #152	; 0x98
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]
        if( xWaitIndefinitely != pdFALSE )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <vTaskPlaceOnEventListRestricted+0x7c>
            xTicksToWait = portMAX_DELAY;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005292:	60bb      	str	r3, [r7, #8]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	68b8      	ldr	r0, [r7, #8]
 8005298:	f000 fdfa 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
    }
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	24000040 	.word	0x24000040

080052a8 <xTaskRemoveFromEventList>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b08b      	sub	sp, #44	; 0x2c
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <xTaskRemoveFromEventList+0x2c>
    __asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	60fb      	str	r3, [r7, #12]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80052e8:	609a      	str	r2, [r3, #8]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	3398      	adds	r3, #152	; 0x98
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <xTaskRemoveFromEventList+0x66>
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	2200      	movs	r2, #0
 8005312:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	1e5a      	subs	r2, r3, #1
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005320:	4b55      	ldr	r3, [pc, #340]	; (8005478 <xTaskRemoveFromEventList+0x1d0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d16f      	bne.n	8005408 <xTaskRemoveFromEventList+0x160>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	6a3a      	ldr	r2, [r7, #32]
 8005338:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800533c:	609a      	str	r2, [r3, #8]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	3384      	adds	r3, #132	; 0x84
 8005354:	429a      	cmp	r2, r3
 8005356:	d104      	bne.n	8005362 <xTaskRemoveFromEventList+0xba>
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	1e5a      	subs	r2, r3, #1
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800537a:	4b40      	ldr	r3, [pc, #256]	; (800547c <xTaskRemoveFromEventList+0x1d4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d904      	bls.n	800538c <xTaskRemoveFromEventList+0xe4>
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005388:	4a3c      	ldr	r2, [pc, #240]	; (800547c <xTaskRemoveFromEventList+0x1d4>)
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005392:	493b      	ldr	r1, [pc, #236]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3304      	adds	r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	3284      	adds	r2, #132	; 0x84
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4a29      	ldr	r2, [pc, #164]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053da:	441a      	add	r2, r3
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053e8:	4925      	ldr	r1, [pc, #148]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	4821      	ldr	r0, [pc, #132]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4403      	add	r3, r0
 8005404:	6019      	str	r1, [r3, #0]
 8005406:	e01e      	b.n	8005446 <xTaskRemoveFromEventList+0x19e>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005408:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	3298      	adds	r2, #152	; 0x98
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 8005438:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800543c:	4b11      	ldr	r3, [pc, #68]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	4a10      	ldr	r2, [pc, #64]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 8005444:	6013      	str	r3, [r2, #0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <xTaskRemoveFromEventList+0x1e0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005454:	429a      	cmp	r2, r3
 8005456:	d905      	bls.n	8005464 <xTaskRemoveFromEventList+0x1bc>
        xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
        xYieldPending = pdTRUE;
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <xTaskRemoveFromEventList+0x1e4>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e001      	b.n	8005468 <xTaskRemoveFromEventList+0x1c0>
        xReturn = pdFALSE;
 8005464:	2300      	movs	r3, #0
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
    return xReturn;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800546a:	4618      	mov	r0, r3
 800546c:	372c      	adds	r7, #44	; 0x2c
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	2400053c 	.word	0x2400053c
 800547c:	2400051c 	.word	0x2400051c
 8005480:	24000044 	.word	0x24000044
 8005484:	240004d4 	.word	0x240004d4
 8005488:	24000040 	.word	0x24000040
 800548c:	24000528 	.word	0x24000528

08005490 <vTaskRemoveFromUnorderedEventList>:
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800549a:	4b62      	ldr	r3, [pc, #392]	; (8005624 <vTaskRemoveFromUnorderedEventList+0x194>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <vTaskRemoveFromUnorderedEventList+0x28>
    __asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	60fb      	str	r3, [r7, #12]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vTaskRemoveFromUnorderedEventList+0x26>
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <vTaskRemoveFromUnorderedEventList+0x54>
    __asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60bb      	str	r3, [r7, #8]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <vTaskRemoveFromUnorderedEventList+0x52>
    listREMOVE_ITEM( pxEventListItem );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d103      	bne.n	8005510 <vTaskRemoveFromUnorderedEventList+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	611a      	str	r2, [r3, #16]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	1e5a      	subs	r2, r3, #1
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	601a      	str	r2, [r3, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8005534:	609a      	str	r2, [r3, #8]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	3384      	adds	r3, #132	; 0x84
 800554c:	429a      	cmp	r2, r3
 800554e:	d104      	bne.n	800555a <vTaskRemoveFromUnorderedEventList+0xca>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	1e5a      	subs	r2, r3, #1
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005572:	4b2d      	ldr	r3, [pc, #180]	; (8005628 <vTaskRemoveFromUnorderedEventList+0x198>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d904      	bls.n	8005584 <vTaskRemoveFromUnorderedEventList+0xf4>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005580:	4a29      	ldr	r2, [pc, #164]	; (8005628 <vTaskRemoveFromUnorderedEventList+0x198>)
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800558a:	4928      	ldr	r1, [pc, #160]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	3304      	adds	r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	3284      	adds	r2, #132	; 0x84
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	609a      	str	r2, [r3, #8]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055d2:	441a      	add	r2, r3
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80055e0:	4912      	ldr	r1, [pc, #72]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	480e      	ldr	r0, [pc, #56]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4403      	add	r3, r0
 80055fc:	6019      	str	r1, [r3, #0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <vTaskRemoveFromUnorderedEventList+0x1a0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800560c:	429a      	cmp	r2, r3
 800560e:	d902      	bls.n	8005616 <vTaskRemoveFromUnorderedEventList+0x186>
        xYieldPending = pdTRUE;
 8005610:	4b08      	ldr	r3, [pc, #32]	; (8005634 <vTaskRemoveFromUnorderedEventList+0x1a4>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	3724      	adds	r7, #36	; 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2400053c 	.word	0x2400053c
 8005628:	2400051c 	.word	0x2400051c
 800562c:	24000044 	.word	0x24000044
 8005630:	24000040 	.word	0x24000040
 8005634:	24000528 	.word	0x24000528

08005638 <vTaskSwitchContext>:
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800563e:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <vTaskSwitchContext+0xfc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <vTaskSwitchContext+0x16>
        xYieldPending = pdTRUE;
 8005646:	4b3c      	ldr	r3, [pc, #240]	; (8005738 <vTaskSwitchContext+0x100>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
}
 800564c:	e06e      	b.n	800572c <vTaskSwitchContext+0xf4>
        xYieldPending = pdFALSE;
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <vTaskSwitchContext+0x100>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <vTaskSwitchContext+0x104>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	d111      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	3304      	adds	r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	429a      	cmp	r2, r3
 8005678:	d10b      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3308      	adds	r3, #8
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d105      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	330c      	adds	r3, #12
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	429a      	cmp	r2, r3
 8005690:	d008      	beq.n	80056a4 <vTaskSwitchContext+0x6c>
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <vTaskSwitchContext+0x104>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <vTaskSwitchContext+0x104>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	33b4      	adds	r3, #180	; 0xb4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f004 fc51 	bl	8009f46 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a4:	4b26      	ldr	r3, [pc, #152]	; (8005740 <vTaskSwitchContext+0x108>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e010      	b.n	80056ce <vTaskSwitchContext+0x96>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <vTaskSwitchContext+0x90>
    __asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	607b      	str	r3, [r7, #4]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <vTaskSwitchContext+0x8e>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	491d      	ldr	r1, [pc, #116]	; (8005744 <vTaskSwitchContext+0x10c>)
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0e4      	beq.n	80056ac <vTaskSwitchContext+0x74>
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a15      	ldr	r2, [pc, #84]	; (8005744 <vTaskSwitchContext+0x10c>)
 80056ee:	4413      	add	r3, r2
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3308      	adds	r3, #8
 8005704:	429a      	cmp	r2, r3
 8005706:	d104      	bne.n	8005712 <vTaskSwitchContext+0xda>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <vTaskSwitchContext+0x104>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <vTaskSwitchContext+0x108>)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <vTaskSwitchContext+0x104>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	33d4      	adds	r3, #212	; 0xd4
 8005728:	4a07      	ldr	r2, [pc, #28]	; (8005748 <vTaskSwitchContext+0x110>)
 800572a:	6013      	str	r3, [r2, #0]
}
 800572c:	bf00      	nop
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	2400053c 	.word	0x2400053c
 8005738:	24000528 	.word	0x24000528
 800573c:	24000040 	.word	0x24000040
 8005740:	2400051c 	.word	0x2400051c
 8005744:	24000044 	.word	0x24000044
 8005748:	240081cc 	.word	0x240081cc

0800574c <uxTaskResetEventItemValue>:
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575a:	607b      	str	r3, [r7, #4]
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800576c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    return uxReturn;
 8005770:	687b      	ldr	r3, [r7, #4]
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	24000040 	.word	0x24000040

08005784 <xTaskGetCurrentTaskHandle>:
    {
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
        xReturn = pxCurrentTCB;
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	607b      	str	r3, [r7, #4]
        return xReturn;
 8005790:	687b      	ldr	r3, [r7, #4]
    }
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	24000040 	.word	0x24000040

080057a4 <vTaskMissedYield>:
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <vTaskMissedYield+0x14>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	24000528 	.word	0x24000528

080057bc <xTaskGetSchedulerState>:
    {
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
        if( xSchedulerRunning == pdFALSE )
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <xTaskGetSchedulerState+0x34>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <xTaskGetSchedulerState+0x14>
            xReturn = taskSCHEDULER_NOT_STARTED;
 80057ca:	2301      	movs	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e008      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <xTaskGetSchedulerState+0x38>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xTaskGetSchedulerState+0x22>
                xReturn = taskSCHEDULER_RUNNING;
 80057d8:	2302      	movs	r3, #2
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e001      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
                xReturn = taskSCHEDULER_SUSPENDED;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
        return xReturn;
 80057e2:	687b      	ldr	r3, [r7, #4]
    }
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	24000520 	.word	0x24000520
 80057f4:	2400053c 	.word	0x2400053c

080057f8 <xTaskPriorityInherit>:
    {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8090 	beq.w	8005930 <xTaskPriorityInherit+0x138>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005816:	4b49      	ldr	r3, [pc, #292]	; (800593c <xTaskPriorityInherit+0x144>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800581e:	429a      	cmp	r2, r3
 8005820:	d27b      	bcs.n	800591a <xTaskPriorityInherit+0x122>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005828:	2b00      	cmp	r3, #0
 800582a:	db08      	blt.n	800583e <xTaskPriorityInherit+0x46>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800582c:	4b43      	ldr	r3, [pc, #268]	; (800593c <xTaskPriorityInherit+0x144>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005834:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <xTaskPriorityInherit+0x148>)
 8005854:	4413      	add	r3, r2
 8005856:	4299      	cmp	r1, r3
 8005858:	d155      	bne.n	8005906 <xTaskPriorityInherit+0x10e>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3384      	adds	r3, #132	; 0x84
 800585e:	4618      	mov	r0, r3
 8005860:	f7fb f926 	bl	8000ab0 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005864:	4b35      	ldr	r3, [pc, #212]	; (800593c <xTaskPriorityInherit+0x144>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005878:	4b32      	ldr	r3, [pc, #200]	; (8005944 <xTaskPriorityInherit+0x14c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d904      	bls.n	800588a <xTaskPriorityInherit+0x92>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005886:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <xTaskPriorityInherit+0x14c>)
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005890:	492b      	ldr	r1, [pc, #172]	; (8005940 <xTaskPriorityInherit+0x148>)
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3304      	adds	r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	3284      	adds	r2, #132	; 0x84
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058d8:	441a      	add	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058e6:	4916      	ldr	r1, [pc, #88]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	4812      	ldr	r0, [pc, #72]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4403      	add	r3, r0
 8005902:	6019      	str	r1, [r3, #0]
 8005904:	e006      	b.n	8005914 <xTaskPriorityInherit+0x11c>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005906:	4b0d      	ldr	r3, [pc, #52]	; (800593c <xTaskPriorityInherit+0x144>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                xReturn = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e00a      	b.n	8005930 <xTaskPriorityInherit+0x138>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <xTaskPriorityInherit+0x144>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005928:	429a      	cmp	r2, r3
 800592a:	d201      	bcs.n	8005930 <xTaskPriorityInherit+0x138>
                    xReturn = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
        return xReturn;
 8005930:	697b      	ldr	r3, [r7, #20]
    }
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	24000040 	.word	0x24000040
 8005940:	24000044 	.word	0x24000044
 8005944:	2400051c 	.word	0x2400051c

08005948 <xTaskPriorityDisinherit>:
    {
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
        if( pxMutexHolder != NULL )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8092 	beq.w	8005a84 <xTaskPriorityDisinherit+0x13c>
            configASSERT( pxTCB == pxCurrentTCB );
 8005960:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <xTaskPriorityDisinherit+0x148>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	429a      	cmp	r2, r3
 8005968:	d00a      	beq.n	8005980 <xTaskPriorityDisinherit+0x38>
    __asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	613b      	str	r3, [r7, #16]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <xTaskPriorityDisinherit+0x58>
    __asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80059a6:	1e5a      	subs	r2, r3, #1
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d062      	beq.n	8005a84 <xTaskPriorityDisinherit+0x13c>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d15d      	bne.n	8005a84 <xTaskPriorityDisinherit+0x13c>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	3384      	adds	r3, #132	; 0x84
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fb f86f 	bl	8000ab0 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    prvAddTaskToReadyList( pxTCB );
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80059f4:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <xTaskPriorityDisinherit+0x14c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d904      	bls.n	8005a06 <xTaskPriorityDisinherit+0xbe>
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a02:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <xTaskPriorityDisinherit+0x14c>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a0c:	4922      	ldr	r1, [pc, #136]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	3304      	adds	r3, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	3284      	adds	r2, #132	; 0x84
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a54:	441a      	add	r2, r3
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a62:	490d      	ldr	r1, [pc, #52]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	4809      	ldr	r0, [pc, #36]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4403      	add	r3, r0
 8005a7e:	6019      	str	r1, [r3, #0]
                    xReturn = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
        return xReturn;
 8005a84:	69fb      	ldr	r3, [r7, #28]
    }
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	24000040 	.word	0x24000040
 8005a94:	2400051c 	.word	0x2400051c
 8005a98:	24000044 	.word	0x24000044

08005a9c <vTaskPriorityDisinheritAfterTimeout>:
    {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	623b      	str	r3, [r7, #32]
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
        if( pxMutexHolder != NULL )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80a7 	beq.w	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
            configASSERT( pxTCB->uxMutexesHeld );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	613b      	str	r3, [r7, #16]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <vTaskPriorityDisinheritAfterTimeout+0x38>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d902      	bls.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae6:	e003      	b.n	8005af0 <vTaskPriorityDisinheritAfterTimeout+0x54>
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	429a      	cmp	r2, r3
 8005afa:	f000 8083 	beq.w	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d17c      	bne.n	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                    configASSERT( pxTCB != pxCurrentTCB );
 8005b0a:	4b40      	ldr	r3, [pc, #256]	; (8005c0c <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a3a      	ldr	r2, [r7, #32]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d10a      	bne.n	8005b2a <vTaskPriorityDisinheritAfterTimeout+0x8e>
    __asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <vTaskPriorityDisinheritAfterTimeout+0x8c>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b30:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db05      	blt.n	8005b50 <vTaskPriorityDisinheritAfterTimeout+0xb4>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005b62:	4413      	add	r3, r2
 8005b64:	4299      	cmp	r1, r3
 8005b66:	d14d      	bne.n	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	3384      	adds	r3, #132	; 0x84
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fa ff9f 	bl	8000ab0 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005b78:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d904      	bls.n	8005b8a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b86:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005b90:	491f      	ldr	r1, [pc, #124]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	3284      	adds	r2, #132	; 0x84
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005bd8:	441a      	add	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005be6:	490a      	ldr	r1, [pc, #40]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1c59      	adds	r1, r3, #1
 8005bf6:	4806      	ldr	r0, [pc, #24]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4403      	add	r3, r0
 8005c02:	6019      	str	r1, [r3, #0]
    }
 8005c04:	bf00      	nop
 8005c06:	3728      	adds	r7, #40	; 0x28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	24000040 	.word	0x24000040
 8005c10:	24000044 	.word	0x24000044
 8005c14:	2400051c 	.word	0x2400051c

08005c18 <uxTaskGetTaskNumber>:
    {
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
        if( xTask != NULL )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <uxTaskGetTaskNumber+0x1c>
            pxTCB = xTask;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	e001      	b.n	8005c38 <uxTaskGetTaskNumber+0x20>
            uxReturn = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
        return uxReturn;
 8005c38:	68fb      	ldr	r3, [r7, #12]
    }
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <vTaskSetTaskNumber>:
    {
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
        if( xTask != NULL )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <vTaskSetTaskNumber+0x1c>
            pxTCB = xTask;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    }
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <pvTaskIncrementMutexHeldCount>:
    {
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
        if( pxCurrentTCB != NULL )
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <pvTaskIncrementMutexHeldCount+0x1a>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005c82:	3201      	adds	r2, #1
 8005c84:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        return pxCurrentTCB;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
    }
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	24000040 	.word	0x24000040

08005c9c <vTaskInternalSetTimeOutState>:
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <vTaskInternalSetTimeOutState+0x24>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <vTaskInternalSetTimeOutState+0x28>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	605a      	str	r2, [r3, #4]
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	2400052c 	.word	0x2400052c
 8005cc4:	24000518 	.word	0x24000518

08005cc8 <prvTaskIsTaskSuspended>:
    {
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	613b      	str	r3, [r7, #16]
        configASSERT( xTask );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <prvTaskIsTaskSuspended+0x2c>
    __asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60fb      	str	r3, [r7, #12]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <prvTaskIsTaskSuspended+0x2a>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cfa:	4a0b      	ldr	r2, [pc, #44]	; (8005d28 <prvTaskIsTaskSuspended+0x60>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10c      	bne.n	8005d1a <prvTaskIsTaskSuspended+0x52>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <prvTaskIsTaskSuspended+0x64>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d006      	beq.n	8005d1a <prvTaskIsTaskSuspended+0x52>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <prvTaskIsTaskSuspended+0x52>
                    xReturn = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
        return xReturn;
 8005d1a:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	24000500 	.word	0x24000500
 8005d2c:	240004d4 	.word	0x240004d4

08005d30 <prvInitialiseTaskLists>:
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	e00c      	b.n	8005d56 <prvInitialiseTaskLists+0x26>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <prvInitialiseTaskLists+0x60>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fa fe26 	bl	800099c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3301      	adds	r3, #1
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b37      	cmp	r3, #55	; 0x37
 8005d5a:	d9ef      	bls.n	8005d3c <prvInitialiseTaskLists+0xc>
    vListInitialise( &xDelayedTaskList1 );
 8005d5c:	480d      	ldr	r0, [pc, #52]	; (8005d94 <prvInitialiseTaskLists+0x64>)
 8005d5e:	f7fa fe1d 	bl	800099c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005d62:	480d      	ldr	r0, [pc, #52]	; (8005d98 <prvInitialiseTaskLists+0x68>)
 8005d64:	f7fa fe1a 	bl	800099c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005d68:	480c      	ldr	r0, [pc, #48]	; (8005d9c <prvInitialiseTaskLists+0x6c>)
 8005d6a:	f7fa fe17 	bl	800099c <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8005d6e:	480c      	ldr	r0, [pc, #48]	; (8005da0 <prvInitialiseTaskLists+0x70>)
 8005d70:	f7fa fe14 	bl	800099c <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <prvInitialiseTaskLists+0x74>)
 8005d76:	f7fa fe11 	bl	800099c <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <prvInitialiseTaskLists+0x78>)
 8005d7c:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <prvInitialiseTaskLists+0x64>)
 8005d7e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <prvInitialiseTaskLists+0x7c>)
 8005d82:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <prvInitialiseTaskLists+0x68>)
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	24000044 	.word	0x24000044
 8005d94:	240004a4 	.word	0x240004a4
 8005d98:	240004b8 	.word	0x240004b8
 8005d9c:	240004d4 	.word	0x240004d4
 8005da0:	240004e8 	.word	0x240004e8
 8005da4:	24000500 	.word	0x24000500
 8005da8:	240004cc 	.word	0x240004cc
 8005dac:	240004d0 	.word	0x240004d0

08005db0 <prvIdleTask>:
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
        prvCheckTasksWaitingTermination();
 8005db8:	f000 f83d 	bl	8005e36 <prvCheckTasksWaitingTermination>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dbc:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <prvIdleTask+0x18>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d9f9      	bls.n	8005db8 <prvIdleTask+0x8>
                    taskYIELD();
 8005dc4:	df01      	svc	1
        prvCheckTasksWaitingTermination();
 8005dc6:	e7f7      	b.n	8005db8 <prvIdleTask+0x8>
 8005dc8:	24000044 	.word	0x24000044

08005dcc <prvDeleteTCB>:
    {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	33d4      	adds	r3, #212	; 0xd4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f016 fdf1 	bl	801c9c0 <_reclaim_reent>
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <prvDeleteTCB+0x30>
                    vPortFreeStack( pxTCB->pxStack );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fc48 	bl	8007684 <vPortFree>
                    vPortFree( pxTCB );
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 fc45 	bl	8007684 <vPortFree>
    }
 8005dfa:	e018      	b.n	8005e2e <prvDeleteTCB+0x62>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d103      	bne.n	8005e0e <prvDeleteTCB+0x42>
                    vPortFree( pxTCB );
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fc3c 	bl	8007684 <vPortFree>
    }
 8005e0c:	e00f      	b.n	8005e2e <prvDeleteTCB+0x62>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d00a      	beq.n	8005e2e <prvDeleteTCB+0x62>
    __asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60fb      	str	r3, [r7, #12]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <prvDeleteTCB+0x60>
    }
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <prvCheckTasksWaitingTermination>:
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e3c:	e019      	b.n	8005e72 <prvCheckTasksWaitingTermination+0x3c>
                taskENTER_CRITICAL();
 8005e3e:	f003 ff43 	bl	8009cc8 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <prvCheckTasksWaitingTermination+0x4e>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3384      	adds	r3, #132	; 0x84
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fa fe2e 	bl	8000ab0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <prvCheckTasksWaitingTermination+0x52>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	4a0b      	ldr	r2, [pc, #44]	; (8005e88 <prvCheckTasksWaitingTermination+0x52>)
 8005e5c:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e66:	6013      	str	r3, [r2, #0]
                taskEXIT_CRITICAL();
 8005e68:	f003 ff4c 	bl	8009d04 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ffad 	bl	8005dcc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e1      	bne.n	8005e3e <prvCheckTasksWaitingTermination+0x8>
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	240004e8 	.word	0x240004e8
 8005e88:	24000514 	.word	0x24000514
 8005e8c:	240004fc 	.word	0x240004fc

08005e90 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e9a:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea0:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3384      	adds	r3, #132	; 0x84
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fe02 	bl	8000ab0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb2:	d128      	bne.n	8005f06 <prvAddCurrentTaskToDelayedList+0x76>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d025      	beq.n	8005f06 <prvAddCurrentTaskToDelayedList+0x76>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eba:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005eca:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	6892      	ldr	r2, [r2, #8]
 8005ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005ed6:	4b23      	ldr	r3, [pc, #140]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	3284      	adds	r2, #132	; 0x84
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005f04:	e027      	b.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                if( xTimeToWake < xConstTickCount )
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d209      	bcs.n	8005f34 <prvAddCurrentTaskToDelayedList+0xa4>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3384      	adds	r3, #132	; 0x84
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f7fa fd62 	bl	80009f6 <vListInsert>
}
 8005f32:	e010      	b.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3384      	adds	r3, #132	; 0x84
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fa fd58 	bl	80009f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d202      	bcs.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6013      	str	r3, [r2, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	24000518 	.word	0x24000518
 8005f64:	24000040 	.word	0x24000040
 8005f68:	24000500 	.word	0x24000500
 8005f6c:	240004d0 	.word	0x240004d0
 8005f70:	240004cc 	.word	0x240004cc
 8005f74:	24000534 	.word	0x24000534

08005f78 <prvListTasksWithinSingleList>:
    {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d03f      	beq.n	8006012 <prvListTasksWithinSingleList+0x9a>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	623b      	str	r3, [r7, #32]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	605a      	str	r2, [r3, #4]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d104      	bne.n	8005fb6 <prvListTasksWithinSingleList+0x3e>
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	61fb      	str	r3, [r7, #28]
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	605a      	str	r2, [r3, #4]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d104      	bne.n	8005fe2 <prvListTasksWithinSingleList+0x6a>
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1899      	adds	r1, r3, r2
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7fd fbb2 	bl	8003768 <vTaskGetInfo>
                uxTask++;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	3301      	adds	r3, #1
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
            } while( pxNextTCB != pxFirstTCB );
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	429a      	cmp	r2, r3
 8006010:	d1d5      	bne.n	8005fbe <prvListTasksWithinSingleList+0x46>
        return uxTask;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006014:	4618      	mov	r0, r3
 8006016:	3728      	adds	r7, #40	; 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvTaskCheckFreeStackSpace>:
    {
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006028:	e005      	b.n	8006036 <prvTaskCheckFreeStackSpace+0x1a>
            pucStackByte -= portSTACK_GROWTH;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3301      	adds	r3, #1
 800602e:	607b      	str	r3, [r7, #4]
            ulCount++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2ba5      	cmp	r3, #165	; 0xa5
 800603c:	d0f5      	beq.n	800602a <prvTaskCheckFreeStackSpace+0xe>
        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	089b      	lsrs	r3, r3, #2
 8006042:	60fb      	str	r3, [r7, #12]
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	b29b      	uxth	r3, r3
    }
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <prvResetNextTaskUnblockTime>:
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvResetNextTaskUnblockTime+0x30>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <prvResetNextTaskUnblockTime+0x18>
        xNextTaskUnblockTime = portMAX_DELAY;
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <prvResetNextTaskUnblockTime+0x34>)
 8006064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006068:	601a      	str	r2, [r3, #0]
}
 800606a:	e005      	b.n	8006078 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <prvResetNextTaskUnblockTime+0x30>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a04      	ldr	r2, [pc, #16]	; (8006088 <prvResetNextTaskUnblockTime+0x34>)
 8006076:	6013      	str	r3, [r2, #0]
}
 8006078:	bf00      	nop
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	240004cc 	.word	0x240004cc
 8006088:	24000534 	.word	0x24000534

0800608c <prvInitialiseNewTask>:
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
        if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	2b00      	cmp	r3, #0
 800609e:	da02      	bge.n	80060a6 <prvInitialiseNewTask+0x1a>
            xRunPrivileged = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	e001      	b.n	80060aa <prvInitialiseNewTask+0x1e>
            xRunPrivileged = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	623b      	str	r3, [r7, #32]
        uxPriority &= ~portPRIVILEGE_BIT;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	461a      	mov	r2, r3
 80060be:	21a5      	movs	r1, #165	; 0xa5
 80060c0:	f016 fafa 	bl	801c6b8 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80060d0:	440b      	add	r3, r1
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	61fb      	str	r3, [r7, #28]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	61fb      	str	r3, [r7, #28]
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <prvInitialiseNewTask+0x74>
    __asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	61bb      	str	r3, [r7, #24]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <prvInitialiseNewTask+0x72>
    if( pcName != NULL )
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01f      	beq.n	8006146 <prvInitialiseNewTask+0xba>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006106:	2300      	movs	r3, #0
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	e012      	b.n	8006132 <prvInitialiseNewTask+0xa6>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	4413      	add	r3, r2
 8006112:	7819      	ldrb	r1, [r3, #0]
 8006114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	4413      	add	r3, r2
 800611a:	33b4      	adds	r3, #180	; 0xb4
 800611c:	460a      	mov	r2, r1
 800611e:	701a      	strb	r2, [r3, #0]
            if( pcName[ x ] == ( char ) 0x00 )
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	4413      	add	r3, r2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <prvInitialiseNewTask+0xae>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	3301      	adds	r3, #1
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	2b0f      	cmp	r3, #15
 8006136:	d9e9      	bls.n	800610c <prvInitialiseNewTask+0x80>
 8006138:	e000      	b.n	800613c <prvInitialiseNewTask+0xb0>
                break;
 800613a:	bf00      	nop
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	2200      	movs	r2, #0
 8006140:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8006144:	e003      	b.n	800614e <prvInitialiseNewTask+0xc2>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2200      	movs	r2, #0
 800614a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2b37      	cmp	r3, #55	; 0x37
 8006152:	d90a      	bls.n	800616a <prvInitialiseNewTask+0xde>
    __asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	617b      	str	r3, [r7, #20]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <prvInitialiseNewTask+0xdc>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	2b37      	cmp	r3, #55	; 0x37
 800616e:	d901      	bls.n	8006174 <prvInitialiseNewTask+0xe8>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006170:	2337      	movs	r3, #55	; 0x37
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
    pxNewTCB->uxPriority = uxPriority;
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006178:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            pxNewTCB->uxBasePriority = uxPriority;
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006180:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            pxNewTCB->uxMutexesHeld = 0;
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	3384      	adds	r3, #132	; 0x84
 8006190:	4618      	mov	r0, r3
 8006192:	f7fa fc23 	bl	80009dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	3398      	adds	r3, #152	; 0x98
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa fc1e 	bl	80009dc <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	1d18      	adds	r0, r3, #4
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ca:	f000 ff0d 	bl	8006fe8 <vPortStoreTaskMPUSettings>
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80061d4:	220c      	movs	r2, #12
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f016 fa6d 	bl	801c6b8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061e4:	2203      	movs	r2, #3
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f016 fa65 	bl	801c6b8 <memset>
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	33d4      	adds	r3, #212	; 0xd4
 80061f2:	2260      	movs	r2, #96	; 0x60
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f016 fa5e 	bl	801c6b8 <memset>
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	4a0f      	ldr	r2, [pc, #60]	; (800623c <prvInitialiseNewTask+0x1b0>)
 8006200:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	4a0e      	ldr	r2, [pc, #56]	; (8006240 <prvInitialiseNewTask+0x1b4>)
 8006208:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <prvInitialiseNewTask+0x1b8>)
 8006210:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	69f8      	ldr	r0, [r7, #28]
 800621c:	f000 fe00 	bl	8006e20 <pxPortInitialiseStack>
 8006220:	4602      	mov	r2, r0
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	601a      	str	r2, [r3, #0]
    if( pxCreatedTask != NULL )
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <prvInitialiseNewTask+0x1a6>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006230:	601a      	str	r2, [r3, #0]
}
 8006232:	bf00      	nop
 8006234:	3728      	adds	r7, #40	; 0x28
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	24008508 	.word	0x24008508
 8006240:	24008528 	.word	0x24008528
 8006244:	240084e8 	.word	0x240084e8

08006248 <prvAddNewTaskToReadyList>:
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8006250:	f003 fd3a 	bl	8009cc8 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8006254:	4b48      	ldr	r3, [pc, #288]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	4a47      	ldr	r2, [pc, #284]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 800625c:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 800625e:	4b47      	ldr	r3, [pc, #284]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <prvAddNewTaskToReadyList+0x32>
            pxCurrentTCB = pxNewTCB;
 8006266:	4a45      	ldr	r2, [pc, #276]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6013      	str	r3, [r2, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d112      	bne.n	800629a <prvAddNewTaskToReadyList+0x52>
                prvInitialiseTaskLists();
 8006274:	f7ff fd5c 	bl	8005d30 <prvInitialiseTaskLists>
 8006278:	e00f      	b.n	800629a <prvAddNewTaskToReadyList+0x52>
            if( xSchedulerRunning == pdFALSE )
 800627a:	4b41      	ldr	r3, [pc, #260]	; (8006380 <prvAddNewTaskToReadyList+0x138>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <prvAddNewTaskToReadyList+0x52>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006282:	4b3e      	ldr	r3, [pc, #248]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006290:	429a      	cmp	r2, r3
 8006292:	d802      	bhi.n	800629a <prvAddNewTaskToReadyList+0x52>
                    pxCurrentTCB = pxNewTCB;
 8006294:	4a39      	ldr	r2, [pc, #228]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6013      	str	r3, [r2, #0]
        uxTaskNumber++;
 800629a:	4b3a      	ldr	r3, [pc, #232]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	4a38      	ldr	r2, [pc, #224]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 80062a2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062a4:	4b37      	ldr	r3, [pc, #220]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        prvAddTaskToReadyList( pxNewTCB );
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062b4:	4b34      	ldr	r3, [pc, #208]	; (8006388 <prvAddNewTaskToReadyList+0x140>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d904      	bls.n	80062c6 <prvAddNewTaskToReadyList+0x7e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062c2:	4a31      	ldr	r2, [pc, #196]	; (8006388 <prvAddNewTaskToReadyList+0x140>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062cc:	492f      	ldr	r1, [pc, #188]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3304      	adds	r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	3284      	adds	r2, #132	; 0x84
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006322:	491a      	ldr	r1, [pc, #104]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	4816      	ldr	r0, [pc, #88]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4403      	add	r3, r0
 800633e:	6019      	str	r1, [r3, #0]
    taskEXIT_CRITICAL();
 8006340:	f003 fce0 	bl	8009d04 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8006344:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <prvAddNewTaskToReadyList+0x138>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d010      	beq.n	800636e <prvAddNewTaskToReadyList+0x126>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800635a:	429a      	cmp	r2, r3
 800635c:	d207      	bcs.n	800636e <prvAddNewTaskToReadyList+0x126>
            taskYIELD_IF_USING_PREEMPTION();
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <prvAddNewTaskToReadyList+0x148>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	24000514 	.word	0x24000514
 800637c:	24000040 	.word	0x24000040
 8006380:	24000520 	.word	0x24000520
 8006384:	24000530 	.word	0x24000530
 8006388:	2400051c 	.word	0x2400051c
 800638c:	24000044 	.word	0x24000044
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80063a2:	202c      	movs	r0, #44	; 0x2c
 80063a4:	f001 f88a 	bl	80074bc <pvPortMalloc>
 80063a8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fcf2 	bl	8006db0 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80063cc:	697b      	ldr	r3, [r7, #20]
        }
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b08a      	sub	sp, #40	; 0x28
 80063da:	af02      	add	r7, sp, #8
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticTimer_t equals the size of the real timer
                     * structure. */
                    volatile size_t xSize = sizeof( StaticTimer_t );
 80063e4:	232c      	movs	r3, #44	; 0x2c
 80063e6:	613b      	str	r3, [r7, #16]
                    configASSERT( xSize == sizeof( Timer_t ) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b2c      	cmp	r3, #44	; 0x2c
 80063ec:	d00a      	beq.n	8006404 <xTimerCreateStatic+0x2e>
    __asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61bb      	str	r3, [r7, #24]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <xTimerCreateStatic+0x2c>
                    ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006404:	693b      	ldr	r3, [r7, #16]
                }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xTimerCreateStatic+0x4c>
    __asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	617b      	str	r3, [r7, #20]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xTimerCreateStatic+0x4a>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	61fb      	str	r3, [r7, #28]

            if( pxNewTimer != NULL )
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <xTimerCreateStatic+0x72>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fcb4 	bl	8006db0 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006448:	69fb      	ldr	r3, [r7, #28]
        }
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <pvTimerGetTimerID+0x28>
    __asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800647a:	f003 fc25 	bl	8009cc8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006484:	f003 fc3e 	bl	8009d04 <vPortExitCritical>

        return pvReturn;
 8006488:	693b      	ldr	r3, [r7, #16]
    }
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60fb      	str	r3, [r7, #12]

        configASSERT( xTimer );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <vTimerSetTimerID+0x2a>
    __asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <vTimerSetTimerID+0x28>

        taskENTER_CRITICAL();
 80064bc:	f003 fc04 	bl	8009cc8 <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	61da      	str	r2, [r3, #28]
        }
        taskEXIT_CRITICAL();
 80064c6:	f003 fc1d 	bl	8009d04 <vPortExitCritical>
    }
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <xTimerIsTimerActive>:
    {
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xTimerIsTimerActive+0x28>
    __asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60fb      	str	r3, [r7, #12]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xTimerIsTimerActive+0x26>
        taskENTER_CRITICAL();
 80064fa:	f003 fbe5 	bl	8009cc8 <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <xTimerIsTimerActive+0x40>
                xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e001      	b.n	8006516 <xTimerIsTimerActive+0x44>
                xReturn = pdTRUE;
 8006512:	2301      	movs	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8006516:	f003 fbf5 	bl	8009d04 <vPortExitCritical>
        return xReturn;
 800651a:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <xTimerGetTimerDaemonTaskHandle>:
    {
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
        configASSERT( ( xTimerTaskHandle != NULL ) );
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <xTimerGetTimerDaemonTaskHandle+0x34>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xTimerGetTimerDaemonTaskHandle+0x24>
    __asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	607b      	str	r3, [r7, #4]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTimerGetTimerDaemonTaskHandle+0x22>
        return xTimerTaskHandle;
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <xTimerGetTimerDaemonTaskHandle+0x34>)
 800654a:	681b      	ldr	r3, [r3, #0]
    }
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	24000574 	.word	0x24000574

0800655c <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	; 0x28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800656a:	f06f 0301 	mvn.w	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <xTimerPendFunctionCallFromISR+0x3c>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	f107 0114 	add.w	r1, r7, #20
 8006584:	2300      	movs	r3, #0
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	f7fa fe48 	bl	800121c <xQueueGenericSendFromISR>
 800658c:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	24000570 	.word	0x24000570

0800659c <xTimerPendFunctionCall>:

        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait )
        {
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
            BaseType_t xReturn;

            /* This function can only be called after a timer has been created or
             * after the scheduler has been started because, until then, the timer
             * queue does not exist. */
            configASSERT( xTimerQueue );
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <xTimerPendFunctionCall+0x5c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <xTimerPendFunctionCall+0x2c>
    __asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	623b      	str	r3, [r7, #32]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <xTimerPendFunctionCall+0x2a>

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 80065c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065cc:	613b      	str	r3, [r7, #16]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	61fb      	str	r3, [r7, #28]

            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065da:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <xTimerPendFunctionCall+0x5c>)
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f107 0110 	add.w	r1, r7, #16
 80065e2:	2300      	movs	r3, #0
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	f7fa fa8d 	bl	8000b04 <xQueueGenericSend>
 80065ea:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 80065ee:	4618      	mov	r0, r3
 80065f0:	3728      	adds	r7, #40	; 0x28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	24000570 	.word	0x24000570

080065fc <pcTimerGetName>:
    {
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <pcTimerGetName+0x28>
    __asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60bb      	str	r3, [r7, #8]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <pcTimerGetName+0x26>
        return pxTimer->pcTimerName;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
    }
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <vTimerSetReloadMode>:
    {
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
        Timer_t * pxTimer = xTimer;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <vTimerSetReloadMode+0x2a>
    __asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	60bb      	str	r3, [r7, #8]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <vTimerSetReloadMode+0x28>
        taskENTER_CRITICAL();
 800665e:	f003 fb33 	bl	8009cc8 <vPortEnterCritical>
            if( uxAutoReload != pdFALSE )
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <vTimerSetReloadMode+0x48>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666e:	f043 0304 	orr.w	r3, r3, #4
 8006672:	b2da      	uxtb	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800667a:	e008      	b.n	800668e <vTimerSetReloadMode+0x5a>
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006682:	f023 0304 	bic.w	r3, r3, #4
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        taskEXIT_CRITICAL();
 800668e:	f003 fb39 	bl	8009d04 <vPortExitCritical>
    }
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <uxTimerGetReloadMode>:
    {
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <uxTimerGetReloadMode+0x28>
    __asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	60fb      	str	r3, [r7, #12]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <uxTimerGetReloadMode+0x26>
        taskENTER_CRITICAL();
 80066c2:	f003 fb01 	bl	8009cc8 <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <uxTimerGetReloadMode+0x40>
                uxReturn = ( UBaseType_t ) pdFALSE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e001      	b.n	80066de <uxTimerGetReloadMode+0x44>
                uxReturn = ( UBaseType_t ) pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 80066de:	f003 fb11 	bl	8009d04 <vPortExitCritical>
        return uxReturn;
 80066e2:	697b      	ldr	r3, [r7, #20]
    }
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <xTimerGetPeriod>:
    {
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xTimerGetPeriod+0x28>
    __asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60bb      	str	r3, [r7, #8]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTimerGetPeriod+0x26>
        return pxTimer->xTimerPeriodInTicks;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	699b      	ldr	r3, [r3, #24]
    }
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <xTimerGetExpiryTime>:
    {
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	617b      	str	r3, [r7, #20]
        configASSERT( xTimer );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <xTimerGetExpiryTime+0x28>
    __asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <xTimerGetExpiryTime+0x26>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]
        return xReturn;
 8006752:	693b      	ldr	r3, [r7, #16]
    }
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <xTimerCreateTimerTask>:
    {
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	; 0x28
 8006764:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]
        prvCheckForValidListAndQueue();
 800676a:	f000 f8ab 	bl	80068c4 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800676e:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <xTimerCreateTimerTask+0x80>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d021      	beq.n	80067ba <xTimerCreateTimerTask+0x5a>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800677e:	1d3a      	adds	r2, r7, #4
 8006780:	f107 0108 	add.w	r1, r7, #8
 8006784:	f107 030c 	add.w	r3, r7, #12
 8006788:	4618      	mov	r0, r3
 800678a:	f003 fbff 	bl	8009f8c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	9202      	str	r2, [sp, #8]
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <xTimerCreateTimerTask+0x84>)
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2300      	movs	r3, #0
 800679e:	460a      	mov	r2, r1
 80067a0:	4911      	ldr	r1, [pc, #68]	; (80067e8 <xTimerCreateTimerTask+0x88>)
 80067a2:	4812      	ldr	r0, [pc, #72]	; (80067ec <xTimerCreateTimerTask+0x8c>)
 80067a4:	f7fc fccb 	bl	800313e <xTaskCreateStatic>
 80067a8:	4603      	mov	r3, r0
 80067aa:	4a11      	ldr	r2, [pc, #68]	; (80067f0 <xTimerCreateTimerTask+0x90>)
 80067ac:	6013      	str	r3, [r2, #0]
                    if( xTimerTaskHandle != NULL )
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <xTimerCreateTimerTask+0x90>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <xTimerCreateTimerTask+0x5a>
                        xReturn = pdPASS;
 80067b6:	2301      	movs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
        configASSERT( xReturn );
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xTimerCreateTimerTask+0x76>
    __asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	613b      	str	r3, [r7, #16]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xTimerCreateTimerTask+0x74>
        return xReturn;
 80067d6:	697b      	ldr	r3, [r7, #20]
    }
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	24000570 	.word	0x24000570
 80067e4:	80000002 	.word	0x80000002
 80067e8:	24008238 	.word	0x24008238
 80067ec:	08006945 	.word	0x08006945
 80067f0:	24000574 	.word	0x24000574

080067f4 <xTimerGenericCommand>:
    {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( xTimer );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xTimerGenericCommand+0x2e>
    __asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	623b      	str	r3, [r7, #32]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xTimerGenericCommand+0x2c>
        if( xTimerQueue != NULL )
 8006822:	4b1a      	ldr	r3, [pc, #104]	; (800688c <xTimerGenericCommand+0x98>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02a      	beq.n	8006880 <xTimerGenericCommand+0x8c>
            xMessage.xMessageID = xCommandID;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	61bb      	str	r3, [r7, #24]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b05      	cmp	r3, #5
 800683a:	dc18      	bgt.n	800686e <xTimerGenericCommand+0x7a>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800683c:	f7fe ffbe 	bl	80057bc <xTaskGetSchedulerState>
 8006840:	4603      	mov	r3, r0
 8006842:	2b02      	cmp	r3, #2
 8006844:	d109      	bne.n	800685a <xTimerGenericCommand+0x66>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <xTimerGenericCommand+0x98>)
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f107 0110 	add.w	r1, r7, #16
 800684e:	2300      	movs	r3, #0
 8006850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006852:	f7fa f957 	bl	8000b04 <xQueueGenericSend>
 8006856:	6278      	str	r0, [r7, #36]	; 0x24
 8006858:	e012      	b.n	8006880 <xTimerGenericCommand+0x8c>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <xTimerGenericCommand+0x98>)
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	f107 0110 	add.w	r1, r7, #16
 8006862:	2300      	movs	r3, #0
 8006864:	2200      	movs	r2, #0
 8006866:	f7fa f94d 	bl	8000b04 <xQueueGenericSend>
 800686a:	6278      	str	r0, [r7, #36]	; 0x24
 800686c:	e008      	b.n	8006880 <xTimerGenericCommand+0x8c>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800686e:	4b07      	ldr	r3, [pc, #28]	; (800688c <xTimerGenericCommand+0x98>)
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	f107 0110 	add.w	r1, r7, #16
 8006876:	2300      	movs	r3, #0
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	f7fa fccf 	bl	800121c <xQueueGenericSendFromISR>
 800687e:	6278      	str	r0, [r7, #36]	; 0x24
        return xReturn;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006882:	4618      	mov	r0, r3
 8006884:	3728      	adds	r7, #40	; 0x28
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	24000570 	.word	0x24000570

08006890 <vTimerSetTimerNumber>:

    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	625a      	str	r2, [r3, #36]	; 0x24
        }
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <uxTimerGetTimerNumber>:
        {
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <prvCheckForValidListAndQueue>:
    {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af02      	add	r7, sp, #8
        taskENTER_CRITICAL();
 80068ca:	f003 f9fd 	bl	8009cc8 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d120      	bne.n	8006918 <prvCheckForValidListAndQueue+0x54>
                vListInitialise( &xActiveTimerList1 );
 80068d6:	4814      	ldr	r0, [pc, #80]	; (8006928 <prvCheckForValidListAndQueue+0x64>)
 80068d8:	f7fa f860 	bl	800099c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80068dc:	4813      	ldr	r0, [pc, #76]	; (800692c <prvCheckForValidListAndQueue+0x68>)
 80068de:	f7fa f85d 	bl	800099c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <prvCheckForValidListAndQueue+0x6c>)
 80068e4:	4a10      	ldr	r2, [pc, #64]	; (8006928 <prvCheckForValidListAndQueue+0x64>)
 80068e6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80068e8:	4b12      	ldr	r3, [pc, #72]	; (8006934 <prvCheckForValidListAndQueue+0x70>)
 80068ea:	4a10      	ldr	r2, [pc, #64]	; (800692c <prvCheckForValidListAndQueue+0x68>)
 80068ec:	601a      	str	r2, [r3, #0]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068ee:	2300      	movs	r3, #0
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4b11      	ldr	r3, [pc, #68]	; (8006938 <prvCheckForValidListAndQueue+0x74>)
 80068f4:	4a11      	ldr	r2, [pc, #68]	; (800693c <prvCheckForValidListAndQueue+0x78>)
 80068f6:	2110      	movs	r1, #16
 80068f8:	200a      	movs	r0, #10
 80068fa:	f7fb fa2b 	bl	8001d54 <xQueueGenericCreateStatic>
 80068fe:	4603      	mov	r3, r0
 8006900:	4a08      	ldr	r2, [pc, #32]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 8006902:	6013      	str	r3, [r2, #0]
                        if( xTimerQueue != NULL )
 8006904:	4b07      	ldr	r3, [pc, #28]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <prvCheckForValidListAndQueue+0x54>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	490b      	ldr	r1, [pc, #44]	; (8006940 <prvCheckForValidListAndQueue+0x7c>)
 8006912:	4618      	mov	r0, r3
 8006914:	f7fb f912 	bl	8001b3c <vQueueAddToRegistry>
        taskEXIT_CRITICAL();
 8006918:	f003 f9f4 	bl	8009d04 <vPortExitCritical>
    }
 800691c:	bf00      	nop
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	24000570 	.word	0x24000570
 8006928:	24000540 	.word	0x24000540
 800692c:	24000554 	.word	0x24000554
 8006930:	24000568 	.word	0x24000568
 8006934:	2400056c 	.word	0x2400056c
 8006938:	2400057c 	.word	0x2400057c
 800693c:	240005cc 	.word	0x240005cc
 8006940:	24008240 	.word	0x24008240

08006944 <prvTimerTask>:
    {
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800694c:	f107 0308 	add.w	r3, r7, #8
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9bb 	bl	8006ccc <prvGetNextExpireTime>
 8006956:	60f8      	str	r0, [r7, #12]
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4619      	mov	r1, r3
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f9d9 	bl	8006d14 <prvProcessTimerOrBlockTask>
            prvProcessReceivedCommands();
 8006962:	f000 f801 	bl	8006968 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006966:	e7f1      	b.n	800694c <prvTimerTask+0x8>

08006968 <prvProcessReceivedCommands>:
    {
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800696e:	e0c2      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da18      	bge.n	80069a8 <prvProcessReceivedCommands+0x40>
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	3304      	adds	r3, #4
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( pxCallback );
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <prvProcessReceivedCommands+0x30>
    __asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	61bb      	str	r3, [r7, #24]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <prvProcessReceivedCommands+0x2e>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	6850      	ldr	r0, [r2, #4]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	6892      	ldr	r2, [r2, #8]
 80069a4:	4611      	mov	r1, r2
 80069a6:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f2c0 80a2 	blt.w	8006af4 <prvProcessReceivedCommands+0x18c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	623b      	str	r3, [r7, #32]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <prvProcessReceivedCommands+0x5e>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fa f875 	bl	8000ab0 <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069c6:	463b      	mov	r3, r7
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 f95f 	bl	8006c8c <prvSampleTimeNow>
 80069ce:	61f8      	str	r0, [r7, #28]
                switch( xMessage.xMessageID )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f200 808e 	bhi.w	8006af6 <prvProcessReceivedCommands+0x18e>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <prvProcessReceivedCommands+0x78>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a05 	.word	0x08006a05
 80069e8:	08006a6d 	.word	0x08006a6d
 80069ec:	08006a81 	.word	0x08006a81
 80069f0:	08006acb 	.word	0x08006acb
 80069f4:	08006a05 	.word	0x08006a05
 80069f8:	08006a05 	.word	0x08006a05
 80069fc:	08006a6d 	.word	0x08006a6d
 8006a00:	08006a81 	.word	0x08006a81
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	18d1      	adds	r1, r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	6a38      	ldr	r0, [r7, #32]
 8006a24:	f000 f87a 	bl	8006b1c <prvInsertTimerInActiveList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d063      	beq.n	8006af6 <prvProcessReceivedCommands+0x18e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <prvProcessReceivedCommands+0xe8>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	4413      	add	r3, r2
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6a38      	ldr	r0, [r7, #32]
 8006a4a:	f000 f8a9 	bl	8006ba0 <prvReloadTimer>
 8006a4e:	e008      	b.n	8006a62 <prvProcessReceivedCommands+0xfa>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	6a38      	ldr	r0, [r7, #32]
 8006a68:	4798      	blx	r3
                        break;
 8006a6a:	e044      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006a7e:	e03a      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <prvProcessReceivedCommands+0x14e>
    __asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	617b      	str	r3, [r7, #20]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <prvProcessReceivedCommands+0x14c>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	18d1      	adds	r1, r2, r3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	6a38      	ldr	r0, [r7, #32]
 8006ac4:	f000 f82a 	bl	8006b1c <prvInsertTimerInActiveList>
                        break;
 8006ac8:	e015      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <prvProcessReceivedCommands+0x178>
                                    vPortFree( pxTimer );
 8006ad8:	6a38      	ldr	r0, [r7, #32]
 8006ada:	f000 fdd3 	bl	8007684 <vPortFree>
 8006ade:	e00a      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006af2:	e000      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
            }
 8006af4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <prvProcessReceivedCommands+0x1b0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	1d39      	adds	r1, r7, #4
 8006afc:	2200      	movs	r2, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fa fa49 	bl	8000f96 <xQueueReceive>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f47f af32 	bne.w	8006970 <prvProcessReceivedCommands+0x8>
    }
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	3728      	adds	r7, #40	; 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	24000570 	.word	0x24000570

08006b1c <prvInsertTimerInActiveList>:
    {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	611a      	str	r2, [r3, #16]
        if( xNextExpiryTime <= xTimeNow )
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d812      	bhi.n	8006b68 <prvInsertTimerInActiveList+0x4c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d302      	bcc.n	8006b56 <prvInsertTimerInActiveList+0x3a>
                xProcessTimerNow = pdTRUE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e01b      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <prvInsertTimerInActiveList+0x7c>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f7f9 ff48 	bl	80009f6 <vListInsert>
 8006b66:	e012      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d206      	bcs.n	8006b7e <prvInsertTimerInActiveList+0x62>
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <prvInsertTimerInActiveList+0x62>
                xProcessTimerNow = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e007      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <prvInsertTimerInActiveList+0x80>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f7f9 ff34 	bl	80009f6 <vListInsert>
        return xProcessTimerNow;
 8006b8e:	697b      	ldr	r3, [r7, #20]
    }
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	2400056c 	.word	0x2400056c
 8006b9c:	24000568 	.word	0x24000568

08006ba0 <prvReloadTimer>:
    {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006bac:	e008      	b.n	8006bc0 <prvReloadTimer+0x20>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	18d1      	adds	r1, r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff ffa5 	bl	8006b1c <prvInsertTimerInActiveList>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1ea      	bne.n	8006bae <prvReloadTimer+0xe>
    }
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <prvProcessExpiredTimer>:
    {
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <prvProcessExpiredTimer+0x5a>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	60fb      	str	r3, [r7, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7f9 ff58 	bl	8000ab0 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <prvProcessExpiredTimer+0x38>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff ffc4 	bl	8006ba0 <prvReloadTimer>
 8006c18:	e008      	b.n	8006c2c <prvProcessExpiredTimer+0x4a>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	4798      	blx	r3
    }
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	24000568 	.word	0x24000568

08006c40 <prvSwitchTimerLists>:
    {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c46:	e009      	b.n	8006c5c <prvSwitchTimerLists+0x1c>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	603b      	str	r3, [r7, #0]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006c52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c56:	6838      	ldr	r0, [r7, #0]
 8006c58:	f7ff ffc3 	bl	8006be2 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <prvSwitchTimerLists+0x8>
        pxTemp = pxCurrentTimerList;
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <prvSwitchTimerLists+0x48>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c72:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006c74:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <prvSwitchTimerLists+0x48>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6013      	str	r3, [r2, #0]
    }
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	24000568 	.word	0x24000568
 8006c88:	2400056c 	.word	0x2400056c

08006c8c <prvSampleTimeNow>:
    {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
        xTimeNow = xTaskGetTickCount();
 8006c94:	f7fd fa20 	bl	80040d8 <xTaskGetTickCount>
 8006c98:	60f8      	str	r0, [r7, #12]
        if( xTimeNow < xLastTime )
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <prvSampleTimeNow+0x3c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d205      	bcs.n	8006cb0 <prvSampleTimeNow+0x24>
            prvSwitchTimerLists();
 8006ca4:	f7ff ffcc 	bl	8006c40 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <prvSampleTimeNow+0x2a>
            *pxTimerListsWereSwitched = pdFALSE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
        xLastTime = xTimeNow;
 8006cb6:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <prvSampleTimeNow+0x3c>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6013      	str	r3, [r2, #0]
        return xTimeNow;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	24000578 	.word	0x24000578

08006ccc <prvGetNextExpireTime>:
    {
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <prvGetNextExpireTime+0x44>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <prvGetNextExpireTime+0x16>
 8006cde:	2201      	movs	r2, #1
 8006ce0:	e000      	b.n	8006ce4 <prvGetNextExpireTime+0x18>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d105      	bne.n	8006cfc <prvGetNextExpireTime+0x30>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <prvGetNextExpireTime+0x44>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e001      	b.n	8006d00 <prvGetNextExpireTime+0x34>
            xNextExpireTime = ( TickType_t ) 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
        return xNextExpireTime;
 8006d00:	68fb      	ldr	r3, [r7, #12]
    }
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	24000568 	.word	0x24000568

08006d14 <prvProcessTimerOrBlockTask>:
    {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
        vTaskSuspendAll();
 8006d1e:	f7fd f8b7 	bl	8003e90 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff ffb0 	bl	8006c8c <prvSampleTimeNow>
 8006d2c:	60f8      	str	r0, [r7, #12]
            if( xTimerListsWereSwitched == pdFALSE )
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d130      	bne.n	8006d96 <prvProcessTimerOrBlockTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <prvProcessTimerOrBlockTask+0x3c>
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d806      	bhi.n	8006d50 <prvProcessTimerOrBlockTask+0x3c>
                    ( void ) xTaskResumeAll();
 8006d42:	f7fd f8b3 	bl	8003eac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff ff4a 	bl	8006be2 <prvProcessExpiredTimer>
    }
 8006d4e:	e024      	b.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d56:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <prvProcessTimerOrBlockTask+0x90>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <prvProcessTimerOrBlockTask+0x50>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <prvProcessTimerOrBlockTask+0x52>
 8006d64:	2300      	movs	r3, #0
 8006d66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d68:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <prvProcessTimerOrBlockTask+0x94>)
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	f7fb f84b 	bl	8001e10 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006d7a:	f7fd f897 	bl	8003eac <xTaskResumeAll>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006d84:	4b09      	ldr	r3, [pc, #36]	; (8006dac <prvProcessTimerOrBlockTask+0x98>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
    }
 8006d94:	e001      	b.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006d96:	f7fd f889 	bl	8003eac <xTaskResumeAll>
    }
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2400056c 	.word	0x2400056c
 8006da8:	24000570 	.word	0x24000570
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <prvInitialiseNewTimer>:
    {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <prvInitialiseNewTimer+0x2a>
    __asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	617b      	str	r3, [r7, #20]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <prvInitialiseNewTimer+0x28>
        prvCheckForValidListAndQueue();
 8006dda:	f7ff fd73 	bl	80068c4 <prvCheckForValidListAndQueue>
        pxNewTimer->pcTimerName = pcTimerName;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7f9 fdee 	bl	80009dc <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <prvInitialiseNewTimer+0x68>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e0c:	f043 0304 	orr.w	r3, r3, #4
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 8006e18:	bf00      	nop
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <pxPortInitialiseStack>:
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters,
                                     BaseType_t xRunPrivileged )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3b04      	subs	r3, #4
 8006e32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e3a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 0201 	bic.w	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3b04      	subs	r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = 0;                                                   /* LR */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3b14      	subs	r3, #20
 8006e5c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3b04      	subs	r3, #4
 8006e68:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f06f 0202 	mvn.w	r2, #2
 8006e70:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 9; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3b24      	subs	r3, #36	; 0x24
 8006e76:	60fb      	str	r3, [r7, #12]

    if( xRunPrivileged == pdTRUE )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d103      	bne.n	8006e86 <pxPortInitialiseStack+0x66>
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_PRIVILEGED;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2202      	movs	r2, #2
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e002      	b.n	8006e8c <pxPortInitialiseStack+0x6c>
    }
    else
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_UNPRIVILEGED;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2203      	movs	r2, #3
 8006e8a:	601a      	str	r2, [r3, #0]
    }

    return pxTopOfStack;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
    configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	; (8006f98 <xPortStartScheduler+0xfe>)
 8006ea2:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	22ff      	movs	r2, #255	; 0xff
 8006eb0:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	4b35      	ldr	r3, [pc, #212]	; (8006f9c <xPortStartScheduler+0x102>)
 8006ec6:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ec8:	4b35      	ldr	r3, [pc, #212]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006eca:	2207      	movs	r2, #7
 8006ecc:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ece:	e009      	b.n	8006ee4 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8006ed0:	4b33      	ldr	r3, [pc, #204]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ed8:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	2b80      	cmp	r3, #128	; 0x80
 8006eee:	d0ef      	beq.n	8006ed0 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f1c3 0307 	rsb	r3, r3, #7
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d00a      	beq.n	8006f12 <xPortStartScheduler+0x78>
    __asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60bb      	str	r3, [r7, #8]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f12:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	4a21      	ldr	r2, [pc, #132]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f1a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f1c:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f24:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f26:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	701a      	strb	r2, [r3, #0]
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the same priority as the kernel, and the SVC
     * handler higher priority so it can be used to exit a critical section (where
     * lower priorities are masked). */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1b      	ldr	r2, [pc, #108]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f46:	6013      	str	r3, [r2, #0]

    /* Configure the regions in the MPU that are common to all tasks. */
    prvSetupMPU();
 8006f48:	f000 f90c 	bl	8007164 <prvSetupMPU>

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006f4c:	f002 ff08 	bl	8009d60 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006f50:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <xPortStartScheduler+0x10e>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006f56:	f002 ff27 	bl	8009da8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f5a:	4b14      	ldr	r3, [pc, #80]	; (8006fac <xPortStartScheduler+0x112>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a13      	ldr	r2, [pc, #76]	; (8006fac <xPortStartScheduler+0x112>)
 8006f60:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f64:	6013      	str	r3, [r2, #0]

    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006f66:	4808      	ldr	r0, [pc, #32]	; (8006f88 <xPortStartScheduler+0xee>)
 8006f68:	6800      	ldr	r0, [r0, #0]
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	f380 8808 	msr	MSP, r0
 8006f70:	f04f 0000 	mov.w	r0, #0
 8006f74:	f380 8814 	msr	CONTROL, r0
 8006f78:	b662      	cpsie	i
 8006f7a:	b661      	cpsie	f
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	df00      	svc	0
 8006f86:	bf00      	nop
 8006f88:	e000ed08 	.word	0xe000ed08
        " nop					\n"
        " .ltorg				\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory" );

    /* Should not get here! */
    return 0;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	e000e400 	.word	0xe000e400
 8006f9c:	2401001d 	.word	0x2401001d
 8006fa0:	24010020 	.word	0x24010020
 8006fa4:	e000ed20 	.word	0xe000ed20
 8006fa8:	24008014 	.word	0x24008014
 8006fac:	e000ef34 	.word	0xe000ef34

08006fb0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( uxCriticalNesting == 1000UL );
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <vPortEndScheduler+0x34>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fbe:	d00a      	beq.n	8006fd6 <vPortEndScheduler+0x26>
    __asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	607b      	str	r3, [r7, #4]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <vPortEndScheduler+0x24>
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	24008014 	.word	0x24008014

08006fe8 <vPortStoreTaskMPUSettings>:

void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                const struct xMEMORY_REGION * const xRegions,
                                StackType_t * pxBottomOfStack,
                                uint32_t ulStackDepth )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
    #endif /* if defined( __ARMCC_VERSION ) */

    int32_t lIndex;
    uint32_t ul;

    if( xRegions == NULL )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d137      	bne.n	800706c <vPortStoreTaskMPUSettings+0x84>
    {
        /* No MPU regions are specified so allow access to all RAM. */
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
            ( ( uint32_t ) __SRAM_segment_start__ ) | /* Base address. */
 8006ffc:	4b53      	ldr	r3, [pc, #332]	; (800714c <vPortStoreTaskMPUSettings+0x164>)
            ( portMPU_REGION_VALID ) |
 8006ffe:	f043 0214 	orr.w	r2, r3, #20
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]
            ( portSTACK_REGION );

        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
            ( portMPU_REGION_READ_WRITE ) |
            ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 8007006:	4a52      	ldr	r2, [pc, #328]	; (8007150 <vPortStoreTaskMPUSettings+0x168>)
 8007008:	4b50      	ldr	r3, [pc, #320]	; (800714c <vPortStoreTaskMPUSettings+0x164>)
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	4618      	mov	r0, r3
 800700e:	f000 f92d 	bl	800726c <prvGetMPURegionSizeSetting>
 8007012:	4602      	mov	r2, r0
 8007014:	4b4f      	ldr	r3, [pc, #316]	; (8007154 <vPortStoreTaskMPUSettings+0x16c>)
 8007016:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	6053      	str	r3, [r2, #4]
            ( portMPU_REGION_ENABLE );

        /* Re-instate the privileged only RAM region as xRegion[ 0 ] will have
         * just removed the privileged only parameters. */
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
            ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 800701c:	4b4e      	ldr	r3, [pc, #312]	; (8007158 <vPortStoreTaskMPUSettings+0x170>)
            ( portMPU_REGION_VALID ) |
 800701e:	f043 0215 	orr.w	r2, r3, #21
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	609a      	str	r2, [r3, #8]
            ( portSTACK_REGION + 1 );

        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
            ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
            ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
            prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8007026:	4a4d      	ldr	r2, [pc, #308]	; (800715c <vPortStoreTaskMPUSettings+0x174>)
 8007028:	4b4b      	ldr	r3, [pc, #300]	; (8007158 <vPortStoreTaskMPUSettings+0x170>)
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f91d 	bl	800726c <prvGetMPURegionSizeSetting>
 8007032:	4602      	mov	r2, r0
 8007034:	4b4a      	ldr	r3, [pc, #296]	; (8007160 <vPortStoreTaskMPUSettings+0x178>)
 8007036:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	60d3      	str	r3, [r2, #12]
            ( portMPU_REGION_ENABLE );

        /* Invalidate all other regions. */
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 800703c:	2302      	movs	r3, #2
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e010      	b.n	8007064 <vPortStoreTaskMPUSettings+0x7c>
        {
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3304      	adds	r3, #4
 8007046:	f043 0110 	orr.w	r1, r3, #16
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	4413      	add	r3, r2
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b0b      	cmp	r3, #11
 8007068:	d9eb      	bls.n	8007042 <vPortStoreTaskMPUSettings+0x5a>
            }

            lIndex++;
        }
    }
}
 800706a:	e06a      	b.n	8007142 <vPortStoreTaskMPUSettings+0x15a>
        if( ulStackDepth > 0 )
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <vPortStoreTaskMPUSettings+0xa8>
                ( ( uint32_t ) pxBottomOfStack ) |
 8007072:	687b      	ldr	r3, [r7, #4]
                ( portMPU_REGION_VALID ) |
 8007074:	f043 0214 	orr.w	r2, r3, #20
            xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	601a      	str	r2, [r3, #0]
                ( prvGetMPURegionSizeSetting( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) ) |
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4618      	mov	r0, r3
 8007082:	f000 f8f3 	bl	800726c <prvGetMPURegionSizeSetting>
 8007086:	4602      	mov	r2, r0
                ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
 8007088:	4b32      	ldr	r3, [pc, #200]	; (8007154 <vPortStoreTaskMPUSettings+0x16c>)
 800708a:	4313      	orrs	r3, r2
            xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	6053      	str	r3, [r2, #4]
        lIndex = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8007094:	2301      	movs	r3, #1
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	e050      	b.n	800713c <vPortStoreTaskMPUSettings+0x154>
            if( ( xRegions[ lIndex ] ).ulLengthInBytes > 0UL )
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4613      	mov	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	461a      	mov	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4413      	add	r3, r2
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d031      	beq.n	8007114 <vPortStoreTaskMPUSettings+0x12c>
                    ( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) |
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4613      	mov	r3, r2
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	461a      	mov	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4413      	add	r3, r2
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
                    ( portSTACK_REGION + ul ); /* Region number. */
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3304      	adds	r3, #4
                    ( portMPU_REGION_VALID ) |
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f043 0110 	orr.w	r1, r3, #16
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress =
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                    ( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 f8bf 	bl	800726c <prvGetMPURegionSizeSetting>
 80070ee:	4601      	mov	r1, r0
                    ( xRegions[ lIndex ].ulParameters ) |
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4413      	add	r3, r2
 8007100:	689b      	ldr	r3, [r3, #8]
                    ( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 8007102:	430b      	orrs	r3, r1
                    ( xRegions[ lIndex ].ulParameters ) |
 8007104:	f043 0201 	orr.w	r2, r3, #1
                xMPUSettings->xRegion[ ul ].ulRegionAttribute =
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	440b      	add	r3, r1
 8007110:	605a      	str	r2, [r3, #4]
 8007112:	e00d      	b.n	8007130 <vPortStoreTaskMPUSettings+0x148>
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3304      	adds	r3, #4
 8007118:	f043 0110 	orr.w	r1, r3, #16
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4413      	add	r3, r2
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
            lIndex++;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	3301      	adds	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3301      	adds	r3, #1
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b0b      	cmp	r3, #11
 8007140:	d9ab      	bls.n	800709a <vPortStoreTaskMPUSettings+0xb2>
}
 8007142:	bf00      	nop
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	24000000 	.word	0x24000000
 8007150:	24080000 	.word	0x24080000
 8007154:	03030001 	.word	0x03030001
 8007158:	24000000 	.word	0x24000000
 800715c:	24008000 	.word	0x24008000
 8007160:	01030001 	.word	0x01030001

08007164 <prvSetupMPU>:
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
    configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 800716a:	4b30      	ldr	r3, [pc, #192]	; (800722c <prvSetupMPU+0xc8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	d00a      	beq.n	800718a <prvSetupMPU+0x26>
    __asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	607b      	str	r3, [r7, #4]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <prvSetupMPU+0x24>
    if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 800718a:	4b28      	ldr	r3, [pc, #160]	; (800722c <prvSetupMPU+0xc8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007192:	d147      	bne.n	8007224 <prvSetupMPU+0xc0>
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 8007194:	4b26      	ldr	r3, [pc, #152]	; (8007230 <prvSetupMPU+0xcc>)
 8007196:	4a27      	ldr	r2, [pc, #156]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 8007198:	f043 0310 	orr.w	r3, r3, #16
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 800719c:	6013      	str	r3, [r2, #0]
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 800719e:	4a26      	ldr	r2, [pc, #152]	; (8007238 <prvSetupMPU+0xd4>)
 80071a0:	4b23      	ldr	r3, [pc, #140]	; (8007230 <prvSetupMPU+0xcc>)
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f861 	bl	800726c <prvGetMPURegionSizeSetting>
 80071aa:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 80071ac:	4923      	ldr	r1, [pc, #140]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <prvSetupMPU+0xdc>)
 80071b0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 80071b2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 80071b4:	4b23      	ldr	r3, [pc, #140]	; (8007244 <prvSetupMPU+0xe0>)
 80071b6:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 80071b8:	f043 0311 	orr.w	r3, r3, #17
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 80071bc:	6013      	str	r3, [r2, #0]
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80071be:	4a22      	ldr	r2, [pc, #136]	; (8007248 <prvSetupMPU+0xe4>)
 80071c0:	4b20      	ldr	r3, [pc, #128]	; (8007244 <prvSetupMPU+0xe0>)
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f851 	bl	800726c <prvGetMPURegionSizeSetting>
 80071ca:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80071cc:	491b      	ldr	r1, [pc, #108]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80071ce:	4b1f      	ldr	r3, [pc, #124]	; (800724c <prvSetupMPU+0xe8>)
 80071d0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80071d2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80071d4:	4b1e      	ldr	r3, [pc, #120]	; (8007250 <prvSetupMPU+0xec>)
 80071d6:	4a17      	ldr	r2, [pc, #92]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 80071d8:	f043 0312 	orr.w	r3, r3, #18
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80071dc:	6013      	str	r3, [r2, #0]
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80071de:	4a1d      	ldr	r2, [pc, #116]	; (8007254 <prvSetupMPU+0xf0>)
 80071e0:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <prvSetupMPU+0xec>)
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f841 	bl	800726c <prvGetMPURegionSizeSetting>
 80071ea:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80071ec:	4913      	ldr	r1, [pc, #76]	; (800723c <prvSetupMPU+0xd8>)
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <prvSetupMPU+0xf4>)
 80071f0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80071f2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( portPERIPHERALS_START_ADDRESS ) |
 80071f4:	4b0f      	ldr	r3, [pc, #60]	; (8007234 <prvSetupMPU+0xd0>)
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <prvSetupMPU+0xf8>)
 80071f8:	601a      	str	r2, [r3, #0]
                                       ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 80071fa:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80071fe:	f000 f835 	bl	800726c <prvGetMPURegionSizeSetting>
 8007202:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 8007204:	490d      	ldr	r1, [pc, #52]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 8007206:	4b16      	ldr	r3, [pc, #88]	; (8007260 <prvSetupMPU+0xfc>)
 8007208:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 800720a:	600b      	str	r3, [r1, #0]
        portNVIC_SYS_CTRL_STATE_REG |= portNVIC_MEM_FAULT_ENABLE;
 800720c:	4b15      	ldr	r3, [pc, #84]	; (8007264 <prvSetupMPU+0x100>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a14      	ldr	r2, [pc, #80]	; (8007264 <prvSetupMPU+0x100>)
 8007212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007216:	6013      	str	r3, [r2, #0]
        portMPU_CTRL_REG |= ( portMPU_ENABLE | portMPU_BACKGROUND_ENABLE );
 8007218:	4b13      	ldr	r3, [pc, #76]	; (8007268 <prvSetupMPU+0x104>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a12      	ldr	r2, [pc, #72]	; (8007268 <prvSetupMPU+0x104>)
 800721e:	f043 0305 	orr.w	r3, r3, #5
 8007222:	6013      	str	r3, [r2, #0]
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed90 	.word	0xe000ed90
 8007230:	08000000 	.word	0x08000000
 8007234:	e000ed9c 	.word	0xe000ed9c
 8007238:	08100000 	.word	0x08100000
 800723c:	e000eda0 	.word	0xe000eda0
 8007240:	06070001 	.word	0x06070001
 8007244:	08000000 	.word	0x08000000
 8007248:	08008000 	.word	0x08008000
 800724c:	05070001 	.word	0x05070001
 8007250:	24000000 	.word	0x24000000
 8007254:	24008000 	.word	0x24008000
 8007258:	01030001 	.word	0x01030001
 800725c:	40000013 	.word	0x40000013
 8007260:	13000001 	.word	0x13000001
 8007264:	e000ed24 	.word	0xe000ed24
 8007268:	e000ed94 	.word	0xe000ed94

0800726c <prvGetMPURegionSizeSetting>:
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    uint32_t ulRegionSize, ulReturnValue = 4;
 8007274:	2304      	movs	r3, #4
 8007276:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8007278:	2320      	movs	r3, #32
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e009      	b.n	8007292 <prvGetMPURegionSizeSetting+0x26>
        if( ulActualSizeInBytes <= ulRegionSize )
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	429a      	cmp	r2, r3
 8007284:	d909      	bls.n	800729a <prvGetMPURegionSizeSetting+0x2e>
            ulReturnValue++;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3301      	adds	r3, #1
 800728a:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b1e      	cmp	r3, #30
 8007296:	d9f2      	bls.n	800727e <prvGetMPURegionSizeSetting+0x12>
 8007298:	e000      	b.n	800729c <prvGetMPURegionSizeSetting+0x30>
            break;
 800729a:	bf00      	nop
    return( ulReturnValue << 1UL );
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	005b      	lsls	r3, r3, #1
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <PendSV_Handler>:
    __asm volatile
 80072ac:	f3ef 8009 	mrs	r0, PSP
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	4b26      	ldr	r3, [pc, #152]	; (8007350 <pxCurrentTCBConst>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	f01e 0f10 	tst.w	lr, #16
 80072bc:	bf08      	it	eq
 80072be:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c2:	f3ef 8114 	mrs	r1, CONTROL
 80072c6:	e920 4ff2 	stmdb	r0!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7fe f9aa 	bl	8005638 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	f101 0104 	add.w	r1, r1, #4
 80072f6:	f3bf 8f5f 	dmb	sy
 80072fa:	4a6d      	ldr	r2, [pc, #436]	; (80074b0 <prvSVCHandler+0x8a>)
 80072fc:	6813      	ldr	r3, [r2, #0]
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4a6b      	ldr	r2, [pc, #428]	; (80074b4 <prvSVCHandler+0x8e>)
 8007306:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800730a:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800730e:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007312:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007316:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800731a:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800731e:	4a64      	ldr	r2, [pc, #400]	; (80074b0 <prvSVCHandler+0x8a>)
 8007320:	6813      	ldr	r3, [r2, #0]
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	f383 8814 	msr	CONTROL, r3
 8007334:	f01e 0f10 	tst.w	lr, #16
 8007338:	bf08      	it	eq
 800733a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800733e:	f380 8809 	msr	PSP, r0
 8007342:	4770      	bx	lr
 8007344:	f3af 8000 	nop.w
 8007348:	f3af 8000 	nop.w
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst>:
 8007350:	24000040 	.word	0x24000040
}
 8007354:	bf00      	nop

08007356 <SysTick_Handler>:
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
    __asm volatile
 800735c:	f3ef 8211 	mrs	r2, BASEPRI
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	60ba      	str	r2, [r7, #8]
 8007372:	607b      	str	r3, [r7, #4]
    return ulOriginalBASEPRI;
 8007374:	68bb      	ldr	r3, [r7, #8]
    ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007376:	60fb      	str	r3, [r7, #12]
        if( xTaskIncrementTick() != pdFALSE )
 8007378:	f7fd fd9c 	bl	8004eb4 <xTaskIncrementTick>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <SysTick_Handler+0x34>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <SysTick_Handler+0x4a>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	603b      	str	r3, [r7, #0]
    __asm volatile
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f383 8811 	msr	BASEPRI, r3
}
 8007394:	bf00      	nop
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <SVC_Handler>:
    __asm volatile
 80073a4:	f01e 0f04 	tst.w	lr, #4
 80073a8:	bf0c      	ite	eq
 80073aa:	f3ef 8008 	mrseq	r0, MSP
 80073ae:	f3ef 8009 	mrsne	r0, PSP
 80073b2:	e038      	b.n	8007426 <prvSVCHandler>
}
 80073b4:	bf00      	nop

080073b6 <prvRestoreContextOfFirstTask>:
    __asm volatile
 80073b6:	4840      	ldr	r0, [pc, #256]	; (80074b8 <prvSVCHandler+0x92>)
 80073b8:	6800      	ldr	r0, [r0, #0]
 80073ba:	6800      	ldr	r0, [r0, #0]
 80073bc:	f380 8808 	msr	MSP, r0
 80073c0:	4b17      	ldr	r3, [pc, #92]	; (8007420 <pxCurrentTCBConst2>)
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	6808      	ldr	r0, [r1, #0]
 80073c6:	f101 0104 	add.w	r1, r1, #4
 80073ca:	f3bf 8f5f 	dmb	sy
 80073ce:	4a38      	ldr	r2, [pc, #224]	; (80074b0 <prvSVCHandler+0x8a>)
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	4a36      	ldr	r2, [pc, #216]	; (80074b4 <prvSVCHandler+0x8e>)
 80073da:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073de:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073e2:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073e6:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073ea:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073ee:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073f2:	4a2f      	ldr	r2, [pc, #188]	; (80074b0 <prvSVCHandler+0x8a>)
 80073f4:	6813      	ldr	r3, [r2, #0]
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	f383 8814 	msr	CONTROL, r3
 8007408:	f380 8809 	msr	PSP, r0
 800740c:	f04f 0000 	mov.w	r0, #0
 8007410:	f380 8811 	msr	BASEPRI, r0
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	f3af 8000 	nop.w
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	24000040 	.word	0x24000040
}
 8007424:	bf00      	nop

08007426 <prvSVCHandler>:
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
    ulPC = pulParam[ portOFFSET_TO_PC ];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3b02      	subs	r3, #2
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	72fb      	strb	r3, [r7, #11]
    switch( ucSVCNumber )
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d018      	beq.n	8007474 <prvSVCHandler+0x4e>
 8007442:	2b02      	cmp	r3, #2
 8007444:	dc25      	bgt.n	8007492 <prvSVCHandler+0x6c>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <prvSVCHandler+0x2a>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d009      	beq.n	8007462 <prvSVCHandler+0x3c>
                    break;
 800744e:	e020      	b.n	8007492 <prvSVCHandler+0x6c>
            portNVIC_SHPR2_REG |= portNVIC_SVC_PRI;
 8007450:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <prvSVCHandler+0x7a>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a12      	ldr	r2, [pc, #72]	; (80074a0 <prvSVCHandler+0x7a>)
 8007456:	f043 439e 	orr.w	r3, r3, #1325400064	; 0x4f000000
 800745a:	6013      	str	r3, [r2, #0]
            prvRestoreContextOfFirstTask();
 800745c:	f7ff ffab 	bl	80073b6 <prvRestoreContextOfFirstTask>
            break;
 8007460:	e01a      	b.n	8007498 <prvSVCHandler+0x72>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <prvSVCHandler+0x7e>)
 8007464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007468:	601a      	str	r2, [r3, #0]
            __asm volatile ( "dsb" ::: "memory" );
 800746a:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800746e:	f3bf 8f6f 	isb	sy
            break;
 8007472:	e011      	b.n	8007498 <prvSVCHandler+0x72>
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8007474:	4a0c      	ldr	r2, [pc, #48]	; (80074a8 <prvSVCHandler+0x82>)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4293      	cmp	r3, r2
 800747a:	d30c      	bcc.n	8007496 <prvSVCHandler+0x70>
                        ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 800747c:	4a0b      	ldr	r2, [pc, #44]	; (80074ac <prvSVCHandler+0x86>)
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4293      	cmp	r3, r2
 8007482:	d808      	bhi.n	8007496 <prvSVCHandler+0x70>
                        __asm volatile
 8007484:	f3ef 8114 	mrs	r1, CONTROL
 8007488:	f021 0101 	bic.w	r1, r1, #1
 800748c:	f381 8814 	msr	CONTROL, r1
                    break;
 8007490:	e001      	b.n	8007496 <prvSVCHandler+0x70>
                    break;
 8007492:	bf00      	nop
 8007494:	e000      	b.n	8007498 <prvSVCHandler+0x72>
                    break;
 8007496:	bf00      	nop
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	e000ed1c 	.word	0xe000ed1c
 80074a4:	e000ed04 	.word	0xe000ed04
 80074a8:	08008000 	.word	0x08008000
 80074ac:	08008e36 	.word	0x08008e36
 80074b0:	e000ed94 	.word	0xe000ed94
 80074b4:	e000ed9c 	.word	0xe000ed9c
 80074b8:	e000ed08 	.word	0xe000ed08

080074bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80074c8:	f7fc fce2 	bl	8003e90 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80074cc:	4b67      	ldr	r3, [pc, #412]	; (800766c <pvPortMalloc+0x1b0>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80074d4:	f000 f9b0 	bl	8007838 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074d8:	4b65      	ldr	r3, [pc, #404]	; (8007670 <pvPortMalloc+0x1b4>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f040 80a7 	bne.w	8007634 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d02d      	beq.n	8007548 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80074ec:	2208      	movs	r2, #8
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d227      	bcs.n	8007548 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80074f8:	2208      	movs	r2, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d021      	beq.n	800754e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	d214      	bcs.n	8007542 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	3308      	adds	r3, #8
 8007520:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	2b00      	cmp	r3, #0
 800752a:	d010      	beq.n	800754e <pvPortMalloc+0x92>
    __asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	617b      	str	r3, [r7, #20]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007546:	e002      	b.n	800754e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	e000      	b.n	8007550 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800754e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d06e      	beq.n	8007634 <pvPortMalloc+0x178>
 8007556:	4b47      	ldr	r3, [pc, #284]	; (8007674 <pvPortMalloc+0x1b8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d869      	bhi.n	8007634 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007560:	4b45      	ldr	r3, [pc, #276]	; (8007678 <pvPortMalloc+0x1bc>)
 8007562:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007564:	4b44      	ldr	r3, [pc, #272]	; (8007678 <pvPortMalloc+0x1bc>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800756a:	e004      	b.n	8007576 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	429a      	cmp	r2, r3
 800757e:	d903      	bls.n	8007588 <pvPortMalloc+0xcc>
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f1      	bne.n	800756c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007588:	4b38      	ldr	r3, [pc, #224]	; (800766c <pvPortMalloc+0x1b0>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758e:	429a      	cmp	r2, r3
 8007590:	d050      	beq.n	8007634 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2208      	movs	r2, #8
 8007598:	4413      	add	r3, r2
 800759a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	2308      	movs	r3, #8
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d91f      	bls.n	80075f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <pvPortMalloc+0x120>
    __asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	613b      	str	r3, [r7, #16]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075ee:	69b8      	ldr	r0, [r7, #24]
 80075f0:	f000 f8c8 	bl	8007784 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075f4:	4b1f      	ldr	r3, [pc, #124]	; (8007674 <pvPortMalloc+0x1b8>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <pvPortMalloc+0x1b8>)
 8007600:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007602:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <pvPortMalloc+0x1b8>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <pvPortMalloc+0x1c0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d203      	bcs.n	8007616 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800760e:	4b19      	ldr	r3, [pc, #100]	; (8007674 <pvPortMalloc+0x1b8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1a      	ldr	r2, [pc, #104]	; (800767c <pvPortMalloc+0x1c0>)
 8007614:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <pvPortMalloc+0x1b4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	431a      	orrs	r2, r3
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800762a:	4b15      	ldr	r3, [pc, #84]	; (8007680 <pvPortMalloc+0x1c4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <pvPortMalloc+0x1c4>)
 8007632:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007634:	f7fc fc3a 	bl	8003eac <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 800763e:	f002 fc88 	bl	8009f52 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <pvPortMalloc+0x1a6>
    __asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60fb      	str	r3, [r7, #12]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <pvPortMalloc+0x1a4>
    return pvReturn;
 8007662:	69fb      	ldr	r3, [r7, #28]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3728      	adds	r7, #40	; 0x28
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	24004274 	.word	0x24004274
 8007670:	24004288 	.word	0x24004288
 8007674:	24004278 	.word	0x24004278
 8007678:	2400426c 	.word	0x2400426c
 800767c:	2400427c 	.word	0x2400427c
 8007680:	24004280 	.word	0x24004280

08007684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d04d      	beq.n	8007732 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007696:	2308      	movs	r3, #8
 8007698:	425b      	negs	r3, r3
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4413      	add	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	4b24      	ldr	r3, [pc, #144]	; (800773c <vPortFree+0xb8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <vPortFree+0x44>
    __asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	60fb      	str	r3, [r7, #12]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <vPortFree+0x62>
    __asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60bb      	str	r3, [r7, #8]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <vPortFree+0xb8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01e      	beq.n	8007732 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11a      	bne.n	8007732 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <vPortFree+0xb8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	43db      	mvns	r3, r3
 8007706:	401a      	ands	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800770c:	f7fc fbc0 	bl	8003e90 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <vPortFree+0xbc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4413      	add	r3, r2
 800771a:	4a09      	ldr	r2, [pc, #36]	; (8007740 <vPortFree+0xbc>)
 800771c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800771e:	6938      	ldr	r0, [r7, #16]
 8007720:	f000 f830 	bl	8007784 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007724:	4b07      	ldr	r3, [pc, #28]	; (8007744 <vPortFree+0xc0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	4a06      	ldr	r2, [pc, #24]	; (8007744 <vPortFree+0xc0>)
 800772c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800772e:	f7fc fbbd 	bl	8003eac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007732:	bf00      	nop
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	24004288 	.word	0x24004288
 8007740:	24004278 	.word	0x24004278
 8007744:	24004284 	.word	0x24004284

08007748 <vPortInitialiseBlocks>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
    /* This just exists to keep the linker quiet. */
}
 800774c:	bf00      	nop
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <xPortGetFreeHeapSize>:
{
 8007756:	b480      	push	{r7}
 8007758:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 800775a:	4b03      	ldr	r3, [pc, #12]	; (8007768 <xPortGetFreeHeapSize+0x12>)
 800775c:	681b      	ldr	r3, [r3, #0]
}
 800775e:	4618      	mov	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	24004278 	.word	0x24004278

0800776c <xPortGetMinimumEverFreeHeapSize>:
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8007772:	681b      	ldr	r3, [r3, #0]
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	2400427c 	.word	0x2400427c

08007784 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800778c:	4b28      	ldr	r3, [pc, #160]	; (8007830 <prvInsertBlockIntoFreeList+0xac>)
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e002      	b.n	8007798 <prvInsertBlockIntoFreeList+0x14>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d8f7      	bhi.n	8007792 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	4413      	add	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d108      	bne.n	80077c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	441a      	add	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d118      	bne.n	800780c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b15      	ldr	r3, [pc, #84]	; (8007834 <prvInsertBlockIntoFreeList+0xb0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d00d      	beq.n	8007802 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	e008      	b.n	8007814 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <prvInsertBlockIntoFreeList+0xb0>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	e003      	b.n	8007814 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d002      	beq.n	8007822 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007822:	bf00      	nop
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	2400426c 	.word	0x2400426c
 8007834:	24004274 	.word	0x24004274

08007838 <prvHeapInit>:
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800783e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007842:	60bb      	str	r3, [r7, #8]
    uxAddress = ( size_t ) ucHeap;
 8007844:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <prvHeapInit+0xac>)
 8007846:	60fb      	str	r3, [r7, #12]
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <prvHeapInit+0x34>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3307      	adds	r3, #7
 8007856:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	4a1f      	ldr	r2, [pc, #124]	; (80078e4 <prvHeapInit+0xac>)
 8007868:	4413      	add	r3, r2
 800786a:	60bb      	str	r3, [r7, #8]
    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	607b      	str	r3, [r7, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007870:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <prvHeapInit+0xb0>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007876:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <prvHeapInit+0xb0>)
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007884:	2208      	movs	r2, #8
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0307 	bic.w	r3, r3, #7
 8007892:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a15      	ldr	r2, [pc, #84]	; (80078ec <prvHeapInit+0xb4>)
 8007898:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800789a:	4b14      	ldr	r3, [pc, #80]	; (80078ec <prvHeapInit+0xb4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2200      	movs	r2, #0
 80078a0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <prvHeapInit+0xb4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <prvHeapInit+0xb4>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	601a      	str	r2, [r3, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4a0a      	ldr	r2, [pc, #40]	; (80078f0 <prvHeapInit+0xb8>)
 80078c6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <prvHeapInit+0xbc>)
 80078ce:	6013      	str	r3, [r2, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078d0:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <prvHeapInit+0xc0>)
 80078d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078d6:	601a      	str	r2, [r3, #0]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	2400066c 	.word	0x2400066c
 80078e8:	2400426c 	.word	0x2400426c
 80078ec:	24004274 	.word	0x24004274
 80078f0:	2400427c 	.word	0x2400427c
 80078f4:	24004278 	.word	0x24004278
 80078f8:	24004288 	.word	0x24004288
 80078fc:	addeadde 	.word	0xaddeadde
 8007900:	addeadde 	.word	0xaddeadde
 8007904:	addeadde 	.word	0xaddeadde
 8007908:	addeadde 	.word	0xaddeadde
 800790c:	addeadde 	.word	0xaddeadde
 8007910:	addeadde 	.word	0xaddeadde
 8007914:	addeadde 	.word	0xaddeadde
 8007918:	addeadde 	.word	0xaddeadde
 800791c:	addeadde 	.word	0xaddeadde
 8007920:	addeadde 	.word	0xaddeadde
 8007924:	addeadde 	.word	0xaddeadde
 8007928:	addeadde 	.word	0xaddeadde
 800792c:	addeadde 	.word	0xaddeadde
 8007930:	addeadde 	.word	0xaddeadde
 8007934:	addeadde 	.word	0xaddeadde
 8007938:	addeadde 	.word	0xaddeadde
 800793c:	addeadde 	.word	0xaddeadde
 8007940:	addeadde 	.word	0xaddeadde
 8007944:	addeadde 	.word	0xaddeadde
 8007948:	addeadde 	.word	0xaddeadde
 800794c:	addeadde 	.word	0xaddeadde
 8007950:	addeadde 	.word	0xaddeadde
 8007954:	addeadde 	.word	0xaddeadde
 8007958:	addeadde 	.word	0xaddeadde
 800795c:	addeadde 	.word	0xaddeadde
 8007960:	addeadde 	.word	0xaddeadde
 8007964:	addeadde 	.word	0xaddeadde
 8007968:	addeadde 	.word	0xaddeadde
 800796c:	addeadde 	.word	0xaddeadde
 8007970:	addeadde 	.word	0xaddeadde
 8007974:	addeadde 	.word	0xaddeadde
 8007978:	addeadde 	.word	0xaddeadde
 800797c:	addeadde 	.word	0xaddeadde
 8007980:	addeadde 	.word	0xaddeadde
 8007984:	addeadde 	.word	0xaddeadde
 8007988:	addeadde 	.word	0xaddeadde
 800798c:	addeadde 	.word	0xaddeadde
 8007990:	addeadde 	.word	0xaddeadde
 8007994:	addeadde 	.word	0xaddeadde
 8007998:	addeadde 	.word	0xaddeadde
 800799c:	addeadde 	.word	0xaddeadde
 80079a0:	addeadde 	.word	0xaddeadde
 80079a4:	addeadde 	.word	0xaddeadde
 80079a8:	addeadde 	.word	0xaddeadde
 80079ac:	addeadde 	.word	0xaddeadde
 80079b0:	addeadde 	.word	0xaddeadde
 80079b4:	addeadde 	.word	0xaddeadde
 80079b8:	addeadde 	.word	0xaddeadde
 80079bc:	addeadde 	.word	0xaddeadde
 80079c0:	addeadde 	.word	0xaddeadde
 80079c4:	addeadde 	.word	0xaddeadde
 80079c8:	addeadde 	.word	0xaddeadde
 80079cc:	addeadde 	.word	0xaddeadde
 80079d0:	addeadde 	.word	0xaddeadde
 80079d4:	addeadde 	.word	0xaddeadde
 80079d8:	addeadde 	.word	0xaddeadde
 80079dc:	addeadde 	.word	0xaddeadde
 80079e0:	addeadde 	.word	0xaddeadde
 80079e4:	addeadde 	.word	0xaddeadde
 80079e8:	addeadde 	.word	0xaddeadde
 80079ec:	addeadde 	.word	0xaddeadde
 80079f0:	addeadde 	.word	0xaddeadde
 80079f4:	addeadde 	.word	0xaddeadde
 80079f8:	addeadde 	.word	0xaddeadde
 80079fc:	addeadde 	.word	0xaddeadde
 8007a00:	addeadde 	.word	0xaddeadde
 8007a04:	addeadde 	.word	0xaddeadde
 8007a08:	addeadde 	.word	0xaddeadde
 8007a0c:	addeadde 	.word	0xaddeadde
 8007a10:	addeadde 	.word	0xaddeadde
 8007a14:	addeadde 	.word	0xaddeadde
 8007a18:	addeadde 	.word	0xaddeadde
 8007a1c:	addeadde 	.word	0xaddeadde
 8007a20:	addeadde 	.word	0xaddeadde
 8007a24:	addeadde 	.word	0xaddeadde
 8007a28:	addeadde 	.word	0xaddeadde
 8007a2c:	addeadde 	.word	0xaddeadde
 8007a30:	addeadde 	.word	0xaddeadde
 8007a34:	addeadde 	.word	0xaddeadde
 8007a38:	addeadde 	.word	0xaddeadde
 8007a3c:	addeadde 	.word	0xaddeadde
 8007a40:	addeadde 	.word	0xaddeadde
 8007a44:	addeadde 	.word	0xaddeadde
 8007a48:	addeadde 	.word	0xaddeadde
 8007a4c:	addeadde 	.word	0xaddeadde
 8007a50:	addeadde 	.word	0xaddeadde
 8007a54:	addeadde 	.word	0xaddeadde
 8007a58:	addeadde 	.word	0xaddeadde
 8007a5c:	addeadde 	.word	0xaddeadde
 8007a60:	addeadde 	.word	0xaddeadde
 8007a64:	addeadde 	.word	0xaddeadde
 8007a68:	addeadde 	.word	0xaddeadde
 8007a6c:	addeadde 	.word	0xaddeadde
 8007a70:	addeadde 	.word	0xaddeadde
 8007a74:	addeadde 	.word	0xaddeadde
 8007a78:	addeadde 	.word	0xaddeadde
 8007a7c:	addeadde 	.word	0xaddeadde
 8007a80:	addeadde 	.word	0xaddeadde
 8007a84:	addeadde 	.word	0xaddeadde
 8007a88:	addeadde 	.word	0xaddeadde
 8007a8c:	addeadde 	.word	0xaddeadde
 8007a90:	addeadde 	.word	0xaddeadde
 8007a94:	addeadde 	.word	0xaddeadde
 8007a98:	addeadde 	.word	0xaddeadde
 8007a9c:	addeadde 	.word	0xaddeadde
 8007aa0:	addeadde 	.word	0xaddeadde
 8007aa4:	addeadde 	.word	0xaddeadde
 8007aa8:	addeadde 	.word	0xaddeadde
 8007aac:	addeadde 	.word	0xaddeadde
 8007ab0:	addeadde 	.word	0xaddeadde
 8007ab4:	addeadde 	.word	0xaddeadde
 8007ab8:	addeadde 	.word	0xaddeadde
 8007abc:	addeadde 	.word	0xaddeadde
 8007ac0:	addeadde 	.word	0xaddeadde
 8007ac4:	addeadde 	.word	0xaddeadde
 8007ac8:	addeadde 	.word	0xaddeadde
 8007acc:	addeadde 	.word	0xaddeadde
 8007ad0:	addeadde 	.word	0xaddeadde
 8007ad4:	addeadde 	.word	0xaddeadde
 8007ad8:	addeadde 	.word	0xaddeadde
 8007adc:	addeadde 	.word	0xaddeadde
 8007ae0:	addeadde 	.word	0xaddeadde
 8007ae4:	addeadde 	.word	0xaddeadde
 8007ae8:	addeadde 	.word	0xaddeadde
 8007aec:	addeadde 	.word	0xaddeadde
 8007af0:	addeadde 	.word	0xaddeadde
 8007af4:	addeadde 	.word	0xaddeadde
 8007af8:	addeadde 	.word	0xaddeadde
 8007afc:	addeadde 	.word	0xaddeadde
 8007b00:	addeadde 	.word	0xaddeadde
 8007b04:	addeadde 	.word	0xaddeadde
 8007b08:	addeadde 	.word	0xaddeadde
 8007b0c:	addeadde 	.word	0xaddeadde
 8007b10:	addeadde 	.word	0xaddeadde
 8007b14:	addeadde 	.word	0xaddeadde
 8007b18:	addeadde 	.word	0xaddeadde
 8007b1c:	addeadde 	.word	0xaddeadde
 8007b20:	addeadde 	.word	0xaddeadde
 8007b24:	addeadde 	.word	0xaddeadde
 8007b28:	addeadde 	.word	0xaddeadde
 8007b2c:	addeadde 	.word	0xaddeadde
 8007b30:	addeadde 	.word	0xaddeadde
 8007b34:	addeadde 	.word	0xaddeadde
 8007b38:	addeadde 	.word	0xaddeadde
 8007b3c:	addeadde 	.word	0xaddeadde
 8007b40:	addeadde 	.word	0xaddeadde
 8007b44:	addeadde 	.word	0xaddeadde
 8007b48:	addeadde 	.word	0xaddeadde
 8007b4c:	addeadde 	.word	0xaddeadde
 8007b50:	addeadde 	.word	0xaddeadde
 8007b54:	addeadde 	.word	0xaddeadde
 8007b58:	addeadde 	.word	0xaddeadde
 8007b5c:	addeadde 	.word	0xaddeadde
 8007b60:	addeadde 	.word	0xaddeadde
 8007b64:	addeadde 	.word	0xaddeadde
 8007b68:	addeadde 	.word	0xaddeadde
 8007b6c:	addeadde 	.word	0xaddeadde
 8007b70:	addeadde 	.word	0xaddeadde
 8007b74:	addeadde 	.word	0xaddeadde
 8007b78:	addeadde 	.word	0xaddeadde
 8007b7c:	addeadde 	.word	0xaddeadde
 8007b80:	addeadde 	.word	0xaddeadde
 8007b84:	addeadde 	.word	0xaddeadde
 8007b88:	addeadde 	.word	0xaddeadde
 8007b8c:	addeadde 	.word	0xaddeadde
 8007b90:	addeadde 	.word	0xaddeadde
 8007b94:	addeadde 	.word	0xaddeadde
 8007b98:	addeadde 	.word	0xaddeadde
 8007b9c:	addeadde 	.word	0xaddeadde
 8007ba0:	addeadde 	.word	0xaddeadde
 8007ba4:	addeadde 	.word	0xaddeadde
 8007ba8:	addeadde 	.word	0xaddeadde
 8007bac:	addeadde 	.word	0xaddeadde
 8007bb0:	addeadde 	.word	0xaddeadde
 8007bb4:	addeadde 	.word	0xaddeadde
 8007bb8:	addeadde 	.word	0xaddeadde
 8007bbc:	addeadde 	.word	0xaddeadde
 8007bc0:	addeadde 	.word	0xaddeadde
 8007bc4:	addeadde 	.word	0xaddeadde
 8007bc8:	addeadde 	.word	0xaddeadde
 8007bcc:	addeadde 	.word	0xaddeadde
 8007bd0:	addeadde 	.word	0xaddeadde
 8007bd4:	addeadde 	.word	0xaddeadde
 8007bd8:	addeadde 	.word	0xaddeadde
 8007bdc:	addeadde 	.word	0xaddeadde
 8007be0:	addeadde 	.word	0xaddeadde
 8007be4:	addeadde 	.word	0xaddeadde
 8007be8:	addeadde 	.word	0xaddeadde
 8007bec:	addeadde 	.word	0xaddeadde
 8007bf0:	addeadde 	.word	0xaddeadde
 8007bf4:	addeadde 	.word	0xaddeadde
 8007bf8:	addeadde 	.word	0xaddeadde
 8007bfc:	addeadde 	.word	0xaddeadde
 8007c00:	addeadde 	.word	0xaddeadde
 8007c04:	addeadde 	.word	0xaddeadde
 8007c08:	addeadde 	.word	0xaddeadde
 8007c0c:	addeadde 	.word	0xaddeadde
 8007c10:	addeadde 	.word	0xaddeadde
 8007c14:	addeadde 	.word	0xaddeadde
 8007c18:	addeadde 	.word	0xaddeadde
 8007c1c:	addeadde 	.word	0xaddeadde
 8007c20:	addeadde 	.word	0xaddeadde
 8007c24:	addeadde 	.word	0xaddeadde
 8007c28:	addeadde 	.word	0xaddeadde
 8007c2c:	addeadde 	.word	0xaddeadde
 8007c30:	addeadde 	.word	0xaddeadde
 8007c34:	addeadde 	.word	0xaddeadde
 8007c38:	addeadde 	.word	0xaddeadde
 8007c3c:	addeadde 	.word	0xaddeadde
 8007c40:	addeadde 	.word	0xaddeadde
 8007c44:	addeadde 	.word	0xaddeadde
 8007c48:	addeadde 	.word	0xaddeadde
 8007c4c:	addeadde 	.word	0xaddeadde
 8007c50:	addeadde 	.word	0xaddeadde
 8007c54:	addeadde 	.word	0xaddeadde
 8007c58:	addeadde 	.word	0xaddeadde
 8007c5c:	addeadde 	.word	0xaddeadde
 8007c60:	addeadde 	.word	0xaddeadde
 8007c64:	addeadde 	.word	0xaddeadde
 8007c68:	addeadde 	.word	0xaddeadde
 8007c6c:	addeadde 	.word	0xaddeadde
 8007c70:	addeadde 	.word	0xaddeadde
 8007c74:	addeadde 	.word	0xaddeadde
 8007c78:	addeadde 	.word	0xaddeadde
 8007c7c:	addeadde 	.word	0xaddeadde
 8007c80:	addeadde 	.word	0xaddeadde
 8007c84:	addeadde 	.word	0xaddeadde
 8007c88:	addeadde 	.word	0xaddeadde
 8007c8c:	addeadde 	.word	0xaddeadde
 8007c90:	addeadde 	.word	0xaddeadde
 8007c94:	addeadde 	.word	0xaddeadde
 8007c98:	addeadde 	.word	0xaddeadde
 8007c9c:	addeadde 	.word	0xaddeadde
 8007ca0:	addeadde 	.word	0xaddeadde
 8007ca4:	addeadde 	.word	0xaddeadde
 8007ca8:	addeadde 	.word	0xaddeadde
 8007cac:	addeadde 	.word	0xaddeadde
 8007cb0:	addeadde 	.word	0xaddeadde
 8007cb4:	addeadde 	.word	0xaddeadde
 8007cb8:	addeadde 	.word	0xaddeadde
 8007cbc:	addeadde 	.word	0xaddeadde
 8007cc0:	addeadde 	.word	0xaddeadde
 8007cc4:	addeadde 	.word	0xaddeadde
 8007cc8:	addeadde 	.word	0xaddeadde
 8007ccc:	addeadde 	.word	0xaddeadde
 8007cd0:	addeadde 	.word	0xaddeadde
 8007cd4:	addeadde 	.word	0xaddeadde
 8007cd8:	addeadde 	.word	0xaddeadde
 8007cdc:	addeadde 	.word	0xaddeadde
 8007ce0:	addeadde 	.word	0xaddeadde
 8007ce4:	addeadde 	.word	0xaddeadde
 8007ce8:	addeadde 	.word	0xaddeadde
 8007cec:	addeadde 	.word	0xaddeadde
 8007cf0:	addeadde 	.word	0xaddeadde
 8007cf4:	addeadde 	.word	0xaddeadde
 8007cf8:	addeadde 	.word	0xaddeadde
 8007cfc:	addeadde 	.word	0xaddeadde
 8007d00:	addeadde 	.word	0xaddeadde
 8007d04:	addeadde 	.word	0xaddeadde
 8007d08:	addeadde 	.word	0xaddeadde
 8007d0c:	addeadde 	.word	0xaddeadde
 8007d10:	addeadde 	.word	0xaddeadde
 8007d14:	addeadde 	.word	0xaddeadde
 8007d18:	addeadde 	.word	0xaddeadde
 8007d1c:	addeadde 	.word	0xaddeadde
 8007d20:	addeadde 	.word	0xaddeadde
 8007d24:	addeadde 	.word	0xaddeadde
 8007d28:	addeadde 	.word	0xaddeadde
 8007d2c:	addeadde 	.word	0xaddeadde
 8007d30:	addeadde 	.word	0xaddeadde
 8007d34:	addeadde 	.word	0xaddeadde
 8007d38:	addeadde 	.word	0xaddeadde
 8007d3c:	addeadde 	.word	0xaddeadde
 8007d40:	addeadde 	.word	0xaddeadde
 8007d44:	addeadde 	.word	0xaddeadde
 8007d48:	addeadde 	.word	0xaddeadde
 8007d4c:	addeadde 	.word	0xaddeadde
 8007d50:	addeadde 	.word	0xaddeadde
 8007d54:	addeadde 	.word	0xaddeadde
 8007d58:	addeadde 	.word	0xaddeadde
 8007d5c:	addeadde 	.word	0xaddeadde
 8007d60:	addeadde 	.word	0xaddeadde
 8007d64:	addeadde 	.word	0xaddeadde
 8007d68:	addeadde 	.word	0xaddeadde
 8007d6c:	addeadde 	.word	0xaddeadde
 8007d70:	addeadde 	.word	0xaddeadde
 8007d74:	addeadde 	.word	0xaddeadde
 8007d78:	addeadde 	.word	0xaddeadde
 8007d7c:	addeadde 	.word	0xaddeadde
 8007d80:	addeadde 	.word	0xaddeadde
 8007d84:	addeadde 	.word	0xaddeadde
 8007d88:	addeadde 	.word	0xaddeadde
 8007d8c:	addeadde 	.word	0xaddeadde
 8007d90:	addeadde 	.word	0xaddeadde
 8007d94:	addeadde 	.word	0xaddeadde
 8007d98:	addeadde 	.word	0xaddeadde
 8007d9c:	addeadde 	.word	0xaddeadde
 8007da0:	addeadde 	.word	0xaddeadde
 8007da4:	addeadde 	.word	0xaddeadde
 8007da8:	addeadde 	.word	0xaddeadde
 8007dac:	addeadde 	.word	0xaddeadde
 8007db0:	addeadde 	.word	0xaddeadde
 8007db4:	addeadde 	.word	0xaddeadde
 8007db8:	addeadde 	.word	0xaddeadde
 8007dbc:	addeadde 	.word	0xaddeadde
 8007dc0:	addeadde 	.word	0xaddeadde
 8007dc4:	addeadde 	.word	0xaddeadde
 8007dc8:	addeadde 	.word	0xaddeadde
 8007dcc:	addeadde 	.word	0xaddeadde
 8007dd0:	addeadde 	.word	0xaddeadde
 8007dd4:	addeadde 	.word	0xaddeadde
 8007dd8:	addeadde 	.word	0xaddeadde
 8007ddc:	addeadde 	.word	0xaddeadde
 8007de0:	addeadde 	.word	0xaddeadde
 8007de4:	addeadde 	.word	0xaddeadde
 8007de8:	addeadde 	.word	0xaddeadde
 8007dec:	addeadde 	.word	0xaddeadde
 8007df0:	addeadde 	.word	0xaddeadde
 8007df4:	addeadde 	.word	0xaddeadde
 8007df8:	addeadde 	.word	0xaddeadde
 8007dfc:	addeadde 	.word	0xaddeadde
 8007e00:	addeadde 	.word	0xaddeadde
 8007e04:	addeadde 	.word	0xaddeadde
 8007e08:	addeadde 	.word	0xaddeadde
 8007e0c:	addeadde 	.word	0xaddeadde
 8007e10:	addeadde 	.word	0xaddeadde
 8007e14:	addeadde 	.word	0xaddeadde
 8007e18:	addeadde 	.word	0xaddeadde
 8007e1c:	addeadde 	.word	0xaddeadde
 8007e20:	addeadde 	.word	0xaddeadde
 8007e24:	addeadde 	.word	0xaddeadde
 8007e28:	addeadde 	.word	0xaddeadde
 8007e2c:	addeadde 	.word	0xaddeadde
 8007e30:	addeadde 	.word	0xaddeadde
 8007e34:	addeadde 	.word	0xaddeadde
 8007e38:	addeadde 	.word	0xaddeadde
 8007e3c:	addeadde 	.word	0xaddeadde
 8007e40:	addeadde 	.word	0xaddeadde
 8007e44:	addeadde 	.word	0xaddeadde
 8007e48:	addeadde 	.word	0xaddeadde
 8007e4c:	addeadde 	.word	0xaddeadde
 8007e50:	addeadde 	.word	0xaddeadde
 8007e54:	addeadde 	.word	0xaddeadde
 8007e58:	addeadde 	.word	0xaddeadde
 8007e5c:	addeadde 	.word	0xaddeadde
 8007e60:	addeadde 	.word	0xaddeadde
 8007e64:	addeadde 	.word	0xaddeadde
 8007e68:	addeadde 	.word	0xaddeadde
 8007e6c:	addeadde 	.word	0xaddeadde
 8007e70:	addeadde 	.word	0xaddeadde
 8007e74:	addeadde 	.word	0xaddeadde
 8007e78:	addeadde 	.word	0xaddeadde
 8007e7c:	addeadde 	.word	0xaddeadde
 8007e80:	addeadde 	.word	0xaddeadde
 8007e84:	addeadde 	.word	0xaddeadde
 8007e88:	addeadde 	.word	0xaddeadde
 8007e8c:	addeadde 	.word	0xaddeadde
 8007e90:	addeadde 	.word	0xaddeadde
 8007e94:	addeadde 	.word	0xaddeadde
 8007e98:	addeadde 	.word	0xaddeadde
 8007e9c:	addeadde 	.word	0xaddeadde
 8007ea0:	addeadde 	.word	0xaddeadde
 8007ea4:	addeadde 	.word	0xaddeadde
 8007ea8:	addeadde 	.word	0xaddeadde
 8007eac:	addeadde 	.word	0xaddeadde
 8007eb0:	addeadde 	.word	0xaddeadde
 8007eb4:	addeadde 	.word	0xaddeadde
 8007eb8:	addeadde 	.word	0xaddeadde
 8007ebc:	addeadde 	.word	0xaddeadde
 8007ec0:	addeadde 	.word	0xaddeadde
 8007ec4:	addeadde 	.word	0xaddeadde
 8007ec8:	addeadde 	.word	0xaddeadde
 8007ecc:	addeadde 	.word	0xaddeadde
 8007ed0:	addeadde 	.word	0xaddeadde
 8007ed4:	addeadde 	.word	0xaddeadde
 8007ed8:	addeadde 	.word	0xaddeadde
 8007edc:	addeadde 	.word	0xaddeadde
 8007ee0:	addeadde 	.word	0xaddeadde
 8007ee4:	addeadde 	.word	0xaddeadde
 8007ee8:	addeadde 	.word	0xaddeadde
 8007eec:	addeadde 	.word	0xaddeadde
 8007ef0:	addeadde 	.word	0xaddeadde
 8007ef4:	addeadde 	.word	0xaddeadde
 8007ef8:	addeadde 	.word	0xaddeadde
 8007efc:	addeadde 	.word	0xaddeadde
 8007f00:	addeadde 	.word	0xaddeadde
 8007f04:	addeadde 	.word	0xaddeadde
 8007f08:	addeadde 	.word	0xaddeadde
 8007f0c:	addeadde 	.word	0xaddeadde
 8007f10:	addeadde 	.word	0xaddeadde
 8007f14:	addeadde 	.word	0xaddeadde
 8007f18:	addeadde 	.word	0xaddeadde
 8007f1c:	addeadde 	.word	0xaddeadde
 8007f20:	addeadde 	.word	0xaddeadde
 8007f24:	addeadde 	.word	0xaddeadde
 8007f28:	addeadde 	.word	0xaddeadde
 8007f2c:	addeadde 	.word	0xaddeadde
 8007f30:	addeadde 	.word	0xaddeadde
 8007f34:	addeadde 	.word	0xaddeadde
 8007f38:	addeadde 	.word	0xaddeadde
 8007f3c:	addeadde 	.word	0xaddeadde
 8007f40:	addeadde 	.word	0xaddeadde
 8007f44:	addeadde 	.word	0xaddeadde
 8007f48:	addeadde 	.word	0xaddeadde
 8007f4c:	addeadde 	.word	0xaddeadde
 8007f50:	addeadde 	.word	0xaddeadde
 8007f54:	addeadde 	.word	0xaddeadde
 8007f58:	addeadde 	.word	0xaddeadde
 8007f5c:	addeadde 	.word	0xaddeadde
 8007f60:	addeadde 	.word	0xaddeadde
 8007f64:	addeadde 	.word	0xaddeadde
 8007f68:	addeadde 	.word	0xaddeadde
 8007f6c:	addeadde 	.word	0xaddeadde
 8007f70:	addeadde 	.word	0xaddeadde
 8007f74:	addeadde 	.word	0xaddeadde
 8007f78:	addeadde 	.word	0xaddeadde
 8007f7c:	addeadde 	.word	0xaddeadde
 8007f80:	addeadde 	.word	0xaddeadde
 8007f84:	addeadde 	.word	0xaddeadde
 8007f88:	addeadde 	.word	0xaddeadde
 8007f8c:	addeadde 	.word	0xaddeadde
 8007f90:	addeadde 	.word	0xaddeadde
 8007f94:	addeadde 	.word	0xaddeadde
 8007f98:	addeadde 	.word	0xaddeadde
 8007f9c:	addeadde 	.word	0xaddeadde
 8007fa0:	addeadde 	.word	0xaddeadde
 8007fa4:	addeadde 	.word	0xaddeadde
 8007fa8:	addeadde 	.word	0xaddeadde
 8007fac:	addeadde 	.word	0xaddeadde
 8007fb0:	addeadde 	.word	0xaddeadde
 8007fb4:	addeadde 	.word	0xaddeadde
 8007fb8:	addeadde 	.word	0xaddeadde
 8007fbc:	addeadde 	.word	0xaddeadde
 8007fc0:	addeadde 	.word	0xaddeadde
 8007fc4:	addeadde 	.word	0xaddeadde
 8007fc8:	addeadde 	.word	0xaddeadde
 8007fcc:	addeadde 	.word	0xaddeadde
 8007fd0:	addeadde 	.word	0xaddeadde
 8007fd4:	addeadde 	.word	0xaddeadde
 8007fd8:	addeadde 	.word	0xaddeadde
 8007fdc:	addeadde 	.word	0xaddeadde
 8007fe0:	addeadde 	.word	0xaddeadde
 8007fe4:	addeadde 	.word	0xaddeadde
 8007fe8:	addeadde 	.word	0xaddeadde
 8007fec:	addeadde 	.word	0xaddeadde
 8007ff0:	addeadde 	.word	0xaddeadde
 8007ff4:	addeadde 	.word	0xaddeadde
 8007ff8:	addeadde 	.word	0xaddeadde
 8007ffc:	addeadde 	.word	0xaddeadde

Disassembly of section .text:

08008000 <MPU_SytemCall_1>:
}



void MPU_SytemCall_1()
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008006:	f000 ff07 	bl	8008e18 <xPortRaisePrivilege>
 800800a:	6078      	str	r0, [r7, #4]

	SytemCall_1_code();
 800800c:	f001 f9a4 	bl	8009358 <SytemCall_1_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 fe4b 	bl	8009cac <vPortResetPrivilege>

}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <MPU_SytemCall_2>:


void MPU_SytemCall_2()
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008024:	f000 fef8 	bl	8008e18 <xPortRaisePrivilege>
 8008028:	6078      	str	r0, [r7, #4]

	SytemCall_2_code();
 800802a:	f001 f99c 	bl	8009366 <SytemCall_2_code>

	vPortResetPrivilege( xRunningPrivileged );
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fe3c 	bl	8009cac <vPortResetPrivilege>

}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <MPU_SytemCall_3>:


void MPU_SytemCall_3()
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008042:	f000 fee9 	bl	8008e18 <xPortRaisePrivilege>
 8008046:	6078      	str	r0, [r7, #4]

	SytemCall_3_code();
 8008048:	f001 f994 	bl	8009374 <SytemCall_3_code>

	vPortResetPrivilege( xRunningPrivileged );
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 fe2d 	bl	8009cac <vPortResetPrivilege>

}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <MPU_SytemCall_4>:



void MPU_SytemCall_4(void *val)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008062:	f000 fed9 	bl	8008e18 <xPortRaisePrivilege>
 8008066:	60f8      	str	r0, [r7, #12]

	SytemCall_4_code(val);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f98a 	bl	8009382 <SytemCall_4_code>

	vPortResetPrivilege( xRunningPrivileged );
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f001 fe1c 	bl	8009cac <vPortResetPrivilege>

}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <MPU_SytemCall_5>:

void MPU_SytemCall_5(void *val)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008084:	f000 fec8 	bl	8008e18 <xPortRaisePrivilege>
 8008088:	60f8      	str	r0, [r7, #12]

	SytemCall_5_code(val);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 f983 	bl	8009396 <SytemCall_5_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f001 fe0b 	bl	8009cac <vPortResetPrivilege>

}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <MPU_xTaskCreate>:
                                const char * const pcName,
                                uint16_t usStackDepth,
                                void * pvParameters,
                                UBaseType_t uxPriority,
                                TaskHandle_t * pxCreatedTask ) /* FREERTOS_SYSTEM_CALL */
    {
 800809e:	b580      	push	{r7, lr}
 80080a0:	b088      	sub	sp, #32
 80080a2:	af02      	add	r7, sp, #8
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080ae:	f000 feb3 	bl	8008e18 <xPortRaisePrivilege>
 80080b2:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80080b4:	88fa      	ldrh	r2, [r7, #6]
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7fa fff4 	bl	80030b0 <xTaskCreate>
 80080c8:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80080ca:	6978      	ldr	r0, [r7, #20]
 80080cc:	f001 fdee 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 80080d0:	693b      	ldr	r3, [r7, #16]
    }
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <MPU_xTaskCreateStatic>:
                                        const uint32_t ulStackDepth,
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 80080da:	b580      	push	{r7, lr}
 80080dc:	b08a      	sub	sp, #40	; 0x28
 80080de:	af04      	add	r7, sp, #16
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080e8:	f000 fe96 	bl	8008e18 <xPortRaisePrivilege>
 80080ec:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7fb f81c 	bl	800313e <xTaskCreateStatic>
 8008106:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008108:	6978      	ldr	r0, [r7, #20]
 800810a:	f001 fdcf 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 800810e:	693b      	ldr	r3, [r7, #16]
    }
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <MPU_vTaskDelete>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )
    void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete ) /* FREERTOS_SYSTEM_CALL */
    {
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008120:	f000 fe7a 	bl	8008e18 <xPortRaisePrivilege>
 8008124:	60f8      	str	r0, [r7, #12]

        vTaskDelete( pxTaskToDelete );
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fb f92e 	bl	8003388 <vTaskDelete>
        vPortResetPrivilege( xRunningPrivileged );
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f001 fdbd 	bl	8009cac <vPortResetPrivilege>
    }
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <MPU_vTaskDelay>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )
    void MPU_vTaskDelay( TickType_t xTicksToDelay ) /* FREERTOS_SYSTEM_CALL */
    {
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008142:	f000 fe69 	bl	8008e18 <xPortRaisePrivilege>
 8008146:	60f8      	str	r0, [r7, #12]

        vTaskDelay( xTicksToDelay );
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fb f995 	bl	8003478 <vTaskDelay>
        vPortResetPrivilege( xRunningPrivileged );
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f001 fdac 	bl	8009cac <vPortResetPrivilege>
    }
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <MPU_xTaskDelayUntil>:
    {
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008166:	f000 fe57 	bl	8008e18 <xPortRaisePrivilege>
 800816a:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fb f9b6 	bl	80034e0 <xTaskDelayUntil>
 8008174:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f001 fd98 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 800817c:	68bb      	ldr	r3, [r7, #8]
    }
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <MPU_uxTaskPriorityGet>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800818e:	f000 fe43 	bl	8008e18 <xPortRaisePrivilege>
 8008192:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskPriorityGet( pxTask );
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fb fa21 	bl	80035dc <uxTaskPriorityGet>
 800819a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f001 fd85 	bl	8009cac <vPortResetPrivilege>
        return uxReturn;
 80081a2:	68bb      	ldr	r3, [r7, #8]
    }
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <MPU_eTaskGetState>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )
    eTaskState MPU_eTaskGetState( TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081b4:	f000 fe30 	bl	8008e18 <xPortRaisePrivilege>
 80081b8:	60f8      	str	r0, [r7, #12]
        eTaskState eReturn;

        eReturn = eTaskGetState( pxTask );
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fb fa58 	bl	8003670 <eTaskGetState>
 80081c0:	4603      	mov	r3, r0
 80081c2:	72fb      	strb	r3, [r7, #11]
        vPortResetPrivilege( xRunningPrivileged );
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f001 fd71 	bl	8009cac <vPortResetPrivilege>
        return eReturn;
 80081ca:	7afb      	ldrb	r3, [r7, #11]
    }
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <MPU_vTaskGetInfo>:
#if ( configUSE_TRACE_FACILITY == 1 )
    void MPU_vTaskGetInfo( TaskHandle_t xTask,
                           TaskStatus_t * pxTaskStatus,
                           BaseType_t xGetFreeStackSpace,
                           eTaskState eState ) /* FREERTOS_SYSTEM_CALL */
    {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	70fb      	strb	r3, [r7, #3]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081e2:	f000 fe19 	bl	8008e18 <xPortRaisePrivilege>
 80081e6:	6178      	str	r0, [r7, #20]

        vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7fb faba 	bl	8003768 <vTaskGetInfo>
        vPortResetPrivilege( xRunningPrivileged );
 80081f4:	6978      	ldr	r0, [r7, #20]
 80081f6:	f001 fd59 	bl	8009cac <vPortResetPrivilege>
    }
 80081fa:	bf00      	nop
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <MPU_vTaskPrioritySet>:
    {
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800820c:	f000 fe04 	bl	8008e18 <xPortRaisePrivilege>
 8008210:	60f8      	str	r0, [r7, #12]
        vTaskPrioritySet( pxTask, uxNewPriority );
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7fb fb13 	bl	8003840 <vTaskPrioritySet>
        vPortResetPrivilege( xRunningPrivileged );
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f001 fd46 	bl	8009cac <vPortResetPrivilege>
    }
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <MPU_vTaskSuspend>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend ) /* FREERTOS_SYSTEM_CALL */
    {
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008230:	f000 fdf2 	bl	8008e18 <xPortRaisePrivilege>
 8008234:	60f8      	str	r0, [r7, #12]

        vTaskSuspend( pxTaskToSuspend );
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fb fbdc 	bl	80039f4 <vTaskSuspend>
        vPortResetPrivilege( xRunningPrivileged );
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f001 fd35 	bl	8009cac <vPortResetPrivilege>
    }
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <MPU_vTaskResume>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskResume( TaskHandle_t pxTaskToResume ) /* FREERTOS_SYSTEM_CALL */
    {
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008252:	f000 fde1 	bl	8008e18 <xPortRaisePrivilege>
 8008256:	60f8      	str	r0, [r7, #12]

        vTaskResume( pxTaskToResume );
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7fb fc51 	bl	8003b00 <vTaskResume>
        vPortResetPrivilege( xRunningPrivileged );
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f001 fd24 	bl	8009cac <vPortResetPrivilege>
    }
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <MPU_vTaskSuspendAll>:
#endif
/*-----------------------------------------------------------*/

void MPU_vTaskSuspendAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008272:	f000 fdd1 	bl	8008e18 <xPortRaisePrivilege>
 8008276:	6078      	str	r0, [r7, #4]

    vTaskSuspendAll();
 8008278:	f7fb fe0a 	bl	8003e90 <vTaskSuspendAll>
    vPortResetPrivilege( xRunningPrivileged );
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 fd15 	bl	8009cac <vPortResetPrivilege>
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <MPU_xTaskResumeAll>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xTaskResumeAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008290:	f000 fdc2 	bl	8008e18 <xPortRaisePrivilege>
 8008294:	6078      	str	r0, [r7, #4]

    xReturn = xTaskResumeAll();
 8008296:	f7fb fe09 	bl	8003eac <xTaskResumeAll>
 800829a:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 fd05 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 80082a2:	683b      	ldr	r3, [r7, #0]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <MPU_xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t MPU_xTaskGetTickCount( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
    TickType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082b2:	f000 fdb1 	bl	8008e18 <xPortRaisePrivilege>
 80082b6:	6078      	str	r0, [r7, #4]

    xReturn = xTaskGetTickCount();
 80082b8:	f7fb ff0e 	bl	80040d8 <xTaskGetTickCount>
 80082bc:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fcf4 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 80082c4:	683b      	ldr	r3, [r7, #0]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <MPU_uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
    UBaseType_t uxReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082d4:	f000 fda0 	bl	8008e18 <xPortRaisePrivilege>
 80082d8:	6078      	str	r0, [r7, #4]

    uxReturn = uxTaskGetNumberOfTasks();
 80082da:	f7fb ff1f 	bl	800411c <uxTaskGetNumberOfTasks>
 80082de:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fce3 	bl	8009cac <vPortResetPrivilege>
    return uxReturn;
 80082e6:	683b      	ldr	r3, [r7, #0]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <MPU_pcTaskGetName>:
/*-----------------------------------------------------------*/

char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) /* FREERTOS_SYSTEM_CALL */
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
    char * pcReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082f8:	f000 fd8e 	bl	8008e18 <xPortRaisePrivilege>
 80082fc:	60f8      	str	r0, [r7, #12]

    pcReturn = pcTaskGetName( xTaskToQuery );
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fb ff18 	bl	8004134 <pcTaskGetName>
 8008304:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f001 fcd0 	bl	8009cac <vPortResetPrivilege>
    return pcReturn;
 800830c:	68bb      	ldr	r3, [r7, #8]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <MPU_uxTaskGetStackHighWaterMark>:
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
    UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800831e:	f000 fd7b 	bl	8008e18 <xPortRaisePrivilege>
 8008322:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fb ff29 	bl	800417c <uxTaskGetStackHighWaterMark>
 800832a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f001 fcbd 	bl	8009cac <vPortResetPrivilege>
        return uxReturn;
 8008332:	68bb      	ldr	r3, [r7, #8]
    }
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <MPU_uxTaskGetSystemState>:
    {
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008348:	f000 fd66 	bl	8008e18 <xPortRaisePrivilege>
 800834c:	6178      	str	r0, [r7, #20]
        uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7fb ff2e 	bl	80041b4 <uxTaskGetSystemState>
 8008358:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800835a:	6978      	ldr	r0, [r7, #20]
 800835c:	f001 fca6 	bl	8009cac <vPortResetPrivilege>
        return uxReturn;
 8008360:	693b      	ldr	r3, [r7, #16]
    }
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <MPU_xTaskGenericNotify>:
    BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                       UBaseType_t uxIndexToNotify,
                                       uint32_t ulValue,
                                       eNotifyAction eAction,
                                       uint32_t * pulPreviousNotificationValue ) /* FREERTOS_SYSTEM_CALL */
    {
 800836a:	b580      	push	{r7, lr}
 800836c:	b088      	sub	sp, #32
 800836e:	af02      	add	r7, sp, #8
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
 8008376:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008378:	f000 fd4e 	bl	8008e18 <xPortRaisePrivilege>
 800837c:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4613      	mov	r3, r2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7fb ffa0 	bl	80042d0 <xTaskGenericNotify>
 8008390:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008392:	6978      	ldr	r0, [r7, #20]
 8008394:	f001 fc8a 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 8008398:	693b      	ldr	r3, [r7, #16]
    }
 800839a:	4618      	mov	r0, r3
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <MPU_xTaskGenericNotifyWait>:
    BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                           uint32_t ulBitsToClearOnEntry,
                                           uint32_t ulBitsToClearOnExit,
                                           uint32_t * pulNotificationValue,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b088      	sub	sp, #32
 80083a6:	af02      	add	r7, sp, #8
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083b0:	f000 fd32 	bl	8008e18 <xPortRaisePrivilege>
 80083b4:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7fc fa41 	bl	8004848 <xTaskGenericNotifyWait>
 80083c6:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80083c8:	6978      	ldr	r0, [r7, #20]
 80083ca:	f001 fc6f 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 80083ce:	693b      	ldr	r3, [r7, #16]
    }
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <MPU_ulTaskGenericNotifyTake>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                          BaseType_t xClearCountOnExit,
                                          TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083e4:	f000 fd18 	bl	8008e18 <xPortRaisePrivilege>
 80083e8:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	68b9      	ldr	r1, [r7, #8]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7fc fbd2 	bl	8004b98 <ulTaskGenericNotifyTake>
 80083f4:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	f001 fc58 	bl	8009cac <vPortResetPrivilege>
        return ulReturn;
 80083fc:	693b      	ldr	r3, [r7, #16]
    }
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <MPU_xTaskGenericNotifyStateClear>:
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                                 UBaseType_t uxIndexToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008410:	f000 fd02 	bl	8008e18 <xPortRaisePrivilege>
 8008414:	60f8      	str	r0, [r7, #12]

        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fc fc2b 	bl	8004c74 <xTaskGenericNotifyStateClear>
 800841e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f001 fc43 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 8008426:	68bb      	ldr	r3, [r7, #8]
    }
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <MPU_ulTaskGenericNotifyValueClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                                UBaseType_t uxIndexToClear,
                                                uint32_t ulBitsToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800843c:	f000 fcec 	bl	8008e18 <xPortRaisePrivilege>
 8008440:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7fc fc50 	bl	8004cec <ulTaskGenericNotifyValueClear>
 800844c:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800844e:	6978      	ldr	r0, [r7, #20]
 8008450:	f001 fc2c 	bl	8009cac <vPortResetPrivilege>
        return ulReturn;
 8008454:	693b      	ldr	r3, [r7, #16]
    }
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <MPU_xTaskGetCurrentTaskHandle>:
    {
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008464:	f000 fcd8 	bl	8008e18 <xPortRaisePrivilege>
 8008468:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetCurrentTaskHandle();
 800846a:	f7fd f98b 	bl	8005784 <xTaskGetCurrentTaskHandle>
 800846e:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fc1b 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 8008476:	683b      	ldr	r3, [r7, #0]
    }
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <MPU_vTaskSetTimeOutState>:
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008488:	f000 fcc6 	bl	8008e18 <xPortRaisePrivilege>
 800848c:	60f8      	str	r0, [r7, #12]
    vTaskSetTimeOutState( pxTimeOut );
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fc fc5c 	bl	8004d4c <vTaskSetTimeOutState>
    vPortResetPrivilege( xRunningPrivileged );
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f001 fc09 	bl	8009cac <vPortResetPrivilege>
}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <MPU_xTaskCheckForTimeOut>:
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084ac:	f000 fcb4 	bl	8008e18 <xPortRaisePrivilege>
 80084b0:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fc fc6f 	bl	8004d98 <xTaskCheckForTimeOut>
 80084ba:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f001 fbf5 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 80084c2:	68bb      	ldr	r3, [r7, #8]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <MPU_xTaskGetSchedulerState>:
    {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084d2:	f000 fca1 	bl	8008e18 <xPortRaisePrivilege>
 80084d6:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetSchedulerState();
 80084d8:	f7fd f970 	bl	80057bc <xTaskGetSchedulerState>
 80084dc:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 fbe4 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 80084e4:	683b      	ldr	r3, [r7, #0]
    }
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <MPU_xTaskCatchUpTicks>:
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084f6:	f000 fc8f 	bl	8008e18 <xPortRaisePrivilege>
 80084fa:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fc fcb1 	bl	8004e64 <xTaskCatchUpTicks>
 8008502:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f001 fbd1 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 800850a:	68bb      	ldr	r3, [r7, #8]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <MPU_xQueueGenericSend>:

BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                                  const void * const pvItemToQueue,
                                  TickType_t xTicksToWait,
                                  BaseType_t xCopyPosition ) /* FREERTOS_SYSTEM_CALL */
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008522:	f000 fc79 	bl	8008e18 <xPortRaisePrivilege>
 8008526:	6178      	str	r0, [r7, #20]

    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7f8 fae8 	bl	8000b04 <xQueueGenericSend>
 8008534:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008536:	6978      	ldr	r0, [r7, #20]
 8008538:	f001 fbb8 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 800853c:	693b      	ldr	r3, [r7, #16]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <MPU_xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueReceive( QueueHandle_t pxQueue,
                              void * const pvBuffer,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b086      	sub	sp, #24
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008552:	f000 fc61 	bl	8008e18 <xPortRaisePrivilege>
 8008556:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68b9      	ldr	r1, [r7, #8]
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7f8 fd1a 	bl	8000f96 <xQueueReceive>
 8008562:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008564:	6978      	ldr	r0, [r7, #20]
 8008566:	f001 fba1 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 800856a:	693b      	ldr	r3, [r7, #16]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <MPU_xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                           void * const pvBuffer,
                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008580:	f000 fc4a 	bl	8008e18 <xPortRaisePrivilege>
 8008584:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7f8 fbb8 	bl	8000d00 <xQueuePeek>
 8008590:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	f001 fb8a 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 8008598:	693b      	ldr	r3, [r7, #16]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <MPU_xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                    TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085ac:	f000 fc34 	bl	8008e18 <xPortRaisePrivilege>
 80085b0:	60f8      	str	r0, [r7, #12]
    BaseType_t xReturn;

    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7f9 f901 	bl	80017bc <xQueueSemaphoreTake>
 80085ba:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f001 fb75 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 80085c2:	68bb      	ldr	r3, [r7, #8]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <MPU_uxQueueMessagesWaiting>:
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085d4:	f000 fc20 	bl	8008e18 <xPortRaisePrivilege>
 80085d8:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 fdba 	bl	8001154 <uxQueueMessagesWaiting>
 80085e0:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 fb62 	bl	8009cac <vPortResetPrivilege>
    return uxReturn;
 80085e8:	68bb      	ldr	r3, [r7, #8]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <MPU_uxQueueSpacesAvailable>:
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085fa:	f000 fc0d 	bl	8008e18 <xPortRaisePrivilege>
 80085fe:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueSpacesAvailable( xQueue );
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7f8 fdc5 	bl	8001190 <uxQueueSpacesAvailable>
 8008606:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f001 fb4f 	bl	8009cac <vPortResetPrivilege>
    return uxReturn;
 800860e:	68bb      	ldr	r3, [r7, #8]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <MPU_vQueueDelete>:
    }
#endif /* if configQUEUE_REGISTRY_SIZE > 0 */
/*-----------------------------------------------------------*/

void MPU_vQueueDelete( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008620:	f000 fbfa 	bl	8008e18 <xPortRaisePrivilege>
 8008624:	60f8      	str	r0, [r7, #12]

    vQueueDelete( xQueue );
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7f8 fdd5 	bl	80011d6 <vQueueDelete>

    vPortResetPrivilege( xRunningPrivileged );
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f001 fb3d 	bl	8009cac <vPortResetPrivilege>
}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <MPU_xQueueCreateMutex>:
    {
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	4603      	mov	r3, r0
 8008642:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008644:	f000 fbe8 	bl	8008e18 <xPortRaisePrivilege>
 8008648:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutex( ucQueueType );
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	4618      	mov	r0, r3
 800864e:	f7f9 f822 	bl	8001696 <xQueueCreateMutex>
 8008652:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f001 fb29 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 800865a:	68bb      	ldr	r3, [r7, #8]
    }
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <MPU_xQueueCreateMutexStatic>:
    {
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008670:	f000 fbd2 	bl	8008e18 <xPortRaisePrivilege>
 8008674:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7f9 f823 	bl	80016c6 <xQueueCreateMutexStatic>
 8008680:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f001 fb12 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 8008688:	68bb      	ldr	r3, [r7, #8]
    }
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <MPU_xQueueCreateCountingSemaphore>:
    {
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800869c:	f000 fbbc 	bl	8008e18 <xPortRaisePrivilege>
 80086a0:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7f9 f829 	bl	80016fc <xQueueCreateCountingSemaphore>
 80086aa:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f001 fafd 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 80086b2:	68bb      	ldr	r3, [r7, #8]
    }
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <MPU_xQueueCreateCountingSemaphoreStatic>:
    {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086c8:	f000 fba6 	bl	8008e18 <xPortRaisePrivilege>
 80086cc:	6178      	str	r0, [r7, #20]
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7f9 f840 	bl	8001758 <xQueueCreateCountingSemaphoreStatic>
 80086d8:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80086da:	6978      	ldr	r0, [r7, #20]
 80086dc:	f001 fae6 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 80086e0:	693b      	ldr	r3, [r7, #16]
    }
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <MPU_xQueueGetMutexHolder>:
    {
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086f2:	f000 fb91 	bl	8008e18 <xPortRaisePrivilege>
 80086f6:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGetMutexHolder( xSemaphore );
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7f9 f96b 	bl	80019d4 <xQueueGetMutexHolder>
 80086fe:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f001 fad3 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 8008706:	68bb      	ldr	r3, [r7, #8]
    }
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <MPU_xQueueTakeMutexRecursive>:
    {
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800871a:	f000 fb7d 	bl	8008e18 <xPortRaisePrivilege>
 800871e:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7f9 f9a0 	bl	8001a68 <xQueueTakeMutexRecursive>
 8008728:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f001 fabe 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 8008730:	68bb      	ldr	r3, [r7, #8]
    }
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <MPU_xQueueGiveMutexRecursive>:
    {
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008742:	f000 fb69 	bl	8008e18 <xPortRaisePrivilege>
 8008746:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGiveMutexRecursive( xMutex );
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7f9 f9c3 	bl	8001ad4 <xQueueGiveMutexRecursive>
 800874e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f001 faab 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 8008756:	68bb      	ldr	r3, [r7, #8]
    }
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <MPU_vQueueAddToRegistry>:
    {
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800876a:	f000 fb55 	bl	8008e18 <xPortRaisePrivilege>
 800876e:	60f8      	str	r0, [r7, #12]
        vQueueAddToRegistry( xQueue, pcName );
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f9 f9e2 	bl	8001b3c <vQueueAddToRegistry>
        vPortResetPrivilege( xRunningPrivileged );
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 fa97 	bl	8009cac <vPortResetPrivilege>
    }
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <MPU_vQueueUnregisterQueue>:
    {
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800878e:	f000 fb43 	bl	8008e18 <xPortRaisePrivilege>
 8008792:	60f8      	str	r0, [r7, #12]
        vQueueUnregisterQueue( xQueue );
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7f9 fa1f 	bl	8001bd8 <vQueueUnregisterQueue>
        vPortResetPrivilege( xRunningPrivileged );
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f001 fa86 	bl	8009cac <vPortResetPrivilege>
    }
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <MPU_pcQueueGetName>:
    {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087b0:	f000 fb32 	bl	8008e18 <xPortRaisePrivilege>
 80087b4:	60f8      	str	r0, [r7, #12]
        pcReturn = pcQueueGetName( xQueue );
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7f9 fa46 	bl	8001c48 <pcQueueGetName>
 80087bc:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f001 fa74 	bl	8009cac <vPortResetPrivilege>
        return pcReturn;
 80087c4:	68bb      	ldr	r3, [r7, #8]
    }
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <MPU_xQueueGenericCreate>:
    {
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b086      	sub	sp, #24
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	4613      	mov	r3, r2
 80087da:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087dc:	f000 fb1c 	bl	8008e18 <xPortRaisePrivilege>
 80087e0:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	461a      	mov	r2, r3
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7f9 fa61 	bl	8001cb0 <xQueueGenericCreate>
 80087ee:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80087f0:	6978      	ldr	r0, [r7, #20]
 80087f2:	f001 fa5b 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 80087f6:	693b      	ldr	r3, [r7, #16]
    }
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <MPU_xQueueGenericCreateStatic>:
    {
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800880e:	f000 fb03 	bl	8008e18 <xPortRaisePrivilege>
 8008812:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 8008814:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7f9 fa97 	bl	8001d54 <xQueueGenericCreateStatic>
 8008826:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008828:	6978      	ldr	r0, [r7, #20]
 800882a:	f001 fa3f 	bl	8009cac <vPortResetPrivilege>
        return xReturn;
 800882e:	693b      	ldr	r3, [r7, #16]
    }
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <MPU_xQueueGenericReset>:
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008842:	f000 fae9 	bl	8008e18 <xPortRaisePrivilege>
 8008846:	60f8      	str	r0, [r7, #12]
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7f9 fb14 	bl	8001e78 <xQueueGenericReset>
 8008850:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f001 fa2a 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 8008858:	68bb      	ldr	r3, [r7, #8]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <MPU_xTimerCreate>:
    TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction ) /* FREERTOS_SYSTEM_CALL */
    {
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008870:	f000 fad2 	bl	8008e18 <xPortRaisePrivilege>
 8008874:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7fd fd87 	bl	8006394 <xTimerCreate>
 8008886:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008888:	6978      	ldr	r0, [r7, #20]
 800888a:	f001 fa0f 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 800888e:	693b      	ldr	r3, [r7, #16]
    }
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <MPU_xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af02      	add	r7, sp, #8
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088a6:	f000 fab7 	bl	8008e18 <xPortRaisePrivilege>
 80088aa:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7fd fd8b 	bl	80063d6 <xTimerCreateStatic>
 80088c0:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80088c2:	6978      	ldr	r0, [r7, #20]
 80088c4:	f001 f9f2 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 80088c8:	693b      	ldr	r3, [r7, #16]
    }
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <MPU_pvTimerGetTimerID>:
#endif /* if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void * MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
        void * pvReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088da:	f000 fa9d 	bl	8008e18 <xPortRaisePrivilege>
 80088de:	60f8      	str	r0, [r7, #12]

        pvReturn = pvTimerGetTimerID( xTimer );
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fd fdb6 	bl	8006452 <pvTimerGetTimerID>
 80088e6:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f001 f9df 	bl	8009cac <vPortResetPrivilege>

        return pvReturn;
 80088ee:	68bb      	ldr	r3, [r7, #8]
    }
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <MPU_vTimerSetTimerID>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void MPU_vTimerSetTimerID( TimerHandle_t xTimer,
                               void * pvNewID ) /* FREERTOS_SYSTEM_CALL */
    {
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008902:	f000 fa89 	bl	8008e18 <xPortRaisePrivilege>
 8008906:	60f8      	str	r0, [r7, #12]

        vTimerSetTimerID( xTimer, pvNewID );
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fd fdc1 	bl	8006492 <vTimerSetTimerID>
        vPortResetPrivilege( xRunningPrivileged );
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 f9cb 	bl	8009cac <vPortResetPrivilege>
    }
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <MPU_xTimerIsTimerActive>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008926:	f000 fa77 	bl	8008e18 <xPortRaisePrivilege>
 800892a:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerIsTimerActive( xTimer );
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7fd fdd0 	bl	80064d2 <xTimerIsTimerActive>
 8008932:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f001 f9b9 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 800893a:	68bb      	ldr	r3, [r7, #8]
    }
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <MPU_xTimerGetTimerDaemonTaskHandle>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800894a:	f000 fa65 	bl	8008e18 <xPortRaisePrivilege>
 800894e:	6078      	str	r0, [r7, #4]

        xReturn = xTimerGetTimerDaemonTaskHandle();
 8008950:	f7fd fde8 	bl	8006524 <xTimerGetTimerDaemonTaskHandle>
 8008954:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f9a8 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 800895c:	683b      	ldr	r3, [r7, #0]
    }
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <MPU_xTimerPendFunctionCall>:
#if ( ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )
    BaseType_t MPU_xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008974:	f000 fa50 	bl	8008e18 <xPortRaisePrivilege>
 8008978:	6178      	str	r0, [r7, #20]

        xReturn = xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7fd fe0b 	bl	800659c <xTimerPendFunctionCall>
 8008986:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008988:	6978      	ldr	r0, [r7, #20]
 800898a:	f001 f98f 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 800898e:	693b      	ldr	r3, [r7, #16]
    }
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <MPU_pcTimerGetName>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
        const char * pcReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089a0:	f000 fa3a 	bl	8008e18 <xPortRaisePrivilege>
 80089a4:	60f8      	str	r0, [r7, #12]

        pcReturn = pcTimerGetName( xTimer );
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fd fe28 	bl	80065fc <pcTimerGetName>
 80089ac:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f001 f97c 	bl	8009cac <vPortResetPrivilege>

        return pcReturn;
 80089b4:	68bb      	ldr	r3, [r7, #8]
    }
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <MPU_vTimerSetReloadMode>:
    {
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089c8:	f000 fa26 	bl	8008e18 <xPortRaisePrivilege>
 80089cc:	60f8      	str	r0, [r7, #12]
        vTimerSetReloadMode( xTimer, uxAutoReload );
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fd fe2f 	bl	8006634 <vTimerSetReloadMode>
        vPortResetPrivilege( xRunningPrivileged );
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 f968 	bl	8009cac <vPortResetPrivilege>
    }
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <MPU_uxTimerGetReloadMode>:
    {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089ec:	f000 fa14 	bl	8008e18 <xPortRaisePrivilege>
 80089f0:	60f8      	str	r0, [r7, #12]
        uxReturn = uxTimerGetReloadMode( xTimer );
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fd fe51 	bl	800669a <uxTimerGetReloadMode>
 80089f8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f001 f956 	bl	8009cac <vPortResetPrivilege>
        return uxReturn;
 8008a00:	68bb      	ldr	r3, [r7, #8]
    }
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <MPU_xTimerGetPeriod>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a12:	f000 fa01 	bl	8008e18 <xPortRaisePrivilege>
 8008a16:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetPeriod( xTimer );
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fd fe67 	bl	80066ec <xTimerGetPeriod>
 8008a1e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f001 f943 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 8008a26:	68bb      	ldr	r3, [r7, #8]
    }
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <MPU_xTimerGetExpiryTime>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a38:	f000 f9ee 	bl	8008e18 <xPortRaisePrivilege>
 8008a3c:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetExpiryTime( xTimer );
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7fd fe70 	bl	8006724 <xTimerGetExpiryTime>
 8008a44:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f001 f930 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
    }
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <MPU_xTimerGenericCommand>:
    BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer,
                                         const BaseType_t xCommandID,
                                         const TickType_t xOptionalValue,
                                         BaseType_t * const pxHigherPriorityTaskWoken,
                                         const TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af02      	add	r7, sp, #8
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a64:	f000 f9d8 	bl	8008e18 <xPortRaisePrivilege>
 8008a68:	6178      	str	r0, [r7, #20]

        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7fd febd 	bl	80067f4 <xTimerGenericCommand>
 8008a7a:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008a7c:	6978      	ldr	r0, [r7, #20]
 8008a7e:	f001 f915 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 8008a82:	693b      	ldr	r3, [r7, #16]
    }
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <MPU_xEventGroupCreate>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreate( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a92:	f000 f9c1 	bl	8008e18 <xPortRaisePrivilege>
 8008a96:	6078      	str	r0, [r7, #4]

        xReturn = xEventGroupCreate();
 8008a98:	f7f7 fbfe 	bl	8000298 <xEventGroupCreate>
 8008a9c:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 f904 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 8008aa4:	683b      	ldr	r3, [r7, #0]
    }
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <MPU_xEventGroupCreateStatic>:
#endif /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ab6:	f000 f9af 	bl	8008e18 <xPortRaisePrivilege>
 8008aba:	60f8      	str	r0, [r7, #12]

        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7f7 fc05 	bl	80002cc <xEventGroupCreateStatic>
 8008ac2:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f001 f8f1 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 8008aca:	68bb      	ldr	r3, [r7, #8]
    }
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <MPU_xEventGroupWaitBits>:
EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ae2:	f000 f999 	bl	8008e18 <xPortRaisePrivilege>
 8008ae6:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f7f7 fc21 	bl	800033a <xEventGroupWaitBits>
 8008af8:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008afa:	6978      	ldr	r0, [r7, #20]
 8008afc:	f001 f8d6 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008b00:	693b      	ldr	r3, [r7, #16]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <MPU_xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear ) /* FREERTOS_SYSTEM_CALL */
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b14:	f000 f980 	bl	8008e18 <xPortRaisePrivilege>
 8008b18:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7f7 fcdb 	bl	80004d8 <xEventGroupClearBits>
 8008b22:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f001 f8c1 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <MPU_xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet ) /* FREERTOS_SYSTEM_CALL */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b3e:	f000 f96b 	bl	8008e18 <xPortRaisePrivilege>
 8008b42:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7f7 fd12 	bl	8000570 <xEventGroupSetBits>
 8008b4c:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 f8ac 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008b54:	68bb      	ldr	r3, [r7, #8]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <MPU_xEventGroupSync>:

EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
 8008b6a:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b6c:	f000 f954 	bl	8008e18 <xPortRaisePrivilege>
 8008b70:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7f7 fd99 	bl	80006b0 <xEventGroupSync>
 8008b7e:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008b80:	6978      	ldr	r0, [r7, #20]
 8008b82:	f001 f893 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008b86:	693b      	ldr	r3, [r7, #16]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <MPU_vEventGroupDelete>:
/*-----------------------------------------------------------*/

void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup ) /* FREERTOS_SYSTEM_CALL */
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b98:	f000 f93e 	bl	8008e18 <xPortRaisePrivilege>
 8008b9c:	60f8      	str	r0, [r7, #12]

    vEventGroupDelete( xEventGroup );
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7f7 fe58 	bl	8000854 <vEventGroupDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f001 f881 	bl	8009cac <vPortResetPrivilege>
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <MPU_xStreamBufferSend>:

size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                              const void * pvTxData,
                              size_t xDataLengthBytes,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bc0:	f000 f92a 	bl	8008e18 <xPortRaisePrivilege>
 8008bc4:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7f9 fb6f 	bl	80022b0 <xStreamBufferSend>
 8008bd2:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008bd4:	6978      	ldr	r0, [r7, #20]
 8008bd6:	f001 f869 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008bda:	693b      	ldr	r3, [r7, #16]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <MPU_xStreamBufferReceive>:

size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                 void * pvRxData,
                                 size_t xBufferLengthBytes,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bf2:	f000 f911 	bl	8008e18 <xPortRaisePrivilege>
 8008bf6:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7f9 fc96 	bl	8002530 <xStreamBufferReceive>
 8008c04:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008c06:	6978      	ldr	r0, [r7, #20]
 8008c08:	f001 f850 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008c0c:	693b      	ldr	r3, [r7, #16]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <MPU_xStreamBufferNextMessageLengthBytes>:
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c1e:	f000 f8fb 	bl	8008e18 <xPortRaisePrivilege>
 8008c22:	60f8      	str	r0, [r7, #12]
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7fa f838 	bl	8002c9a <xStreamBufferNextMessageLengthBytes>
 8008c2a:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f001 f83d 	bl	8009cac <vPortResetPrivilege>
    return xReturn;
 8008c32:	68bb      	ldr	r3, [r7, #8]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <MPU_vStreamBufferDelete>:
/*-----------------------------------------------------------*/

void MPU_vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c44:	f000 f8e8 	bl	8008e18 <xPortRaisePrivilege>
 8008c48:	60f8      	str	r0, [r7, #12]

    vStreamBufferDelete( xStreamBuffer );
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7f9 fd77 	bl	800273e <vStreamBufferDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f001 f82b 	bl	8009cac <vPortResetPrivilege>
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <MPU_xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c66:	f000 f8d7 	bl	8008e18 <xPortRaisePrivilege>
 8008c6a:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsFull( xStreamBuffer );
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7f9 fd8d 	bl	800278c <xStreamBufferIsFull>
 8008c72:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f001 f819 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <MPU_xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c8c:	f000 f8c4 	bl	8008e18 <xPortRaisePrivilege>
 8008c90:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7f9 fdaa 	bl	80027ec <xStreamBufferIsEmpty>
 8008c98:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f001 f806 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <MPU_xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cb2:	f000 f8b1 	bl	8008e18 <xPortRaisePrivilege>
 8008cb6:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferReset( xStreamBuffer );
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7f9 fdbf 	bl	800283c <xStreamBufferReset>
 8008cbe:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fff3 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <MPU_xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cd8:	f000 f89e 	bl	8008e18 <xPortRaisePrivilege>
 8008cdc:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7f9 fde8 	bl	80028b4 <xStreamBufferSpacesAvailable>
 8008ce4:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 ffe0 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008cec:	68bb      	ldr	r3, [r7, #8]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <MPU_xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cfe:	f000 f88b 	bl	8008e18 <xPortRaisePrivilege>
 8008d02:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7f9 fe10 	bl	800292a <xStreamBufferBytesAvailable>
 8008d0a:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 ffcd 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008d12:	68bb      	ldr	r3, [r7, #8]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <MPU_xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                             size_t xTriggerLevel ) /* FREERTOS_SYSTEM_CALL */
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d26:	f000 f877 	bl	8008e18 <xPortRaisePrivilege>
 8008d2a:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7f9 fe18 	bl	8002964 <xStreamBufferSetTriggerLevel>
 8008d34:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 ffb8 	bl	8009cac <vPortResetPrivilege>

    return xReturn;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <MPU_xStreamBufferGenericCreate>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    StreamBufferHandle_t MPU_xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                         size_t xTriggerLevelBytes,
                                                         BaseType_t xIsMessageBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d52:	f000 f861 	bl	8008e18 <xPortRaisePrivilege>
 8008d56:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7f9 feb9 	bl	8002ad4 <xStreamBufferGenericCreate>
 8008d62:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008d64:	6978      	ldr	r0, [r7, #20]
 8008d66:	f000 ffa1 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 8008d6a:	693b      	ldr	r3, [r7, #16]
    }
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <MPU_xStreamBufferGenericCreateStatic>:
    StreamBufferHandle_t MPU_xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
                                                               size_t xTriggerLevelBytes,
                                                               BaseType_t xIsMessageBuffer,
                                                               uint8_t * const pucStreamBufferStorageArea,
                                                               StaticStreamBuffer_t * const pxStaticStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d82:	f000 f849 	bl	8008e18 <xPortRaisePrivilege>
 8008d86:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7f9 ff00 	bl	8002b98 <xStreamBufferGenericCreateStatic>
 8008d98:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008d9a:	6978      	ldr	r0, [r7, #20]
 8008d9c:	f000 ff86 	bl	8009cac <vPortResetPrivilege>

        return xReturn;
 8008da0:	693b      	ldr	r3, [r7, #16]
    }
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <MPU_ASAN_malloc>:
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008db2:	f000 f831 	bl	8008e18 <xPortRaisePrivilege>
 8008db6:	60f8      	str	r0, [r7, #12]
	void *ptr = Allocate(size, 8, FROM_MALLOC, true);
 8008db8:	2301      	movs	r3, #1
 8008dba:	2201      	movs	r2, #1
 8008dbc:	2108      	movs	r1, #8
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fcf6 	bl	80097b0 <Allocate>
 8008dc4:	60b8      	str	r0, [r7, #8]
	vPortResetPrivilege( xRunningPrivileged );
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 ff70 	bl	8009cac <vPortResetPrivilege>
	return  (void *	)ptr;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <MPU_ASAN_free>:
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008dde:	f000 f81b 	bl	8008e18 <xPortRaisePrivilege>
 8008de2:	60f8      	str	r0, [r7, #12]
	Deallocate(ptr, 0, 0, FROM_MALLOC);
 8008de4:	2301      	movs	r3, #1
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fef2 	bl	8009bd4 <Deallocate>
	vPortResetPrivilege( xRunningPrivileged );
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 ff5b 	bl	8009cac <vPortResetPrivilege>
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <MPU_ASAN_flush_alloc>:
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e04:	f000 f808 	bl	8008e18 <xPortRaisePrivilege>
 8008e08:	6078      	str	r0, [r7, #4]
	vPortResetPrivilege( xRunningPrivileged );
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 ff4e 	bl	8009cac <vPortResetPrivilege>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <xPortRaisePrivilege>:
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008e1e:	f000 ffcf 	bl	8009dc0 <xIsPrivileged>
 8008e22:	6078      	str	r0, [r7, #4]
    if( xRunningPrivileged == pdFALSE )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d100      	bne.n	8008e2c <xPortRaisePrivilege+0x14>
        portRAISE_PRIVILEGE();
 8008e2a:	df02      	svc	2
    return xRunningPrivileged;
 8008e2c:	687b      	ldr	r3, [r7, #4]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <__syscalls_flash_end__>:
	...

08008e38 <__do_global_dtors_aux>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	4c05      	ldr	r4, [pc, #20]	; (8008e50 <__do_global_dtors_aux+0x18>)
 8008e3c:	7823      	ldrb	r3, [r4, #0]
 8008e3e:	b933      	cbnz	r3, 8008e4e <__do_global_dtors_aux+0x16>
 8008e40:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <__do_global_dtors_aux+0x1c>)
 8008e42:	b113      	cbz	r3, 8008e4a <__do_global_dtors_aux+0x12>
 8008e44:	4804      	ldr	r0, [pc, #16]	; (8008e58 <__do_global_dtors_aux+0x20>)
 8008e46:	f3af 8000 	nop.w
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	7023      	strb	r3, [r4, #0]
 8008e4e:	bd10      	pop	{r4, pc}
 8008e50:	24010000 	.word	0x24010000
 8008e54:	00000000 	.word	0x00000000
 8008e58:	0801d5b4 	.word	0x0801d5b4

08008e5c <frame_dummy>:
 8008e5c:	b508      	push	{r3, lr}
 8008e5e:	4b03      	ldr	r3, [pc, #12]	; (8008e6c <frame_dummy+0x10>)
 8008e60:	b11b      	cbz	r3, 8008e6a <frame_dummy+0xe>
 8008e62:	4903      	ldr	r1, [pc, #12]	; (8008e70 <frame_dummy+0x14>)
 8008e64:	4803      	ldr	r0, [pc, #12]	; (8008e74 <frame_dummy+0x18>)
 8008e66:	f3af 8000 	nop.w
 8008e6a:	bd08      	pop	{r3, pc}
 8008e6c:	00000000 	.word	0x00000000
 8008e70:	24010004 	.word	0x24010004
 8008e74:	0801d5b4 	.word	0x0801d5b4
	...

08008e80 <memchr>:
 8008e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008e84:	2a10      	cmp	r2, #16
 8008e86:	db2b      	blt.n	8008ee0 <memchr+0x60>
 8008e88:	f010 0f07 	tst.w	r0, #7
 8008e8c:	d008      	beq.n	8008ea0 <memchr+0x20>
 8008e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e92:	3a01      	subs	r2, #1
 8008e94:	428b      	cmp	r3, r1
 8008e96:	d02d      	beq.n	8008ef4 <memchr+0x74>
 8008e98:	f010 0f07 	tst.w	r0, #7
 8008e9c:	b342      	cbz	r2, 8008ef0 <memchr+0x70>
 8008e9e:	d1f6      	bne.n	8008e8e <memchr+0xe>
 8008ea0:	b4f0      	push	{r4, r5, r6, r7}
 8008ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8008eaa:	f022 0407 	bic.w	r4, r2, #7
 8008eae:	f07f 0700 	mvns.w	r7, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008eb8:	3c08      	subs	r4, #8
 8008eba:	ea85 0501 	eor.w	r5, r5, r1
 8008ebe:	ea86 0601 	eor.w	r6, r6, r1
 8008ec2:	fa85 f547 	uadd8	r5, r5, r7
 8008ec6:	faa3 f587 	sel	r5, r3, r7
 8008eca:	fa86 f647 	uadd8	r6, r6, r7
 8008ece:	faa5 f687 	sel	r6, r5, r7
 8008ed2:	b98e      	cbnz	r6, 8008ef8 <memchr+0x78>
 8008ed4:	d1ee      	bne.n	8008eb4 <memchr+0x34>
 8008ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8008ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008edc:	f002 0207 	and.w	r2, r2, #7
 8008ee0:	b132      	cbz	r2, 8008ef0 <memchr+0x70>
 8008ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ee6:	3a01      	subs	r2, #1
 8008ee8:	ea83 0301 	eor.w	r3, r3, r1
 8008eec:	b113      	cbz	r3, 8008ef4 <memchr+0x74>
 8008eee:	d1f8      	bne.n	8008ee2 <memchr+0x62>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	4770      	bx	lr
 8008ef4:	3801      	subs	r0, #1
 8008ef6:	4770      	bx	lr
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	bf06      	itte	eq
 8008efc:	4635      	moveq	r5, r6
 8008efe:	3803      	subeq	r0, #3
 8008f00:	3807      	subne	r0, #7
 8008f02:	f015 0f01 	tst.w	r5, #1
 8008f06:	d107      	bne.n	8008f18 <memchr+0x98>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008f0e:	bf02      	ittt	eq
 8008f10:	3001      	addeq	r0, #1
 8008f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008f16:	3001      	addeq	r0, #1
 8008f18:	bcf0      	pop	{r4, r5, r6, r7}
 8008f1a:	3801      	subs	r0, #1
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop

08008f20 <__aeabi_uldivmod>:
 8008f20:	b953      	cbnz	r3, 8008f38 <__aeabi_uldivmod+0x18>
 8008f22:	b94a      	cbnz	r2, 8008f38 <__aeabi_uldivmod+0x18>
 8008f24:	2900      	cmp	r1, #0
 8008f26:	bf08      	it	eq
 8008f28:	2800      	cmpeq	r0, #0
 8008f2a:	bf1c      	itt	ne
 8008f2c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008f30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008f34:	f000 b974 	b.w	8009220 <__aeabi_idiv0>
 8008f38:	f1ad 0c08 	sub.w	ip, sp, #8
 8008f3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008f40:	f000 f806 	bl	8008f50 <__udivmoddi4>
 8008f44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f4c:	b004      	add	sp, #16
 8008f4e:	4770      	bx	lr

08008f50 <__udivmoddi4>:
 8008f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f54:	9d08      	ldr	r5, [sp, #32]
 8008f56:	4604      	mov	r4, r0
 8008f58:	468e      	mov	lr, r1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d14d      	bne.n	8008ffa <__udivmoddi4+0xaa>
 8008f5e:	428a      	cmp	r2, r1
 8008f60:	4694      	mov	ip, r2
 8008f62:	d969      	bls.n	8009038 <__udivmoddi4+0xe8>
 8008f64:	fab2 f282 	clz	r2, r2
 8008f68:	b152      	cbz	r2, 8008f80 <__udivmoddi4+0x30>
 8008f6a:	fa01 f302 	lsl.w	r3, r1, r2
 8008f6e:	f1c2 0120 	rsb	r1, r2, #32
 8008f72:	fa20 f101 	lsr.w	r1, r0, r1
 8008f76:	fa0c fc02 	lsl.w	ip, ip, r2
 8008f7a:	ea41 0e03 	orr.w	lr, r1, r3
 8008f7e:	4094      	lsls	r4, r2
 8008f80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008f84:	0c21      	lsrs	r1, r4, #16
 8008f86:	fbbe f6f8 	udiv	r6, lr, r8
 8008f8a:	fa1f f78c 	uxth.w	r7, ip
 8008f8e:	fb08 e316 	mls	r3, r8, r6, lr
 8008f92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008f96:	fb06 f107 	mul.w	r1, r6, r7
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	d90a      	bls.n	8008fb4 <__udivmoddi4+0x64>
 8008f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8008fa2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8008fa6:	f080 811f 	bcs.w	80091e8 <__udivmoddi4+0x298>
 8008faa:	4299      	cmp	r1, r3
 8008fac:	f240 811c 	bls.w	80091e8 <__udivmoddi4+0x298>
 8008fb0:	3e02      	subs	r6, #2
 8008fb2:	4463      	add	r3, ip
 8008fb4:	1a5b      	subs	r3, r3, r1
 8008fb6:	b2a4      	uxth	r4, r4
 8008fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008fbc:	fb08 3310 	mls	r3, r8, r0, r3
 8008fc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008fc4:	fb00 f707 	mul.w	r7, r0, r7
 8008fc8:	42a7      	cmp	r7, r4
 8008fca:	d90a      	bls.n	8008fe2 <__udivmoddi4+0x92>
 8008fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8008fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008fd4:	f080 810a 	bcs.w	80091ec <__udivmoddi4+0x29c>
 8008fd8:	42a7      	cmp	r7, r4
 8008fda:	f240 8107 	bls.w	80091ec <__udivmoddi4+0x29c>
 8008fde:	4464      	add	r4, ip
 8008fe0:	3802      	subs	r0, #2
 8008fe2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008fe6:	1be4      	subs	r4, r4, r7
 8008fe8:	2600      	movs	r6, #0
 8008fea:	b11d      	cbz	r5, 8008ff4 <__udivmoddi4+0xa4>
 8008fec:	40d4      	lsrs	r4, r2
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e9c5 4300 	strd	r4, r3, [r5]
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffa:	428b      	cmp	r3, r1
 8008ffc:	d909      	bls.n	8009012 <__udivmoddi4+0xc2>
 8008ffe:	2d00      	cmp	r5, #0
 8009000:	f000 80ef 	beq.w	80091e2 <__udivmoddi4+0x292>
 8009004:	2600      	movs	r6, #0
 8009006:	e9c5 0100 	strd	r0, r1, [r5]
 800900a:	4630      	mov	r0, r6
 800900c:	4631      	mov	r1, r6
 800900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009012:	fab3 f683 	clz	r6, r3
 8009016:	2e00      	cmp	r6, #0
 8009018:	d14a      	bne.n	80090b0 <__udivmoddi4+0x160>
 800901a:	428b      	cmp	r3, r1
 800901c:	d302      	bcc.n	8009024 <__udivmoddi4+0xd4>
 800901e:	4282      	cmp	r2, r0
 8009020:	f200 80f9 	bhi.w	8009216 <__udivmoddi4+0x2c6>
 8009024:	1a84      	subs	r4, r0, r2
 8009026:	eb61 0303 	sbc.w	r3, r1, r3
 800902a:	2001      	movs	r0, #1
 800902c:	469e      	mov	lr, r3
 800902e:	2d00      	cmp	r5, #0
 8009030:	d0e0      	beq.n	8008ff4 <__udivmoddi4+0xa4>
 8009032:	e9c5 4e00 	strd	r4, lr, [r5]
 8009036:	e7dd      	b.n	8008ff4 <__udivmoddi4+0xa4>
 8009038:	b902      	cbnz	r2, 800903c <__udivmoddi4+0xec>
 800903a:	deff      	udf	#255	; 0xff
 800903c:	fab2 f282 	clz	r2, r2
 8009040:	2a00      	cmp	r2, #0
 8009042:	f040 8092 	bne.w	800916a <__udivmoddi4+0x21a>
 8009046:	eba1 010c 	sub.w	r1, r1, ip
 800904a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800904e:	fa1f fe8c 	uxth.w	lr, ip
 8009052:	2601      	movs	r6, #1
 8009054:	0c20      	lsrs	r0, r4, #16
 8009056:	fbb1 f3f7 	udiv	r3, r1, r7
 800905a:	fb07 1113 	mls	r1, r7, r3, r1
 800905e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009062:	fb0e f003 	mul.w	r0, lr, r3
 8009066:	4288      	cmp	r0, r1
 8009068:	d908      	bls.n	800907c <__udivmoddi4+0x12c>
 800906a:	eb1c 0101 	adds.w	r1, ip, r1
 800906e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009072:	d202      	bcs.n	800907a <__udivmoddi4+0x12a>
 8009074:	4288      	cmp	r0, r1
 8009076:	f200 80cb 	bhi.w	8009210 <__udivmoddi4+0x2c0>
 800907a:	4643      	mov	r3, r8
 800907c:	1a09      	subs	r1, r1, r0
 800907e:	b2a4      	uxth	r4, r4
 8009080:	fbb1 f0f7 	udiv	r0, r1, r7
 8009084:	fb07 1110 	mls	r1, r7, r0, r1
 8009088:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800908c:	fb0e fe00 	mul.w	lr, lr, r0
 8009090:	45a6      	cmp	lr, r4
 8009092:	d908      	bls.n	80090a6 <__udivmoddi4+0x156>
 8009094:	eb1c 0404 	adds.w	r4, ip, r4
 8009098:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800909c:	d202      	bcs.n	80090a4 <__udivmoddi4+0x154>
 800909e:	45a6      	cmp	lr, r4
 80090a0:	f200 80bb 	bhi.w	800921a <__udivmoddi4+0x2ca>
 80090a4:	4608      	mov	r0, r1
 80090a6:	eba4 040e 	sub.w	r4, r4, lr
 80090aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80090ae:	e79c      	b.n	8008fea <__udivmoddi4+0x9a>
 80090b0:	f1c6 0720 	rsb	r7, r6, #32
 80090b4:	40b3      	lsls	r3, r6
 80090b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80090ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80090be:	fa20 f407 	lsr.w	r4, r0, r7
 80090c2:	fa01 f306 	lsl.w	r3, r1, r6
 80090c6:	431c      	orrs	r4, r3
 80090c8:	40f9      	lsrs	r1, r7
 80090ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80090ce:	fa00 f306 	lsl.w	r3, r0, r6
 80090d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80090d6:	0c20      	lsrs	r0, r4, #16
 80090d8:	fa1f fe8c 	uxth.w	lr, ip
 80090dc:	fb09 1118 	mls	r1, r9, r8, r1
 80090e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80090e4:	fb08 f00e 	mul.w	r0, r8, lr
 80090e8:	4288      	cmp	r0, r1
 80090ea:	fa02 f206 	lsl.w	r2, r2, r6
 80090ee:	d90b      	bls.n	8009108 <__udivmoddi4+0x1b8>
 80090f0:	eb1c 0101 	adds.w	r1, ip, r1
 80090f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80090f8:	f080 8088 	bcs.w	800920c <__udivmoddi4+0x2bc>
 80090fc:	4288      	cmp	r0, r1
 80090fe:	f240 8085 	bls.w	800920c <__udivmoddi4+0x2bc>
 8009102:	f1a8 0802 	sub.w	r8, r8, #2
 8009106:	4461      	add	r1, ip
 8009108:	1a09      	subs	r1, r1, r0
 800910a:	b2a4      	uxth	r4, r4
 800910c:	fbb1 f0f9 	udiv	r0, r1, r9
 8009110:	fb09 1110 	mls	r1, r9, r0, r1
 8009114:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8009118:	fb00 fe0e 	mul.w	lr, r0, lr
 800911c:	458e      	cmp	lr, r1
 800911e:	d908      	bls.n	8009132 <__udivmoddi4+0x1e2>
 8009120:	eb1c 0101 	adds.w	r1, ip, r1
 8009124:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8009128:	d26c      	bcs.n	8009204 <__udivmoddi4+0x2b4>
 800912a:	458e      	cmp	lr, r1
 800912c:	d96a      	bls.n	8009204 <__udivmoddi4+0x2b4>
 800912e:	3802      	subs	r0, #2
 8009130:	4461      	add	r1, ip
 8009132:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8009136:	fba0 9402 	umull	r9, r4, r0, r2
 800913a:	eba1 010e 	sub.w	r1, r1, lr
 800913e:	42a1      	cmp	r1, r4
 8009140:	46c8      	mov	r8, r9
 8009142:	46a6      	mov	lr, r4
 8009144:	d356      	bcc.n	80091f4 <__udivmoddi4+0x2a4>
 8009146:	d053      	beq.n	80091f0 <__udivmoddi4+0x2a0>
 8009148:	b15d      	cbz	r5, 8009162 <__udivmoddi4+0x212>
 800914a:	ebb3 0208 	subs.w	r2, r3, r8
 800914e:	eb61 010e 	sbc.w	r1, r1, lr
 8009152:	fa01 f707 	lsl.w	r7, r1, r7
 8009156:	fa22 f306 	lsr.w	r3, r2, r6
 800915a:	40f1      	lsrs	r1, r6
 800915c:	431f      	orrs	r7, r3
 800915e:	e9c5 7100 	strd	r7, r1, [r5]
 8009162:	2600      	movs	r6, #0
 8009164:	4631      	mov	r1, r6
 8009166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916a:	f1c2 0320 	rsb	r3, r2, #32
 800916e:	40d8      	lsrs	r0, r3
 8009170:	fa0c fc02 	lsl.w	ip, ip, r2
 8009174:	fa21 f303 	lsr.w	r3, r1, r3
 8009178:	4091      	lsls	r1, r2
 800917a:	4301      	orrs	r1, r0
 800917c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009180:	fa1f fe8c 	uxth.w	lr, ip
 8009184:	fbb3 f0f7 	udiv	r0, r3, r7
 8009188:	fb07 3610 	mls	r6, r7, r0, r3
 800918c:	0c0b      	lsrs	r3, r1, #16
 800918e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009192:	fb00 f60e 	mul.w	r6, r0, lr
 8009196:	429e      	cmp	r6, r3
 8009198:	fa04 f402 	lsl.w	r4, r4, r2
 800919c:	d908      	bls.n	80091b0 <__udivmoddi4+0x260>
 800919e:	eb1c 0303 	adds.w	r3, ip, r3
 80091a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80091a6:	d22f      	bcs.n	8009208 <__udivmoddi4+0x2b8>
 80091a8:	429e      	cmp	r6, r3
 80091aa:	d92d      	bls.n	8009208 <__udivmoddi4+0x2b8>
 80091ac:	3802      	subs	r0, #2
 80091ae:	4463      	add	r3, ip
 80091b0:	1b9b      	subs	r3, r3, r6
 80091b2:	b289      	uxth	r1, r1
 80091b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80091b8:	fb07 3316 	mls	r3, r7, r6, r3
 80091bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80091c0:	fb06 f30e 	mul.w	r3, r6, lr
 80091c4:	428b      	cmp	r3, r1
 80091c6:	d908      	bls.n	80091da <__udivmoddi4+0x28a>
 80091c8:	eb1c 0101 	adds.w	r1, ip, r1
 80091cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80091d0:	d216      	bcs.n	8009200 <__udivmoddi4+0x2b0>
 80091d2:	428b      	cmp	r3, r1
 80091d4:	d914      	bls.n	8009200 <__udivmoddi4+0x2b0>
 80091d6:	3e02      	subs	r6, #2
 80091d8:	4461      	add	r1, ip
 80091da:	1ac9      	subs	r1, r1, r3
 80091dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80091e0:	e738      	b.n	8009054 <__udivmoddi4+0x104>
 80091e2:	462e      	mov	r6, r5
 80091e4:	4628      	mov	r0, r5
 80091e6:	e705      	b.n	8008ff4 <__udivmoddi4+0xa4>
 80091e8:	4606      	mov	r6, r0
 80091ea:	e6e3      	b.n	8008fb4 <__udivmoddi4+0x64>
 80091ec:	4618      	mov	r0, r3
 80091ee:	e6f8      	b.n	8008fe2 <__udivmoddi4+0x92>
 80091f0:	454b      	cmp	r3, r9
 80091f2:	d2a9      	bcs.n	8009148 <__udivmoddi4+0x1f8>
 80091f4:	ebb9 0802 	subs.w	r8, r9, r2
 80091f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80091fc:	3801      	subs	r0, #1
 80091fe:	e7a3      	b.n	8009148 <__udivmoddi4+0x1f8>
 8009200:	4646      	mov	r6, r8
 8009202:	e7ea      	b.n	80091da <__udivmoddi4+0x28a>
 8009204:	4620      	mov	r0, r4
 8009206:	e794      	b.n	8009132 <__udivmoddi4+0x1e2>
 8009208:	4640      	mov	r0, r8
 800920a:	e7d1      	b.n	80091b0 <__udivmoddi4+0x260>
 800920c:	46d0      	mov	r8, sl
 800920e:	e77b      	b.n	8009108 <__udivmoddi4+0x1b8>
 8009210:	3b02      	subs	r3, #2
 8009212:	4461      	add	r1, ip
 8009214:	e732      	b.n	800907c <__udivmoddi4+0x12c>
 8009216:	4630      	mov	r0, r6
 8009218:	e709      	b.n	800902e <__udivmoddi4+0xde>
 800921a:	4464      	add	r4, ip
 800921c:	3802      	subs	r0, #2
 800921e:	e742      	b.n	80090a6 <__udivmoddi4+0x156>

08009220 <__aeabi_idiv0>:
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop

08009224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009224:	b480      	push	{r7}
 8009226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009228:	4b3f      	ldr	r3, [pc, #252]	; (8009328 <SystemInit+0x104>)
 800922a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922e:	4a3e      	ldr	r2, [pc, #248]	; (8009328 <SystemInit+0x104>)
 8009230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8009238:	4b3b      	ldr	r3, [pc, #236]	; (8009328 <SystemInit+0x104>)
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	4a3a      	ldr	r2, [pc, #232]	; (8009328 <SystemInit+0x104>)
 800923e:	f043 0310 	orr.w	r3, r3, #16
 8009242:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009244:	4b39      	ldr	r3, [pc, #228]	; (800932c <SystemInit+0x108>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	2b06      	cmp	r3, #6
 800924e:	d807      	bhi.n	8009260 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009250:	4b36      	ldr	r3, [pc, #216]	; (800932c <SystemInit+0x108>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f023 030f 	bic.w	r3, r3, #15
 8009258:	4a34      	ldr	r2, [pc, #208]	; (800932c <SystemInit+0x108>)
 800925a:	f043 0307 	orr.w	r3, r3, #7
 800925e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009260:	4b33      	ldr	r3, [pc, #204]	; (8009330 <SystemInit+0x10c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a32      	ldr	r2, [pc, #200]	; (8009330 <SystemInit+0x10c>)
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800926c:	4b30      	ldr	r3, [pc, #192]	; (8009330 <SystemInit+0x10c>)
 800926e:	2200      	movs	r2, #0
 8009270:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009272:	4b2f      	ldr	r3, [pc, #188]	; (8009330 <SystemInit+0x10c>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	492e      	ldr	r1, [pc, #184]	; (8009330 <SystemInit+0x10c>)
 8009278:	4b2e      	ldr	r3, [pc, #184]	; (8009334 <SystemInit+0x110>)
 800927a:	4013      	ands	r3, r2
 800927c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800927e:	4b2b      	ldr	r3, [pc, #172]	; (800932c <SystemInit+0x108>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d007      	beq.n	800929a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800928a:	4b28      	ldr	r3, [pc, #160]	; (800932c <SystemInit+0x108>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f023 030f 	bic.w	r3, r3, #15
 8009292:	4a26      	ldr	r2, [pc, #152]	; (800932c <SystemInit+0x108>)
 8009294:	f043 0307 	orr.w	r3, r3, #7
 8009298:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800929a:	4b25      	ldr	r3, [pc, #148]	; (8009330 <SystemInit+0x10c>)
 800929c:	2200      	movs	r2, #0
 800929e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80092a0:	4b23      	ldr	r3, [pc, #140]	; (8009330 <SystemInit+0x10c>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80092a6:	4b22      	ldr	r3, [pc, #136]	; (8009330 <SystemInit+0x10c>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80092ac:	4b20      	ldr	r3, [pc, #128]	; (8009330 <SystemInit+0x10c>)
 80092ae:	4a22      	ldr	r2, [pc, #136]	; (8009338 <SystemInit+0x114>)
 80092b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80092b2:	4b1f      	ldr	r3, [pc, #124]	; (8009330 <SystemInit+0x10c>)
 80092b4:	4a21      	ldr	r2, [pc, #132]	; (800933c <SystemInit+0x118>)
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80092b8:	4b1d      	ldr	r3, [pc, #116]	; (8009330 <SystemInit+0x10c>)
 80092ba:	4a21      	ldr	r2, [pc, #132]	; (8009340 <SystemInit+0x11c>)
 80092bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80092be:	4b1c      	ldr	r3, [pc, #112]	; (8009330 <SystemInit+0x10c>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80092c4:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <SystemInit+0x10c>)
 80092c6:	4a1e      	ldr	r2, [pc, #120]	; (8009340 <SystemInit+0x11c>)
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80092ca:	4b19      	ldr	r3, [pc, #100]	; (8009330 <SystemInit+0x10c>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80092d0:	4b17      	ldr	r3, [pc, #92]	; (8009330 <SystemInit+0x10c>)
 80092d2:	4a1b      	ldr	r2, [pc, #108]	; (8009340 <SystemInit+0x11c>)
 80092d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80092d6:	4b16      	ldr	r3, [pc, #88]	; (8009330 <SystemInit+0x10c>)
 80092d8:	2200      	movs	r2, #0
 80092da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80092dc:	4b14      	ldr	r3, [pc, #80]	; (8009330 <SystemInit+0x10c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a13      	ldr	r2, [pc, #76]	; (8009330 <SystemInit+0x10c>)
 80092e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80092e8:	4b11      	ldr	r3, [pc, #68]	; (8009330 <SystemInit+0x10c>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80092ee:	4b15      	ldr	r3, [pc, #84]	; (8009344 <SystemInit+0x120>)
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	4a14      	ldr	r2, [pc, #80]	; (8009344 <SystemInit+0x120>)
 80092f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092f8:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80092fa:	4b13      	ldr	r3, [pc, #76]	; (8009348 <SystemInit+0x124>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	4b13      	ldr	r3, [pc, #76]	; (800934c <SystemInit+0x128>)
 8009300:	4013      	ands	r3, r2
 8009302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009306:	d202      	bcs.n	800930e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009308:	4b11      	ldr	r3, [pc, #68]	; (8009350 <SystemInit+0x12c>)
 800930a:	2201      	movs	r2, #1
 800930c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800930e:	4b11      	ldr	r3, [pc, #68]	; (8009354 <SystemInit+0x130>)
 8009310:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009314:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8009316:	4b04      	ldr	r3, [pc, #16]	; (8009328 <SystemInit+0x104>)
 8009318:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800931c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800931e:	bf00      	nop
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	e000ed00 	.word	0xe000ed00
 800932c:	52002000 	.word	0x52002000
 8009330:	58024400 	.word	0x58024400
 8009334:	eaf6ed7f 	.word	0xeaf6ed7f
 8009338:	02020200 	.word	0x02020200
 800933c:	01ff0000 	.word	0x01ff0000
 8009340:	01010280 	.word	0x01010280
 8009344:	580000c0 	.word	0x580000c0
 8009348:	5c001000 	.word	0x5c001000
 800934c:	ffff0000 	.word	0xffff0000
 8009350:	51008108 	.word	0x51008108
 8009354:	52004000 	.word	0x52004000

08009358 <SytemCall_1_code>:


// helpers system calls prototypes must be implemented in user space

__weak void SytemCall_1_code()
{
 8009358:	b480      	push	{r7}
 800935a:	af00      	add	r7, sp, #0

}
 800935c:	bf00      	nop
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <SytemCall_2_code>:

__weak void SytemCall_2_code()
{
 8009366:	b480      	push	{r7}
 8009368:	af00      	add	r7, sp, #0

}
 800936a:	bf00      	nop
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <SytemCall_3_code>:

__weak  void SytemCall_3_code()
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0

}
 8009378:	bf00      	nop
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <SytemCall_4_code>:


__weak  void SytemCall_4_code(void *val)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]

}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <SytemCall_5_code>:

__weak  void SytemCall_5_code(void *val)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]

}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <RoundUpTo>:


#if McuASAN_CONFIG_ASAN


static inline uptr RoundUpTo(uptr size, uptr boundary) {
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  return (size + boundary - 1) & ~(boundary - 1);
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	4413      	add	r3, r2
 80093ba:	1e5a      	subs	r2, r3, #1
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	425b      	negs	r3, r3
 80093c0:	4013      	ands	r3, r2
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <RoundDownTo>:


static inline uptr RoundDownTo(uptr x, uptr boundary) {
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  return x & ~(boundary - 1);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	425a      	negs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4013      	ands	r3, r2
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <IsAligned>:

static inline bool IsAligned(uptr a, uptr alignment) {
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  return (a & (alignment - 1)) == 0;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	1e5a      	subs	r2, r3, #1
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4013      	ands	r3, r2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bf0c      	ite	eq
 8009402:	2301      	moveq	r3, #1
 8009404:	2300      	movne	r3, #0
 8009406:	b2db      	uxtb	r3, r3
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <Log2>:

static inline bool IsPowerOfTwo(uptr x) {
  return (x & (x - 1)) == 0;
}

static inline uptr Log2(uptr x) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  //CHECK(IsPowerOfTwo(x));
  //return LeastSignificantSetBitIndex(x);
  return (uptr) ffs(x);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	f013 f804 	bl	801c42c <ffs>
 8009424:	4603      	mov	r3, r0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <__asan_ReportGenericError>:

/* hooks if using -fsanitize=address */
/* -fasan-shadow-offset=number */
/* -fsanitize=kernel-address */
static void __asan_ReportGenericError(void)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	af00      	add	r7, sp, #0
#if 1
  //printf("ASAN generic failure\n");

#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_RW_OVERFLOW);
 8009432:	2004      	movs	r0, #4
 8009434:	f000 fc10 	bl	8009c58 <FreeRTOSReportFailure>

#else
  __asm volatile("bkpt #0"); /* stop application */
  for(;;){}
#endif
}
 8009438:	bf00      	nop
 800943a:	bd80      	pop	{r7, pc}

0800943c <__asan_report_store1>:

/* below are the required callbacks needed by ASAN */
void __asan_report_store1(void *address)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 8009444:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 8009446:	f7ff fff2 	bl	800942e <__asan_ReportGenericError>
	__asm volatile("pop  {r0-r3}");
 800944a:	bc0f      	pop	{r0, r1, r2, r3}

}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <__asan_report_store2>:
void __asan_report_store2(void *address)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
	__asm volatile("push {r0-r3}");
 800945c:	b40f      	push	{r0, r1, r2, r3}
    __asan_ReportGenericError();
 800945e:	f7ff ffe6 	bl	800942e <__asan_ReportGenericError>
    __asm volatile("pop  {r0-r3}");
 8009462:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <__asan_report_load1>:
	__asm volatile("push {r0-r3}");
	__asan_ReportGenericError();
	__asm volatile("pop  {r0-r3}");
}
void __asan_report_load1(void *address)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
		// when the original code uses registers r0 to r3 as scratchpad.
	    // ASAN callbacks are inserted without taking care of current registers values,
	    // therefore, after returning from the callback the firmware may crash
	    // since the values on r0 and r3 may be different.
	    // Adding push and pop wrappers mitigate this issue saving the scratchpad values
	    __asm volatile("push {r0-r3}");
 8009474:	b40f      	push	{r0, r1, r2, r3}
		__asan_ReportGenericError();
 8009476:	f7ff ffda 	bl	800942e <__asan_ReportGenericError>
		__asm volatile("pop  {r0-r3}");
 800947a:	bc0f      	pop	{r0, r1, r2, r3}
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <__asan_report_load2>:


void __asan_report_load2(void *address) {
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 800948c:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 800948e:	f7ff ffce 	bl	800942e <__asan_ReportGenericError>
	__asm volatile("pop  {r0-r3}");
 8009492:	bc0f      	pop	{r0, r1, r2, r3}

}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <NYI>:

}
#endif


static void NYI(void) {
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
  __asm volatile("bkpt #0"); /* stop application */
 80094a0:	be00      	bkpt	0x0000
  for(;;){}
 80094a2:	e7fe      	b.n	80094a2 <NYI+0x6>

080094a4 <__asan_init>:
}

void __asan_init(void) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0

	   if(!asan_inited)
 80094a8:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <__asan_init+0x30>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f083 0301 	eor.w	r3, r3, #1
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00c      	beq.n	80094d0 <__asan_init+0x2c>
	   {
		   __asan_option_detect_stack_use_after_return  = McuASAN_FLAG_DETECT_STACK_USE_AFTER_RETURN;
 80094b6:	4b08      	ldr	r3, [pc, #32]	; (80094d8 <__asan_init+0x34>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]
		   memset((uint8_t *)( (uint32_t)(McuASAN_CONFIG_APP_MEM_START>>3) + McuASAN_CONFIG_APP_MEM_OFFSET),
 80094bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094c0:	2100      	movs	r1, #0
 80094c2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80094c6:	f013 f8f7 	bl	801c6b8 <memset>
				   0,
				   McuASAN_CONFIG_APP_MEM_SIZE>>3 );
		   asan_inited = true;
 80094ca:	4b02      	ldr	r3, [pc, #8]	; (80094d4 <__asan_init+0x30>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	701a      	strb	r2, [r3, #0]

	   }

}
 80094d0:	bf00      	nop
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	2401001c 	.word	0x2401001c
 80094d8:	24037400 	.word	0x24037400

080094dc <__asan_stack_malloc_0>:

void __asan_stack_malloc_0(size_t size, void *addr) { NYI();}
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
 80094e6:	f7ff ffd9 	bl	800949c <NYI>
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <MEM_TO_SHADOW>:
void __asan_stack_free_4(uptr ptr, uptr size){ NYI();};
void __asan_stack_free_5(uptr ptr, uptr size){ NYI();};



uptr MEM_TO_SHADOW(uptr address) {
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	08db      	lsrs	r3, r3, #3
 80094fe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <FastPoisonShadow>:

void FastPoisonShadow(uptr aligned_beg, uptr aligned_size, uint8_t value)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b08a      	sub	sp, #40	; 0x28
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	4613      	mov	r3, r2
 800951a:	71fb      	strb	r3, [r7, #7]

  uptr shadow_beg = MEM_TO_SHADOW(aligned_beg);
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f7ff ffe8 	bl	80094f2 <MEM_TO_SHADOW>
 8009522:	6278      	str	r0, [r7, #36]	; 0x24
  uptr shadow_end = MEM_TO_SHADOW(
      aligned_beg + aligned_size - SHADOW_GRANULARITY) + 1;
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4413      	add	r3, r2
  uptr shadow_end = MEM_TO_SHADOW(
 800952a:	3b08      	subs	r3, #8
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff ffe0 	bl	80094f2 <MEM_TO_SHADOW>
 8009532:	4603      	mov	r3, r0
 8009534:	3301      	adds	r3, #1
 8009536:	623b      	str	r3, [r7, #32]

    uptr page_size = 1024; // we don't have paging so lets set to 1024
 8009538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800953c:	61fb      	str	r3, [r7, #28]
    uptr page_beg = RoundUpTo(shadow_beg, page_size);
 800953e:	69f9      	ldr	r1, [r7, #28]
 8009540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009542:	f7ff ff32 	bl	80093aa <RoundUpTo>
 8009546:	61b8      	str	r0, [r7, #24]
    uptr page_end = RoundDownTo(shadow_end, page_size);
 8009548:	69f9      	ldr	r1, [r7, #28]
 800954a:	6a38      	ldr	r0, [r7, #32]
 800954c:	f7ff ff3f 	bl	80093ce <RoundDownTo>
 8009550:	6178      	str	r0, [r7, #20]

    if (page_beg >= page_end) {
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	429a      	cmp	r2, r3
 8009558:	d308      	bcc.n	800956c <FastPoisonShadow+0x5e>
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
 800955a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800955c:	79f9      	ldrb	r1, [r7, #7]
 800955e:	6a3a      	ldr	r2, [r7, #32]
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	461a      	mov	r2, r3
 8009566:	f013 f8a7 	bl	801c6b8 <memset>
        memset((void *)page_end, value, shadow_end - page_end);
      }
      //ReserveShadowMemoryRange(page_beg, page_end - 1, nullptr);
    }

}
 800956a:	e017      	b.n	800959c <FastPoisonShadow+0x8e>
      if (page_beg != shadow_beg) {
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	429a      	cmp	r2, r3
 8009572:	d007      	beq.n	8009584 <FastPoisonShadow+0x76>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 8009574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009576:	79f9      	ldrb	r1, [r7, #7]
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	461a      	mov	r2, r3
 8009580:	f013 f89a 	bl	801c6b8 <memset>
      if (page_end != shadow_end) {
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	429a      	cmp	r2, r3
 800958a:	d007      	beq.n	800959c <FastPoisonShadow+0x8e>
        memset((void *)page_end, value, shadow_end - page_end);
 800958c:	6978      	ldr	r0, [r7, #20]
 800958e:	79f9      	ldrb	r1, [r7, #7]
 8009590:	6a3a      	ldr	r2, [r7, #32]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	461a      	mov	r2, r3
 8009598:	f013 f88e 	bl	801c6b8 <memset>
}
 800959c:	bf00      	nop
 800959e:	3728      	adds	r7, #40	; 0x28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <__asan_version_mismatch_check_v8>:
*/


}

void __asan_version_mismatch_check_v8(void) {  }
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	bf00      	nop
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <RZSize2Log>:
}




static uint32_t RZSize2Log(uint32_t rz_size) {
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  uint32_t res = Log2(rz_size) - 4;
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff ff2a 	bl	8009414 <Log2>
 80095c0:	4603      	mov	r3, r0
 80095c2:	3b04      	subs	r3, #4
 80095c4:	60fb      	str	r3, [r7, #12]
  return res;
 80095c6:	68fb      	ldr	r3, [r7, #12]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <ComputeRZLog>:

uptr ComputeRZLog(uptr user_requested_size) {
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	; 0x28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
    uint32_t rz_log =
    user_requested_size <= 64        - 16   ? 0 :
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b30      	cmp	r3, #48	; 0x30
 80095dc:	d924      	bls.n	8009628 <ComputeRZLog+0x58>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b60      	cmp	r3, #96	; 0x60
 80095e2:	d91f      	bls.n	8009624 <ComputeRZLog+0x54>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80095ea:	d919      	bls.n	8009620 <ComputeRZLog+0x50>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80095f2:	d913      	bls.n	800961c <ComputeRZLog+0x4c>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 80095fa:	d90d      	bls.n	8009618 <ComputeRZLog+0x48>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 8009602:	d907      	bls.n	8009614 <ComputeRZLog+0x44>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
 800960a:	d801      	bhi.n	8009610 <ComputeRZLog+0x40>
 800960c:	2306      	movs	r3, #6
 800960e:	e00c      	b.n	800962a <ComputeRZLog+0x5a>
 8009610:	2307      	movs	r3, #7
 8009612:	e00a      	b.n	800962a <ComputeRZLog+0x5a>
 8009614:	2305      	movs	r3, #5
 8009616:	e008      	b.n	800962a <ComputeRZLog+0x5a>
 8009618:	2304      	movs	r3, #4
 800961a:	e006      	b.n	800962a <ComputeRZLog+0x5a>
 800961c:	2303      	movs	r3, #3
 800961e:	e004      	b.n	800962a <ComputeRZLog+0x5a>
 8009620:	2302      	movs	r3, #2
 8009622:	e002      	b.n	800962a <ComputeRZLog+0x5a>
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <ComputeRZLog+0x5a>
 8009628:	2300      	movs	r3, #0
    uint32_t rz_log =
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
    user_requested_size <= 512       - 64   ? 2 :
    user_requested_size <= 4096      - 128  ? 3 :
    user_requested_size <= (1 << 14) - 256  ? 4 :
    user_requested_size <= (1 << 15) - 512  ? 5 :
    user_requested_size <= (1 << 16) - 1024 ? 6 : 7;
    uint32_t min_rz =  McuASAN_FLAG_REDZONE;  //atomic_load(&min_redzone, memory_order_acquire);
 800962c:	2310      	movs	r3, #16
 800962e:	623b      	str	r3, [r7, #32]
    uint32_t max_rz =  McuASAN_FLAG_MAX_REDZONE;  //atomic_load(&max_redzone, memory_order_acquire);
 8009630:	2340      	movs	r3, #64	; 0x40
 8009632:	61fb      	str	r3, [r7, #28]
  return Min(Max(rz_log, RZSize2Log(min_rz)), RZSize2Log(max_rz));
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	61bb      	str	r3, [r7, #24]
 8009638:	6a38      	ldr	r0, [r7, #32]
 800963a:	f7ff ffba 	bl	80095b2 <RZSize2Log>
 800963e:	6178      	str	r0, [r7, #20]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	4293      	cmp	r3, r2
 8009646:	bf38      	it	cc
 8009648:	4613      	movcc	r3, r2
 800964a:	613b      	str	r3, [r7, #16]
 800964c:	69f8      	ldr	r0, [r7, #28]
 800964e:	f7ff ffb0 	bl	80095b2 <RZSize2Log>
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4293      	cmp	r3, r2
 800965a:	bf28      	it	cs
 800965c:	4613      	movcs	r3, r2
}
 800965e:	4618      	mov	r0, r3
 8009660:	3728      	adds	r7, #40	; 0x28
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <PoisonShadow>:





void PoisonShadow(uptr addr, uptr size, uint8_t value) {
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	71fb      	strb	r3, [r7, #7]
  //CHECK(AddrIsAlignedByGranularity(addr));
  //CHECK(AddrIsInMem(addr));
  //CHECK(AddrIsAlignedByGranularity(addr + size));
  //CHECK(AddrIsInMem(addr + size - SHADOW_GRANULARITY));
  //CHECK(REAL(memset));
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800967c:	d30a      	bcc.n	8009694 <PoisonShadow+0x2c>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4a08      	ldr	r2, [pc, #32]	; (80096a4 <PoisonShadow+0x3c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d806      	bhi.n	8009694 <PoisonShadow+0x2c>
			   (addr <  (McuASAN_CONFIG_APP_MEM_START + McuASAN_CONFIG_APP_MEM_SIZE ) ))
   {
	   FastPoisonShadow(addr, size, value);
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	461a      	mov	r2, r3
 800968a:	68b9      	ldr	r1, [r7, #8]
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7ff ff3e 	bl	800950e <FastPoisonShadow>
 8009692:	e003      	b.n	800969c <PoisonShadow+0x34>
   }
   else
   {
	   //printf("\n AddressSanitizer failed to poison memory, it is not allocated in RAM");
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_FAIL_POISON);
 8009694:	2007      	movs	r0, #7
 8009696:	f000 fadf 	bl	8009c58 <FreeRTOSReportFailure>
#endif

   }

}
 800969a:	bf00      	nop
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	2407ffff 	.word	0x2407ffff

080096a8 <ComputeUserRequestedAlignmentLog>:

static uptr ComputeUserRequestedAlignmentLog(uptr user_requested_alignment) {
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
    if (user_requested_alignment < 8)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b07      	cmp	r3, #7
 80096b4:	d801      	bhi.n	80096ba <ComputeUserRequestedAlignmentLog+0x12>
      return 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	e00b      	b.n	80096d2 <ComputeUserRequestedAlignmentLog+0x2a>
    if (user_requested_alignment > 512)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096c0:	d902      	bls.n	80096c8 <ComputeUserRequestedAlignmentLog+0x20>
      user_requested_alignment = 512;
 80096c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c6:	607b      	str	r3, [r7, #4]
    return Log2(user_requested_alignment) - 2;
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff fea3 	bl	8009414 <Log2>
 80096ce:	4603      	mov	r3, r0
 80096d0:	3b02      	subs	r3, #2
  }
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <RZLog2Size>:


static uint32_t RZLog2Size(uint32_t rz_log) {
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  //CHECK_LT(rz_log, 8);
  return 16 << rz_log;
 80096e2:	2210      	movs	r2, #16
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	fa02 f303 	lsl.w	r3, r2, r3
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <addAlloc>:
#endif



 static void addAlloc(uint32_t *ptr)
 {
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009700:	4b13      	ldr	r3, [pc, #76]	; (8009750 <addAlloc+0x58>)
 8009702:	60bb      	str	r3, [r7, #8]

	int i=0;
 8009704:	2300      	movs	r3, #0
 8009706:	60fb      	str	r3, [r7, #12]
  	if(ptr)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d019      	beq.n	8009742 <addAlloc+0x4a>
  	{
	   while(i<McuASAN_MAX_NUMBER_ALLOCS)
 800970e:	e015      	b.n	800973c <addAlloc+0x44>
  	   {
  		    if(pAFLfuzzer->allocs[i]==0)
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	68f9      	ldr	r1, [r7, #12]
 8009714:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8009718:	440b      	add	r3, r1
 800971a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d109      	bne.n	8009736 <addAlloc+0x3e>
  		    {
  		    	pAFLfuzzer->allocs[i] = ptr;
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	68f9      	ldr	r1, [r7, #12]
 8009726:	f641 230c 	movw	r3, #6668	; 0x1a0c
 800972a:	440b      	add	r3, r1
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  			    break;
 8009732:	bf00      	nop
  		    }
  		    i++;
  	    }
  	 }
 }
 8009734:	e005      	b.n	8009742 <addAlloc+0x4a>
  		    i++;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3301      	adds	r3, #1
 800973a:	60fb      	str	r3, [r7, #12]
	   while(i<McuASAN_MAX_NUMBER_ALLOCS)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b09      	cmp	r3, #9
 8009740:	dde6      	ble.n	8009710 <addAlloc+0x18>
 }
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	24020000 	.word	0x24020000

08009754 <delAlloc>:

 static void delAlloc(uint32_t *ptr)
 {
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800975c:	4b13      	ldr	r3, [pc, #76]	; (80097ac <delAlloc+0x58>)
 800975e:	60bb      	str	r3, [r7, #8]
	int i=0;
 8009760:	2300      	movs	r3, #0
 8009762:	60fb      	str	r3, [r7, #12]
  	if(ptr)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d01a      	beq.n	80097a0 <delAlloc+0x4c>
  	{
  	    while(i<McuASAN_MAX_NUMBER_ALLOCS)
 800976a:	e016      	b.n	800979a <delAlloc+0x46>
  	    {
  		    if(pAFLfuzzer->allocs[i]==ptr)
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8009774:	440b      	add	r3, r1
 8009776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d109      	bne.n	8009794 <delAlloc+0x40>
  		    {
  		    	pAFLfuzzer->allocs[i]= NULL;
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8009788:	440b      	add	r3, r1
 800978a:	2100      	movs	r1, #0
 800978c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  			    break;
 8009790:	bf00      	nop
  		    }
  		    i++;
  	    }
  	}
 }
 8009792:	e005      	b.n	80097a0 <delAlloc+0x4c>
  		    i++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3301      	adds	r3, #1
 8009798:	60fb      	str	r3, [r7, #12]
  	    while(i<McuASAN_MAX_NUMBER_ALLOCS)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b09      	cmp	r3, #9
 800979e:	dde5      	ble.n	800976c <delAlloc+0x18>
 }
 80097a0:	bf00      	nop
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	24020000 	.word	0x24020000

080097b0 <Allocate>:
  	}
  }
*/

void *Allocate(uptr size, uptr alignment,
                 AllocType alloc_type, bool can_fill) {
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b09c      	sub	sp, #112	; 0x70
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	4611      	mov	r1, r2
 80097bc:	461a      	mov	r2, r3
 80097be:	460b      	mov	r3, r1
 80097c0:	71fb      	strb	r3, [r7, #7]
 80097c2:	4613      	mov	r3, r2
 80097c4:	71bb      	strb	r3, [r7, #6]
        return nullptr;
      ReportRssLimitExceeded(stack);
    }*/

    //CHECK(stack);
    const uptr min_alignment = SHADOW_GRANULARITY;
 80097c6:	2308      	movs	r3, #8
 80097c8:	667b      	str	r3, [r7, #100]	; 0x64

    const uptr user_requested_alignment_log =
        ComputeUserRequestedAlignmentLog(alignment);
 80097ca:	68b8      	ldr	r0, [r7, #8]
 80097cc:	f7ff ff6c 	bl	80096a8 <ComputeUserRequestedAlignmentLog>
 80097d0:	6638      	str	r0, [r7, #96]	; 0x60


    if (alignment < min_alignment)
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d201      	bcs.n	80097de <Allocate+0x2e>
      alignment = min_alignment;
 80097da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097dc:	60bb      	str	r3, [r7, #8]
    if (size == 0) {
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <Allocate+0x38>
      // some programs/tests depend on this behavior and assume that malloc
      // would not return NULL even for zero-size allocations. Moreover, it
      // looks like operator new should never return NULL, and results of
      // consecutive "new" calls must be different even if the allocated size
      // is zero.
      size = 1;
 80097e4:	2301      	movs	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
    }
    //CHECK(IsPowerOfTwo(alignment));
    uptr rz_log = ComputeRZLog(size);
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f7ff fef1 	bl	80095d0 <ComputeRZLog>
 80097ee:	65f8      	str	r0, [r7, #92]	; 0x5c
    uptr rz_size = RZLog2Size(rz_log);
 80097f0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80097f2:	f7ff ff72 	bl	80096da <RZLog2Size>
 80097f6:	65b8      	str	r0, [r7, #88]	; 0x58
    uptr rounded_size = RoundUpTo(Max(size, kChunkHeader2Size), alignment);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	657b      	str	r3, [r7, #84]	; 0x54
 80097fc:	2304      	movs	r3, #4
 80097fe:	653b      	str	r3, [r7, #80]	; 0x50
 8009800:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009804:	4293      	cmp	r3, r2
 8009806:	bf38      	it	cc
 8009808:	4613      	movcc	r3, r2
 800980a:	68b9      	ldr	r1, [r7, #8]
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff fdcc 	bl	80093aa <RoundUpTo>
 8009812:	64f8      	str	r0, [r7, #76]	; 0x4c
    uptr needed_size = rounded_size + rz_size;
 8009814:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009818:	4413      	add	r3, r2
 800981a:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (alignment > min_alignment)
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009820:	429a      	cmp	r2, r3
 8009822:	d903      	bls.n	800982c <Allocate+0x7c>
      needed_size += alignment;
 8009824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	4413      	add	r3, r2
 800982a:	66fb      	str	r3, [r7, #108]	; 0x6c
    // the primary allocator is only available with Fuchsia and in Adroid 11
    // since we don't have it, we will use standard libc allocator
    bool using_primary_allocator = false;
 800982c:	2300      	movs	r3, #0
 800982e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    // If we are allocating from the secondary allocator, there will be no
    // automatic right redzone, so add the right redzone manually.

    //if (!PrimaryAllocator::CanAllocate(needed_size, alignment)) {
    needed_size += rz_size; // manually adding the right red zone
 8009832:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009836:	4413      	add	r3, r2
 8009838:	66fb      	str	r3, [r7, #108]	; 0x6c
    // }


    //CHECK(IsAligned(needed_size, min_alignment));

    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 800983a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4293      	cmp	r3, r2
 8009842:	d809      	bhi.n	8009858 <Allocate+0xa8>
 8009844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800984a:	4293      	cmp	r3, r2
 800984c:	d804      	bhi.n	8009858 <Allocate+0xa8>
        size > max_user_defined_malloc_size) {
 800984e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4293      	cmp	r3, r2
 8009856:	d901      	bls.n	800985c <Allocate+0xac>
        //printf("AddressSanitizer failed to allocate %d bytes\n", (size_t)size);

        return NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	e0c6      	b.n	80099ea <Allocate+0x23a>
     }

    //AsanThread *t = GetCurrentThread();
    void *allocated;
    allocated = malloc(needed_size);
 800985c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800985e:	f012 ff0d 	bl	801c67c <malloc>
 8009862:	4603      	mov	r3, r0
 8009864:	647b      	str	r3, [r7, #68]	; 0x44


    if(!allocated)
 8009866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <Allocate+0xc0>
    {
    	//printf("AddressSanitizer malloc run out of memory\n");
        return NULL;
 800986c:	2300      	movs	r3, #0
 800986e:	e0bc      	b.n	80099ea <Allocate+0x23a>
    }

    addAlloc(allocated);
 8009870:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009872:	f7ff ff41 	bl	80096f8 <addAlloc>
      // Heap poisoning is enabled, but the allocator provides an unpoisoned
      // chunk. This is possible if CanPoisonMemory() was false for some
      // time, for example, due to flags()->start_disabled.
      // Anyway, poison the block before using it for anything else.
      //uptr allocated_size = allocator.GetActuallyAllocatedSize(allocated);
      uptr allocated_size = needed_size;
 8009876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009878:	643b      	str	r3, [r7, #64]	; 0x40
      PoisonShadow((uptr)allocated, allocated_size, kAsanHeapLeftRedzoneMagic);
 800987a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987c:	22fa      	movs	r2, #250	; 0xfa
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fef0 	bl	8009668 <PoisonShadow>
    //}

    uptr alloc_beg = (uint32_t)(allocated);
 8009888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
    //uptr alloc_end = alloc_beg + needed_size;
    uptr beg_plus_redzone = alloc_beg + rz_size;
 800988c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800988e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009890:	4413      	add	r3, r2
 8009892:	63bb      	str	r3, [r7, #56]	; 0x38
    uptr user_beg = beg_plus_redzone;
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	66bb      	str	r3, [r7, #104]	; 0x68

    if (!IsAligned(user_beg, alignment))
 8009898:	68b9      	ldr	r1, [r7, #8]
 800989a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800989c:	f7ff fda6 	bl	80093ec <IsAligned>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f083 0301 	eor.w	r3, r3, #1
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <Allocate+0x106>
      user_beg = RoundUpTo(user_beg, alignment);
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80098b0:	f7ff fd7b 	bl	80093aa <RoundUpTo>
 80098b4:	66b8      	str	r0, [r7, #104]	; 0x68
    //uptr user_end = user_beg + size;
    //CHECK_LE(user_end, alloc_end);

    uptr chunk_beg = user_beg - kChunkHeaderSize;
 80098b6:	2210      	movs	r2, #16
 80098b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	637b      	str	r3, [r7, #52]	; 0x34
    AsanChunk *m = (AsanChunk *)(chunk_beg);
 80098be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c0:	633b      	str	r3, [r7, #48]	; 0x30
    m->alloc_type = alloc_type;
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	b2d9      	uxtb	r1, r3
 80098ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098cc:	79d3      	ldrb	r3, [r2, #7]
 80098ce:	f361 0342 	bfi	r3, r1, #1, #2
 80098d2:	71d3      	strb	r3, [r2, #7]
    m->rz_log = rz_log;
 80098d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	b2d9      	uxtb	r1, r3
 80098dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098de:	79d3      	ldrb	r3, [r2, #7]
 80098e0:	f361 03c5 	bfi	r3, r1, #3, #3
 80098e4:	71d3      	strb	r3, [r2, #7]
    uint32_t alloc_tid = 0; // we are not supporting threads
 80098e6:	2300      	movs	r3, #0
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    m->alloc_tid = alloc_tid;
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80098f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f2:	6813      	ldr	r3, [r2, #0]
 80098f4:	f361 231f 	bfi	r3, r1, #8, #24
 80098f8:	6013      	str	r3, [r2, #0]
    //CHECK_EQ(alloc_tid, m->alloc_tid);  // Does alloc_tid fit into the bitfield?
    m->free_tid = kInvalidTid;
 80098fa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80098fe:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009904:	6853      	ldr	r3, [r2, #4]
 8009906:	f361 0317 	bfi	r3, r1, #0, #24
 800990a:	6053      	str	r3, [r2, #4]
    m->from_memalign = user_beg != beg_plus_redzone;
 800990c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	429a      	cmp	r2, r3
 8009912:	bf14      	ite	ne
 8009914:	2301      	movne	r3, #1
 8009916:	2300      	moveq	r3, #0
 8009918:	b2d9      	uxtb	r1, r3
 800991a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991c:	79d3      	ldrb	r3, [r2, #7]
 800991e:	f361 0300 	bfi	r3, r1, #0, #1
 8009922:	71d3      	strb	r3, [r2, #7]
    if (alloc_beg != chunk_beg) {
 8009924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009928:	429a      	cmp	r2, r3
 800992a:	d007      	beq.n	800993c <Allocate+0x18c>
      //CHECK_LE(alloc_beg+ 2 * sizeof(uptr), chunk_beg);
      ((uptr *)alloc_beg)[0] = kAllocBegMagic;
 800992c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992e:	4a31      	ldr	r2, [pc, #196]	; (80099f4 <Allocate+0x244>)
 8009930:	601a      	str	r2, [r3, #0]
      ((uptr *)alloc_beg)[1] = chunk_beg;
 8009932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009934:	3304      	adds	r3, #4
 8009936:	461a      	mov	r2, r3
 8009938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993a:	6013      	str	r3, [r2, #0]
    }
    if (using_primary_allocator) {
 800993c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009940:	2b00      	cmp	r3, #0
 8009942:	d008      	beq.n	8009956 <Allocate+0x1a6>
      //CHECK(size);
      m->user_requested_size = size;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800994a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800994c:	6893      	ldr	r3, [r2, #8]
 800994e:	f361 031c 	bfi	r3, r1, #0, #29
 8009952:	6093      	str	r3, [r2, #8]
 8009954:	e007      	b.n	8009966 <Allocate+0x1b6>
    }
    else {

     // we assume the behavior of the secondary allocator will be the same as pthe primary allocator
     //CHECK(!allocator.FromPrimary(allocated));
      m->user_requested_size = size;   // SizeClassMap::kMaxSize;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800995c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995e:	6893      	ldr	r3, [r2, #8]
 8009960:	f361 031c 	bfi	r3, r1, #0, #29
 8009964:	6093      	str	r3, [r2, #8]
      //uptr *meta = reinterpret_cast<uptr *>(allocator.GetMetaData(allocated));
      //meta[0] = size;
      //meta[1] = chunk_beg;
    }
    m->user_requested_alignment_log = user_requested_alignment_log;
 8009966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009968:	f003 0307 	and.w	r3, r3, #7
 800996c:	b2d9      	uxtb	r1, r3
 800996e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009970:	7ad3      	ldrb	r3, [r2, #11]
 8009972:	f361 1347 	bfi	r3, r1, #5, #3
 8009976:	72d3      	strb	r3, [r2, #11]

    //m->alloc_context_id = StackDepotPut(*stack);

    uptr size_rounded_down_to_granularity =
        RoundDownTo(size, SHADOW_GRANULARITY);
 8009978:	2108      	movs	r1, #8
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fd27 	bl	80093ce <RoundDownTo>
 8009980:	62b8      	str	r0, [r7, #40]	; 0x28
    // Unpoison the bulk of the memory region.
    if (size_rounded_down_to_granularity)
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <Allocate+0x1e2>
      PoisonShadow(user_beg, size_rounded_down_to_granularity, 0);
 8009988:	2200      	movs	r2, #0
 800998a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800998c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800998e:	f7ff fe6b 	bl	8009668 <PoisonShadow>
    // Deal with the end of the region if size is not aligned to granularity.
    if (size != size_rounded_down_to_granularity ) {
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	429a      	cmp	r2, r3
 8009998:	d00e      	beq.n	80099b8 <Allocate+0x208>
      uint8_t *shadow =
          (uint8_t *)MEM_TO_SHADOW(user_beg + size_rounded_down_to_granularity);
 800999a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	4413      	add	r3, r2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff fda6 	bl	80094f2 <MEM_TO_SHADOW>
 80099a6:	4603      	mov	r3, r0
      uint8_t *shadow =
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
      *shadow = McuASAN_FLAG_POISON_PARTIAL ? (size & (SHADOW_GRANULARITY - 1)) : 0;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	701a      	strb	r2, [r3, #0]
    else
      thread_stats.malloced_by_size[SizeClassMap::ClassID(needed_size)]++;

    */

    void *res = (void *)(user_beg);
 80099b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099ba:	623b      	str	r3, [r7, #32]
    if (can_fill && McuASAN_FLAG_MAX_MALLOC_FILL_SIZE) {
 80099bc:	79bb      	ldrb	r3, [r7, #6]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00f      	beq.n	80099e2 <Allocate+0x232>
      uptr fill_size = Min(size, McuASAN_FLAG_MAX_MALLOC_FILL_SIZE);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	61fb      	str	r3, [r7, #28]
 80099c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	69ba      	ldr	r2, [r7, #24]
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	bf28      	it	cs
 80099d4:	4613      	movcs	r3, r2
 80099d6:	617b      	str	r3, [r7, #20]
      memset(res, McuASAN_FLAG_MALLOC_FILL_BYTE, fill_size);
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	21be      	movs	r1, #190	; 0xbe
 80099dc:	6a38      	ldr	r0, [r7, #32]
 80099de:	f012 fe6b 	bl	801c6b8 <memset>
    }

    // Must be the last mutation of metadata in this function.
    //atomic_store((uint8_t *)m, CHUNK_ALLOCATED, memory_order_release);
    *(uint8_t *)m = CHUNK_ALLOCATED;
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	2202      	movs	r2, #2
 80099e6:	701a      	strb	r2, [r3, #0]
    //ASAN_MALLOC_HOOK(res, size); //no malloc hooks
    return res;
 80099e8:	6a3b      	ldr	r3, [r7, #32]
  }
 80099ea:	4618      	mov	r0, r3
 80099ec:	3770      	adds	r7, #112	; 0x70
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	cc6e96b9 	.word	0xcc6e96b9

080099f8 <ReportDoubleFree>:



void ReportDoubleFree(uptr addr) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	__asm volatile("push {r0-r3}");
 8009a00:	b40f      	push	{r0, r1, r2, r3}
 //printf("Error buffer double free address: %p \n", (uint32_t * )addr);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_DOUBLE_FREE);
 8009a02:	2001      	movs	r0, #1
 8009a04:	f000 f928 	bl	8009c58 <FreeRTOSReportFailure>
#endif
 __asm volatile("pop  {r0-r3}");
 8009a08:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <ReportFreeNotMalloced>:

void ReportFreeNotMalloced(uptr addr) {
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 8009a1a:	b40f      	push	{r0, r1, r2, r3}
 //printf("Error invalid free  address: %p \n", (uint32_t * )addr);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_INVALID_FREE);
 8009a1c:	2003      	movs	r0, #3
 8009a1e:	f000 f91b 	bl	8009c58 <FreeRTOSReportFailure>
#endif
	__asm volatile("pop  {r0-r3}");
 8009a22:	bc0f      	pop	{r0, r1, r2, r3}

}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <ReportInvalidFree>:


void ReportInvalidFree(void *ptr, uint8_t chunk_state) {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
    if (chunk_state == CHUNK_QUARANTINE)
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d104      	bne.n	8009a48 <ReportInvalidFree+0x1c>
      ReportDoubleFree((uptr)ptr);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff ffd9 	bl	80099f8 <ReportDoubleFree>
    else
      ReportFreeNotMalloced((uptr)ptr);
  }
 8009a46:	e003      	b.n	8009a50 <ReportInvalidFree+0x24>
      ReportFreeNotMalloced((uptr)ptr);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff ffe1 	bl	8009a12 <ReportFreeNotMalloced>
  }
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <AtomicallySetQuarantineFlagIfAllocated>:

bool AtomicallySetQuarantineFlagIfAllocated(AsanChunk *m, void *ptr) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
                                      memory_order_acquire)) {
    ReportInvalidFree(ptr, old_chunk_state, stack);
    // It's not safe to push a chunk in quarantine on invalid free.
    return false;
  }*/
  uint8_t *state = (uint8_t *)m;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60fb      	str	r3, [r7, #12]
  if(*state == CHUNK_ALLOCATED)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d104      	bne.n	8009a78 <AtomicallySetQuarantineFlagIfAllocated+0x20>
  {
	  *state = CHUNK_QUARANTINE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2203      	movs	r2, #3
 8009a72:	701a      	strb	r2, [r3, #0]
	  return true;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e006      	b.n	8009a86 <AtomicallySetQuarantineFlagIfAllocated+0x2e>
  }
  else
  {
	  ReportInvalidFree(ptr, *state);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6838      	ldr	r0, [r7, #0]
 8009a80:	f7ff ffd4 	bl	8009a2c <ReportInvalidFree>
	  return false;
 8009a84:	2300      	movs	r3, #0
  }


  //CHECK_EQ(CHUNK_ALLOCATED, old_chunk_state);
  return true;
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <ReportAllocTypeMismatch>:


void ReportAllocTypeMismatch(uptr addr,
                             AllocType alloc_type,
                             AllocType dealloc_type) {
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b082      	sub	sp, #8
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	460b      	mov	r3, r1
 8009a98:	70fb      	strb	r3, [r7, #3]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	70bb      	strb	r3, [r7, #2]
/*
  const char *s[] = {
		  "Malloc",
		  "New",
		  "New BR" };*/
  __asm volatile("push {r0-r3}");
 8009a9e:	b40f      	push	{r0, r1, r2, r3}
  //printf("Error type mismatch alloc:%s, dealloc:%s \n", s[alloc_type], s[dealloc_type]);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_REALLOC_MISMATCH);
 8009aa0:	2006      	movs	r0, #6
 8009aa2:	f000 f8d9 	bl	8009c58 <FreeRTOSReportFailure>
#endif
  __asm volatile("pop  {r0-r3}");
 8009aa6:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <Beg>:
	__asm volatile("pop  {r0-r3}");

}

uptr Beg(AsanChunk *m)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	return (uptr)(m) + kChunkHeaderSize;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2210      	movs	r2, #16
 8009abc:	4413      	add	r3, r2
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <AllocBeg>:

uptr AllocBeg(AsanChunk *m)
{
 8009aca:	b590      	push	{r4, r7, lr}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]

	if (m->from_memalign)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	79db      	ldrb	r3, [r3, #7]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d000      	beq.n	8009ae2 <AllocBeg+0x18>
	{
	     //return get_allocator().GetBlockBegin(reinterpret_cast<void *>(this));
		while(1); // this is a special case that we do not support since we do not control the allocator, the code should not reach this point
 8009ae0:	e7fe      	b.n	8009ae0 <AllocBeg+0x16>
				  // unless the allocation of malloc is unnaligned TODO check what happens during testing
	}
	return (Beg(m) - RZLog2Size(m->rz_log));
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff ffe4 	bl	8009ab0 <Beg>
 8009ae8:	4604      	mov	r4, r0
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	79db      	ldrb	r3, [r3, #7]
 8009aee:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff fdf0 	bl	80096da <RZLog2Size>
 8009afa:	4603      	mov	r3, r0
 8009afc:	1ae3      	subs	r3, r4, r3
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}

08009b06 <Recycle>:



void Recycle(AsanChunk *m) {
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b085      	sub	sp, #20
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  //CHECK_EQ(m->chunk_state, CHUNK_QUARANTINE);
  //atomic_store((atomic_uint8_t*)m, CHUNK_AVAILABLE, memory_order_relaxed);

  *(uint8_t*)m = CHUNK_AVAILABLE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	701a      	strb	r2, [r3, #0]

  //CHECK_NE(m->alloc_tid, kInvalidTid);
  //CHECK_NE(m->free_tid, kInvalidTid);

  PoisonShadow(Beg(m),
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff ffcb 	bl	8009ab0 <Beg>
 8009b1a:	4604      	mov	r4, r0
               RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f3c3 031c 	ubfx	r3, r3, #0, #29
  PoisonShadow(Beg(m),
 8009b24:	2108      	movs	r1, #8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fc3f 	bl	80093aa <RoundUpTo>
 8009b2c:	4601      	mov	r1, r0
 8009b2e:	23fa      	movs	r3, #250	; 0xfa
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	461a      	mov	r2, r3
 8009b34:	4620      	mov	r0, r4
 8009b36:	f7ff fd97 	bl	8009668 <PoisonShadow>
               kAsanHeapLeftRedzoneMagic);

  void *p = (void *)(AllocBeg(m));
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff ffc5 	bl	8009aca <AllocBeg>
 8009b40:	4603      	mov	r3, r0
 8009b42:	60fb      	str	r3, [r7, #12]

  if (p != m) {
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d004      	beq.n	8009b56 <Recycle+0x50>
    uptr *alloc_magic = (uptr *)(p);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	60bb      	str	r3, [r7, #8]
    //CHECK_EQ(alloc_magic[0], kAllocBegMagic);
    // Clear the magic value, as allocator internals may overwrite the
    // contents of deallocated chunk, confusing GetAsanChunk lookup.
    alloc_magic[0] = 0;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
  // Statistics.
  //AsanStats &thread_stats = GetCurrentThreadStats();
  //thread_stats.real_frees++;
  //thread_stats.really_freed += m->UsedSize();

  delAlloc(p);
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff fdfc 	bl	8009754 <delAlloc>
  free(p);
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f012 fd95 	bl	801c68c <free>


}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd90      	pop	{r4, r7, pc}
	...

08009b6c <QuarantineChunk>:



// Expects the chunk to already be marked as quarantined by using
  // AtomicallySetQuarantineFlagIfAllocated.
void QuarantineChunk(AsanChunk *m, void *ptr) {
 8009b6c:	b590      	push	{r4, r7, lr}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
      //  uptr size_to_fill = m->UsedSize() - kChunkHeader2Size;
      //  size_to_fill = Min(size_to_fill, (uptr)fl.max_free_fill_size);
      //  REAL(memset)((void *)scribble_start, fl.free_fill_byte, size_to_fill);
      // }

      uptr size_to_fill = m->user_requested_size;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8009b7e:	617b      	str	r3, [r7, #20]
      size_to_fill = Min((size_to_fill), max_free_fill_size);
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	613b      	str	r3, [r7, #16]
 8009b84:	4b12      	ldr	r3, [pc, #72]	; (8009bd0 <QuarantineChunk+0x64>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	bf28      	it	cs
 8009b92:	4613      	movcs	r3, r2
 8009b94:	617b      	str	r3, [r7, #20]
      memset(ptr, McuASAN_FLAG_FREE_FILL_BYTE, size_to_fill);
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	2155      	movs	r1, #85	; 0x55
 8009b9a:	6838      	ldr	r0, [r7, #0]
 8009b9c:	f012 fd8c 	bl	801c6b8 <memset>
    }

    // Poison the region.
    PoisonShadow((uptr)ptr ,
 8009ba0:	683c      	ldr	r4, [r7, #0]
                 RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f3c3 031c 	ubfx	r3, r3, #0, #29
    PoisonShadow((uptr)ptr ,
 8009baa:	2108      	movs	r1, #8
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fbfc 	bl	80093aa <RoundUpTo>
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	23fd      	movs	r3, #253	; 0xfd
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f7ff fd54 	bl	8009668 <PoisonShadow>
      quarantine.Put(&fallback_quarantine_cache, QuarantineCallback(ac, stack),
                     m, m->UsedSize());
    }
    */

    Recycle(m);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff ffa0 	bl	8009b06 <Recycle>
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd90      	pop	{r4, r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	2400800c 	.word	0x2400800c

08009bd4 <Deallocate>:


void Deallocate(void *ptr, uptr delete_size, uptr delete_alignment, AllocType alloc_type)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	70fb      	strb	r3, [r7, #3]

	uptr p = (uptr)(ptr);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	61fb      	str	r3, [r7, #28]
    if (p == 0) return;
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d02c      	beq.n	8009c46 <Deallocate+0x72>

    uptr chunk_beg = p - kChunkHeaderSize;
 8009bec:	2210      	movs	r2, #16
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	61bb      	str	r3, [r7, #24]
    AsanChunk *m = (AsanChunk *)(chunk_beg);
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	617b      	str	r3, [r7, #20]

    //ASAN_FREE_HOOK(ptr); we do not support hooks

    // Must mark the chunk as quarantined before any changes to its metadata.
    // Do not quarantine given chunk if we failed to set CHUNK_QUARANTINE flag.
    if (!AtomicallySetQuarantineFlagIfAllocated(m, ptr)) return;
 8009bf8:	68f9      	ldr	r1, [r7, #12]
 8009bfa:	6978      	ldr	r0, [r7, #20]
 8009bfc:	f7ff ff2c 	bl	8009a58 <AtomicallySetQuarantineFlagIfAllocated>
 8009c00:	4603      	mov	r3, r0
 8009c02:	f083 0301 	eor.w	r3, r3, #1
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d11e      	bne.n	8009c4a <Deallocate+0x76>

    if (m->alloc_type != alloc_type) {
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	79db      	ldrb	r3, [r3, #7]
 8009c10:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	461a      	mov	r2, r3
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d00e      	beq.n	8009c3c <Deallocate+0x68>
      if (alloc_dealloc_mismatch) {
 8009c1e:	4b0d      	ldr	r3, [pc, #52]	; (8009c54 <Deallocate+0x80>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <Deallocate+0x68>
        ReportAllocTypeMismatch((uptr)ptr, (AllocType)m->alloc_type,
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	79db      	ldrb	r3, [r3, #7]
 8009c2c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	4619      	mov	r1, r3
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	461a      	mov	r2, r3
 8009c38:	f7ff ff29 	bl	8009a8e <ReportAllocTypeMismatch>
        ReportNewDeleteTypeMismatch(p, delete_size, delete_alignment);
      }
    }
    */

    QuarantineChunk(m, ptr);
 8009c3c:	68f9      	ldr	r1, [r7, #12]
 8009c3e:	6978      	ldr	r0, [r7, #20]
 8009c40:	f7ff ff94 	bl	8009b6c <QuarantineChunk>
 8009c44:	e002      	b.n	8009c4c <Deallocate+0x78>
    if (p == 0) return;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <Deallocate+0x78>
    if (!AtomicallySetQuarantineFlagIfAllocated(m, ptr)) return;
 8009c4a:	bf00      	nop
 }
 8009c4c:	3720      	adds	r7, #32
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	24008008 	.word	0x24008008

08009c58 <FreeRTOSReportFailure>:
}


#endif
static void FreeRTOSReportFailure(type_exception_t  tEX)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	4603      	mov	r3, r0
 8009c60:	71fb      	strb	r3, [r7, #7]


	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009c62:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <FreeRTOSReportFailure+0x50>)
 8009c64:	60fb      	str	r3, [r7, #12]


	  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009c66:	f7fe fbfa 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009c72:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d114      	bne.n	8009ca4 <FreeRTOSReportFailure+0x4c>
	  {

		  //MPU_ASAN_flush_alloc(); //this must be executed as a system call
		  //xTaskNotifyGiveIndexed(AFLfuzzer.xTaskFuzzer,FAULT_ASAN,eSetValueWithOverwrite);
		  AFLfuzzer.xTypeEx = tEX;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009c80:	461a      	mov	r2, r3
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	f882 3874 	strb.w	r3, [r2, #2164]	; 0x874


#if DUALCOREFUZZ == 0

		  xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_ASAN,eSetValueWithOverwrite);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009c8e:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 8009c92:	2300      	movs	r3, #0
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	2303      	movs	r3, #3
 8009c98:	2209      	movs	r2, #9
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	f7fe fb65 	bl	800836a <MPU_xTaskGenericNotify>
		  taskYIELD();
 8009ca0:	df01      	svc	1
		  while(1);
 8009ca2:	e7fe      	b.n	8009ca2 <FreeRTOSReportFailure+0x4a>
		  // port yield should be called and nothing else should be executed
	  }
	  else
	  {
		  //printf("Fuzzer crashed");
		  for( ; ; )
 8009ca4:	e7fe      	b.n	8009ca4 <FreeRTOSReportFailure+0x4c>
 8009ca6:	bf00      	nop
 8009ca8:	24020000 	.word	0x24020000

08009cac <vPortResetPrivilege>:
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
    if( xRunningPrivileged == pdFALSE )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <vPortResetPrivilege+0x12>
        portRESET_PRIVILEGE();
 8009cba:	f000 f88b 	bl	8009dd4 <vResetPrivilege>
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
	...

08009cc8 <vPortEnterCritical>:
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009cce:	f7ff f8a3 	bl	8008e18 <xPortRaisePrivilege>
 8009cd2:	6078      	str	r0, [r7, #4]
    __asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	603b      	str	r3, [r7, #0]
}
 8009ce6:	bf00      	nop
    uxCriticalNesting++;
 8009ce8:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <vPortEnterCritical+0x38>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3301      	adds	r3, #1
 8009cee:	4a04      	ldr	r2, [pc, #16]	; (8009d00 <vPortEnterCritical+0x38>)
 8009cf0:	6013      	str	r3, [r2, #0]
    vPortResetPrivilege( xRunningPrivileged );
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7ff ffda 	bl	8009cac <vPortResetPrivilege>
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	24008014 	.word	0x24008014

08009d04 <vPortExitCritical>:
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009d0a:	f7ff f885 	bl	8008e18 <xPortRaisePrivilege>
 8009d0e:	60f8      	str	r0, [r7, #12]
    configASSERT( uxCriticalNesting );
 8009d10:	4b12      	ldr	r3, [pc, #72]	; (8009d5c <vPortExitCritical+0x58>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <vPortExitCritical+0x2a>
    __asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	60bb      	str	r3, [r7, #8]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <vPortExitCritical+0x28>
    uxCriticalNesting--;
 8009d2e:	4b0b      	ldr	r3, [pc, #44]	; (8009d5c <vPortExitCritical+0x58>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	4a09      	ldr	r2, [pc, #36]	; (8009d5c <vPortExitCritical+0x58>)
 8009d36:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8009d38:	4b08      	ldr	r3, [pc, #32]	; (8009d5c <vPortExitCritical+0x58>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d105      	bne.n	8009d4c <vPortExitCritical+0x48>
 8009d40:	2300      	movs	r3, #0
 8009d42:	607b      	str	r3, [r7, #4]
    __asm volatile
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f383 8811 	msr	BASEPRI, r3
}
 8009d4a:	bf00      	nop
    vPortResetPrivilege( xRunningPrivileged );
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff ffad 	bl	8009cac <vPortResetPrivilege>
}
 8009d52:	bf00      	nop
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	24008014 	.word	0x24008014

08009d60 <vPortSetupTimerInterrupt>:
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d64:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <vPortSetupTimerInterrupt+0x34>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d6a:	4b0b      	ldr	r3, [pc, #44]	; (8009d98 <vPortSetupTimerInterrupt+0x38>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d70:	4b0a      	ldr	r3, [pc, #40]	; (8009d9c <vPortSetupTimerInterrupt+0x3c>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a0a      	ldr	r2, [pc, #40]	; (8009da0 <vPortSetupTimerInterrupt+0x40>)
 8009d76:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7a:	099b      	lsrs	r3, r3, #6
 8009d7c:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <vPortSetupTimerInterrupt+0x44>)
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE );
 8009d82:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <vPortSetupTimerInterrupt+0x34>)
 8009d84:	2207      	movs	r2, #7
 8009d86:	601a      	str	r2, [r3, #0]
}
 8009d88:	bf00      	nop
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	e000e010 	.word	0xe000e010
 8009d98:	e000e018 	.word	0xe000e018
 8009d9c:	24008000 	.word	0x24008000
 8009da0:	10624dd3 	.word	0x10624dd3
 8009da4:	e000e014 	.word	0xe000e014

08009da8 <vPortEnableVFP>:
    __asm volatile
 8009da8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009db8 <vPortEnableVFP+0x10>
 8009dac:	6801      	ldr	r1, [r0, #0]
 8009dae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009db2:	6001      	str	r1, [r0, #0]
 8009db4:	4770      	bx	lr
 8009db6:	0000      	.short	0x0000
 8009db8:	e000ed88 	.word	0xe000ed88
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop

08009dc0 <xIsPrivileged>:
    __asm volatile
 8009dc0:	f3ef 8014 	mrs	r0, CONTROL
 8009dc4:	f010 0f01 	tst.w	r0, #1
 8009dc8:	bf14      	ite	ne
 8009dca:	2000      	movne	r0, #0
 8009dcc:	2001      	moveq	r0, #1
 8009dce:	4770      	bx	lr
}
 8009dd0:	bf00      	nop
 8009dd2:	4618      	mov	r0, r3

08009dd4 <vResetPrivilege>:
    __asm volatile
 8009dd4:	f3ef 8014 	mrs	r0, CONTROL
 8009dd8:	f040 0001 	orr.w	r0, r0, #1
 8009ddc:	f380 8814 	msr	CONTROL, r0
 8009de0:	4770      	bx	lr
}
 8009de2:	bf00      	nop

08009de4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009dea:	f3ef 8305 	mrs	r3, IPSR
 8009dee:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b0f      	cmp	r3, #15
 8009df4:	d914      	bls.n	8009e20 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009df6:	4a17      	ldr	r2, [pc, #92]	; (8009e54 <vPortValidateInterruptPriority+0x70>)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e00:	4b15      	ldr	r3, [pc, #84]	; (8009e58 <vPortValidateInterruptPriority+0x74>)
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	7afa      	ldrb	r2, [r7, #11]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d20a      	bcs.n	8009e20 <vPortValidateInterruptPriority+0x3c>
    __asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	607b      	str	r3, [r7, #4]
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredicable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e20:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <vPortValidateInterruptPriority+0x78>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e28:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <vPortValidateInterruptPriority+0x7c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d90a      	bls.n	8009e46 <vPortValidateInterruptPriority+0x62>
    __asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	603b      	str	r3, [r7, #0]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <vPortValidateInterruptPriority+0x60>
    }
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	e000e3f0 	.word	0xe000e3f0
 8009e58:	2401001d 	.word	0x2401001d
 8009e5c:	e000ed0c 	.word	0xe000ed0c
 8009e60:	24010020 	.word	0x24010020

08009e64 <__sanitizer_cov_trace_pc>:
#include "fuzzing.h"
#include "stdint.h"


void __sanitizer_cov_trace_pc(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0

#if DUALCOREFUZZ
	 Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
	 uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
#else
	 Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009e6a:	4b32      	ldr	r3, [pc, #200]	; (8009f34 <__sanitizer_cov_trace_pc+0xd0>)
 8009e6c:	60fb      	str	r3, [r7, #12]
	 //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
	 uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	60bb      	str	r3, [r7, #8]

	register uint32_t R14 asm("r14");

	uint16_t guard;

	guard =  (uint16_t) (R14 & AFL_BITMAP_MASK);
 8009e72:	4673      	mov	r3, lr
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e7a:	80fb      	strh	r3, [r7, #6]

	uint16_t bitmapindex = (uint16_t)( guard^AFLfuzzer.previousGuard);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009e82:	f8b3 2858 	ldrh.w	r2, [r3, #2136]	; 0x858
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	4053      	eors	r3, r2
 8009e8a:	80bb      	strh	r3, [r7, #4]
	bitmapindex &=AFL_BITMAP_MASK;
 8009e8c:	88bb      	ldrh	r3, [r7, #4]
 8009e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e92:	80bb      	strh	r3, [r7, #4]

	if(!paflbitmap[bitmapindex])
 8009e94:	88bb      	ldrh	r3, [r7, #4]
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d121      	bne.n	8009ee6 <__sanitizer_cov_trace_pc+0x82>
	{
		  AFLfuzzer.indexdif++; // since we need to start the index in 1 the first tuple is empty,
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009ea8:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8009eac:	3301      	adds	r3, #1
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009eb6:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
		              // we will correct the pointer
		  	  	  	  // when sending the data to the PC
		  paflbitmap[bitmapindex] =  AFLfuzzer.indexdif;
 8009eba:	88bb      	ldrh	r3, [r7, #4]
 8009ebc:	005b      	lsls	r3, r3, #1
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8009ec8:	f8b2 2862 	ldrh.w	r2, [r2, #2146]	; 0x862
 8009ecc:	801a      	strh	r2, [r3, #0]
		  AFLfuzzer.afldiff[AFLfuzzer.indexdif].index = bitmapindex;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009ed4:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8009ed8:	461a      	mov	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ee0:	88b9      	ldrh	r1, [r7, #4]
 8009ee2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

	 }
	 AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val = (AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val + 1) & 0xff;
 8009ee6:	88bb      	ldrh	r3, [r7, #4]
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4413      	add	r3, r2
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	885b      	ldrh	r3, [r3, #2]
 8009efc:	3301      	adds	r3, #1
 8009efe:	b299      	uxth	r1, r3
 8009f00:	88bb      	ldrh	r3, [r7, #4]
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b2ca      	uxtb	r2, r1
 8009f0c:	b291      	uxth	r1, r2
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	460a      	mov	r2, r1
 8009f1a:	805a      	strh	r2, [r3, #2]

	 AFLfuzzer.previousGuard = guard>>1;
 8009f1c:	88fb      	ldrh	r3, [r7, #6]
 8009f1e:	085b      	lsrs	r3, r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009f28:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858



}
 8009f2c:	bf00      	nop
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	24020000 	.word	0x24020000

08009f38 <app_main>:

/* Demo includes. */
#include "mpu_demo.h"

void app_main( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	af00      	add	r7, sp, #0
	/* Start the MPU demo. */
	vStartMPUDemo();
 8009f3c:	f010 f82e 	bl	8019f9c <vStartMPUDemo>


	/* Start the scheduler. */
	vTaskStartScheduler();
 8009f40:	f7f9 ff1a 	bl	8003d78 <vTaskStartScheduler>

	/* Should not get here. */
	for( ;; );
 8009f44:	e7fe      	b.n	8009f44 <app_main+0xc>

08009f46 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8009f46:	b480      	push	{r7}
 8009f48:	b083      	sub	sp, #12
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
	/* If configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2 then this
	function will automatically get called if a task overflows its stack. */
	( void ) pxTask;
	( void ) pcTaskName;
	for( ;; );
 8009f50:	e7fe      	b.n	8009f50 <vApplicationStackOverflowHook+0xa>

08009f52 <vApplicationMallocFailedHook>:
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8009f52:	b480      	push	{r7}
 8009f54:	af00      	add	r7, sp, #0
	/* If configUSE_MALLOC_FAILED_HOOK is set to 1 then this function will
	be called automatically if a call to pvPortMalloc() fails.  pvPortMalloc()
	is called automatically when a task, queue or semaphore is created. */
	for( ;; );
 8009f56:	e7fe      	b.n	8009f56 <vApplicationMallocFailedHook+0x4>

08009f58 <vApplicationGetIdleTaskMemory>:

/* configUSE_STATIC_ALLOCATION is set to 1, so the application must provide an
implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
used by the Idle task. */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	4a07      	ldr	r2, [pc, #28]	; (8009f84 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f68:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	4a06      	ldr	r2, [pc, #24]	; (8009f88 <vApplicationGetIdleTaskMemory+0x30>)
 8009f6e:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f76:	601a      	str	r2, [r3, #0]
}
 8009f78:	bf00      	nop
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	24010024 	.word	0x24010024
 8009f88:	24010168 	.word	0x24010168

08009f8c <vApplicationGetTimerTaskMemory>:

/* configUSE_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
application must provide an implementation of vApplicationGetTimerTaskMemory()
to provide the memory that is used by the Timer service task. */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4a07      	ldr	r2, [pc, #28]	; (8009fb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f9c:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	4a06      	ldr	r2, [pc, #24]	; (8009fbc <vApplicationGetTimerTaskMemory+0x30>)
 8009fa2:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009faa:	601a      	str	r2, [r3, #0]
}
 8009fac:	bf00      	nop
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	24011168 	.word	0x24011168
 8009fbc:	240112ac 	.word	0x240112ac

08009fc0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009fc4:	f3bf 8f4f 	dsb	sy
}
 8009fc8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <__NVIC_SystemReset+0x24>)
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009fd2:	4904      	ldr	r1, [pc, #16]	; (8009fe4 <__NVIC_SystemReset+0x24>)
 8009fd4:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <__NVIC_SystemReset+0x28>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fda:	f3bf 8f4f 	dsb	sy
}
 8009fde:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009fe0:	bf00      	nop
 8009fe2:	e7fd      	b.n	8009fe0 <__NVIC_SystemReset+0x20>
 8009fe4:	e000ed00 	.word	0xe000ed00
 8009fe8:	05fa0004 	.word	0x05fa0004

08009fec <deleteTask>:
extern uint8_t AFLfuzzerRegion[AFLINPUTREGION_SIZE ] __attribute__( ( aligned( AFLINPUTREGION_SIZE ) ) );
#endif


void deleteTask()
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af02      	add	r7, sp, #8

	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009ff2:	4b0f      	ldr	r3, [pc, #60]	; (800a030 <deleteTask+0x44>)
 8009ff4:	607b      	str	r3, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	603b      	str	r3, [r7, #0]
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a000:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 800a004:	463b      	mov	r3, r7
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	2300      	movs	r3, #0
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	2303      	movs	r3, #3
 800a00e:	2202      	movs	r2, #2
 800a010:	2100      	movs	r1, #0
 800a012:	f7fa fa9d 	bl	8004550 <xTaskGenericNotifyFromISR>
	//HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
	vTaskDelete(AFLfuzzer.xTaskTarget);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a01c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe f879 	bl	8008118 <MPU_vTaskDelete>

}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	24020000 	.word	0x24020000

0800a034 <vHandleMemoryFault>:


portDONT_DISCARD void vHandleMemoryFault( uint32_t * pulFaultStackAddress )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a03c:	4b0f      	ldr	r3, [pc, #60]	; (800a07c <vHandleMemoryFault+0x48>)
 800a03e:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a040:	f7fe fa0d 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a044:	4602      	mov	r2, r0
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a04c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a050:	429a      	cmp	r2, r3
 800a052:	d10f      	bne.n	800a074 <vHandleMemoryFault+0x40>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a05e:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a068:	2208      	movs	r2, #8
 800a06a:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	  deleteTask();
 800a06e:	f7ff ffbd 	bl	8009fec <deleteTask>
	  }

  }


}
 800a072:	e000      	b.n	800a076 <vHandleMemoryFault+0x42>
	  for( ; ; )
 800a074:	e7fe      	b.n	800a074 <vHandleMemoryFault+0x40>
}
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	24020000 	.word	0x24020000

0800a080 <vNMI_Handler>:



portDONT_DISCARD void vNMI_Handler( uint32_t * pulFaultStackAddress )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a088:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <vNMI_Handler+0x48>)
 800a08a:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a08c:	f7fe f9e7 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a090:	4602      	mov	r2, r0
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a098:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d10f      	bne.n	800a0c0 <vNMI_Handler+0x40>
  {
	  //Get the PC where the crash happened
		  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a0aa:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
		  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a0b4:	2208      	movs	r2, #8
 800a0b6:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  deleteTask();
 800a0ba:	f7ff ff97 	bl	8009fec <deleteTask>
	  }

  }


}
 800a0be:	e000      	b.n	800a0c2 <vNMI_Handler+0x42>
	  for( ; ; )
 800a0c0:	e7fe      	b.n	800a0c0 <vNMI_Handler+0x40>
}
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	24020000 	.word	0x24020000

0800a0cc <vHardFault_Handler>:


portDONT_DISCARD void vHardFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a0d4:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <vHardFault_Handler+0x2c>)
 800a0d6:	60fb      	str	r3, [r7, #12]

  //this exception is not recoverable
  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a0d8:	f7fe f9c1 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a0e4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d100      	bne.n	800a0ee <vHardFault_Handler+0x22>
  {

 	  //printf("Fuzzer crashed at PC: %x\n", (unsigned int)pulFaultStackAddress[ 6 ]);
	  for( ; ; )
 800a0ec:	e7fe      	b.n	800a0ec <vHardFault_Handler+0x20>
	  }

  }


}
 800a0ee:	bf00      	nop
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	24020000 	.word	0x24020000

0800a0fc <vBusFault_Handler>:


portDONT_DISCARD void vBusFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <vBusFault_Handler+0x50>)
 800a106:	60fb      	str	r3, [r7, #12]



  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a108:	f7fe f9a9 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a10c:	4602      	mov	r2, r0
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a114:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a118:	429a      	cmp	r2, r3
 800a11a:	d10f      	bne.n	800a13c <vBusFault_Handler+0x40>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a126:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  AFLfuzzer.xTypeEx = EX_CORTEX_BUS_FAULT;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a130:	220b      	movs	r2, #11
 800a132:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	  deleteTask();
 800a136:	f7ff ff59 	bl	8009fec <deleteTask>
	  }

  }


}
 800a13a:	e004      	b.n	800a146 <vBusFault_Handler+0x4a>
		  printf("Fuzzer crash bus fault!\n");
 800a13c:	4804      	ldr	r0, [pc, #16]	; (800a150 <vBusFault_Handler+0x54>)
 800a13e:	f012 fc29 	bl	801c994 <puts>
		  NVIC_SystemReset();
 800a142:	f7ff ff3d 	bl	8009fc0 <__NVIC_SystemReset>
}
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	24020000 	.word	0x24020000
 800a150:	24008248 	.word	0x24008248

0800a154 <vUsageFault_Handler>:

portDONT_DISCARD void vUsageFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a15c:	4b37      	ldr	r3, [pc, #220]	; (800a23c <vUsageFault_Handler+0xe8>)
 800a15e:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a160:	f7fe f97d 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a164:	4602      	mov	r2, r0
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a16c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a170:	429a      	cmp	r2, r3
 800a172:	d13f      	bne.n	800a1f4 <vUsageFault_Handler+0xa0>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a17e:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk)
 800a182:	4b2f      	ldr	r3, [pc, #188]	; (800a240 <vUsageFault_Handler+0xec>)
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00b      	beq.n	800a1a6 <vUsageFault_Handler+0x52>
	  {
	      AFLfuzzer.xTypeEx = EX_CORTEX_DIV0;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a194:	2209      	movs	r2, #9
 800a196:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_DIVBYZERO_Msk; //to clean the bit we need to write 1
 800a19a:	4b29      	ldr	r3, [pc, #164]	; (800a240 <vUsageFault_Handler+0xec>)
 800a19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19e:	4a28      	ldr	r2, [pc, #160]	; (800a240 <vUsageFault_Handler+0xec>)
 800a1a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a1a4:	6293      	str	r3, [r2, #40]	; 0x28
	  }
	  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk)
 800a1a6:	4b26      	ldr	r3, [pc, #152]	; (800a240 <vUsageFault_Handler+0xec>)
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00b      	beq.n	800a1ca <vUsageFault_Handler+0x76>
	  {
          AFLfuzzer.xTypeEx = EX_CORTEX_UNA_ACCESS;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
          SCB->CFSR |= SCB_CFSR_UNALIGNED_Msk;
 800a1be:	4b20      	ldr	r3, [pc, #128]	; (800a240 <vUsageFault_Handler+0xec>)
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c2:	4a1f      	ldr	r2, [pc, #124]	; (800a240 <vUsageFault_Handler+0xec>)
 800a1c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1c8:	6293      	str	r3, [r2, #40]	; 0x28
	  }
	  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk)
 800a1ca:	4b1d      	ldr	r3, [pc, #116]	; (800a240 <vUsageFault_Handler+0xec>)
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00b      	beq.n	800a1ee <vUsageFault_Handler+0x9a>
	  {
		  AFLfuzzer.xTypeEx = EX_CORTEX_UNDEF_INST;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a1dc:	220c      	movs	r2, #12
 800a1de:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_UNDEFINSTR_Msk;
 800a1e2:	4b17      	ldr	r3, [pc, #92]	; (800a240 <vUsageFault_Handler+0xec>)
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	4a16      	ldr	r2, [pc, #88]	; (800a240 <vUsageFault_Handler+0xec>)
 800a1e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ec:	6293      	str	r3, [r2, #40]	; 0x28

	  }
	  deleteTask();
 800a1ee:	f7ff fefd 	bl	8009fec <deleteTask>
	  }

  }


}
 800a1f2:	e01f      	b.n	800a234 <vUsageFault_Handler+0xe0>
		  printf("Fuzzer crash usage fault!: ");
 800a1f4:	4813      	ldr	r0, [pc, #76]	; (800a244 <vUsageFault_Handler+0xf0>)
 800a1f6:	f012 fb47 	bl	801c888 <iprintf>
		  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) printf("EX_CORTEX_DIV0 \n");
 800a1fa:	4b11      	ldr	r3, [pc, #68]	; (800a240 <vUsageFault_Handler+0xec>)
 800a1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d002      	beq.n	800a20c <vUsageFault_Handler+0xb8>
 800a206:	4810      	ldr	r0, [pc, #64]	; (800a248 <vUsageFault_Handler+0xf4>)
 800a208:	f012 fbc4 	bl	801c994 <puts>
		  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) printf("EX_CORTEX_UNA_ACCESS \n");
 800a20c:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <vUsageFault_Handler+0xec>)
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <vUsageFault_Handler+0xca>
 800a218:	480c      	ldr	r0, [pc, #48]	; (800a24c <vUsageFault_Handler+0xf8>)
 800a21a:	f012 fbbb 	bl	801c994 <puts>
		  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) printf("EX_CORTEX_UNDEF_INST \n");
 800a21e:	4b08      	ldr	r3, [pc, #32]	; (800a240 <vUsageFault_Handler+0xec>)
 800a220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <vUsageFault_Handler+0xdc>
 800a22a:	4809      	ldr	r0, [pc, #36]	; (800a250 <vUsageFault_Handler+0xfc>)
 800a22c:	f012 fbb2 	bl	801c994 <puts>
		  NVIC_SystemReset();
 800a230:	f7ff fec6 	bl	8009fc0 <__NVIC_SystemReset>
}
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	24020000 	.word	0x24020000
 800a240:	e000ed00 	.word	0xe000ed00
 800a244:	24008260 	.word	0x24008260
 800a248:	2400827c 	.word	0x2400827c
 800a24c:	2400828c 	.word	0x2400828c
 800a250:	240082a4 	.word	0x240082a4

0800a254 <MemManage_Handler>:
void MemManage_Handler( void ) __attribute__ (( naked ));
/*-----------------------------------------------------------*/

void MemManage_Handler( void )
{
	__asm volatile
 800a254:	f01e 0f04 	tst.w	lr, #4
 800a258:	bf0c      	ite	eq
 800a25a:	f3ef 8008 	mrseq	r0, MSP
 800a25e:	f3ef 8009 	mrsne	r0, PSP
 800a262:	f04f 0200 	mov.w	r2, #0
 800a266:	f382 8814 	msr	CONTROL, r2
 800a26a:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a270 <handler_address_const>
 800a26e:	4708      	bx	r1

0800a270 <handler_address_const>:
 800a270:	0800a035 	.word	0x0800a035
		" ldr r1, handler_address_const						\n"
		" bx r1												\n"
		"													\n"
		" handler_address_const: .word vHandleMemoryFault	\n"
	);
}
 800a274:	bf00      	nop

0800a276 <NMI_Handler>:
  */
void NMI_Handler( void ) __attribute__ (( naked ));
void NMI_Handler(void)
{

		__asm volatile
 800a276:	f01e 0f04 	tst.w	lr, #4
 800a27a:	bf0c      	ite	eq
 800a27c:	f3ef 8008 	mrseq	r0, MSP
 800a280:	f3ef 8009 	mrsne	r0, PSP
 800a284:	f04f 0200 	mov.w	r2, #0
 800a288:	f382 8814 	msr	CONTROL, r2
 800a28c:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a294 <handler_address_const1+0x2>
 800a290:	4708      	bx	r1

0800a292 <handler_address_const1>:
 800a292:	a081      	.short	0xa081
 800a294:	0800      	.short	0x0800
			" bx r1												\n"
			"													\n"
			" handler_address_const1: .word vNMI_Handler	\n"
		);

}
 800a296:	bf00      	nop

0800a298 <HardFault_Handler>:
  */
void HardFault_Handler( void ) __attribute__ (( naked ));
void HardFault_Handler(void)
{

		__asm volatile
 800a298:	f01e 0f04 	tst.w	lr, #4
 800a29c:	bf0c      	ite	eq
 800a29e:	f3ef 8008 	mrseq	r0, MSP
 800a2a2:	f3ef 8009 	mrsne	r0, PSP
 800a2a6:	f04f 0200 	mov.w	r2, #0
 800a2aa:	f382 8814 	msr	CONTROL, r2
 800a2ae:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2b4 <handler_address_const2>
 800a2b2:	4708      	bx	r1

0800a2b4 <handler_address_const2>:
 800a2b4:	0800a0cd 	.word	0x0800a0cd
			" bx r1												\n"
			"													\n"
			" handler_address_const2: .word vHardFault_Handler	\n"
		);

}
 800a2b8:	bf00      	nop

0800a2ba <BusFault_Handler>:
  */
void BusFault_Handler( void ) __attribute__ (( naked ));
void BusFault_Handler(void)
{

		__asm volatile
 800a2ba:	f01e 0f04 	tst.w	lr, #4
 800a2be:	bf0c      	ite	eq
 800a2c0:	f3ef 8008 	mrseq	r0, MSP
 800a2c4:	f3ef 8009 	mrsne	r0, PSP
 800a2c8:	f04f 0200 	mov.w	r2, #0
 800a2cc:	f382 8814 	msr	CONTROL, r2
 800a2d0:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2d8 <handler_address_const3+0x2>
 800a2d4:	4708      	bx	r1

0800a2d6 <handler_address_const3>:
 800a2d6:	a0fd      	.short	0xa0fd
 800a2d8:	0800      	.short	0x0800
			" bx r1												\n"
			"													\n"
			" handler_address_const3: .word vBusFault_Handler	\n"
		);

}
 800a2da:	bf00      	nop

0800a2dc <UsageFault_Handler>:
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler( void ) __attribute__ (( naked ));
void UsageFault_Handler(void)
{
		__asm volatile
 800a2dc:	f01e 0f04 	tst.w	lr, #4
 800a2e0:	bf0c      	ite	eq
 800a2e2:	f3ef 8008 	mrseq	r0, MSP
 800a2e6:	f3ef 8009 	mrsne	r0, PSP
 800a2ea:	f04f 0200 	mov.w	r2, #0
 800a2ee:	f382 8814 	msr	CONTROL, r2
 800a2f2:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2f8 <handler_address_const5>
 800a2f6:	4708      	bx	r1

0800a2f8 <handler_address_const5>:
 800a2f8:	0800a155 	.word	0x0800a155
			" bx r1												\n"
			"													\n"
			" handler_address_const5: .word vUsageFault_Handler	\n"
		);

}
 800a2fc:	bf00      	nop
	...

0800a300 <checkCRC>:
//extern UART_HandleTypeDef huart3;



bool checkCRC(RingBuffer_t *input)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
	uint32_t numberwords;
	uint32_t *crcreceived;

	numberwords = (input->u32available-4)/4;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a30e:	3b04      	subs	r3, #4
 800a310:	089b      	lsrs	r3, r3, #2
 800a312:	617b      	str	r3, [r7, #20]

	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	4619      	mov	r1, r3
 800a31a:	480c      	ldr	r0, [pc, #48]	; (800a34c <checkCRC+0x4c>)
 800a31c:	f001 fa36 	bl	800b78c <HAL_CRC_Calculate>
 800a320:	6138      	str	r0, [r7, #16]

	uwCRCValue = ~uwCRCValue;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	43db      	mvns	r3, r3
 800a326:	613b      	str	r3, [r7, #16]
	crcreceived = (uint32_t *)(input->uxBuffer);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60fb      	str	r3, [r7, #12]

	if (crcreceived[numberwords] == uwCRCValue)
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4413      	add	r3, r2
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d101      	bne.n	800a340 <checkCRC+0x40>
	{
		return true;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <checkCRC+0x42>
	}
	return false;
 800a340:	2300      	movs	r3, #0

}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	240116b0 	.word	0x240116b0

0800a350 <SendBackFault>:

extern uint8_t  bufferDMA[512];
void SendBackFault(uint32_t faultcode)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]

//#if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a358:	4b2f      	ldr	r3, [pc, #188]	; (800a418 <SendBackFault+0xc8>)
 800a35a:	60fb      	str	r3, [r7, #12]
//#endif


	RingClear(&AFLfuzzer.inputAFL);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f9bf 	bl	800a6e6 <RingClear>
	AFLfuzzer.inputLength = 0;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a36e:	461a      	mov	r2, r3
 800a370:	2300      	movs	r3, #0
 800a372:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
	AFLfuzzer.inputLengthpadded = 0;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a37c:	461a      	mov	r2, r3
 800a37e:	2300      	movs	r3, #0
 800a380:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828


	AFLfuzzer.aflheader[0] = faultcode;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a38a:	461a      	mov	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
	AFLfuzzer.aflheader[1] = 4; // 4 bytes for CRC and no payload
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a398:	461a      	mov	r2, r3
 800a39a:	2304      	movs	r3, #4
 800a39c:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	f646 0314 	movw	r3, #26644	; 0x6814
 800a3a6:	4413      	add	r3, r2
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	481b      	ldr	r0, [pc, #108]	; (800a41c <SendBackFault+0xcc>)
 800a3ae:	f001 f9ed 	bl	800b78c <HAL_CRC_Calculate>
 800a3b2:	60b8      	str	r0, [r7, #8]
	AFLfuzzer.aflheader[2] = ~uwCRCValue;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	43db      	mvns	r3, r3
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a3be:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c


	AFLfuzzer.bRXcomplete = false;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
	AFLfuzzer.inputLength = 0;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
	AFLfuzzer.previousGuard = 0;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
	AFLfuzzer.faultcom = true;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
	RingZeroes(&AFLfuzzer.inputAFL);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 f991 	bl	800a722 <RingZeroes>

#if USARTHW == 0
    #ifdef STM32H723xx
	    CDC_Transmit_HS((uint8_t *)AFLfuzzer.aflheader, 12);
    #else
        CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 12);
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	f646 0314 	movw	r3, #26644	; 0x6814
 800a406:	4413      	add	r3, r2
 800a408:	210c      	movs	r1, #12
 800a40a:	4618      	mov	r0, r3
 800a40c:	f011 fb4a 	bl	801baa4 <CDC_Transmit_FS>

#endif



}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	24020000 	.word	0x24020000
 800a41c:	240116b0 	.word	0x240116b0

0800a420 <FuzzingInputHandler>:



void FuzzingInputHandler(uint8_t* Buf, uint32_t *Len)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08a      	sub	sp, #40	; 0x28
 800a424:	af02      	add	r7, sp, #8
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]

	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a42a:	4b7a      	ldr	r3, [pc, #488]	; (800a614 <FuzzingInputHandler+0x1f4>)
 800a42c:	617b      	str	r3, [r7, #20]
	  BaseType_t xHigherPriorityTaskWoken;

	  xHigherPriorityTaskWoken = pdFALSE;
 800a42e:	2300      	movs	r3, #0
 800a430:	613b      	str	r3, [r7, #16]
	  union ubytes_t auxbytes;
	  uint32_t u32Tocopy;
	  uint8_t error;


	  error = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	76fb      	strb	r3, [r7, #27]

	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a43c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a440:	2b00      	cmp	r3, #0
 800a442:	d006      	beq.n	800a452 <FuzzingInputHandler+0x32>
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a44a:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00f      	beq.n	800a472 <FuzzingInputHandler+0x52>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a458:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a45c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a460:	d807      	bhi.n	800a472 <FuzzingInputHandler+0x52>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a468:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a46c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a470:	d904      	bls.n	800a47c <FuzzingInputHandler+0x5c>
	  {
	    	  //this is a wrong condition that should never happens,
	    	  //however fuzzing is stressing the whole system so we should clean the whole thing here
	    	  SendBackFault(FAULT_INLEGTH);
 800a472:	2007      	movs	r0, #7
 800a474:	f7ff ff6c 	bl	800a350 <SendBackFault>
	    	  error = 1;
 800a478:	2301      	movs	r3, #1
 800a47a:	76fb      	strb	r3, [r7, #27]
	  }

	  if( AFLfuzzer.inputLength == 0 && error == 0 )
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a482:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a486:	2b00      	cmp	r3, #0
 800a488:	d144      	bne.n	800a514 <FuzzingInputHandler+0xf4>
 800a48a:	7efb      	ldrb	r3, [r7, #27]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d141      	bne.n	800a514 <FuzzingInputHandler+0xf4>
	  {
	      auxbytes.vbytes[0]=Buf[0];
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	733b      	strb	r3, [r7, #12]
	      auxbytes.vbytes[1]=Buf[1];
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	785b      	ldrb	r3, [r3, #1]
 800a49a:	737b      	strb	r3, [r7, #13]
	      auxbytes.vbytes[2]=Buf[2];
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	789b      	ldrb	r3, [r3, #2]
 800a4a0:	73bb      	strb	r3, [r7, #14]
	      auxbytes.vbytes[3]=Buf[3];
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	78db      	ldrb	r3, [r3, #3]
 800a4a6:	73fb      	strb	r3, [r7, #15]
	      AFLfuzzer.inputLength = auxbytes.vint32;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4b2:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
	      //offset = 4;
	      if(AFLfuzzer.inputLength % 4)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4bc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00d      	beq.n	800a4e4 <FuzzingInputHandler+0xc4>
	      {
	      	  AFLfuzzer.inputLengthpadded = AFLfuzzer.inputLength + 4 - AFLfuzzer.inputLength % 4;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4ce:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4d2:	f023 0303 	bic.w	r3, r3, #3
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a4de:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828
 800a4e2:	e009      	b.n	800a4f8 <FuzzingInputHandler+0xd8>
	      }
	      else
	      {
	      	  AFLfuzzer.inputLengthpadded = AFLfuzzer.inputLength;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4ea:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a4f4:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828
	      }

	      if((AFLfuzzer.inputLengthpadded + 4 )> MAX_BUFFER_INPUT)
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4fe:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a502:	3304      	adds	r3, #4
 800a504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a508:	d904      	bls.n	800a514 <FuzzingInputHandler+0xf4>
	      {
        	  //u32copied = 0;
        	  SendBackFault(FAULT_INLEGTH);
 800a50a:	2007      	movs	r0, #7
 800a50c:	f7ff ff20 	bl	800a350 <SendBackFault>
        	  error = 1;
 800a510:	2301      	movs	r3, #1
 800a512:	76fb      	strb	r3, [r7, #27]

          }

      }

      if(AFLfuzzer.inputLengthpadded && (error == 0) )
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a51a:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d06c      	beq.n	800a5fc <FuzzingInputHandler+0x1dc>
 800a522:	7efb      	ldrb	r3, [r7, #27]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d169      	bne.n	800a5fc <FuzzingInputHandler+0x1dc>
      {


	    	 u32Tocopy = (AFLfuzzer.inputLengthpadded + 4) - AFLfuzzer.inputAFL.u32available;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a52e:	f8d3 2828 	ldr.w	r2, [r3, #2088]	; 0x828
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a538:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	3304      	adds	r3, #4
 800a540:	61fb      	str	r3, [r7, #28]
	    	 if (u32Tocopy > *Len)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d902      	bls.n	800a552 <FuzzingInputHandler+0x132>
	    	 {
	    		 u32Tocopy = *Len;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	61fb      	str	r3, [r7, #28]

	    	 }
	    	 RingCopy(&AFLfuzzer.inputAFL, Buf, u32Tocopy);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a558:	69fa      	ldr	r2, [r7, #28]
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 f873 	bl	800a648 <RingCopy>


	  	     if( (AFLfuzzer.inputLengthpadded + 4) == AFLfuzzer.inputAFL.u32available)
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a568:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a56c:	1d1a      	adds	r2, r3, #4
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a574:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a578:	429a      	cmp	r2, r3
 800a57a:	d13f      	bne.n	800a5fc <FuzzingInputHandler+0x1dc>
	  	     {

	  	    	if( checkCRC(&AFLfuzzer.inputAFL) )
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff febc 	bl	800a300 <checkCRC>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d02d      	beq.n	800a5ea <FuzzingInputHandler+0x1ca>
	  	    	{

	  	    		AFLfuzzer.inputAFL.u32availablenopad = AFLfuzzer.inputLength;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a594:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a59e:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
	  	    		AFLfuzzer.bRXcomplete = 1;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
	  	    		AFLfuzzer.timespan = HAL_GetTick();
 800a5ae:	f000 febf 	bl	800b330 <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5ba:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
	  	    		//if(AFLfuzzer.inputAFL.u32availablenopad ==0)printf("Zero USB \n");
	  	    		AFLfuzzer.faultcom = false;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

	  	    		xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5d0:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 800a5d4:	f107 0310 	add.w	r3, r7, #16
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	2301      	movs	r3, #1
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	f7f9 ffb4 	bl	8004550 <xTaskGenericNotifyFromISR>
 800a5e8:	e008      	b.n	800a5fc <FuzzingInputHandler+0x1dc>
	  	    	}
	  	    	else
	  	    	{
	  	    		// wrong CRC
	  	    		//u32copied = 0;
	  	    		AFLfuzzer.faultcom = true;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
	  	    		SendBackFault(FAULT_COMM);
 800a5f6:	2006      	movs	r0, #6
 800a5f8:	f7ff feaa 	bl	800a350 <SendBackFault>

	  	     }


      }
      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <FuzzingInputHandler+0x1ea>
 800a602:	4b05      	ldr	r3, [pc, #20]	; (800a618 <FuzzingInputHandler+0x1f8>)
 800a604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a608:	601a      	str	r2, [r3, #0]

}
 800a60a:	bf00      	nop
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	24020000 	.word	0x24020000
 800a618:	e000ed04 	.word	0xe000ed04

0800a61c <activateCortexMtraps>:



// Activate the Cortex-M traps without unaligned access
void activateCortexMtraps()
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk
 800a620:	4b08      	ldr	r3, [pc, #32]	; (800a644 <activateCortexMtraps+0x28>)
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	4a07      	ldr	r2, [pc, #28]	; (800a644 <activateCortexMtraps+0x28>)
 800a626:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a62a:	6253      	str	r3, [r2, #36]	; 0x24
		  | SCB_SHCSR_BUSFAULTENA_Msk
		  | SCB_SHCSR_MEMFAULTENA_Msk; // enable Usage-/Bus-/MPU Fault

	  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;// | // enable div by zero trap
 800a62c:	4b05      	ldr	r3, [pc, #20]	; (800a644 <activateCortexMtraps+0x28>)
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	4a04      	ldr	r2, [pc, #16]	; (800a644 <activateCortexMtraps+0x28>)
 800a632:	f043 0310 	orr.w	r3, r3, #16
 800a636:	6153      	str	r3, [r2, #20]

}
 800a638:	bf00      	nop
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	e000ed00 	.word	0xe000ed00

0800a648 <RingCopy>:


/* Ring Buffer functions */

void RingCopy(RingBuffer_t *xRingBuffer, uint8_t* u8Buff, uint32_t len)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
	uint32_t u32Free=0;
 800a654:	2300      	movs	r3, #0
 800a656:	617b      	str	r3, [r7, #20]


	u32Free = MAX_BUFFER_INPUT - xRingBuffer->u32end;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a65e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800a662:	617b      	str	r3, [r7, #20]

	if(u32Free > len)
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d91a      	bls.n	800a6a2 <RingCopy+0x5a>
	{
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, len );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	4413      	add	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	68b9      	ldr	r1, [r7, #8]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f012 f80e 	bl	801c69c <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + len);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	441a      	add	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		xRingBuffer->u32available += len;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	441a      	add	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800a6a0:	e019      	b.n	800a6d6 <RingCopy+0x8e>

	}
	else
	{
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, u32Free);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f011 fff3 	bl	801c69c <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	441a      	add	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		xRingBuffer->u32available += u32Free;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	441a      	add	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	}

	xRingBuffer->overflow = false;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810

}
 800a6de:	bf00      	nop
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <RingClear>:
{
return xRingBuffer->u32available;
}

void RingClear(RingBuffer_t *xRingBuffer)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b083      	sub	sp, #12
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
xRingBuffer->u32start = 0;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
xRingBuffer->u32end = 0;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
xRingBuffer->u32available = 0;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
xRingBuffer->u32availablenopad = 0;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
xRingBuffer->overflow = false;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <RingZeroes>:


void RingZeroes(RingBuffer_t *xRingBuffer)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
	RingClear(xRingBuffer);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7ff ffdb 	bl	800a6e6 <RingClear>
	{
		xRingBuffer->uxBuffer[i]=0;
	}
*/

}
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <__io_putchar>:
static void MX_USART3_UART_Init(void);
static void MX_RNG_Init(void);
static void MX_DMA_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
void __io_putchar(uint8_t ch) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart3, &ch, 1, 1);
 800a742:	1df9      	adds	r1, r7, #7
 800a744:	2301      	movs	r3, #1
 800a746:	2201      	movs	r2, #1
 800a748:	4803      	ldr	r0, [pc, #12]	; (800a758 <__io_putchar+0x20>)
 800a74a:	f008 fe7f 	bl	801344c <HAL_UART_Transmit>
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	240116e8 	.word	0x240116e8

0800a75c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a762:	4b38      	ldr	r3, [pc, #224]	; (800a844 <main+0xe8>)
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d11b      	bne.n	800a7a6 <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800a76e:	f3bf 8f4f 	dsb	sy
}
 800a772:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a774:	f3bf 8f6f 	isb	sy
}
 800a778:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a77a:	4b32      	ldr	r3, [pc, #200]	; (800a844 <main+0xe8>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a782:	f3bf 8f4f 	dsb	sy
}
 800a786:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a788:	f3bf 8f6f 	isb	sy
}
 800a78c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a78e:	4b2d      	ldr	r3, [pc, #180]	; (800a844 <main+0xe8>)
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	4a2c      	ldr	r2, [pc, #176]	; (800a844 <main+0xe8>)
 800a794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a798:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a79a:	f3bf 8f4f 	dsb	sy
}
 800a79e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a7a0:	f3bf 8f6f 	isb	sy
}
 800a7a4:	e000      	b.n	800a7a8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a7a6:	bf00      	nop
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800a7a8:	f000 fa60 	bl	800ac6c <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800a7ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a7b0:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800a7b2:	bf00      	nop
 800a7b4:	4b24      	ldr	r3, [pc, #144]	; (800a848 <main+0xec>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <main+0x6e>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	1e5a      	subs	r2, r3, #1
 800a7c4:	607a      	str	r2, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	dcf4      	bgt.n	800a7b4 <main+0x58>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a7ca:	f000 fd61 	bl	800b290 <HAL_Init>

  /* USER CODE BEGIN Init */

  activateCortexMtraps();
 800a7ce:	f7ff ff25 	bl	800a61c <activateCortexMtraps>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a7d2:	f000 f83f 	bl	800a854 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800a7d6:	4b1c      	ldr	r3, [pc, #112]	; (800a848 <main+0xec>)
 800a7d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7dc:	4a1a      	ldr	r2, [pc, #104]	; (800a848 <main+0xec>)
 800a7de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a7e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7e6:	4b18      	ldr	r3, [pc, #96]	; (800a848 <main+0xec>)
 800a7e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f0:	603b      	str	r3, [r7, #0]
 800a7f2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	f004 fc35 	bl	800f064 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	f004 fc4b 	bl	800f098 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800a802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a806:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800a808:	bf00      	nop
 800a80a:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <main+0xec>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a812:	2b00      	cmp	r3, #0
 800a814:	d104      	bne.n	800a820 <main+0xc4>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	1e5a      	subs	r2, r3, #1
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dcf4      	bgt.n	800a80a <main+0xae>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a820:	f000 f94c 	bl	800aabc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800a824:	f000 f8d4 	bl	800a9d0 <MX_USART3_UART_Init>
  MX_RNG_Init();
 800a828:	f000 f8bc 	bl	800a9a4 <MX_RNG_Init>
  MX_DMA_Init();
 800a82c:	f000 f91e 	bl	800aa6c <MX_DMA_Init>
  MX_CRC_Init();
 800a830:	f000 f896 	bl	800a960 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */



  led_init();
 800a834:	f000 f9da 	bl	800abec <led_init>

  // call RTOS initialization routines

  //buf2=malloc(32);

  testextern = (uint32_t)__user_heap_start__;
 800a838:	4a04      	ldr	r2, [pc, #16]	; (800a84c <main+0xf0>)
 800a83a:	4b05      	ldr	r3, [pc, #20]	; (800a850 <main+0xf4>)
 800a83c:	601a      	str	r2, [r3, #0]



  app_main();
 800a83e:	f7ff fb7b 	bl	8009f38 <app_main>
//uint8_t test1[] = "test1\n";
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a842:	e7fe      	b.n	800a842 <main+0xe6>
 800a844:	e000ed00 	.word	0xe000ed00
 800a848:	58024400 	.word	0x58024400
 800a84c:	24036000 	.word	0x24036000
 800a850:	240116ac 	.word	0x240116ac

0800a854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b09c      	sub	sp, #112	; 0x70
 800a858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a85e:	224c      	movs	r2, #76	; 0x4c
 800a860:	2100      	movs	r1, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f011 ff28 	bl	801c6b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a868:	1d3b      	adds	r3, r7, #4
 800a86a:	2220      	movs	r2, #32
 800a86c:	2100      	movs	r1, #0
 800a86e:	4618      	mov	r0, r3
 800a870:	f011 ff22 	bl	801c6b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800a874:	2004      	movs	r0, #4
 800a876:	f005 fdff 	bl	8010478 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a87a:	2300      	movs	r3, #0
 800a87c:	603b      	str	r3, [r7, #0]
 800a87e:	4b35      	ldr	r3, [pc, #212]	; (800a954 <SystemClock_Config+0x100>)
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	4a34      	ldr	r2, [pc, #208]	; (800a954 <SystemClock_Config+0x100>)
 800a884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a888:	6193      	str	r3, [r2, #24]
 800a88a:	4b32      	ldr	r3, [pc, #200]	; (800a954 <SystemClock_Config+0x100>)
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	4b30      	ldr	r3, [pc, #192]	; (800a958 <SystemClock_Config+0x104>)
 800a896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a898:	4a2f      	ldr	r2, [pc, #188]	; (800a958 <SystemClock_Config+0x104>)
 800a89a:	f043 0301 	orr.w	r3, r3, #1
 800a89e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a8a0:	4b2d      	ldr	r3, [pc, #180]	; (800a958 <SystemClock_Config+0x104>)
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	603b      	str	r3, [r7, #0]
 800a8aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a8ac:	bf00      	nop
 800a8ae:	4b29      	ldr	r3, [pc, #164]	; (800a954 <SystemClock_Config+0x100>)
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ba:	d1f8      	bne.n	800a8ae <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a8bc:	4b27      	ldr	r3, [pc, #156]	; (800a95c <SystemClock_Config+0x108>)
 800a8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c0:	f023 0303 	bic.w	r3, r3, #3
 800a8c4:	4a25      	ldr	r2, [pc, #148]	; (800a95c <SystemClock_Config+0x108>)
 800a8c6:	f043 0302 	orr.w	r3, r3, #2
 800a8ca:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a8cc:	2321      	movs	r3, #33	; 0x21
 800a8ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a8d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a8d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a8da:	2302      	movs	r3, #2
 800a8dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800a8e6:	2378      	movs	r3, #120	; 0x78
 800a8e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a8f6:	230c      	movs	r3, #12
 800a8f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a906:	4618      	mov	r0, r3
 800a908:	f005 fe20 	bl	801054c <HAL_RCC_OscConfig>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800a912:	f000 f9c7 	bl	800aca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a916:	233f      	movs	r3, #63	; 0x3f
 800a918:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a91a:	2303      	movs	r3, #3
 800a91c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a922:	2308      	movs	r3, #8
 800a924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a926:	2340      	movs	r3, #64	; 0x40
 800a928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a92a:	2340      	movs	r3, #64	; 0x40
 800a92c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a92e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a932:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a938:	1d3b      	adds	r3, r7, #4
 800a93a:	2104      	movs	r1, #4
 800a93c:	4618      	mov	r0, r3
 800a93e:	f006 fa13 	bl	8010d68 <HAL_RCC_ClockConfig>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800a948:	f000 f9ac 	bl	800aca4 <Error_Handler>
  }
}
 800a94c:	bf00      	nop
 800a94e:	3770      	adds	r7, #112	; 0x70
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	58024800 	.word	0x58024800
 800a958:	58000400 	.word	0x58000400
 800a95c:	58024400 	.word	0x58024400

0800a960 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a964:	4b0d      	ldr	r3, [pc, #52]	; (800a99c <MX_CRC_Init+0x3c>)
 800a966:	4a0e      	ldr	r2, [pc, #56]	; (800a9a0 <MX_CRC_Init+0x40>)
 800a968:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a96a:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <MX_CRC_Init+0x3c>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a970:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <MX_CRC_Init+0x3c>)
 800a972:	2200      	movs	r2, #0
 800a974:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_WORD;
 800a976:	4b09      	ldr	r3, [pc, #36]	; (800a99c <MX_CRC_Init+0x3c>)
 800a978:	2260      	movs	r2, #96	; 0x60
 800a97a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800a97c:	4b07      	ldr	r3, [pc, #28]	; (800a99c <MX_CRC_Init+0x3c>)
 800a97e:	2280      	movs	r2, #128	; 0x80
 800a980:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800a982:	4b06      	ldr	r3, [pc, #24]	; (800a99c <MX_CRC_Init+0x3c>)
 800a984:	2203      	movs	r2, #3
 800a986:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a988:	4804      	ldr	r0, [pc, #16]	; (800a99c <MX_CRC_Init+0x3c>)
 800a98a:	f000 fe57 	bl	800b63c <HAL_CRC_Init>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800a994:	f000 f986 	bl	800aca4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800a998:	bf00      	nop
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	240116b0 	.word	0x240116b0
 800a9a0:	58024c00 	.word	0x58024c00

0800a9a4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a9a8:	4b07      	ldr	r3, [pc, #28]	; (800a9c8 <MX_RNG_Init+0x24>)
 800a9aa:	4a08      	ldr	r2, [pc, #32]	; (800a9cc <MX_RNG_Init+0x28>)
 800a9ac:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a9ae:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <MX_RNG_Init+0x24>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a9b4:	4804      	ldr	r0, [pc, #16]	; (800a9c8 <MX_RNG_Init+0x24>)
 800a9b6:	f008 f90d 	bl	8012bd4 <HAL_RNG_Init>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800a9c0:	f000 f970 	bl	800aca4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a9c4:	bf00      	nop
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	240116d4 	.word	0x240116d4
 800a9cc:	48021800 	.word	0x48021800

0800a9d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a9d4:	4b22      	ldr	r3, [pc, #136]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800a9d6:	4a23      	ldr	r2, [pc, #140]	; (800aa64 <MX_USART3_UART_Init+0x94>)
 800a9d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 5000000;
 800a9da:	4b21      	ldr	r3, [pc, #132]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800a9dc:	4a22      	ldr	r2, [pc, #136]	; (800aa68 <MX_USART3_UART_Init+0x98>)
 800a9de:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a9e0:	4b1f      	ldr	r3, [pc, #124]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a9e6:	4b1e      	ldr	r3, [pc, #120]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a9ec:	4b1c      	ldr	r3, [pc, #112]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a9f2:	4b1b      	ldr	r3, [pc, #108]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800a9f4:	220c      	movs	r2, #12
 800a9f6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a9f8:	4b19      	ldr	r3, [pc, #100]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800a9fe:	4b18      	ldr	r3, [pc, #96]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800aa00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800aa04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa06:	4b16      	ldr	r3, [pc, #88]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aa0c:	4b14      	ldr	r3, [pc, #80]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa12:	4b13      	ldr	r3, [pc, #76]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800aa18:	4811      	ldr	r0, [pc, #68]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800aa1a:	f008 fc8b 	bl	8013334 <HAL_UART_Init>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800aa24:	f000 f93e 	bl	800aca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa28:	2100      	movs	r1, #0
 800aa2a:	480d      	ldr	r0, [pc, #52]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800aa2c:	f00a fdbf 	bl	80155ae <HAL_UARTEx_SetTxFifoThreshold>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800aa36:	f000 f935 	bl	800aca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4808      	ldr	r0, [pc, #32]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800aa3e:	f00a fdf4 	bl	801562a <HAL_UARTEx_SetRxFifoThreshold>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800aa48:	f000 f92c 	bl	800aca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800aa4c:	4804      	ldr	r0, [pc, #16]	; (800aa60 <MX_USART3_UART_Init+0x90>)
 800aa4e:	f00a fd75 	bl	801553c <HAL_UARTEx_DisableFifoMode>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800aa58:	f000 f924 	bl	800aca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800aa5c:	bf00      	nop
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	240116e8 	.word	0x240116e8
 800aa64:	40004800 	.word	0x40004800
 800aa68:	004c4b40 	.word	0x004c4b40

0800aa6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800aa72:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <MX_DMA_Init+0x4c>)
 800aa74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aa78:	4a0f      	ldr	r2, [pc, #60]	; (800aab8 <MX_DMA_Init+0x4c>)
 800aa7a:	f043 0301 	orr.w	r3, r3, #1
 800aa7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800aa82:	4b0d      	ldr	r3, [pc, #52]	; (800aab8 <MX_DMA_Init+0x4c>)
 800aa84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	607b      	str	r3, [r7, #4]
 800aa8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800aa90:	2200      	movs	r2, #0
 800aa92:	2100      	movs	r1, #0
 800aa94:	200b      	movs	r0, #11
 800aa96:	f000 fd63 	bl	800b560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800aa9a:	200b      	movs	r0, #11
 800aa9c:	f000 fd7a 	bl	800b594 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	200c      	movs	r0, #12
 800aaa6:	f000 fd5b 	bl	800b560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800aaaa:	200c      	movs	r0, #12
 800aaac:	f000 fd72 	bl	800b594 <HAL_NVIC_EnableIRQ>

}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	58024400 	.word	0x58024400

0800aabc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08c      	sub	sp, #48	; 0x30
 800aac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aac2:	f107 031c 	add.w	r3, r7, #28
 800aac6:	2200      	movs	r2, #0
 800aac8:	601a      	str	r2, [r3, #0]
 800aaca:	605a      	str	r2, [r3, #4]
 800aacc:	609a      	str	r2, [r3, #8]
 800aace:	60da      	str	r2, [r3, #12]
 800aad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aad2:	4b43      	ldr	r3, [pc, #268]	; (800abe0 <MX_GPIO_Init+0x124>)
 800aad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aad8:	4a41      	ldr	r2, [pc, #260]	; (800abe0 <MX_GPIO_Init+0x124>)
 800aada:	f043 0304 	orr.w	r3, r3, #4
 800aade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aae2:	4b3f      	ldr	r3, [pc, #252]	; (800abe0 <MX_GPIO_Init+0x124>)
 800aae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aae8:	f003 0304 	and.w	r3, r3, #4
 800aaec:	61bb      	str	r3, [r7, #24]
 800aaee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aaf0:	4b3b      	ldr	r3, [pc, #236]	; (800abe0 <MX_GPIO_Init+0x124>)
 800aaf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aaf6:	4a3a      	ldr	r2, [pc, #232]	; (800abe0 <MX_GPIO_Init+0x124>)
 800aaf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab00:	4b37      	ldr	r3, [pc, #220]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab0e:	4b34      	ldr	r3, [pc, #208]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab14:	4a32      	ldr	r2, [pc, #200]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab16:	f043 0302 	orr.w	r3, r3, #2
 800ab1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab1e:	4b30      	ldr	r3, [pc, #192]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	613b      	str	r3, [r7, #16]
 800ab2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ab2c:	4b2c      	ldr	r3, [pc, #176]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab32:	4a2b      	ldr	r2, [pc, #172]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab34:	f043 0308 	orr.w	r3, r3, #8
 800ab38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab3c:	4b28      	ldr	r3, [pc, #160]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab42:	f003 0308 	and.w	r3, r3, #8
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab4a:	4b25      	ldr	r3, [pc, #148]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab50:	4a23      	ldr	r2, [pc, #140]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab52:	f043 0301 	orr.w	r3, r3, #1
 800ab56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab5a:	4b21      	ldr	r3, [pc, #132]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	60bb      	str	r3, [r7, #8]
 800ab66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ab68:	4b1d      	ldr	r3, [pc, #116]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab6e:	4a1c      	ldr	r2, [pc, #112]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab70:	f043 0310 	orr.w	r3, r3, #16
 800ab74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab78:	4b19      	ldr	r3, [pc, #100]	; (800abe0 <MX_GPIO_Init+0x124>)
 800ab7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab7e:	f003 0310 	and.w	r3, r3, #16
 800ab82:	607b      	str	r3, [r7, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800ab86:	2200      	movs	r2, #0
 800ab88:	f244 0101 	movw	r1, #16385	; 0x4001
 800ab8c:	4815      	ldr	r0, [pc, #84]	; (800abe4 <MX_GPIO_Init+0x128>)
 800ab8e:	f004 fa4f 	bl	800f030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ab92:	2200      	movs	r2, #0
 800ab94:	2102      	movs	r1, #2
 800ab96:	4814      	ldr	r0, [pc, #80]	; (800abe8 <MX_GPIO_Init+0x12c>)
 800ab98:	f004 fa4a 	bl	800f030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800ab9c:	f244 0301 	movw	r3, #16385	; 0x4001
 800aba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aba2:	2301      	movs	r3, #1
 800aba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abaa:	2300      	movs	r3, #0
 800abac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abae:	f107 031c 	add.w	r3, r7, #28
 800abb2:	4619      	mov	r1, r3
 800abb4:	480b      	ldr	r0, [pc, #44]	; (800abe4 <MX_GPIO_Init+0x128>)
 800abb6:	f003 ff81 	bl	800eabc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800abba:	2302      	movs	r3, #2
 800abbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abbe:	2301      	movs	r3, #1
 800abc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abc6:	2300      	movs	r3, #0
 800abc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800abca:	f107 031c 	add.w	r3, r7, #28
 800abce:	4619      	mov	r1, r3
 800abd0:	4805      	ldr	r0, [pc, #20]	; (800abe8 <MX_GPIO_Init+0x12c>)
 800abd2:	f003 ff73 	bl	800eabc <HAL_GPIO_Init>

}
 800abd6:	bf00      	nop
 800abd8:	3730      	adds	r7, #48	; 0x30
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	58024400 	.word	0x58024400
 800abe4:	58020400 	.word	0x58020400
 800abe8:	58021000 	.word	0x58021000

0800abec <led_init>:

/* USER CODE BEGIN 4 */
void led_init(void) {
 800abec:	b580      	push	{r7, lr}
 800abee:	b088      	sub	sp, #32
 800abf0:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800abf2:	4b1c      	ldr	r3, [pc, #112]	; (800ac64 <led_init+0x78>)
 800abf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abf8:	4a1a      	ldr	r2, [pc, #104]	; (800ac64 <led_init+0x78>)
 800abfa:	f043 0302 	orr.w	r3, r3, #2
 800abfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac02:	4b18      	ldr	r3, [pc, #96]	; (800ac64 <led_init+0x78>)
 800ac04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	60bb      	str	r3, [r7, #8]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac10:	f107 030c 	add.w	r3, r7, #12
 800ac14:	2200      	movs	r2, #0
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	605a      	str	r2, [r3, #4]
 800ac1a:	609a      	str	r2, [r3, #8]
 800ac1c:	60da      	str	r2, [r3, #12]
 800ac1e:	611a      	str	r2, [r3, #16]

    LD1_GPIO_CLK_EN();
 800ac20:	4b10      	ldr	r3, [pc, #64]	; (800ac64 <led_init+0x78>)
 800ac22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac26:	4a0f      	ldr	r2, [pc, #60]	; (800ac64 <led_init+0x78>)
 800ac28:	f043 0302 	orr.w	r3, r3, #2
 800ac2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac30:	4b0c      	ldr	r3, [pc, #48]	; (800ac64 <led_init+0x78>)
 800ac32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	607b      	str	r3, [r7, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = LD1_GPIO_PIN;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac42:	2301      	movs	r3, #1
 800ac44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LD1_GPIO_PORT, &GPIO_InitStruct);
 800ac4e:	f107 030c 	add.w	r3, r7, #12
 800ac52:	4619      	mov	r1, r3
 800ac54:	4804      	ldr	r0, [pc, #16]	; (800ac68 <led_init+0x7c>)
 800ac56:	f003 ff31 	bl	800eabc <HAL_GPIO_Init>
}
 800ac5a:	bf00      	nop
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	58024400 	.word	0x58024400
 800ac68:	58020400 	.word	0x58020400

0800ac6c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 800ac70:	f000 fcac 	bl	800b5cc <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800ac74:	2004      	movs	r0, #4
 800ac76:	f000 fcc1 	bl	800b5fc <HAL_MPU_Enable>

}
 800ac7a:	bf00      	nop
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a04      	ldr	r2, [pc, #16]	; (800aca0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d101      	bne.n	800ac96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ac92:	f000 fb39 	bl	800b308 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	40014400 	.word	0x40014400

0800aca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aca4:	b480      	push	{r7}
 800aca6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800aca8:	b672      	cpsid	i
}
 800acaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800acac:	e7fe      	b.n	800acac <Error_Handler+0x8>
	...

0800acb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acb6:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <HAL_MspInit+0x30>)
 800acb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acbc:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <HAL_MspInit+0x30>)
 800acbe:	f043 0302 	orr.w	r3, r3, #2
 800acc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800acc6:	4b06      	ldr	r3, [pc, #24]	; (800ace0 <HAL_MspInit+0x30>)
 800acc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	607b      	str	r3, [r7, #4]
 800acd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	58024400 	.word	0x58024400

0800ace4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a0b      	ldr	r2, [pc, #44]	; (800ad20 <HAL_CRC_MspInit+0x3c>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d10e      	bne.n	800ad14 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800acf6:	4b0b      	ldr	r3, [pc, #44]	; (800ad24 <HAL_CRC_MspInit+0x40>)
 800acf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acfc:	4a09      	ldr	r2, [pc, #36]	; (800ad24 <HAL_CRC_MspInit+0x40>)
 800acfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ad06:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <HAL_CRC_MspInit+0x40>)
 800ad08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	58024c00 	.word	0x58024c00
 800ad24:	58024400 	.word	0x58024400

0800ad28 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b0b2      	sub	sp, #200	; 0xc8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad30:	f107 030c 	add.w	r3, r7, #12
 800ad34:	22bc      	movs	r2, #188	; 0xbc
 800ad36:	2100      	movs	r1, #0
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f011 fcbd 	bl	801c6b8 <memset>
  if(hrng->Instance==RNG)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a17      	ldr	r2, [pc, #92]	; (800ada0 <HAL_RNG_MspInit+0x78>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d126      	bne.n	800ad96 <HAL_RNG_MspInit+0x6e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800ad48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad54:	f107 030c 	add.w	r3, r7, #12
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f006 fbd3 	bl	8011504 <HAL_RCCEx_PeriphCLKConfig>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800ad64:	f7ff ff9e 	bl	800aca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800ad68:	4b0e      	ldr	r3, [pc, #56]	; (800ada4 <HAL_RNG_MspInit+0x7c>)
 800ad6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ad6e:	4a0d      	ldr	r2, [pc, #52]	; (800ada4 <HAL_RNG_MspInit+0x7c>)
 800ad70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad74:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800ad78:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <HAL_RNG_MspInit+0x7c>)
 800ad7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ad7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad82:	60bb      	str	r3, [r7, #8]
 800ad84:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	2050      	movs	r0, #80	; 0x50
 800ad8c:	f000 fbe8 	bl	800b560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 800ad90:	2050      	movs	r0, #80	; 0x50
 800ad92:	f000 fbff 	bl	800b594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800ad96:	bf00      	nop
 800ad98:	37c8      	adds	r7, #200	; 0xc8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	48021800 	.word	0x48021800
 800ada4:	58024400 	.word	0x58024400

0800ada8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b0b8      	sub	sp, #224	; 0xe0
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800adb4:	2200      	movs	r2, #0
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	605a      	str	r2, [r3, #4]
 800adba:	609a      	str	r2, [r3, #8]
 800adbc:	60da      	str	r2, [r3, #12]
 800adbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800adc0:	f107 0310 	add.w	r3, r7, #16
 800adc4:	22bc      	movs	r2, #188	; 0xbc
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f011 fc75 	bl	801c6b8 <memset>
  if(huart->Instance==USART3)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a57      	ldr	r2, [pc, #348]	; (800af30 <HAL_UART_MspInit+0x188>)
 800add4:	4293      	cmp	r3, r2
 800add6:	f040 80a7 	bne.w	800af28 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800adda:	2302      	movs	r3, #2
 800addc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800adde:	2300      	movs	r3, #0
 800ade0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ade4:	f107 0310 	add.w	r3, r7, #16
 800ade8:	4618      	mov	r0, r3
 800adea:	f006 fb8b 	bl	8011504 <HAL_RCCEx_PeriphCLKConfig>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800adf4:	f7ff ff56 	bl	800aca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800adf8:	4b4e      	ldr	r3, [pc, #312]	; (800af34 <HAL_UART_MspInit+0x18c>)
 800adfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800adfe:	4a4d      	ldr	r2, [pc, #308]	; (800af34 <HAL_UART_MspInit+0x18c>)
 800ae00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ae08:	4b4a      	ldr	r3, [pc, #296]	; (800af34 <HAL_UART_MspInit+0x18c>)
 800ae0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ae16:	4b47      	ldr	r3, [pc, #284]	; (800af34 <HAL_UART_MspInit+0x18c>)
 800ae18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae1c:	4a45      	ldr	r2, [pc, #276]	; (800af34 <HAL_UART_MspInit+0x18c>)
 800ae1e:	f043 0308 	orr.w	r3, r3, #8
 800ae22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae26:	4b43      	ldr	r3, [pc, #268]	; (800af34 <HAL_UART_MspInit+0x18c>)
 800ae28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae2c:	f003 0308 	and.w	r3, r3, #8
 800ae30:	60bb      	str	r3, [r7, #8]
 800ae32:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800ae34:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ae38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae42:	2300      	movs	r3, #0
 800ae44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ae4e:	2307      	movs	r3, #7
 800ae50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ae58:	4619      	mov	r1, r3
 800ae5a:	4837      	ldr	r0, [pc, #220]	; (800af38 <HAL_UART_MspInit+0x190>)
 800ae5c:	f003 fe2e 	bl	800eabc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 800ae60:	4b36      	ldr	r3, [pc, #216]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae62:	4a37      	ldr	r2, [pc, #220]	; (800af40 <HAL_UART_MspInit+0x198>)
 800ae64:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800ae66:	4b35      	ldr	r3, [pc, #212]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae68:	222e      	movs	r2, #46	; 0x2e
 800ae6a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae6c:	4b33      	ldr	r3, [pc, #204]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae6e:	2240      	movs	r2, #64	; 0x40
 800ae70:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae72:	4b32      	ldr	r3, [pc, #200]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ae78:	4b30      	ldr	r3, [pc, #192]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae7e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae80:	4b2e      	ldr	r3, [pc, #184]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae86:	4b2d      	ldr	r3, [pc, #180]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800ae8c:	4b2b      	ldr	r3, [pc, #172]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800ae92:	4b2a      	ldr	r3, [pc, #168]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ae98:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae9a:	4b28      	ldr	r3, [pc, #160]	; (800af3c <HAL_UART_MspInit+0x194>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800aea0:	4826      	ldr	r0, [pc, #152]	; (800af3c <HAL_UART_MspInit+0x194>)
 800aea2:	f000 fe0d 	bl	800bac0 <HAL_DMA_Init>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d001      	beq.n	800aeb0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800aeac:	f7ff fefa 	bl	800aca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a22      	ldr	r2, [pc, #136]	; (800af3c <HAL_UART_MspInit+0x194>)
 800aeb4:	679a      	str	r2, [r3, #120]	; 0x78
 800aeb6:	4a21      	ldr	r2, [pc, #132]	; (800af3c <HAL_UART_MspInit+0x194>)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800aebc:	4b21      	ldr	r3, [pc, #132]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aebe:	4a22      	ldr	r2, [pc, #136]	; (800af48 <HAL_UART_MspInit+0x1a0>)
 800aec0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800aec2:	4b20      	ldr	r3, [pc, #128]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aec4:	222d      	movs	r2, #45	; 0x2d
 800aec6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aec8:	4b1e      	ldr	r3, [pc, #120]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aece:	4b1d      	ldr	r3, [pc, #116]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aed4:	4b1b      	ldr	r3, [pc, #108]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aeda:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aedc:	4b19      	ldr	r3, [pc, #100]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aede:	2200      	movs	r2, #0
 800aee0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aee2:	4b18      	ldr	r3, [pc, #96]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800aee8:	4b16      	ldr	r3, [pc, #88]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800aeee:	4b15      	ldr	r3, [pc, #84]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aef4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aef6:	4b13      	ldr	r3, [pc, #76]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800aefc:	4811      	ldr	r0, [pc, #68]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800aefe:	f000 fddf 	bl	800bac0 <HAL_DMA_Init>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 800af08:	f7ff fecc 	bl	800aca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a0d      	ldr	r2, [pc, #52]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800af10:	67da      	str	r2, [r3, #124]	; 0x7c
 800af12:	4a0c      	ldr	r2, [pc, #48]	; (800af44 <HAL_UART_MspInit+0x19c>)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800af18:	2200      	movs	r2, #0
 800af1a:	2105      	movs	r1, #5
 800af1c:	2027      	movs	r0, #39	; 0x27
 800af1e:	f000 fb1f 	bl	800b560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800af22:	2027      	movs	r0, #39	; 0x27
 800af24:	f000 fb36 	bl	800b594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800af28:	bf00      	nop
 800af2a:	37e0      	adds	r7, #224	; 0xe0
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	40004800 	.word	0x40004800
 800af34:	58024400 	.word	0x58024400
 800af38:	58020c00 	.word	0x58020c00
 800af3c:	24011778 	.word	0x24011778
 800af40:	40020010 	.word	0x40020010
 800af44:	240117f0 	.word	0x240117f0
 800af48:	40020028 	.word	0x40020028

0800af4c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a10      	ldr	r2, [pc, #64]	; (800af9c <HAL_UART_MspDeInit+0x50>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d119      	bne.n	800af92 <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 800af5e:	4b10      	ldr	r3, [pc, #64]	; (800afa0 <HAL_UART_MspDeInit+0x54>)
 800af60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af64:	4a0e      	ldr	r2, [pc, #56]	; (800afa0 <HAL_UART_MspDeInit+0x54>)
 800af66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLINK_RX_Pin|STLINK_TX_Pin);
 800af6e:	f44f 7140 	mov.w	r1, #768	; 0x300
 800af72:	480c      	ldr	r0, [pc, #48]	; (800afa4 <HAL_UART_MspDeInit+0x58>)
 800af74:	f003 ff52 	bl	800ee1c <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af7c:	4618      	mov	r0, r3
 800af7e:	f001 f8fb 	bl	800c178 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af86:	4618      	mov	r0, r3
 800af88:	f001 f8f6 	bl	800c178 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800af8c:	2027      	movs	r0, #39	; 0x27
 800af8e:	f000 fb0f 	bl	800b5b0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	40004800 	.word	0x40004800
 800afa0:	58024400 	.word	0x58024400
 800afa4:	58020c00 	.word	0x58020c00

0800afa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08e      	sub	sp, #56	; 0x38
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM16 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b0f      	cmp	r3, #15
 800afb4:	d844      	bhi.n	800b040 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0U);
 800afb6:	2200      	movs	r2, #0
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	2075      	movs	r0, #117	; 0x75
 800afbc:	f000 fad0 	bl	800b560 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800afc0:	2075      	movs	r0, #117	; 0x75
 800afc2:	f000 fae7 	bl	800b594 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800afc6:	4a24      	ldr	r2, [pc, #144]	; (800b058 <HAL_InitTick+0xb0>)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800afcc:	4b23      	ldr	r3, [pc, #140]	; (800b05c <HAL_InitTick+0xb4>)
 800afce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afd2:	4a22      	ldr	r2, [pc, #136]	; (800b05c <HAL_InitTick+0xb4>)
 800afd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800afdc:	4b1f      	ldr	r3, [pc, #124]	; (800b05c <HAL_InitTick+0xb4>)
 800afde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe6:	60bb      	str	r3, [r7, #8]
 800afe8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800afea:	f107 020c 	add.w	r2, r7, #12
 800afee:	f107 0310 	add.w	r3, r7, #16
 800aff2:	4611      	mov	r1, r2
 800aff4:	4618      	mov	r0, r3
 800aff6:	f006 fa43 	bl	8011480 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800affa:	f006 fa2b 	bl	8011454 <HAL_RCC_GetPCLK2Freq>
 800affe:	4603      	mov	r3, r0
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b006:	4a16      	ldr	r2, [pc, #88]	; (800b060 <HAL_InitTick+0xb8>)
 800b008:	fba2 2303 	umull	r2, r3, r2, r3
 800b00c:	0c9b      	lsrs	r3, r3, #18
 800b00e:	3b01      	subs	r3, #1
 800b010:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800b012:	4b14      	ldr	r3, [pc, #80]	; (800b064 <HAL_InitTick+0xbc>)
 800b014:	4a14      	ldr	r2, [pc, #80]	; (800b068 <HAL_InitTick+0xc0>)
 800b016:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800b018:	4b12      	ldr	r3, [pc, #72]	; (800b064 <HAL_InitTick+0xbc>)
 800b01a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b01e:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800b020:	4a10      	ldr	r2, [pc, #64]	; (800b064 <HAL_InitTick+0xbc>)
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800b026:	4b0f      	ldr	r3, [pc, #60]	; (800b064 <HAL_InitTick+0xbc>)
 800b028:	2200      	movs	r2, #0
 800b02a:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b02c:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <HAL_InitTick+0xbc>)
 800b02e:	2200      	movs	r2, #0
 800b030:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800b032:	480c      	ldr	r0, [pc, #48]	; (800b064 <HAL_InitTick+0xbc>)
 800b034:	f007 feac 	bl	8012d90 <HAL_TIM_Base_Init>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d107      	bne.n	800b04e <HAL_InitTick+0xa6>
 800b03e:	e001      	b.n	800b044 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e005      	b.n	800b050 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800b044:	4807      	ldr	r0, [pc, #28]	; (800b064 <HAL_InitTick+0xbc>)
 800b046:	f007 ff05 	bl	8012e54 <HAL_TIM_Base_Start_IT>
 800b04a:	4603      	mov	r3, r0
 800b04c:	e000      	b.n	800b050 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
}
 800b050:	4618      	mov	r0, r3
 800b052:	3738      	adds	r7, #56	; 0x38
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	24008018 	.word	0x24008018
 800b05c:	58024400 	.word	0x58024400
 800b060:	431bde83 	.word	0x431bde83
 800b064:	24011868 	.word	0x24011868
 800b068:	40014400 	.word	0x40014400

0800b06c <DebugMon_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b06c:	b480      	push	{r7}
 800b06e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b070:	bf00      	nop
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
	...

0800b07c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800b080:	4802      	ldr	r0, [pc, #8]	; (800b08c <DMA1_Stream0_IRQHandler+0x10>)
 800b082:	f002 f9fd 	bl	800d480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800b086:	bf00      	nop
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	24011778 	.word	0x24011778

0800b090 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800b094:	4802      	ldr	r0, [pc, #8]	; (800b0a0 <DMA1_Stream1_IRQHandler+0x10>)
 800b096:	f002 f9f3 	bl	800d480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b09a:	bf00      	nop
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	240117f0 	.word	0x240117f0

0800b0a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b0a8:	4802      	ldr	r0, [pc, #8]	; (800b0b4 <USART3_IRQHandler+0x10>)
 800b0aa:	f008 fb5d 	bl	8013768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b0ae:	bf00      	nop
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	240116e8 	.word	0x240116e8

0800b0b8 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800b0bc:	4802      	ldr	r0, [pc, #8]	; (800b0c8 <RNG_IRQHandler+0x10>)
 800b0be:	f007 fde4 	bl	8012c8a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800b0c2:	bf00      	nop
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	240116d4 	.word	0x240116d4

0800b0cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b0d0:	4802      	ldr	r0, [pc, #8]	; (800b0dc <OTG_FS_IRQHandler+0x10>)
 800b0d2:	f004 f94c 	bl	800f36e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b0d6:	bf00      	nop
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	24034704 	.word	0x24034704

0800b0e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800b0e4:	4802      	ldr	r0, [pc, #8]	; (800b0f0 <TIM16_IRQHandler+0x10>)
 800b0e6:	f007 ff25 	bl	8012f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800b0ea:	bf00      	nop
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	24011868 	.word	0x24011868

0800b0f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b100:	2300      	movs	r3, #0
 800b102:	617b      	str	r3, [r7, #20]
 800b104:	e00a      	b.n	800b11c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b106:	f3af 8000 	nop.w
 800b10a:	4601      	mov	r1, r0
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	1c5a      	adds	r2, r3, #1
 800b110:	60ba      	str	r2, [r7, #8]
 800b112:	b2ca      	uxtb	r2, r1
 800b114:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	3301      	adds	r3, #1
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	429a      	cmp	r2, r3
 800b122:	dbf0      	blt.n	800b106 <_read+0x12>
	}

return len;
 800b124:	687b      	ldr	r3, [r7, #4]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b086      	sub	sp, #24
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b13a:	2300      	movs	r3, #0
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	e009      	b.n	800b154 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	1c5a      	adds	r2, r3, #1
 800b144:	60ba      	str	r2, [r7, #8]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff faf5 	bl	800a738 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	3301      	adds	r3, #1
 800b152:	617b      	str	r3, [r7, #20]
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	429a      	cmp	r2, r3
 800b15a:	dbf1      	blt.n	800b140 <_write+0x12>
	}
	return len;
 800b15c:	687b      	ldr	r3, [r7, #4]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <_close>:

int _close(int file)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
	return -1;
 800b16e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b18e:	605a      	str	r2, [r3, #4]
	return 0;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <_isatty>:

int _isatty(int file)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
	return 1;
 800b1a6:	2301      	movs	r3, #1
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
	return 0;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
	...

0800b1d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b1d8:	4a14      	ldr	r2, [pc, #80]	; (800b22c <_sbrk+0x5c>)
 800b1da:	4b15      	ldr	r3, [pc, #84]	; (800b230 <_sbrk+0x60>)
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b1e4:	4b13      	ldr	r3, [pc, #76]	; (800b234 <_sbrk+0x64>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b1ec:	4b11      	ldr	r3, [pc, #68]	; (800b234 <_sbrk+0x64>)
 800b1ee:	4a12      	ldr	r2, [pc, #72]	; (800b238 <_sbrk+0x68>)
 800b1f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b1f2:	4b10      	ldr	r3, [pc, #64]	; (800b234 <_sbrk+0x64>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d207      	bcs.n	800b210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b200:	f011 f90e 	bl	801c420 <__errno>
 800b204:	4603      	mov	r3, r0
 800b206:	220c      	movs	r2, #12
 800b208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b20a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b20e:	e009      	b.n	800b224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b210:	4b08      	ldr	r3, [pc, #32]	; (800b234 <_sbrk+0x64>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b216:	4b07      	ldr	r3, [pc, #28]	; (800b234 <_sbrk+0x64>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4413      	add	r3, r2
 800b21e:	4a05      	ldr	r2, [pc, #20]	; (800b234 <_sbrk+0x64>)
 800b220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b222:	68fb      	ldr	r3, [r7, #12]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3718      	adds	r7, #24
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	24080000 	.word	0x24080000
 800b230:	00000400 	.word	0x00000400
 800b234:	240118b4 	.word	0x240118b4
 800b238:	24036000 	.word	0x24036000

0800b23c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b23c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b274 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b240:	f7fd fff0 	bl	8009224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b244:	480c      	ldr	r0, [pc, #48]	; (800b278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b246:	490d      	ldr	r1, [pc, #52]	; (800b27c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b248:	4a0d      	ldr	r2, [pc, #52]	; (800b280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b24a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b24c:	e002      	b.n	800b254 <LoopCopyDataInit>

0800b24e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b24e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b252:	3304      	adds	r3, #4

0800b254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b258:	d3f9      	bcc.n	800b24e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b25a:	4a0a      	ldr	r2, [pc, #40]	; (800b284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b25c:	4c0a      	ldr	r4, [pc, #40]	; (800b288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b25e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b260:	e001      	b.n	800b266 <LoopFillZerobss>

0800b262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b264:	3204      	adds	r2, #4

0800b266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b268:	d3fb      	bcc.n	800b262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b26a:	f011 f9df 	bl	801c62c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b26e:	f7ff fa75 	bl	800a75c <main>
  bx  lr
 800b272:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b274:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800b278:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b27c:	24008580 	.word	0x24008580
  ldr r2, =_sidata
 800b280:	0801d5e0 	.word	0x0801d5e0
  ldr r2, =_sbss
 800b284:	24010000 	.word	0x24010000
  ldr r4, =_ebss
 800b288:	24034d3c 	.word	0x24034d3c

0800b28c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b28c:	e7fe      	b.n	800b28c <ADC3_IRQHandler>
	...

0800b290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b296:	2003      	movs	r0, #3
 800b298:	f000 f957 	bl	800b54a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b29c:	f005 ff1a 	bl	80110d4 <HAL_RCC_GetSysClockFreq>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <HAL_Init+0x68>)
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	0a1b      	lsrs	r3, r3, #8
 800b2a8:	f003 030f 	and.w	r3, r3, #15
 800b2ac:	4913      	ldr	r1, [pc, #76]	; (800b2fc <HAL_Init+0x6c>)
 800b2ae:	5ccb      	ldrb	r3, [r1, r3]
 800b2b0:	f003 031f 	and.w	r3, r3, #31
 800b2b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2ba:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <HAL_Init+0x68>)
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	f003 030f 	and.w	r3, r3, #15
 800b2c2:	4a0e      	ldr	r2, [pc, #56]	; (800b2fc <HAL_Init+0x6c>)
 800b2c4:	5cd3      	ldrb	r3, [r2, r3]
 800b2c6:	f003 031f 	and.w	r3, r3, #31
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d0:	4a0b      	ldr	r2, [pc, #44]	; (800b300 <HAL_Init+0x70>)
 800b2d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2d4:	4a0b      	ldr	r2, [pc, #44]	; (800b304 <HAL_Init+0x74>)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b2da:	2000      	movs	r0, #0
 800b2dc:	f7ff fe64 	bl	800afa8 <HAL_InitTick>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e002      	b.n	800b2f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800b2ea:	f7ff fce1 	bl	800acb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	58024400 	.word	0x58024400
 800b2fc:	240084a8 	.word	0x240084a8
 800b300:	24008004 	.word	0x24008004
 800b304:	24008000 	.word	0x24008000

0800b308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b308:	b480      	push	{r7}
 800b30a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b30c:	4b06      	ldr	r3, [pc, #24]	; (800b328 <HAL_IncTick+0x20>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	4b06      	ldr	r3, [pc, #24]	; (800b32c <HAL_IncTick+0x24>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4413      	add	r3, r2
 800b318:	4a04      	ldr	r2, [pc, #16]	; (800b32c <HAL_IncTick+0x24>)
 800b31a:	6013      	str	r3, [r2, #0]
}
 800b31c:	bf00      	nop
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	2400801c 	.word	0x2400801c
 800b32c:	240118b8 	.word	0x240118b8

0800b330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
  return uwTick;
 800b334:	4b03      	ldr	r3, [pc, #12]	; (800b344 <HAL_GetTick+0x14>)
 800b336:	681b      	ldr	r3, [r3, #0]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	240118b8 	.word	0x240118b8

0800b348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b350:	f7ff ffee 	bl	800b330 <HAL_GetTick>
 800b354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b360:	d005      	beq.n	800b36e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b362:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <HAL_Delay+0x44>)
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	4413      	add	r3, r2
 800b36c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b36e:	bf00      	nop
 800b370:	f7ff ffde 	bl	800b330 <HAL_GetTick>
 800b374:	4602      	mov	r2, r0
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d8f7      	bhi.n	800b370 <HAL_Delay+0x28>
  {
  }
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	2400801c 	.word	0x2400801c

0800b390 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800b394:	4b03      	ldr	r3, [pc, #12]	; (800b3a4 <HAL_GetREVID+0x14>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	0c1b      	lsrs	r3, r3, #16
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr
 800b3a4:	5c001000 	.word	0x5c001000

0800b3a8 <__NVIC_SetPriorityGrouping>:
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f003 0307 	and.w	r3, r3, #7
 800b3b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b3b8:	4b0b      	ldr	r3, [pc, #44]	; (800b3e8 <__NVIC_SetPriorityGrouping+0x40>)
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b3d0:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <__NVIC_SetPriorityGrouping+0x44>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b3d6:	4a04      	ldr	r2, [pc, #16]	; (800b3e8 <__NVIC_SetPriorityGrouping+0x40>)
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	60d3      	str	r3, [r2, #12]
}
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	e000ed00 	.word	0xe000ed00
 800b3ec:	05fa0000 	.word	0x05fa0000

0800b3f0 <__NVIC_GetPriorityGrouping>:
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b3f4:	4b04      	ldr	r3, [pc, #16]	; (800b408 <__NVIC_GetPriorityGrouping+0x18>)
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	f003 0307 	and.w	r3, r3, #7
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	e000ed00 	.word	0xe000ed00

0800b40c <__NVIC_EnableIRQ>:
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	db0b      	blt.n	800b436 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b41e:	88fb      	ldrh	r3, [r7, #6]
 800b420:	f003 021f 	and.w	r2, r3, #31
 800b424:	4907      	ldr	r1, [pc, #28]	; (800b444 <__NVIC_EnableIRQ+0x38>)
 800b426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b42a:	095b      	lsrs	r3, r3, #5
 800b42c:	2001      	movs	r0, #1
 800b42e:	fa00 f202 	lsl.w	r2, r0, r2
 800b432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	e000e100 	.word	0xe000e100

0800b448 <__NVIC_DisableIRQ>:
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b456:	2b00      	cmp	r3, #0
 800b458:	db12      	blt.n	800b480 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b45a:	88fb      	ldrh	r3, [r7, #6]
 800b45c:	f003 021f 	and.w	r2, r3, #31
 800b460:	490a      	ldr	r1, [pc, #40]	; (800b48c <__NVIC_DisableIRQ+0x44>)
 800b462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b466:	095b      	lsrs	r3, r3, #5
 800b468:	2001      	movs	r0, #1
 800b46a:	fa00 f202 	lsl.w	r2, r0, r2
 800b46e:	3320      	adds	r3, #32
 800b470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b474:	f3bf 8f4f 	dsb	sy
}
 800b478:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b47a:	f3bf 8f6f 	isb	sy
}
 800b47e:	bf00      	nop
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr
 800b48c:	e000e100 	.word	0xe000e100

0800b490 <__NVIC_SetPriority>:
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	6039      	str	r1, [r7, #0]
 800b49a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b49c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	db0a      	blt.n	800b4ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	490c      	ldr	r1, [pc, #48]	; (800b4dc <__NVIC_SetPriority+0x4c>)
 800b4aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4ae:	0112      	lsls	r2, r2, #4
 800b4b0:	b2d2      	uxtb	r2, r2
 800b4b2:	440b      	add	r3, r1
 800b4b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b4b8:	e00a      	b.n	800b4d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	4908      	ldr	r1, [pc, #32]	; (800b4e0 <__NVIC_SetPriority+0x50>)
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	f003 030f 	and.w	r3, r3, #15
 800b4c6:	3b04      	subs	r3, #4
 800b4c8:	0112      	lsls	r2, r2, #4
 800b4ca:	b2d2      	uxtb	r2, r2
 800b4cc:	440b      	add	r3, r1
 800b4ce:	761a      	strb	r2, [r3, #24]
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	e000e100 	.word	0xe000e100
 800b4e0:	e000ed00 	.word	0xe000ed00

0800b4e4 <NVIC_EncodePriority>:
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b089      	sub	sp, #36	; 0x24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	f1c3 0307 	rsb	r3, r3, #7
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	bf28      	it	cs
 800b502:	2304      	movcs	r3, #4
 800b504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	3304      	adds	r3, #4
 800b50a:	2b06      	cmp	r3, #6
 800b50c:	d902      	bls.n	800b514 <NVIC_EncodePriority+0x30>
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	3b03      	subs	r3, #3
 800b512:	e000      	b.n	800b516 <NVIC_EncodePriority+0x32>
 800b514:	2300      	movs	r3, #0
 800b516:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	fa02 f303 	lsl.w	r3, r2, r3
 800b522:	43da      	mvns	r2, r3
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	401a      	ands	r2, r3
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b52c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	fa01 f303 	lsl.w	r3, r1, r3
 800b536:	43d9      	mvns	r1, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b53c:	4313      	orrs	r3, r2
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3724      	adds	r7, #36	; 0x24
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff ff28 	bl	800b3a8 <__NVIC_SetPriorityGrouping>
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b56e:	f7ff ff3f 	bl	800b3f0 <__NVIC_GetPriorityGrouping>
 800b572:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	6978      	ldr	r0, [r7, #20]
 800b57a:	f7ff ffb3 	bl	800b4e4 <NVIC_EncodePriority>
 800b57e:	4602      	mov	r2, r0
 800b580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff ff82 	bl	800b490 <__NVIC_SetPriority>
}
 800b58c:	bf00      	nop
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b59e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff ff32 	bl	800b40c <__NVIC_EnableIRQ>
}
 800b5a8:	bf00      	nop
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b5ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7ff ff42 	bl	800b448 <__NVIC_DisableIRQ>
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800b5d0:	f3bf 8f5f 	dmb	sy
}
 800b5d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b5d6:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <HAL_MPU_Disable+0x28>)
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	4a06      	ldr	r2, [pc, #24]	; (800b5f4 <HAL_MPU_Disable+0x28>)
 800b5dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5e0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b5e2:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <HAL_MPU_Disable+0x2c>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	605a      	str	r2, [r3, #4]
}
 800b5e8:	bf00      	nop
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	e000ed00 	.word	0xe000ed00
 800b5f8:	e000ed90 	.word	0xe000ed90

0800b5fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b604:	4a0b      	ldr	r2, [pc, #44]	; (800b634 <HAL_MPU_Enable+0x38>)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f043 0301 	orr.w	r3, r3, #1
 800b60c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b60e:	4b0a      	ldr	r3, [pc, #40]	; (800b638 <HAL_MPU_Enable+0x3c>)
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b612:	4a09      	ldr	r2, [pc, #36]	; (800b638 <HAL_MPU_Enable+0x3c>)
 800b614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b618:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b61a:	f3bf 8f4f 	dsb	sy
}
 800b61e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b620:	f3bf 8f6f 	isb	sy
}
 800b624:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	e000ed90 	.word	0xe000ed90
 800b638:	e000ed00 	.word	0xe000ed00

0800b63c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e054      	b.n	800b6f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	7f5b      	ldrb	r3, [r3, #29]
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	d105      	bne.n	800b664 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7ff fb40 	bl	800ace4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	791b      	ldrb	r3, [r3, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10c      	bne.n	800b68c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a22      	ldr	r2, [pc, #136]	; (800b700 <HAL_CRC_Init+0xc4>)
 800b678:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	689a      	ldr	r2, [r3, #8]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f022 0218 	bic.w	r2, r2, #24
 800b688:	609a      	str	r2, [r3, #8]
 800b68a:	e00c      	b.n	800b6a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6899      	ldr	r1, [r3, #8]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	461a      	mov	r2, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f98c 	bl	800b9b4 <HAL_CRCEx_Polynomial_Set>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e028      	b.n	800b6f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	795b      	ldrb	r3, [r3, #5]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d105      	bne.n	800b6ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6b6:	611a      	str	r2, [r3, #16]
 800b6b8:	e004      	b.n	800b6c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	6912      	ldr	r2, [r2, #16]
 800b6c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	695a      	ldr	r2, [r3, #20]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	430a      	orrs	r2, r1
 800b6d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	699a      	ldr	r2, [r3, #24]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	04c11db7 	.word	0x04c11db7

0800b704 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2202      	movs	r2, #2
 800b718:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	2b03      	cmp	r3, #3
 800b720:	d006      	beq.n	800b730 <HAL_CRC_Accumulate+0x2c>
 800b722:	2b03      	cmp	r3, #3
 800b724:	d829      	bhi.n	800b77a <HAL_CRC_Accumulate+0x76>
 800b726:	2b01      	cmp	r3, #1
 800b728:	d019      	beq.n	800b75e <HAL_CRC_Accumulate+0x5a>
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d01e      	beq.n	800b76c <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800b72e:	e024      	b.n	800b77a <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800b730:	2300      	movs	r3, #0
 800b732:	617b      	str	r3, [r7, #20]
 800b734:	e00a      	b.n	800b74c <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	441a      	add	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6812      	ldr	r2, [r2, #0]
 800b744:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	3301      	adds	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	429a      	cmp	r2, r3
 800b752:	d3f0      	bcc.n	800b736 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	613b      	str	r3, [r7, #16]
      break;
 800b75c:	e00e      	b.n	800b77c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f000 f85e 	bl	800b824 <CRC_Handle_8>
 800b768:	6138      	str	r0, [r7, #16]
      break;
 800b76a:	e007      	b.n	800b77c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 f8e5 	bl	800b940 <CRC_Handle_16>
 800b776:	6138      	str	r0, [r7, #16]
      break;
 800b778:	e000      	b.n	800b77c <HAL_CRC_Accumulate+0x78>
      break;
 800b77a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2201      	movs	r2, #1
 800b780:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800b782:	693b      	ldr	r3, [r7, #16]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800b798:	2300      	movs	r3, #0
 800b79a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	689a      	ldr	r2, [r3, #8]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f042 0201 	orr.w	r2, r2, #1
 800b7b0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d006      	beq.n	800b7c8 <HAL_CRC_Calculate+0x3c>
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d829      	bhi.n	800b812 <HAL_CRC_Calculate+0x86>
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d019      	beq.n	800b7f6 <HAL_CRC_Calculate+0x6a>
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d01e      	beq.n	800b804 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800b7c6:	e024      	b.n	800b812 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e00a      	b.n	800b7e4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	441a      	add	r2, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	6812      	ldr	r2, [r2, #0]
 800b7dc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d3f0      	bcc.n	800b7ce <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	613b      	str	r3, [r7, #16]
      break;
 800b7f4:	e00e      	b.n	800b814 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	68b9      	ldr	r1, [r7, #8]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 f812 	bl	800b824 <CRC_Handle_8>
 800b800:	6138      	str	r0, [r7, #16]
      break;
 800b802:	e007      	b.n	800b814 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f899 	bl	800b940 <CRC_Handle_16>
 800b80e:	6138      	str	r0, [r7, #16]
      break;
 800b810:	e000      	b.n	800b814 <HAL_CRC_Calculate+0x88>
      break;
 800b812:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2201      	movs	r2, #1
 800b818:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800b81a:	693b      	ldr	r3, [r7, #16]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800b824:	b480      	push	{r7}
 800b826:	b089      	sub	sp, #36	; 0x24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800b830:	2300      	movs	r3, #0
 800b832:	61fb      	str	r3, [r7, #28]
 800b834:	e023      	b.n	800b87e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	4413      	add	r3, r2
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	3301      	adds	r3, #1
 800b848:	68b9      	ldr	r1, [r7, #8]
 800b84a:	440b      	add	r3, r1
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b850:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	3302      	adds	r3, #2
 800b858:	68b9      	ldr	r1, [r7, #8]
 800b85a:	440b      	add	r3, r1
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800b860:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	3303      	adds	r3, #3
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	440b      	add	r3, r1
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800b874:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b876:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	3301      	adds	r3, #1
 800b87c:	61fb      	str	r3, [r7, #28]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	089b      	lsrs	r3, r3, #2
 800b882:	69fa      	ldr	r2, [r7, #28]
 800b884:	429a      	cmp	r2, r3
 800b886:	d3d6      	bcc.n	800b836 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f003 0303 	and.w	r3, r3, #3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d04d      	beq.n	800b92e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f003 0303 	and.w	r3, r3, #3
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d107      	bne.n	800b8ac <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	6812      	ldr	r2, [r2, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f003 0303 	and.w	r3, r3, #3
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d116      	bne.n	800b8e4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	4413      	add	r3, r2
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	021b      	lsls	r3, r3, #8
 800b8c2:	b21a      	sxth	r2, r3
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	440b      	add	r3, r1
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	b21b      	sxth	r3, r3
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	b21b      	sxth	r3, r3
 800b8d6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	8b7a      	ldrh	r2, [r7, #26]
 800b8e2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f003 0303 	and.w	r3, r3, #3
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d11f      	bne.n	800b92e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	021b      	lsls	r3, r3, #8
 800b8fa:	b21a      	sxth	r2, r3
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	3301      	adds	r3, #1
 800b902:	68b9      	ldr	r1, [r7, #8]
 800b904:	440b      	add	r3, r1
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	b21b      	sxth	r3, r3
 800b90a:	4313      	orrs	r3, r2
 800b90c:	b21b      	sxth	r3, r3
 800b90e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	8b7a      	ldrh	r2, [r7, #26]
 800b91a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	3302      	adds	r3, #2
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	4413      	add	r3, r2
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	6812      	ldr	r2, [r2, #0]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3724      	adds	r7, #36	; 0x24
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800b94c:	2300      	movs	r3, #0
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	e013      	b.n	800b97a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	4413      	add	r3, r2
 800b95a:	881b      	ldrh	r3, [r3, #0]
 800b95c:	041a      	lsls	r2, r3, #16
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	3302      	adds	r3, #2
 800b964:	68b9      	ldr	r1, [r7, #8]
 800b966:	440b      	add	r3, r1
 800b968:	881b      	ldrh	r3, [r3, #0]
 800b96a:	4619      	mov	r1, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	430a      	orrs	r2, r1
 800b972:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	3301      	adds	r3, #1
 800b978:	617b      	str	r3, [r7, #20]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	085b      	lsrs	r3, r3, #1
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	429a      	cmp	r2, r3
 800b982:	d3e6      	bcc.n	800b952 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f003 0301 	and.w	r3, r3, #1
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d009      	beq.n	800b9a2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	4413      	add	r3, r2
 800b99c:	881a      	ldrh	r2, [r3, #0]
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	371c      	adds	r7, #28
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b9c4:	231f      	movs	r3, #31
 800b9c6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b9c8:	bf00      	nop
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	1e5a      	subs	r2, r3, #1
 800b9ce:	613a      	str	r2, [r7, #16]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d009      	beq.n	800b9e8 <HAL_CRCEx_Polynomial_Set+0x34>
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f003 031f 	and.w	r3, r3, #31
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e0:	f003 0301 	and.w	r3, r3, #1
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d0f0      	beq.n	800b9ca <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b18      	cmp	r3, #24
 800b9ec:	d846      	bhi.n	800ba7c <HAL_CRCEx_Polynomial_Set+0xc8>
 800b9ee:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <HAL_CRCEx_Polynomial_Set+0x40>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba83 	.word	0x0800ba83
 800b9f8:	0800ba7d 	.word	0x0800ba7d
 800b9fc:	0800ba7d 	.word	0x0800ba7d
 800ba00:	0800ba7d 	.word	0x0800ba7d
 800ba04:	0800ba7d 	.word	0x0800ba7d
 800ba08:	0800ba7d 	.word	0x0800ba7d
 800ba0c:	0800ba7d 	.word	0x0800ba7d
 800ba10:	0800ba7d 	.word	0x0800ba7d
 800ba14:	0800ba71 	.word	0x0800ba71
 800ba18:	0800ba7d 	.word	0x0800ba7d
 800ba1c:	0800ba7d 	.word	0x0800ba7d
 800ba20:	0800ba7d 	.word	0x0800ba7d
 800ba24:	0800ba7d 	.word	0x0800ba7d
 800ba28:	0800ba7d 	.word	0x0800ba7d
 800ba2c:	0800ba7d 	.word	0x0800ba7d
 800ba30:	0800ba7d 	.word	0x0800ba7d
 800ba34:	0800ba65 	.word	0x0800ba65
 800ba38:	0800ba7d 	.word	0x0800ba7d
 800ba3c:	0800ba7d 	.word	0x0800ba7d
 800ba40:	0800ba7d 	.word	0x0800ba7d
 800ba44:	0800ba7d 	.word	0x0800ba7d
 800ba48:	0800ba7d 	.word	0x0800ba7d
 800ba4c:	0800ba7d 	.word	0x0800ba7d
 800ba50:	0800ba7d 	.word	0x0800ba7d
 800ba54:	0800ba59 	.word	0x0800ba59
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	2b06      	cmp	r3, #6
 800ba5c:	d913      	bls.n	800ba86 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ba62:	e010      	b.n	800ba86 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	2b07      	cmp	r3, #7
 800ba68:	d90f      	bls.n	800ba8a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ba6e:	e00c      	b.n	800ba8a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	2b0f      	cmp	r3, #15
 800ba74:	d90b      	bls.n	800ba8e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ba7a:	e008      	b.n	800ba8e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba80:	e006      	b.n	800ba90 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ba82:	bf00      	nop
 800ba84:	e004      	b.n	800ba90 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ba86:	bf00      	nop
 800ba88:	e002      	b.n	800ba90 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ba8a:	bf00      	nop
 800ba8c:	e000      	b.n	800ba90 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ba8e:	bf00      	nop
  }
  if (status == HAL_OK)
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10d      	bne.n	800bab2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f023 0118 	bic.w	r1, r3, #24
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	430a      	orrs	r2, r1
 800bab0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	371c      	adds	r7, #28
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800bac8:	f7ff fc32 	bl	800b330 <HAL_GetTick>
 800bacc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d101      	bne.n	800bad8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e316      	b.n	800c106 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a66      	ldr	r2, [pc, #408]	; (800bc78 <HAL_DMA_Init+0x1b8>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d04a      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a65      	ldr	r2, [pc, #404]	; (800bc7c <HAL_DMA_Init+0x1bc>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d045      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a63      	ldr	r2, [pc, #396]	; (800bc80 <HAL_DMA_Init+0x1c0>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d040      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a62      	ldr	r2, [pc, #392]	; (800bc84 <HAL_DMA_Init+0x1c4>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d03b      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a60      	ldr	r2, [pc, #384]	; (800bc88 <HAL_DMA_Init+0x1c8>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d036      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a5f      	ldr	r2, [pc, #380]	; (800bc8c <HAL_DMA_Init+0x1cc>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d031      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a5d      	ldr	r2, [pc, #372]	; (800bc90 <HAL_DMA_Init+0x1d0>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d02c      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a5c      	ldr	r2, [pc, #368]	; (800bc94 <HAL_DMA_Init+0x1d4>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d027      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a5a      	ldr	r2, [pc, #360]	; (800bc98 <HAL_DMA_Init+0x1d8>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d022      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a59      	ldr	r2, [pc, #356]	; (800bc9c <HAL_DMA_Init+0x1dc>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d01d      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a57      	ldr	r2, [pc, #348]	; (800bca0 <HAL_DMA_Init+0x1e0>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d018      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a56      	ldr	r2, [pc, #344]	; (800bca4 <HAL_DMA_Init+0x1e4>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d013      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a54      	ldr	r2, [pc, #336]	; (800bca8 <HAL_DMA_Init+0x1e8>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d00e      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a53      	ldr	r2, [pc, #332]	; (800bcac <HAL_DMA_Init+0x1ec>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d009      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a51      	ldr	r2, [pc, #324]	; (800bcb0 <HAL_DMA_Init+0x1f0>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d004      	beq.n	800bb78 <HAL_DMA_Init+0xb8>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a50      	ldr	r2, [pc, #320]	; (800bcb4 <HAL_DMA_Init+0x1f4>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d101      	bne.n	800bb7c <HAL_DMA_Init+0xbc>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e000      	b.n	800bb7e <HAL_DMA_Init+0xbe>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f000 813b 	beq.w	800bdfa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a37      	ldr	r2, [pc, #220]	; (800bc78 <HAL_DMA_Init+0x1b8>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d04a      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a36      	ldr	r2, [pc, #216]	; (800bc7c <HAL_DMA_Init+0x1bc>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d045      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a34      	ldr	r2, [pc, #208]	; (800bc80 <HAL_DMA_Init+0x1c0>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d040      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a33      	ldr	r2, [pc, #204]	; (800bc84 <HAL_DMA_Init+0x1c4>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d03b      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a31      	ldr	r2, [pc, #196]	; (800bc88 <HAL_DMA_Init+0x1c8>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d036      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a30      	ldr	r2, [pc, #192]	; (800bc8c <HAL_DMA_Init+0x1cc>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d031      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a2e      	ldr	r2, [pc, #184]	; (800bc90 <HAL_DMA_Init+0x1d0>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d02c      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a2d      	ldr	r2, [pc, #180]	; (800bc94 <HAL_DMA_Init+0x1d4>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d027      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a2b      	ldr	r2, [pc, #172]	; (800bc98 <HAL_DMA_Init+0x1d8>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d022      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a2a      	ldr	r2, [pc, #168]	; (800bc9c <HAL_DMA_Init+0x1dc>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d01d      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a28      	ldr	r2, [pc, #160]	; (800bca0 <HAL_DMA_Init+0x1e0>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d018      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a27      	ldr	r2, [pc, #156]	; (800bca4 <HAL_DMA_Init+0x1e4>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d013      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a25      	ldr	r2, [pc, #148]	; (800bca8 <HAL_DMA_Init+0x1e8>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d00e      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a24      	ldr	r2, [pc, #144]	; (800bcac <HAL_DMA_Init+0x1ec>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d009      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a22      	ldr	r2, [pc, #136]	; (800bcb0 <HAL_DMA_Init+0x1f0>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d004      	beq.n	800bc34 <HAL_DMA_Init+0x174>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a21      	ldr	r2, [pc, #132]	; (800bcb4 <HAL_DMA_Init+0x1f4>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d108      	bne.n	800bc46 <HAL_DMA_Init+0x186>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 0201 	bic.w	r2, r2, #1
 800bc42:	601a      	str	r2, [r3, #0]
 800bc44:	e007      	b.n	800bc56 <HAL_DMA_Init+0x196>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 0201 	bic.w	r2, r2, #1
 800bc54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bc56:	e02f      	b.n	800bcb8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bc58:	f7ff fb6a 	bl	800b330 <HAL_GetTick>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	2b05      	cmp	r3, #5
 800bc64:	d928      	bls.n	800bcb8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2203      	movs	r2, #3
 800bc70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e246      	b.n	800c106 <HAL_DMA_Init+0x646>
 800bc78:	40020010 	.word	0x40020010
 800bc7c:	40020028 	.word	0x40020028
 800bc80:	40020040 	.word	0x40020040
 800bc84:	40020058 	.word	0x40020058
 800bc88:	40020070 	.word	0x40020070
 800bc8c:	40020088 	.word	0x40020088
 800bc90:	400200a0 	.word	0x400200a0
 800bc94:	400200b8 	.word	0x400200b8
 800bc98:	40020410 	.word	0x40020410
 800bc9c:	40020428 	.word	0x40020428
 800bca0:	40020440 	.word	0x40020440
 800bca4:	40020458 	.word	0x40020458
 800bca8:	40020470 	.word	0x40020470
 800bcac:	40020488 	.word	0x40020488
 800bcb0:	400204a0 	.word	0x400204a0
 800bcb4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1c8      	bne.n	800bc58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	4b83      	ldr	r3, [pc, #524]	; (800bee0 <HAL_DMA_Init+0x420>)
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800bcde:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bcea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bcf6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a1b      	ldr	r3, [r3, #32]
 800bcfc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd08:	2b04      	cmp	r3, #4
 800bd0a:	d107      	bne.n	800bd1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd14:	4313      	orrs	r3, r2
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800bd1c:	4b71      	ldr	r3, [pc, #452]	; (800bee4 <HAL_DMA_Init+0x424>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	4b71      	ldr	r3, [pc, #452]	; (800bee8 <HAL_DMA_Init+0x428>)
 800bd22:	4013      	ands	r3, r2
 800bd24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd28:	d328      	bcc.n	800bd7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	2b28      	cmp	r3, #40	; 0x28
 800bd30:	d903      	bls.n	800bd3a <HAL_DMA_Init+0x27a>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	2b2e      	cmp	r3, #46	; 0x2e
 800bd38:	d917      	bls.n	800bd6a <HAL_DMA_Init+0x2aa>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	2b3e      	cmp	r3, #62	; 0x3e
 800bd40:	d903      	bls.n	800bd4a <HAL_DMA_Init+0x28a>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	2b42      	cmp	r3, #66	; 0x42
 800bd48:	d90f      	bls.n	800bd6a <HAL_DMA_Init+0x2aa>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	2b46      	cmp	r3, #70	; 0x46
 800bd50:	d903      	bls.n	800bd5a <HAL_DMA_Init+0x29a>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	2b48      	cmp	r3, #72	; 0x48
 800bd58:	d907      	bls.n	800bd6a <HAL_DMA_Init+0x2aa>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	2b4e      	cmp	r3, #78	; 0x4e
 800bd60:	d905      	bls.n	800bd6e <HAL_DMA_Init+0x2ae>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	2b52      	cmp	r3, #82	; 0x52
 800bd68:	d801      	bhi.n	800bd6e <HAL_DMA_Init+0x2ae>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <HAL_DMA_Init+0x2b0>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d003      	beq.n	800bd7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	697a      	ldr	r2, [r7, #20]
 800bd82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	f023 0307 	bic.w	r3, r3, #7
 800bd92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda2:	2b04      	cmp	r3, #4
 800bda4:	d117      	bne.n	800bdd6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00e      	beq.n	800bdd6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f002 fcf5 	bl	800e7a8 <DMA_CheckFifoParam>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d008      	beq.n	800bdd6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2240      	movs	r2, #64	; 0x40
 800bdc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e197      	b.n	800c106 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f002 fc30 	bl	800e644 <DMA_CalcBaseAndBitshift>
 800bde4:	4603      	mov	r3, r0
 800bde6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdec:	f003 031f 	and.w	r3, r3, #31
 800bdf0:	223f      	movs	r2, #63	; 0x3f
 800bdf2:	409a      	lsls	r2, r3
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	609a      	str	r2, [r3, #8]
 800bdf8:	e0cd      	b.n	800bf96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a3b      	ldr	r2, [pc, #236]	; (800beec <HAL_DMA_Init+0x42c>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d022      	beq.n	800be4a <HAL_DMA_Init+0x38a>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a39      	ldr	r2, [pc, #228]	; (800bef0 <HAL_DMA_Init+0x430>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d01d      	beq.n	800be4a <HAL_DMA_Init+0x38a>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a38      	ldr	r2, [pc, #224]	; (800bef4 <HAL_DMA_Init+0x434>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d018      	beq.n	800be4a <HAL_DMA_Init+0x38a>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a36      	ldr	r2, [pc, #216]	; (800bef8 <HAL_DMA_Init+0x438>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d013      	beq.n	800be4a <HAL_DMA_Init+0x38a>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a35      	ldr	r2, [pc, #212]	; (800befc <HAL_DMA_Init+0x43c>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d00e      	beq.n	800be4a <HAL_DMA_Init+0x38a>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a33      	ldr	r2, [pc, #204]	; (800bf00 <HAL_DMA_Init+0x440>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d009      	beq.n	800be4a <HAL_DMA_Init+0x38a>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a32      	ldr	r2, [pc, #200]	; (800bf04 <HAL_DMA_Init+0x444>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d004      	beq.n	800be4a <HAL_DMA_Init+0x38a>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a30      	ldr	r2, [pc, #192]	; (800bf08 <HAL_DMA_Init+0x448>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d101      	bne.n	800be4e <HAL_DMA_Init+0x38e>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <HAL_DMA_Init+0x390>
 800be4e:	2300      	movs	r3, #0
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 8097 	beq.w	800bf84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a24      	ldr	r2, [pc, #144]	; (800beec <HAL_DMA_Init+0x42c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d021      	beq.n	800bea4 <HAL_DMA_Init+0x3e4>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a22      	ldr	r2, [pc, #136]	; (800bef0 <HAL_DMA_Init+0x430>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d01c      	beq.n	800bea4 <HAL_DMA_Init+0x3e4>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a21      	ldr	r2, [pc, #132]	; (800bef4 <HAL_DMA_Init+0x434>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d017      	beq.n	800bea4 <HAL_DMA_Init+0x3e4>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a1f      	ldr	r2, [pc, #124]	; (800bef8 <HAL_DMA_Init+0x438>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d012      	beq.n	800bea4 <HAL_DMA_Init+0x3e4>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a1e      	ldr	r2, [pc, #120]	; (800befc <HAL_DMA_Init+0x43c>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d00d      	beq.n	800bea4 <HAL_DMA_Init+0x3e4>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a1c      	ldr	r2, [pc, #112]	; (800bf00 <HAL_DMA_Init+0x440>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d008      	beq.n	800bea4 <HAL_DMA_Init+0x3e4>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a1b      	ldr	r2, [pc, #108]	; (800bf04 <HAL_DMA_Init+0x444>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d003      	beq.n	800bea4 <HAL_DMA_Init+0x3e4>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a19      	ldr	r2, [pc, #100]	; (800bf08 <HAL_DMA_Init+0x448>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2202      	movs	r2, #2
 800beb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4b12      	ldr	r3, [pc, #72]	; (800bf0c <HAL_DMA_Init+0x44c>)
 800bec2:	4013      	ands	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	2b40      	cmp	r3, #64	; 0x40
 800becc:	d020      	beq.n	800bf10 <HAL_DMA_Init+0x450>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	2b80      	cmp	r3, #128	; 0x80
 800bed4:	d102      	bne.n	800bedc <HAL_DMA_Init+0x41c>
 800bed6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800beda:	e01a      	b.n	800bf12 <HAL_DMA_Init+0x452>
 800bedc:	2300      	movs	r3, #0
 800bede:	e018      	b.n	800bf12 <HAL_DMA_Init+0x452>
 800bee0:	fe10803f 	.word	0xfe10803f
 800bee4:	5c001000 	.word	0x5c001000
 800bee8:	ffff0000 	.word	0xffff0000
 800beec:	58025408 	.word	0x58025408
 800bef0:	5802541c 	.word	0x5802541c
 800bef4:	58025430 	.word	0x58025430
 800bef8:	58025444 	.word	0x58025444
 800befc:	58025458 	.word	0x58025458
 800bf00:	5802546c 	.word	0x5802546c
 800bf04:	58025480 	.word	0x58025480
 800bf08:	58025494 	.word	0x58025494
 800bf0c:	fffe000f 	.word	0xfffe000f
 800bf10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68d2      	ldr	r2, [r2, #12]
 800bf16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bf18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bf20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	695b      	ldr	r3, [r3, #20]
 800bf26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bf28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bf30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	69db      	ldr	r3, [r3, #28]
 800bf36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bf38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bf40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	461a      	mov	r2, r3
 800bf56:	4b6e      	ldr	r3, [pc, #440]	; (800c110 <HAL_DMA_Init+0x650>)
 800bf58:	4413      	add	r3, r2
 800bf5a:	4a6e      	ldr	r2, [pc, #440]	; (800c114 <HAL_DMA_Init+0x654>)
 800bf5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf60:	091b      	lsrs	r3, r3, #4
 800bf62:	009a      	lsls	r2, r3, #2
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f002 fb6b 	bl	800e644 <DMA_CalcBaseAndBitshift>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf76:	f003 031f 	and.w	r3, r3, #31
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	409a      	lsls	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	605a      	str	r2, [r3, #4]
 800bf82:	e008      	b.n	800bf96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2240      	movs	r2, #64	; 0x40
 800bf88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2203      	movs	r2, #3
 800bf8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e0b7      	b.n	800c106 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a5f      	ldr	r2, [pc, #380]	; (800c118 <HAL_DMA_Init+0x658>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d072      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a5d      	ldr	r2, [pc, #372]	; (800c11c <HAL_DMA_Init+0x65c>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d06d      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a5c      	ldr	r2, [pc, #368]	; (800c120 <HAL_DMA_Init+0x660>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d068      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a5a      	ldr	r2, [pc, #360]	; (800c124 <HAL_DMA_Init+0x664>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d063      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a59      	ldr	r2, [pc, #356]	; (800c128 <HAL_DMA_Init+0x668>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d05e      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a57      	ldr	r2, [pc, #348]	; (800c12c <HAL_DMA_Init+0x66c>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d059      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a56      	ldr	r2, [pc, #344]	; (800c130 <HAL_DMA_Init+0x670>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d054      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a54      	ldr	r2, [pc, #336]	; (800c134 <HAL_DMA_Init+0x674>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d04f      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a53      	ldr	r2, [pc, #332]	; (800c138 <HAL_DMA_Init+0x678>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d04a      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a51      	ldr	r2, [pc, #324]	; (800c13c <HAL_DMA_Init+0x67c>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d045      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a50      	ldr	r2, [pc, #320]	; (800c140 <HAL_DMA_Init+0x680>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d040      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a4e      	ldr	r2, [pc, #312]	; (800c144 <HAL_DMA_Init+0x684>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d03b      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a4d      	ldr	r2, [pc, #308]	; (800c148 <HAL_DMA_Init+0x688>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d036      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a4b      	ldr	r2, [pc, #300]	; (800c14c <HAL_DMA_Init+0x68c>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d031      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a4a      	ldr	r2, [pc, #296]	; (800c150 <HAL_DMA_Init+0x690>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d02c      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a48      	ldr	r2, [pc, #288]	; (800c154 <HAL_DMA_Init+0x694>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d027      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a47      	ldr	r2, [pc, #284]	; (800c158 <HAL_DMA_Init+0x698>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d022      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a45      	ldr	r2, [pc, #276]	; (800c15c <HAL_DMA_Init+0x69c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d01d      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a44      	ldr	r2, [pc, #272]	; (800c160 <HAL_DMA_Init+0x6a0>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d018      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a42      	ldr	r2, [pc, #264]	; (800c164 <HAL_DMA_Init+0x6a4>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d013      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a41      	ldr	r2, [pc, #260]	; (800c168 <HAL_DMA_Init+0x6a8>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d00e      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a3f      	ldr	r2, [pc, #252]	; (800c16c <HAL_DMA_Init+0x6ac>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d009      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a3e      	ldr	r2, [pc, #248]	; (800c170 <HAL_DMA_Init+0x6b0>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d004      	beq.n	800c086 <HAL_DMA_Init+0x5c6>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a3c      	ldr	r2, [pc, #240]	; (800c174 <HAL_DMA_Init+0x6b4>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d101      	bne.n	800c08a <HAL_DMA_Init+0x5ca>
 800c086:	2301      	movs	r3, #1
 800c088:	e000      	b.n	800c08c <HAL_DMA_Init+0x5cc>
 800c08a:	2300      	movs	r3, #0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d032      	beq.n	800c0f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f002 fc05 	bl	800e8a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	2b80      	cmp	r3, #128	; 0x80
 800c09c:	d102      	bne.n	800c0a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0ac:	b2d2      	uxtb	r2, r2
 800c0ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c0b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d010      	beq.n	800c0e4 <HAL_DMA_Init+0x624>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	2b08      	cmp	r3, #8
 800c0c8:	d80c      	bhi.n	800c0e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f002 fc82 	bl	800e9d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c0e0:	605a      	str	r2, [r3, #4]
 800c0e2:	e008      	b.n	800c0f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	a7fdabf8 	.word	0xa7fdabf8
 800c114:	cccccccd 	.word	0xcccccccd
 800c118:	40020010 	.word	0x40020010
 800c11c:	40020028 	.word	0x40020028
 800c120:	40020040 	.word	0x40020040
 800c124:	40020058 	.word	0x40020058
 800c128:	40020070 	.word	0x40020070
 800c12c:	40020088 	.word	0x40020088
 800c130:	400200a0 	.word	0x400200a0
 800c134:	400200b8 	.word	0x400200b8
 800c138:	40020410 	.word	0x40020410
 800c13c:	40020428 	.word	0x40020428
 800c140:	40020440 	.word	0x40020440
 800c144:	40020458 	.word	0x40020458
 800c148:	40020470 	.word	0x40020470
 800c14c:	40020488 	.word	0x40020488
 800c150:	400204a0 	.word	0x400204a0
 800c154:	400204b8 	.word	0x400204b8
 800c158:	58025408 	.word	0x58025408
 800c15c:	5802541c 	.word	0x5802541c
 800c160:	58025430 	.word	0x58025430
 800c164:	58025444 	.word	0x58025444
 800c168:	58025458 	.word	0x58025458
 800c16c:	5802546c 	.word	0x5802546c
 800c170:	58025480 	.word	0x58025480
 800c174:	58025494 	.word	0x58025494

0800c178 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e1a8      	b.n	800c4dc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a82      	ldr	r2, [pc, #520]	; (800c398 <HAL_DMA_DeInit+0x220>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d04a      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a80      	ldr	r2, [pc, #512]	; (800c39c <HAL_DMA_DeInit+0x224>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d045      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a7f      	ldr	r2, [pc, #508]	; (800c3a0 <HAL_DMA_DeInit+0x228>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d040      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a7d      	ldr	r2, [pc, #500]	; (800c3a4 <HAL_DMA_DeInit+0x22c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d03b      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a7c      	ldr	r2, [pc, #496]	; (800c3a8 <HAL_DMA_DeInit+0x230>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d036      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a7a      	ldr	r2, [pc, #488]	; (800c3ac <HAL_DMA_DeInit+0x234>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d031      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a79      	ldr	r2, [pc, #484]	; (800c3b0 <HAL_DMA_DeInit+0x238>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d02c      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a77      	ldr	r2, [pc, #476]	; (800c3b4 <HAL_DMA_DeInit+0x23c>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d027      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a76      	ldr	r2, [pc, #472]	; (800c3b8 <HAL_DMA_DeInit+0x240>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d022      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a74      	ldr	r2, [pc, #464]	; (800c3bc <HAL_DMA_DeInit+0x244>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d01d      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a73      	ldr	r2, [pc, #460]	; (800c3c0 <HAL_DMA_DeInit+0x248>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d018      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a71      	ldr	r2, [pc, #452]	; (800c3c4 <HAL_DMA_DeInit+0x24c>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d013      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a70      	ldr	r2, [pc, #448]	; (800c3c8 <HAL_DMA_DeInit+0x250>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d00e      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a6e      	ldr	r2, [pc, #440]	; (800c3cc <HAL_DMA_DeInit+0x254>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d009      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a6d      	ldr	r2, [pc, #436]	; (800c3d0 <HAL_DMA_DeInit+0x258>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d004      	beq.n	800c22a <HAL_DMA_DeInit+0xb2>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a6b      	ldr	r2, [pc, #428]	; (800c3d4 <HAL_DMA_DeInit+0x25c>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d108      	bne.n	800c23c <HAL_DMA_DeInit+0xc4>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f022 0201 	bic.w	r2, r2, #1
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	e007      	b.n	800c24c <HAL_DMA_DeInit+0xd4>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0201 	bic.w	r2, r2, #1
 800c24a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a51      	ldr	r2, [pc, #324]	; (800c398 <HAL_DMA_DeInit+0x220>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d04a      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a50      	ldr	r2, [pc, #320]	; (800c39c <HAL_DMA_DeInit+0x224>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d045      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a4e      	ldr	r2, [pc, #312]	; (800c3a0 <HAL_DMA_DeInit+0x228>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d040      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a4d      	ldr	r2, [pc, #308]	; (800c3a4 <HAL_DMA_DeInit+0x22c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d03b      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a4b      	ldr	r2, [pc, #300]	; (800c3a8 <HAL_DMA_DeInit+0x230>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d036      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a4a      	ldr	r2, [pc, #296]	; (800c3ac <HAL_DMA_DeInit+0x234>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d031      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a48      	ldr	r2, [pc, #288]	; (800c3b0 <HAL_DMA_DeInit+0x238>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d02c      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a47      	ldr	r2, [pc, #284]	; (800c3b4 <HAL_DMA_DeInit+0x23c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d027      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a45      	ldr	r2, [pc, #276]	; (800c3b8 <HAL_DMA_DeInit+0x240>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d022      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a44      	ldr	r2, [pc, #272]	; (800c3bc <HAL_DMA_DeInit+0x244>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d01d      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a42      	ldr	r2, [pc, #264]	; (800c3c0 <HAL_DMA_DeInit+0x248>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d018      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a41      	ldr	r2, [pc, #260]	; (800c3c4 <HAL_DMA_DeInit+0x24c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d013      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a3f      	ldr	r2, [pc, #252]	; (800c3c8 <HAL_DMA_DeInit+0x250>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d00e      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a3e      	ldr	r2, [pc, #248]	; (800c3cc <HAL_DMA_DeInit+0x254>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d009      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a3c      	ldr	r2, [pc, #240]	; (800c3d0 <HAL_DMA_DeInit+0x258>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d004      	beq.n	800c2ec <HAL_DMA_DeInit+0x174>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a3b      	ldr	r2, [pc, #236]	; (800c3d4 <HAL_DMA_DeInit+0x25c>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d101      	bne.n	800c2f0 <HAL_DMA_DeInit+0x178>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e000      	b.n	800c2f2 <HAL_DMA_DeInit+0x17a>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d025      	beq.n	800c342 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2200      	movs	r2, #0
 800c304:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2200      	movs	r2, #0
 800c30c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2200      	movs	r2, #0
 800c31c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2221      	movs	r2, #33	; 0x21
 800c324:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f002 f98c 	bl	800e644 <DMA_CalcBaseAndBitshift>
 800c32c:	4603      	mov	r3, r0
 800c32e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c334:	f003 031f 	and.w	r3, r3, #31
 800c338:	223f      	movs	r2, #63	; 0x3f
 800c33a:	409a      	lsls	r2, r3
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	609a      	str	r2, [r3, #8]
 800c340:	e081      	b.n	800c446 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a24      	ldr	r2, [pc, #144]	; (800c3d8 <HAL_DMA_DeInit+0x260>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d022      	beq.n	800c392 <HAL_DMA_DeInit+0x21a>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a22      	ldr	r2, [pc, #136]	; (800c3dc <HAL_DMA_DeInit+0x264>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d01d      	beq.n	800c392 <HAL_DMA_DeInit+0x21a>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a21      	ldr	r2, [pc, #132]	; (800c3e0 <HAL_DMA_DeInit+0x268>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d018      	beq.n	800c392 <HAL_DMA_DeInit+0x21a>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a1f      	ldr	r2, [pc, #124]	; (800c3e4 <HAL_DMA_DeInit+0x26c>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d013      	beq.n	800c392 <HAL_DMA_DeInit+0x21a>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a1e      	ldr	r2, [pc, #120]	; (800c3e8 <HAL_DMA_DeInit+0x270>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d00e      	beq.n	800c392 <HAL_DMA_DeInit+0x21a>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a1c      	ldr	r2, [pc, #112]	; (800c3ec <HAL_DMA_DeInit+0x274>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d009      	beq.n	800c392 <HAL_DMA_DeInit+0x21a>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a1b      	ldr	r2, [pc, #108]	; (800c3f0 <HAL_DMA_DeInit+0x278>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d004      	beq.n	800c392 <HAL_DMA_DeInit+0x21a>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a19      	ldr	r2, [pc, #100]	; (800c3f4 <HAL_DMA_DeInit+0x27c>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d132      	bne.n	800c3f8 <HAL_DMA_DeInit+0x280>
 800c392:	2301      	movs	r3, #1
 800c394:	e031      	b.n	800c3fa <HAL_DMA_DeInit+0x282>
 800c396:	bf00      	nop
 800c398:	40020010 	.word	0x40020010
 800c39c:	40020028 	.word	0x40020028
 800c3a0:	40020040 	.word	0x40020040
 800c3a4:	40020058 	.word	0x40020058
 800c3a8:	40020070 	.word	0x40020070
 800c3ac:	40020088 	.word	0x40020088
 800c3b0:	400200a0 	.word	0x400200a0
 800c3b4:	400200b8 	.word	0x400200b8
 800c3b8:	40020410 	.word	0x40020410
 800c3bc:	40020428 	.word	0x40020428
 800c3c0:	40020440 	.word	0x40020440
 800c3c4:	40020458 	.word	0x40020458
 800c3c8:	40020470 	.word	0x40020470
 800c3cc:	40020488 	.word	0x40020488
 800c3d0:	400204a0 	.word	0x400204a0
 800c3d4:	400204b8 	.word	0x400204b8
 800c3d8:	58025408 	.word	0x58025408
 800c3dc:	5802541c 	.word	0x5802541c
 800c3e0:	58025430 	.word	0x58025430
 800c3e4:	58025444 	.word	0x58025444
 800c3e8:	58025458 	.word	0x58025458
 800c3ec:	5802546c 	.word	0x5802546c
 800c3f0:	58025480 	.word	0x58025480
 800c3f4:	58025494 	.word	0x58025494
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d021      	beq.n	800c442 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2200      	movs	r2, #0
 800c40c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2200      	movs	r2, #0
 800c414:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2200      	movs	r2, #0
 800c41c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2200      	movs	r2, #0
 800c424:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f002 f90c 	bl	800e644 <DMA_CalcBaseAndBitshift>
 800c42c:	4603      	mov	r3, r0
 800c42e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c434:	f003 031f 	and.w	r3, r3, #31
 800c438:	2201      	movs	r2, #1
 800c43a:	409a      	lsls	r2, r3
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	605a      	str	r2, [r3, #4]
 800c440:	e001      	b.n	800c446 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e04a      	b.n	800c4dc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f002 fa2a 	bl	800e8a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c450:	2b00      	cmp	r3, #0
 800c452:	d008      	beq.n	800c466 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c464:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00f      	beq.n	800c48e <HAL_DMA_DeInit+0x316>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	2b08      	cmp	r3, #8
 800c474:	d80b      	bhi.n	800c48e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f002 faac 	bl	800e9d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c480:	2200      	movs	r2, #0
 800c482:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c48c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d101      	bne.n	800c500 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e226      	b.n	800c94e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c506:	2b01      	cmp	r3, #1
 800c508:	d101      	bne.n	800c50e <HAL_DMA_Start_IT+0x2a>
 800c50a:	2302      	movs	r3, #2
 800c50c:	e21f      	b.n	800c94e <HAL_DMA_Start_IT+0x46a>
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b01      	cmp	r3, #1
 800c520:	f040 820a 	bne.w	800c938 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2202      	movs	r2, #2
 800c528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a68      	ldr	r2, [pc, #416]	; (800c6d8 <HAL_DMA_Start_IT+0x1f4>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d04a      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a66      	ldr	r2, [pc, #408]	; (800c6dc <HAL_DMA_Start_IT+0x1f8>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d045      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a65      	ldr	r2, [pc, #404]	; (800c6e0 <HAL_DMA_Start_IT+0x1fc>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d040      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a63      	ldr	r2, [pc, #396]	; (800c6e4 <HAL_DMA_Start_IT+0x200>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d03b      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a62      	ldr	r2, [pc, #392]	; (800c6e8 <HAL_DMA_Start_IT+0x204>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d036      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a60      	ldr	r2, [pc, #384]	; (800c6ec <HAL_DMA_Start_IT+0x208>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d031      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a5f      	ldr	r2, [pc, #380]	; (800c6f0 <HAL_DMA_Start_IT+0x20c>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d02c      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a5d      	ldr	r2, [pc, #372]	; (800c6f4 <HAL_DMA_Start_IT+0x210>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d027      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a5c      	ldr	r2, [pc, #368]	; (800c6f8 <HAL_DMA_Start_IT+0x214>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d022      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a5a      	ldr	r2, [pc, #360]	; (800c6fc <HAL_DMA_Start_IT+0x218>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d01d      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a59      	ldr	r2, [pc, #356]	; (800c700 <HAL_DMA_Start_IT+0x21c>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d018      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a57      	ldr	r2, [pc, #348]	; (800c704 <HAL_DMA_Start_IT+0x220>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d013      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a56      	ldr	r2, [pc, #344]	; (800c708 <HAL_DMA_Start_IT+0x224>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d00e      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a54      	ldr	r2, [pc, #336]	; (800c70c <HAL_DMA_Start_IT+0x228>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d009      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a53      	ldr	r2, [pc, #332]	; (800c710 <HAL_DMA_Start_IT+0x22c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d004      	beq.n	800c5d2 <HAL_DMA_Start_IT+0xee>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a51      	ldr	r2, [pc, #324]	; (800c714 <HAL_DMA_Start_IT+0x230>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d108      	bne.n	800c5e4 <HAL_DMA_Start_IT+0x100>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f022 0201 	bic.w	r2, r2, #1
 800c5e0:	601a      	str	r2, [r3, #0]
 800c5e2:	e007      	b.n	800c5f4 <HAL_DMA_Start_IT+0x110>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f022 0201 	bic.w	r2, r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	68b9      	ldr	r1, [r7, #8]
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f001 fe76 	bl	800e2ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a34      	ldr	r2, [pc, #208]	; (800c6d8 <HAL_DMA_Start_IT+0x1f4>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d04a      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a33      	ldr	r2, [pc, #204]	; (800c6dc <HAL_DMA_Start_IT+0x1f8>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d045      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a31      	ldr	r2, [pc, #196]	; (800c6e0 <HAL_DMA_Start_IT+0x1fc>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d040      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a30      	ldr	r2, [pc, #192]	; (800c6e4 <HAL_DMA_Start_IT+0x200>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d03b      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a2e      	ldr	r2, [pc, #184]	; (800c6e8 <HAL_DMA_Start_IT+0x204>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d036      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a2d      	ldr	r2, [pc, #180]	; (800c6ec <HAL_DMA_Start_IT+0x208>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d031      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a2b      	ldr	r2, [pc, #172]	; (800c6f0 <HAL_DMA_Start_IT+0x20c>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d02c      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a2a      	ldr	r2, [pc, #168]	; (800c6f4 <HAL_DMA_Start_IT+0x210>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d027      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a28      	ldr	r2, [pc, #160]	; (800c6f8 <HAL_DMA_Start_IT+0x214>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d022      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a27      	ldr	r2, [pc, #156]	; (800c6fc <HAL_DMA_Start_IT+0x218>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d01d      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a25      	ldr	r2, [pc, #148]	; (800c700 <HAL_DMA_Start_IT+0x21c>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d018      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a24      	ldr	r2, [pc, #144]	; (800c704 <HAL_DMA_Start_IT+0x220>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d013      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a22      	ldr	r2, [pc, #136]	; (800c708 <HAL_DMA_Start_IT+0x224>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d00e      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a21      	ldr	r2, [pc, #132]	; (800c70c <HAL_DMA_Start_IT+0x228>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d009      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a1f      	ldr	r2, [pc, #124]	; (800c710 <HAL_DMA_Start_IT+0x22c>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d004      	beq.n	800c6a0 <HAL_DMA_Start_IT+0x1bc>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a1e      	ldr	r2, [pc, #120]	; (800c714 <HAL_DMA_Start_IT+0x230>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d101      	bne.n	800c6a4 <HAL_DMA_Start_IT+0x1c0>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e000      	b.n	800c6a6 <HAL_DMA_Start_IT+0x1c2>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d036      	beq.n	800c718 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f023 021e 	bic.w	r2, r3, #30
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f042 0216 	orr.w	r2, r2, #22
 800c6bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d03e      	beq.n	800c744 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f042 0208 	orr.w	r2, r2, #8
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	e035      	b.n	800c744 <HAL_DMA_Start_IT+0x260>
 800c6d8:	40020010 	.word	0x40020010
 800c6dc:	40020028 	.word	0x40020028
 800c6e0:	40020040 	.word	0x40020040
 800c6e4:	40020058 	.word	0x40020058
 800c6e8:	40020070 	.word	0x40020070
 800c6ec:	40020088 	.word	0x40020088
 800c6f0:	400200a0 	.word	0x400200a0
 800c6f4:	400200b8 	.word	0x400200b8
 800c6f8:	40020410 	.word	0x40020410
 800c6fc:	40020428 	.word	0x40020428
 800c700:	40020440 	.word	0x40020440
 800c704:	40020458 	.word	0x40020458
 800c708:	40020470 	.word	0x40020470
 800c70c:	40020488 	.word	0x40020488
 800c710:	400204a0 	.word	0x400204a0
 800c714:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f023 020e 	bic.w	r2, r3, #14
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f042 020a 	orr.w	r2, r2, #10
 800c72a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	2b00      	cmp	r3, #0
 800c732:	d007      	beq.n	800c744 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f042 0204 	orr.w	r2, r2, #4
 800c742:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a83      	ldr	r2, [pc, #524]	; (800c958 <HAL_DMA_Start_IT+0x474>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d072      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a82      	ldr	r2, [pc, #520]	; (800c95c <HAL_DMA_Start_IT+0x478>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d06d      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a80      	ldr	r2, [pc, #512]	; (800c960 <HAL_DMA_Start_IT+0x47c>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d068      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a7f      	ldr	r2, [pc, #508]	; (800c964 <HAL_DMA_Start_IT+0x480>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d063      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a7d      	ldr	r2, [pc, #500]	; (800c968 <HAL_DMA_Start_IT+0x484>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d05e      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a7c      	ldr	r2, [pc, #496]	; (800c96c <HAL_DMA_Start_IT+0x488>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d059      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a7a      	ldr	r2, [pc, #488]	; (800c970 <HAL_DMA_Start_IT+0x48c>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d054      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a79      	ldr	r2, [pc, #484]	; (800c974 <HAL_DMA_Start_IT+0x490>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d04f      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a77      	ldr	r2, [pc, #476]	; (800c978 <HAL_DMA_Start_IT+0x494>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d04a      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a76      	ldr	r2, [pc, #472]	; (800c97c <HAL_DMA_Start_IT+0x498>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d045      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a74      	ldr	r2, [pc, #464]	; (800c980 <HAL_DMA_Start_IT+0x49c>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d040      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a73      	ldr	r2, [pc, #460]	; (800c984 <HAL_DMA_Start_IT+0x4a0>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d03b      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a71      	ldr	r2, [pc, #452]	; (800c988 <HAL_DMA_Start_IT+0x4a4>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d036      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a70      	ldr	r2, [pc, #448]	; (800c98c <HAL_DMA_Start_IT+0x4a8>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d031      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a6e      	ldr	r2, [pc, #440]	; (800c990 <HAL_DMA_Start_IT+0x4ac>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d02c      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a6d      	ldr	r2, [pc, #436]	; (800c994 <HAL_DMA_Start_IT+0x4b0>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d027      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a6b      	ldr	r2, [pc, #428]	; (800c998 <HAL_DMA_Start_IT+0x4b4>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d022      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a6a      	ldr	r2, [pc, #424]	; (800c99c <HAL_DMA_Start_IT+0x4b8>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d01d      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a68      	ldr	r2, [pc, #416]	; (800c9a0 <HAL_DMA_Start_IT+0x4bc>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d018      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a67      	ldr	r2, [pc, #412]	; (800c9a4 <HAL_DMA_Start_IT+0x4c0>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d013      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a65      	ldr	r2, [pc, #404]	; (800c9a8 <HAL_DMA_Start_IT+0x4c4>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d00e      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a64      	ldr	r2, [pc, #400]	; (800c9ac <HAL_DMA_Start_IT+0x4c8>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d009      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a62      	ldr	r2, [pc, #392]	; (800c9b0 <HAL_DMA_Start_IT+0x4cc>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d004      	beq.n	800c834 <HAL_DMA_Start_IT+0x350>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a61      	ldr	r2, [pc, #388]	; (800c9b4 <HAL_DMA_Start_IT+0x4d0>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d101      	bne.n	800c838 <HAL_DMA_Start_IT+0x354>
 800c834:	2301      	movs	r3, #1
 800c836:	e000      	b.n	800c83a <HAL_DMA_Start_IT+0x356>
 800c838:	2300      	movs	r3, #0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d01a      	beq.n	800c874 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d007      	beq.n	800c85c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c85a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c860:	2b00      	cmp	r3, #0
 800c862:	d007      	beq.n	800c874 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c86e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c872:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a37      	ldr	r2, [pc, #220]	; (800c958 <HAL_DMA_Start_IT+0x474>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d04a      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a36      	ldr	r2, [pc, #216]	; (800c95c <HAL_DMA_Start_IT+0x478>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d045      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a34      	ldr	r2, [pc, #208]	; (800c960 <HAL_DMA_Start_IT+0x47c>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d040      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a33      	ldr	r2, [pc, #204]	; (800c964 <HAL_DMA_Start_IT+0x480>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d03b      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a31      	ldr	r2, [pc, #196]	; (800c968 <HAL_DMA_Start_IT+0x484>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d036      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a30      	ldr	r2, [pc, #192]	; (800c96c <HAL_DMA_Start_IT+0x488>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d031      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a2e      	ldr	r2, [pc, #184]	; (800c970 <HAL_DMA_Start_IT+0x48c>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d02c      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a2d      	ldr	r2, [pc, #180]	; (800c974 <HAL_DMA_Start_IT+0x490>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d027      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a2b      	ldr	r2, [pc, #172]	; (800c978 <HAL_DMA_Start_IT+0x494>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d022      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a2a      	ldr	r2, [pc, #168]	; (800c97c <HAL_DMA_Start_IT+0x498>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d01d      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a28      	ldr	r2, [pc, #160]	; (800c980 <HAL_DMA_Start_IT+0x49c>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d018      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a27      	ldr	r2, [pc, #156]	; (800c984 <HAL_DMA_Start_IT+0x4a0>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d013      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a25      	ldr	r2, [pc, #148]	; (800c988 <HAL_DMA_Start_IT+0x4a4>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d00e      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a24      	ldr	r2, [pc, #144]	; (800c98c <HAL_DMA_Start_IT+0x4a8>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d009      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a22      	ldr	r2, [pc, #136]	; (800c990 <HAL_DMA_Start_IT+0x4ac>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d004      	beq.n	800c914 <HAL_DMA_Start_IT+0x430>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a21      	ldr	r2, [pc, #132]	; (800c994 <HAL_DMA_Start_IT+0x4b0>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d108      	bne.n	800c926 <HAL_DMA_Start_IT+0x442>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f042 0201 	orr.w	r2, r2, #1
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	e012      	b.n	800c94c <HAL_DMA_Start_IT+0x468>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f042 0201 	orr.w	r2, r2, #1
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	e009      	b.n	800c94c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c946:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3718      	adds	r7, #24
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	40020010 	.word	0x40020010
 800c95c:	40020028 	.word	0x40020028
 800c960:	40020040 	.word	0x40020040
 800c964:	40020058 	.word	0x40020058
 800c968:	40020070 	.word	0x40020070
 800c96c:	40020088 	.word	0x40020088
 800c970:	400200a0 	.word	0x400200a0
 800c974:	400200b8 	.word	0x400200b8
 800c978:	40020410 	.word	0x40020410
 800c97c:	40020428 	.word	0x40020428
 800c980:	40020440 	.word	0x40020440
 800c984:	40020458 	.word	0x40020458
 800c988:	40020470 	.word	0x40020470
 800c98c:	40020488 	.word	0x40020488
 800c990:	400204a0 	.word	0x400204a0
 800c994:	400204b8 	.word	0x400204b8
 800c998:	58025408 	.word	0x58025408
 800c99c:	5802541c 	.word	0x5802541c
 800c9a0:	58025430 	.word	0x58025430
 800c9a4:	58025444 	.word	0x58025444
 800c9a8:	58025458 	.word	0x58025458
 800c9ac:	5802546c 	.word	0x5802546c
 800c9b0:	58025480 	.word	0x58025480
 800c9b4:	58025494 	.word	0x58025494

0800c9b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c9c0:	f7fe fcb6 	bl	800b330 <HAL_GetTick>
 800c9c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e2dc      	b.n	800cf8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d008      	beq.n	800c9ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2280      	movs	r2, #128	; 0x80
 800c9e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e2cd      	b.n	800cf8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a76      	ldr	r2, [pc, #472]	; (800cbcc <HAL_DMA_Abort+0x214>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d04a      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a74      	ldr	r2, [pc, #464]	; (800cbd0 <HAL_DMA_Abort+0x218>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d045      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a73      	ldr	r2, [pc, #460]	; (800cbd4 <HAL_DMA_Abort+0x21c>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d040      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a71      	ldr	r2, [pc, #452]	; (800cbd8 <HAL_DMA_Abort+0x220>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d03b      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a70      	ldr	r2, [pc, #448]	; (800cbdc <HAL_DMA_Abort+0x224>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d036      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a6e      	ldr	r2, [pc, #440]	; (800cbe0 <HAL_DMA_Abort+0x228>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d031      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a6d      	ldr	r2, [pc, #436]	; (800cbe4 <HAL_DMA_Abort+0x22c>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d02c      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a6b      	ldr	r2, [pc, #428]	; (800cbe8 <HAL_DMA_Abort+0x230>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d027      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a6a      	ldr	r2, [pc, #424]	; (800cbec <HAL_DMA_Abort+0x234>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d022      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a68      	ldr	r2, [pc, #416]	; (800cbf0 <HAL_DMA_Abort+0x238>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d01d      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a67      	ldr	r2, [pc, #412]	; (800cbf4 <HAL_DMA_Abort+0x23c>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d018      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a65      	ldr	r2, [pc, #404]	; (800cbf8 <HAL_DMA_Abort+0x240>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d013      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a64      	ldr	r2, [pc, #400]	; (800cbfc <HAL_DMA_Abort+0x244>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d00e      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a62      	ldr	r2, [pc, #392]	; (800cc00 <HAL_DMA_Abort+0x248>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d009      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a61      	ldr	r2, [pc, #388]	; (800cc04 <HAL_DMA_Abort+0x24c>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d004      	beq.n	800ca8e <HAL_DMA_Abort+0xd6>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a5f      	ldr	r2, [pc, #380]	; (800cc08 <HAL_DMA_Abort+0x250>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d101      	bne.n	800ca92 <HAL_DMA_Abort+0xda>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e000      	b.n	800ca94 <HAL_DMA_Abort+0xdc>
 800ca92:	2300      	movs	r3, #0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d013      	beq.n	800cac0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f022 021e 	bic.w	r2, r2, #30
 800caa6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	695a      	ldr	r2, [r3, #20]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cab6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	617b      	str	r3, [r7, #20]
 800cabe:	e00a      	b.n	800cad6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f022 020e 	bic.w	r2, r2, #14
 800cace:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a3c      	ldr	r2, [pc, #240]	; (800cbcc <HAL_DMA_Abort+0x214>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d072      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a3a      	ldr	r2, [pc, #232]	; (800cbd0 <HAL_DMA_Abort+0x218>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d06d      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a39      	ldr	r2, [pc, #228]	; (800cbd4 <HAL_DMA_Abort+0x21c>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d068      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a37      	ldr	r2, [pc, #220]	; (800cbd8 <HAL_DMA_Abort+0x220>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d063      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a36      	ldr	r2, [pc, #216]	; (800cbdc <HAL_DMA_Abort+0x224>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d05e      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a34      	ldr	r2, [pc, #208]	; (800cbe0 <HAL_DMA_Abort+0x228>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d059      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a33      	ldr	r2, [pc, #204]	; (800cbe4 <HAL_DMA_Abort+0x22c>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d054      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a31      	ldr	r2, [pc, #196]	; (800cbe8 <HAL_DMA_Abort+0x230>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d04f      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a30      	ldr	r2, [pc, #192]	; (800cbec <HAL_DMA_Abort+0x234>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d04a      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a2e      	ldr	r2, [pc, #184]	; (800cbf0 <HAL_DMA_Abort+0x238>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d045      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a2d      	ldr	r2, [pc, #180]	; (800cbf4 <HAL_DMA_Abort+0x23c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d040      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a2b      	ldr	r2, [pc, #172]	; (800cbf8 <HAL_DMA_Abort+0x240>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d03b      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a2a      	ldr	r2, [pc, #168]	; (800cbfc <HAL_DMA_Abort+0x244>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d036      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a28      	ldr	r2, [pc, #160]	; (800cc00 <HAL_DMA_Abort+0x248>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d031      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a27      	ldr	r2, [pc, #156]	; (800cc04 <HAL_DMA_Abort+0x24c>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d02c      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a25      	ldr	r2, [pc, #148]	; (800cc08 <HAL_DMA_Abort+0x250>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d027      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a24      	ldr	r2, [pc, #144]	; (800cc0c <HAL_DMA_Abort+0x254>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d022      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a22      	ldr	r2, [pc, #136]	; (800cc10 <HAL_DMA_Abort+0x258>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d01d      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a21      	ldr	r2, [pc, #132]	; (800cc14 <HAL_DMA_Abort+0x25c>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d018      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a1f      	ldr	r2, [pc, #124]	; (800cc18 <HAL_DMA_Abort+0x260>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d013      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a1e      	ldr	r2, [pc, #120]	; (800cc1c <HAL_DMA_Abort+0x264>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d00e      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a1c      	ldr	r2, [pc, #112]	; (800cc20 <HAL_DMA_Abort+0x268>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d009      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a1b      	ldr	r2, [pc, #108]	; (800cc24 <HAL_DMA_Abort+0x26c>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d004      	beq.n	800cbc6 <HAL_DMA_Abort+0x20e>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a19      	ldr	r2, [pc, #100]	; (800cc28 <HAL_DMA_Abort+0x270>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d132      	bne.n	800cc2c <HAL_DMA_Abort+0x274>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e031      	b.n	800cc2e <HAL_DMA_Abort+0x276>
 800cbca:	bf00      	nop
 800cbcc:	40020010 	.word	0x40020010
 800cbd0:	40020028 	.word	0x40020028
 800cbd4:	40020040 	.word	0x40020040
 800cbd8:	40020058 	.word	0x40020058
 800cbdc:	40020070 	.word	0x40020070
 800cbe0:	40020088 	.word	0x40020088
 800cbe4:	400200a0 	.word	0x400200a0
 800cbe8:	400200b8 	.word	0x400200b8
 800cbec:	40020410 	.word	0x40020410
 800cbf0:	40020428 	.word	0x40020428
 800cbf4:	40020440 	.word	0x40020440
 800cbf8:	40020458 	.word	0x40020458
 800cbfc:	40020470 	.word	0x40020470
 800cc00:	40020488 	.word	0x40020488
 800cc04:	400204a0 	.word	0x400204a0
 800cc08:	400204b8 	.word	0x400204b8
 800cc0c:	58025408 	.word	0x58025408
 800cc10:	5802541c 	.word	0x5802541c
 800cc14:	58025430 	.word	0x58025430
 800cc18:	58025444 	.word	0x58025444
 800cc1c:	58025458 	.word	0x58025458
 800cc20:	5802546c 	.word	0x5802546c
 800cc24:	58025480 	.word	0x58025480
 800cc28:	58025494 	.word	0x58025494
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d007      	beq.n	800cc42 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc40:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a6d      	ldr	r2, [pc, #436]	; (800cdfc <HAL_DMA_Abort+0x444>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d04a      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a6b      	ldr	r2, [pc, #428]	; (800ce00 <HAL_DMA_Abort+0x448>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d045      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a6a      	ldr	r2, [pc, #424]	; (800ce04 <HAL_DMA_Abort+0x44c>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d040      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a68      	ldr	r2, [pc, #416]	; (800ce08 <HAL_DMA_Abort+0x450>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d03b      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a67      	ldr	r2, [pc, #412]	; (800ce0c <HAL_DMA_Abort+0x454>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d036      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a65      	ldr	r2, [pc, #404]	; (800ce10 <HAL_DMA_Abort+0x458>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d031      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a64      	ldr	r2, [pc, #400]	; (800ce14 <HAL_DMA_Abort+0x45c>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d02c      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a62      	ldr	r2, [pc, #392]	; (800ce18 <HAL_DMA_Abort+0x460>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d027      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a61      	ldr	r2, [pc, #388]	; (800ce1c <HAL_DMA_Abort+0x464>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d022      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a5f      	ldr	r2, [pc, #380]	; (800ce20 <HAL_DMA_Abort+0x468>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d01d      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a5e      	ldr	r2, [pc, #376]	; (800ce24 <HAL_DMA_Abort+0x46c>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d018      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a5c      	ldr	r2, [pc, #368]	; (800ce28 <HAL_DMA_Abort+0x470>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d013      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a5b      	ldr	r2, [pc, #364]	; (800ce2c <HAL_DMA_Abort+0x474>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d00e      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a59      	ldr	r2, [pc, #356]	; (800ce30 <HAL_DMA_Abort+0x478>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d009      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a58      	ldr	r2, [pc, #352]	; (800ce34 <HAL_DMA_Abort+0x47c>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d004      	beq.n	800cce2 <HAL_DMA_Abort+0x32a>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a56      	ldr	r2, [pc, #344]	; (800ce38 <HAL_DMA_Abort+0x480>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d108      	bne.n	800ccf4 <HAL_DMA_Abort+0x33c>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f022 0201 	bic.w	r2, r2, #1
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	e007      	b.n	800cd04 <HAL_DMA_Abort+0x34c>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f022 0201 	bic.w	r2, r2, #1
 800cd02:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800cd04:	e013      	b.n	800cd2e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cd06:	f7fe fb13 	bl	800b330 <HAL_GetTick>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	2b05      	cmp	r3, #5
 800cd12:	d90c      	bls.n	800cd2e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2220      	movs	r2, #32
 800cd18:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2203      	movs	r2, #3
 800cd26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e12d      	b.n	800cf8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1e5      	bne.n	800cd06 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a2f      	ldr	r2, [pc, #188]	; (800cdfc <HAL_DMA_Abort+0x444>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d04a      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a2d      	ldr	r2, [pc, #180]	; (800ce00 <HAL_DMA_Abort+0x448>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d045      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a2c      	ldr	r2, [pc, #176]	; (800ce04 <HAL_DMA_Abort+0x44c>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d040      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a2a      	ldr	r2, [pc, #168]	; (800ce08 <HAL_DMA_Abort+0x450>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d03b      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a29      	ldr	r2, [pc, #164]	; (800ce0c <HAL_DMA_Abort+0x454>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d036      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a27      	ldr	r2, [pc, #156]	; (800ce10 <HAL_DMA_Abort+0x458>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d031      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a26      	ldr	r2, [pc, #152]	; (800ce14 <HAL_DMA_Abort+0x45c>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d02c      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a24      	ldr	r2, [pc, #144]	; (800ce18 <HAL_DMA_Abort+0x460>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d027      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a23      	ldr	r2, [pc, #140]	; (800ce1c <HAL_DMA_Abort+0x464>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d022      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a21      	ldr	r2, [pc, #132]	; (800ce20 <HAL_DMA_Abort+0x468>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d01d      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a20      	ldr	r2, [pc, #128]	; (800ce24 <HAL_DMA_Abort+0x46c>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d018      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a1e      	ldr	r2, [pc, #120]	; (800ce28 <HAL_DMA_Abort+0x470>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d013      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a1d      	ldr	r2, [pc, #116]	; (800ce2c <HAL_DMA_Abort+0x474>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d00e      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a1b      	ldr	r2, [pc, #108]	; (800ce30 <HAL_DMA_Abort+0x478>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d009      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a1a      	ldr	r2, [pc, #104]	; (800ce34 <HAL_DMA_Abort+0x47c>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d004      	beq.n	800cdda <HAL_DMA_Abort+0x422>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a18      	ldr	r2, [pc, #96]	; (800ce38 <HAL_DMA_Abort+0x480>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d101      	bne.n	800cdde <HAL_DMA_Abort+0x426>
 800cdda:	2301      	movs	r3, #1
 800cddc:	e000      	b.n	800cde0 <HAL_DMA_Abort+0x428>
 800cdde:	2300      	movs	r3, #0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d02b      	beq.n	800ce3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdee:	f003 031f 	and.w	r3, r3, #31
 800cdf2:	223f      	movs	r2, #63	; 0x3f
 800cdf4:	409a      	lsls	r2, r3
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	609a      	str	r2, [r3, #8]
 800cdfa:	e02a      	b.n	800ce52 <HAL_DMA_Abort+0x49a>
 800cdfc:	40020010 	.word	0x40020010
 800ce00:	40020028 	.word	0x40020028
 800ce04:	40020040 	.word	0x40020040
 800ce08:	40020058 	.word	0x40020058
 800ce0c:	40020070 	.word	0x40020070
 800ce10:	40020088 	.word	0x40020088
 800ce14:	400200a0 	.word	0x400200a0
 800ce18:	400200b8 	.word	0x400200b8
 800ce1c:	40020410 	.word	0x40020410
 800ce20:	40020428 	.word	0x40020428
 800ce24:	40020440 	.word	0x40020440
 800ce28:	40020458 	.word	0x40020458
 800ce2c:	40020470 	.word	0x40020470
 800ce30:	40020488 	.word	0x40020488
 800ce34:	400204a0 	.word	0x400204a0
 800ce38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce46:	f003 031f 	and.w	r3, r3, #31
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	409a      	lsls	r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a4f      	ldr	r2, [pc, #316]	; (800cf94 <HAL_DMA_Abort+0x5dc>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d072      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a4d      	ldr	r2, [pc, #308]	; (800cf98 <HAL_DMA_Abort+0x5e0>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d06d      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a4c      	ldr	r2, [pc, #304]	; (800cf9c <HAL_DMA_Abort+0x5e4>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d068      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a4a      	ldr	r2, [pc, #296]	; (800cfa0 <HAL_DMA_Abort+0x5e8>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d063      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a49      	ldr	r2, [pc, #292]	; (800cfa4 <HAL_DMA_Abort+0x5ec>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d05e      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a47      	ldr	r2, [pc, #284]	; (800cfa8 <HAL_DMA_Abort+0x5f0>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d059      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a46      	ldr	r2, [pc, #280]	; (800cfac <HAL_DMA_Abort+0x5f4>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d054      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a44      	ldr	r2, [pc, #272]	; (800cfb0 <HAL_DMA_Abort+0x5f8>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d04f      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a43      	ldr	r2, [pc, #268]	; (800cfb4 <HAL_DMA_Abort+0x5fc>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d04a      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a41      	ldr	r2, [pc, #260]	; (800cfb8 <HAL_DMA_Abort+0x600>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d045      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a40      	ldr	r2, [pc, #256]	; (800cfbc <HAL_DMA_Abort+0x604>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d040      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a3e      	ldr	r2, [pc, #248]	; (800cfc0 <HAL_DMA_Abort+0x608>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d03b      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a3d      	ldr	r2, [pc, #244]	; (800cfc4 <HAL_DMA_Abort+0x60c>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d036      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a3b      	ldr	r2, [pc, #236]	; (800cfc8 <HAL_DMA_Abort+0x610>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d031      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a3a      	ldr	r2, [pc, #232]	; (800cfcc <HAL_DMA_Abort+0x614>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d02c      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a38      	ldr	r2, [pc, #224]	; (800cfd0 <HAL_DMA_Abort+0x618>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d027      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a37      	ldr	r2, [pc, #220]	; (800cfd4 <HAL_DMA_Abort+0x61c>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d022      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a35      	ldr	r2, [pc, #212]	; (800cfd8 <HAL_DMA_Abort+0x620>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d01d      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a34      	ldr	r2, [pc, #208]	; (800cfdc <HAL_DMA_Abort+0x624>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d018      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a32      	ldr	r2, [pc, #200]	; (800cfe0 <HAL_DMA_Abort+0x628>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d013      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a31      	ldr	r2, [pc, #196]	; (800cfe4 <HAL_DMA_Abort+0x62c>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d00e      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a2f      	ldr	r2, [pc, #188]	; (800cfe8 <HAL_DMA_Abort+0x630>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d009      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a2e      	ldr	r2, [pc, #184]	; (800cfec <HAL_DMA_Abort+0x634>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d004      	beq.n	800cf42 <HAL_DMA_Abort+0x58a>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a2c      	ldr	r2, [pc, #176]	; (800cff0 <HAL_DMA_Abort+0x638>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d101      	bne.n	800cf46 <HAL_DMA_Abort+0x58e>
 800cf42:	2301      	movs	r3, #1
 800cf44:	e000      	b.n	800cf48 <HAL_DMA_Abort+0x590>
 800cf46:	2300      	movs	r3, #0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d015      	beq.n	800cf78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cf54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00c      	beq.n	800cf78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cf76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3718      	adds	r7, #24
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	40020010 	.word	0x40020010
 800cf98:	40020028 	.word	0x40020028
 800cf9c:	40020040 	.word	0x40020040
 800cfa0:	40020058 	.word	0x40020058
 800cfa4:	40020070 	.word	0x40020070
 800cfa8:	40020088 	.word	0x40020088
 800cfac:	400200a0 	.word	0x400200a0
 800cfb0:	400200b8 	.word	0x400200b8
 800cfb4:	40020410 	.word	0x40020410
 800cfb8:	40020428 	.word	0x40020428
 800cfbc:	40020440 	.word	0x40020440
 800cfc0:	40020458 	.word	0x40020458
 800cfc4:	40020470 	.word	0x40020470
 800cfc8:	40020488 	.word	0x40020488
 800cfcc:	400204a0 	.word	0x400204a0
 800cfd0:	400204b8 	.word	0x400204b8
 800cfd4:	58025408 	.word	0x58025408
 800cfd8:	5802541c 	.word	0x5802541c
 800cfdc:	58025430 	.word	0x58025430
 800cfe0:	58025444 	.word	0x58025444
 800cfe4:	58025458 	.word	0x58025458
 800cfe8:	5802546c 	.word	0x5802546c
 800cfec:	58025480 	.word	0x58025480
 800cff0:	58025494 	.word	0x58025494

0800cff4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e237      	b.n	800d476 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b02      	cmp	r3, #2
 800d010:	d004      	beq.n	800d01c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2280      	movs	r2, #128	; 0x80
 800d016:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	e22c      	b.n	800d476 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a5c      	ldr	r2, [pc, #368]	; (800d194 <HAL_DMA_Abort_IT+0x1a0>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d04a      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a5b      	ldr	r2, [pc, #364]	; (800d198 <HAL_DMA_Abort_IT+0x1a4>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d045      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a59      	ldr	r2, [pc, #356]	; (800d19c <HAL_DMA_Abort_IT+0x1a8>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d040      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a58      	ldr	r2, [pc, #352]	; (800d1a0 <HAL_DMA_Abort_IT+0x1ac>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d03b      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a56      	ldr	r2, [pc, #344]	; (800d1a4 <HAL_DMA_Abort_IT+0x1b0>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d036      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a55      	ldr	r2, [pc, #340]	; (800d1a8 <HAL_DMA_Abort_IT+0x1b4>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d031      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a53      	ldr	r2, [pc, #332]	; (800d1ac <HAL_DMA_Abort_IT+0x1b8>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d02c      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a52      	ldr	r2, [pc, #328]	; (800d1b0 <HAL_DMA_Abort_IT+0x1bc>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d027      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a50      	ldr	r2, [pc, #320]	; (800d1b4 <HAL_DMA_Abort_IT+0x1c0>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d022      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a4f      	ldr	r2, [pc, #316]	; (800d1b8 <HAL_DMA_Abort_IT+0x1c4>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d01d      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a4d      	ldr	r2, [pc, #308]	; (800d1bc <HAL_DMA_Abort_IT+0x1c8>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d018      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a4c      	ldr	r2, [pc, #304]	; (800d1c0 <HAL_DMA_Abort_IT+0x1cc>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d013      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a4a      	ldr	r2, [pc, #296]	; (800d1c4 <HAL_DMA_Abort_IT+0x1d0>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d00e      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a49      	ldr	r2, [pc, #292]	; (800d1c8 <HAL_DMA_Abort_IT+0x1d4>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d009      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a47      	ldr	r2, [pc, #284]	; (800d1cc <HAL_DMA_Abort_IT+0x1d8>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d004      	beq.n	800d0bc <HAL_DMA_Abort_IT+0xc8>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a46      	ldr	r2, [pc, #280]	; (800d1d0 <HAL_DMA_Abort_IT+0x1dc>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d101      	bne.n	800d0c0 <HAL_DMA_Abort_IT+0xcc>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e000      	b.n	800d0c2 <HAL_DMA_Abort_IT+0xce>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 8086 	beq.w	800d1d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2204      	movs	r2, #4
 800d0cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a2f      	ldr	r2, [pc, #188]	; (800d194 <HAL_DMA_Abort_IT+0x1a0>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d04a      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a2e      	ldr	r2, [pc, #184]	; (800d198 <HAL_DMA_Abort_IT+0x1a4>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d045      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a2c      	ldr	r2, [pc, #176]	; (800d19c <HAL_DMA_Abort_IT+0x1a8>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d040      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a2b      	ldr	r2, [pc, #172]	; (800d1a0 <HAL_DMA_Abort_IT+0x1ac>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d03b      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a29      	ldr	r2, [pc, #164]	; (800d1a4 <HAL_DMA_Abort_IT+0x1b0>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d036      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a28      	ldr	r2, [pc, #160]	; (800d1a8 <HAL_DMA_Abort_IT+0x1b4>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d031      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a26      	ldr	r2, [pc, #152]	; (800d1ac <HAL_DMA_Abort_IT+0x1b8>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d02c      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a25      	ldr	r2, [pc, #148]	; (800d1b0 <HAL_DMA_Abort_IT+0x1bc>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d027      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a23      	ldr	r2, [pc, #140]	; (800d1b4 <HAL_DMA_Abort_IT+0x1c0>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d022      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a22      	ldr	r2, [pc, #136]	; (800d1b8 <HAL_DMA_Abort_IT+0x1c4>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d01d      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a20      	ldr	r2, [pc, #128]	; (800d1bc <HAL_DMA_Abort_IT+0x1c8>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d018      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a1f      	ldr	r2, [pc, #124]	; (800d1c0 <HAL_DMA_Abort_IT+0x1cc>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d013      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a1d      	ldr	r2, [pc, #116]	; (800d1c4 <HAL_DMA_Abort_IT+0x1d0>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d00e      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a1c      	ldr	r2, [pc, #112]	; (800d1c8 <HAL_DMA_Abort_IT+0x1d4>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d009      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a1a      	ldr	r2, [pc, #104]	; (800d1cc <HAL_DMA_Abort_IT+0x1d8>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d004      	beq.n	800d170 <HAL_DMA_Abort_IT+0x17c>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a19      	ldr	r2, [pc, #100]	; (800d1d0 <HAL_DMA_Abort_IT+0x1dc>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d108      	bne.n	800d182 <HAL_DMA_Abort_IT+0x18e>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f022 0201 	bic.w	r2, r2, #1
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	e178      	b.n	800d474 <HAL_DMA_Abort_IT+0x480>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f022 0201 	bic.w	r2, r2, #1
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	e16f      	b.n	800d474 <HAL_DMA_Abort_IT+0x480>
 800d194:	40020010 	.word	0x40020010
 800d198:	40020028 	.word	0x40020028
 800d19c:	40020040 	.word	0x40020040
 800d1a0:	40020058 	.word	0x40020058
 800d1a4:	40020070 	.word	0x40020070
 800d1a8:	40020088 	.word	0x40020088
 800d1ac:	400200a0 	.word	0x400200a0
 800d1b0:	400200b8 	.word	0x400200b8
 800d1b4:	40020410 	.word	0x40020410
 800d1b8:	40020428 	.word	0x40020428
 800d1bc:	40020440 	.word	0x40020440
 800d1c0:	40020458 	.word	0x40020458
 800d1c4:	40020470 	.word	0x40020470
 800d1c8:	40020488 	.word	0x40020488
 800d1cc:	400204a0 	.word	0x400204a0
 800d1d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f022 020e 	bic.w	r2, r2, #14
 800d1e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a6c      	ldr	r2, [pc, #432]	; (800d39c <HAL_DMA_Abort_IT+0x3a8>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d04a      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a6b      	ldr	r2, [pc, #428]	; (800d3a0 <HAL_DMA_Abort_IT+0x3ac>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d045      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a69      	ldr	r2, [pc, #420]	; (800d3a4 <HAL_DMA_Abort_IT+0x3b0>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d040      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a68      	ldr	r2, [pc, #416]	; (800d3a8 <HAL_DMA_Abort_IT+0x3b4>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d03b      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a66      	ldr	r2, [pc, #408]	; (800d3ac <HAL_DMA_Abort_IT+0x3b8>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d036      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a65      	ldr	r2, [pc, #404]	; (800d3b0 <HAL_DMA_Abort_IT+0x3bc>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d031      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a63      	ldr	r2, [pc, #396]	; (800d3b4 <HAL_DMA_Abort_IT+0x3c0>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d02c      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a62      	ldr	r2, [pc, #392]	; (800d3b8 <HAL_DMA_Abort_IT+0x3c4>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d027      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a60      	ldr	r2, [pc, #384]	; (800d3bc <HAL_DMA_Abort_IT+0x3c8>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d022      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a5f      	ldr	r2, [pc, #380]	; (800d3c0 <HAL_DMA_Abort_IT+0x3cc>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d01d      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a5d      	ldr	r2, [pc, #372]	; (800d3c4 <HAL_DMA_Abort_IT+0x3d0>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d018      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a5c      	ldr	r2, [pc, #368]	; (800d3c8 <HAL_DMA_Abort_IT+0x3d4>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d013      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a5a      	ldr	r2, [pc, #360]	; (800d3cc <HAL_DMA_Abort_IT+0x3d8>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d00e      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a59      	ldr	r2, [pc, #356]	; (800d3d0 <HAL_DMA_Abort_IT+0x3dc>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d009      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a57      	ldr	r2, [pc, #348]	; (800d3d4 <HAL_DMA_Abort_IT+0x3e0>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d004      	beq.n	800d284 <HAL_DMA_Abort_IT+0x290>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a56      	ldr	r2, [pc, #344]	; (800d3d8 <HAL_DMA_Abort_IT+0x3e4>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d108      	bne.n	800d296 <HAL_DMA_Abort_IT+0x2a2>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f022 0201 	bic.w	r2, r2, #1
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	e007      	b.n	800d2a6 <HAL_DMA_Abort_IT+0x2b2>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f022 0201 	bic.w	r2, r2, #1
 800d2a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a3c      	ldr	r2, [pc, #240]	; (800d39c <HAL_DMA_Abort_IT+0x3a8>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d072      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a3a      	ldr	r2, [pc, #232]	; (800d3a0 <HAL_DMA_Abort_IT+0x3ac>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d06d      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4a39      	ldr	r2, [pc, #228]	; (800d3a4 <HAL_DMA_Abort_IT+0x3b0>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d068      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a37      	ldr	r2, [pc, #220]	; (800d3a8 <HAL_DMA_Abort_IT+0x3b4>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d063      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a36      	ldr	r2, [pc, #216]	; (800d3ac <HAL_DMA_Abort_IT+0x3b8>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d05e      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a34      	ldr	r2, [pc, #208]	; (800d3b0 <HAL_DMA_Abort_IT+0x3bc>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d059      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a33      	ldr	r2, [pc, #204]	; (800d3b4 <HAL_DMA_Abort_IT+0x3c0>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d054      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a31      	ldr	r2, [pc, #196]	; (800d3b8 <HAL_DMA_Abort_IT+0x3c4>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d04f      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a30      	ldr	r2, [pc, #192]	; (800d3bc <HAL_DMA_Abort_IT+0x3c8>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d04a      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a2e      	ldr	r2, [pc, #184]	; (800d3c0 <HAL_DMA_Abort_IT+0x3cc>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d045      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a2d      	ldr	r2, [pc, #180]	; (800d3c4 <HAL_DMA_Abort_IT+0x3d0>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d040      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a2b      	ldr	r2, [pc, #172]	; (800d3c8 <HAL_DMA_Abort_IT+0x3d4>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d03b      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a2a      	ldr	r2, [pc, #168]	; (800d3cc <HAL_DMA_Abort_IT+0x3d8>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d036      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a28      	ldr	r2, [pc, #160]	; (800d3d0 <HAL_DMA_Abort_IT+0x3dc>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d031      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a27      	ldr	r2, [pc, #156]	; (800d3d4 <HAL_DMA_Abort_IT+0x3e0>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d02c      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a25      	ldr	r2, [pc, #148]	; (800d3d8 <HAL_DMA_Abort_IT+0x3e4>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d027      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a24      	ldr	r2, [pc, #144]	; (800d3dc <HAL_DMA_Abort_IT+0x3e8>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d022      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a22      	ldr	r2, [pc, #136]	; (800d3e0 <HAL_DMA_Abort_IT+0x3ec>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d01d      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4a21      	ldr	r2, [pc, #132]	; (800d3e4 <HAL_DMA_Abort_IT+0x3f0>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d018      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a1f      	ldr	r2, [pc, #124]	; (800d3e8 <HAL_DMA_Abort_IT+0x3f4>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d013      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a1e      	ldr	r2, [pc, #120]	; (800d3ec <HAL_DMA_Abort_IT+0x3f8>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d00e      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a1c      	ldr	r2, [pc, #112]	; (800d3f0 <HAL_DMA_Abort_IT+0x3fc>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d009      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a1b      	ldr	r2, [pc, #108]	; (800d3f4 <HAL_DMA_Abort_IT+0x400>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d004      	beq.n	800d396 <HAL_DMA_Abort_IT+0x3a2>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a19      	ldr	r2, [pc, #100]	; (800d3f8 <HAL_DMA_Abort_IT+0x404>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d132      	bne.n	800d3fc <HAL_DMA_Abort_IT+0x408>
 800d396:	2301      	movs	r3, #1
 800d398:	e031      	b.n	800d3fe <HAL_DMA_Abort_IT+0x40a>
 800d39a:	bf00      	nop
 800d39c:	40020010 	.word	0x40020010
 800d3a0:	40020028 	.word	0x40020028
 800d3a4:	40020040 	.word	0x40020040
 800d3a8:	40020058 	.word	0x40020058
 800d3ac:	40020070 	.word	0x40020070
 800d3b0:	40020088 	.word	0x40020088
 800d3b4:	400200a0 	.word	0x400200a0
 800d3b8:	400200b8 	.word	0x400200b8
 800d3bc:	40020410 	.word	0x40020410
 800d3c0:	40020428 	.word	0x40020428
 800d3c4:	40020440 	.word	0x40020440
 800d3c8:	40020458 	.word	0x40020458
 800d3cc:	40020470 	.word	0x40020470
 800d3d0:	40020488 	.word	0x40020488
 800d3d4:	400204a0 	.word	0x400204a0
 800d3d8:	400204b8 	.word	0x400204b8
 800d3dc:	58025408 	.word	0x58025408
 800d3e0:	5802541c 	.word	0x5802541c
 800d3e4:	58025430 	.word	0x58025430
 800d3e8:	58025444 	.word	0x58025444
 800d3ec:	58025458 	.word	0x58025458
 800d3f0:	5802546c 	.word	0x5802546c
 800d3f4:	58025480 	.word	0x58025480
 800d3f8:	58025494 	.word	0x58025494
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d028      	beq.n	800d454 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d40c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d410:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d416:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d41c:	f003 031f 	and.w	r3, r3, #31
 800d420:	2201      	movs	r2, #1
 800d422:	409a      	lsls	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d430:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00c      	beq.n	800d454 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d448:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d452:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d003      	beq.n	800d474 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop

0800d480 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b08a      	sub	sp, #40	; 0x28
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800d488:	2300      	movs	r3, #0
 800d48a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d48c:	4b67      	ldr	r3, [pc, #412]	; (800d62c <HAL_DMA_IRQHandler+0x1ac>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a67      	ldr	r2, [pc, #412]	; (800d630 <HAL_DMA_IRQHandler+0x1b0>)
 800d492:	fba2 2303 	umull	r2, r3, r2, r3
 800d496:	0a9b      	lsrs	r3, r3, #10
 800d498:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d49e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800d4a6:	6a3b      	ldr	r3, [r7, #32]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a5f      	ldr	r2, [pc, #380]	; (800d634 <HAL_DMA_IRQHandler+0x1b4>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d04a      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a5d      	ldr	r2, [pc, #372]	; (800d638 <HAL_DMA_IRQHandler+0x1b8>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d045      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a5c      	ldr	r2, [pc, #368]	; (800d63c <HAL_DMA_IRQHandler+0x1bc>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d040      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a5a      	ldr	r2, [pc, #360]	; (800d640 <HAL_DMA_IRQHandler+0x1c0>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d03b      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a59      	ldr	r2, [pc, #356]	; (800d644 <HAL_DMA_IRQHandler+0x1c4>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d036      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a57      	ldr	r2, [pc, #348]	; (800d648 <HAL_DMA_IRQHandler+0x1c8>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d031      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a56      	ldr	r2, [pc, #344]	; (800d64c <HAL_DMA_IRQHandler+0x1cc>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d02c      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a54      	ldr	r2, [pc, #336]	; (800d650 <HAL_DMA_IRQHandler+0x1d0>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d027      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a53      	ldr	r2, [pc, #332]	; (800d654 <HAL_DMA_IRQHandler+0x1d4>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d022      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a51      	ldr	r2, [pc, #324]	; (800d658 <HAL_DMA_IRQHandler+0x1d8>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d01d      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a50      	ldr	r2, [pc, #320]	; (800d65c <HAL_DMA_IRQHandler+0x1dc>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d018      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a4e      	ldr	r2, [pc, #312]	; (800d660 <HAL_DMA_IRQHandler+0x1e0>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d013      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a4d      	ldr	r2, [pc, #308]	; (800d664 <HAL_DMA_IRQHandler+0x1e4>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d00e      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a4b      	ldr	r2, [pc, #300]	; (800d668 <HAL_DMA_IRQHandler+0x1e8>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d009      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a4a      	ldr	r2, [pc, #296]	; (800d66c <HAL_DMA_IRQHandler+0x1ec>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d004      	beq.n	800d552 <HAL_DMA_IRQHandler+0xd2>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a48      	ldr	r2, [pc, #288]	; (800d670 <HAL_DMA_IRQHandler+0x1f0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d101      	bne.n	800d556 <HAL_DMA_IRQHandler+0xd6>
 800d552:	2301      	movs	r3, #1
 800d554:	e000      	b.n	800d558 <HAL_DMA_IRQHandler+0xd8>
 800d556:	2300      	movs	r3, #0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 842b 	beq.w	800ddb4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d562:	f003 031f 	and.w	r3, r3, #31
 800d566:	2208      	movs	r2, #8
 800d568:	409a      	lsls	r2, r3
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	4013      	ands	r3, r2
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 80a2 	beq.w	800d6b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a2e      	ldr	r2, [pc, #184]	; (800d634 <HAL_DMA_IRQHandler+0x1b4>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d04a      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4a2d      	ldr	r2, [pc, #180]	; (800d638 <HAL_DMA_IRQHandler+0x1b8>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d045      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a2b      	ldr	r2, [pc, #172]	; (800d63c <HAL_DMA_IRQHandler+0x1bc>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d040      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a2a      	ldr	r2, [pc, #168]	; (800d640 <HAL_DMA_IRQHandler+0x1c0>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d03b      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a28      	ldr	r2, [pc, #160]	; (800d644 <HAL_DMA_IRQHandler+0x1c4>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d036      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a27      	ldr	r2, [pc, #156]	; (800d648 <HAL_DMA_IRQHandler+0x1c8>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d031      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a25      	ldr	r2, [pc, #148]	; (800d64c <HAL_DMA_IRQHandler+0x1cc>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d02c      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a24      	ldr	r2, [pc, #144]	; (800d650 <HAL_DMA_IRQHandler+0x1d0>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d027      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a22      	ldr	r2, [pc, #136]	; (800d654 <HAL_DMA_IRQHandler+0x1d4>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d022      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a21      	ldr	r2, [pc, #132]	; (800d658 <HAL_DMA_IRQHandler+0x1d8>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d01d      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a1f      	ldr	r2, [pc, #124]	; (800d65c <HAL_DMA_IRQHandler+0x1dc>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d018      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a1e      	ldr	r2, [pc, #120]	; (800d660 <HAL_DMA_IRQHandler+0x1e0>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d013      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a1c      	ldr	r2, [pc, #112]	; (800d664 <HAL_DMA_IRQHandler+0x1e4>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d00e      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a1b      	ldr	r2, [pc, #108]	; (800d668 <HAL_DMA_IRQHandler+0x1e8>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d009      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a19      	ldr	r2, [pc, #100]	; (800d66c <HAL_DMA_IRQHandler+0x1ec>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d004      	beq.n	800d614 <HAL_DMA_IRQHandler+0x194>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a18      	ldr	r2, [pc, #96]	; (800d670 <HAL_DMA_IRQHandler+0x1f0>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d12f      	bne.n	800d674 <HAL_DMA_IRQHandler+0x1f4>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f003 0304 	and.w	r3, r3, #4
 800d61e:	2b00      	cmp	r3, #0
 800d620:	bf14      	ite	ne
 800d622:	2301      	movne	r3, #1
 800d624:	2300      	moveq	r3, #0
 800d626:	b2db      	uxtb	r3, r3
 800d628:	e02e      	b.n	800d688 <HAL_DMA_IRQHandler+0x208>
 800d62a:	bf00      	nop
 800d62c:	24008000 	.word	0x24008000
 800d630:	1b4e81b5 	.word	0x1b4e81b5
 800d634:	40020010 	.word	0x40020010
 800d638:	40020028 	.word	0x40020028
 800d63c:	40020040 	.word	0x40020040
 800d640:	40020058 	.word	0x40020058
 800d644:	40020070 	.word	0x40020070
 800d648:	40020088 	.word	0x40020088
 800d64c:	400200a0 	.word	0x400200a0
 800d650:	400200b8 	.word	0x400200b8
 800d654:	40020410 	.word	0x40020410
 800d658:	40020428 	.word	0x40020428
 800d65c:	40020440 	.word	0x40020440
 800d660:	40020458 	.word	0x40020458
 800d664:	40020470 	.word	0x40020470
 800d668:	40020488 	.word	0x40020488
 800d66c:	400204a0 	.word	0x400204a0
 800d670:	400204b8 	.word	0x400204b8
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 0308 	and.w	r3, r3, #8
 800d67e:	2b00      	cmp	r3, #0
 800d680:	bf14      	ite	ne
 800d682:	2301      	movne	r3, #1
 800d684:	2300      	moveq	r3, #0
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d015      	beq.n	800d6b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f022 0204 	bic.w	r2, r2, #4
 800d69a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6a0:	f003 031f 	and.w	r3, r3, #31
 800d6a4:	2208      	movs	r2, #8
 800d6a6:	409a      	lsls	r2, r3
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6b0:	f043 0201 	orr.w	r2, r3, #1
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6bc:	f003 031f 	and.w	r3, r3, #31
 800d6c0:	69ba      	ldr	r2, [r7, #24]
 800d6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d06e      	beq.n	800d7ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a69      	ldr	r2, [pc, #420]	; (800d878 <HAL_DMA_IRQHandler+0x3f8>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d04a      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a67      	ldr	r2, [pc, #412]	; (800d87c <HAL_DMA_IRQHandler+0x3fc>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d045      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a66      	ldr	r2, [pc, #408]	; (800d880 <HAL_DMA_IRQHandler+0x400>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d040      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a64      	ldr	r2, [pc, #400]	; (800d884 <HAL_DMA_IRQHandler+0x404>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d03b      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a63      	ldr	r2, [pc, #396]	; (800d888 <HAL_DMA_IRQHandler+0x408>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d036      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a61      	ldr	r2, [pc, #388]	; (800d88c <HAL_DMA_IRQHandler+0x40c>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d031      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a60      	ldr	r2, [pc, #384]	; (800d890 <HAL_DMA_IRQHandler+0x410>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d02c      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a5e      	ldr	r2, [pc, #376]	; (800d894 <HAL_DMA_IRQHandler+0x414>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d027      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4a5d      	ldr	r2, [pc, #372]	; (800d898 <HAL_DMA_IRQHandler+0x418>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d022      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a5b      	ldr	r2, [pc, #364]	; (800d89c <HAL_DMA_IRQHandler+0x41c>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d01d      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a5a      	ldr	r2, [pc, #360]	; (800d8a0 <HAL_DMA_IRQHandler+0x420>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d018      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a58      	ldr	r2, [pc, #352]	; (800d8a4 <HAL_DMA_IRQHandler+0x424>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d013      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a57      	ldr	r2, [pc, #348]	; (800d8a8 <HAL_DMA_IRQHandler+0x428>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d00e      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a55      	ldr	r2, [pc, #340]	; (800d8ac <HAL_DMA_IRQHandler+0x42c>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d009      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4a54      	ldr	r2, [pc, #336]	; (800d8b0 <HAL_DMA_IRQHandler+0x430>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d004      	beq.n	800d76e <HAL_DMA_IRQHandler+0x2ee>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a52      	ldr	r2, [pc, #328]	; (800d8b4 <HAL_DMA_IRQHandler+0x434>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d10a      	bne.n	800d784 <HAL_DMA_IRQHandler+0x304>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	695b      	ldr	r3, [r3, #20]
 800d774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d778:	2b00      	cmp	r3, #0
 800d77a:	bf14      	ite	ne
 800d77c:	2301      	movne	r3, #1
 800d77e:	2300      	moveq	r3, #0
 800d780:	b2db      	uxtb	r3, r3
 800d782:	e003      	b.n	800d78c <HAL_DMA_IRQHandler+0x30c>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2300      	movs	r3, #0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00d      	beq.n	800d7ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d794:	f003 031f 	and.w	r3, r3, #31
 800d798:	2201      	movs	r2, #1
 800d79a:	409a      	lsls	r2, r3
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7a4:	f043 0202 	orr.w	r2, r3, #2
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7b0:	f003 031f 	and.w	r3, r3, #31
 800d7b4:	2204      	movs	r2, #4
 800d7b6:	409a      	lsls	r2, r3
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f000 808f 	beq.w	800d8e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a2c      	ldr	r2, [pc, #176]	; (800d878 <HAL_DMA_IRQHandler+0x3f8>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d04a      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a2a      	ldr	r2, [pc, #168]	; (800d87c <HAL_DMA_IRQHandler+0x3fc>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d045      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a29      	ldr	r2, [pc, #164]	; (800d880 <HAL_DMA_IRQHandler+0x400>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d040      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a27      	ldr	r2, [pc, #156]	; (800d884 <HAL_DMA_IRQHandler+0x404>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d03b      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a26      	ldr	r2, [pc, #152]	; (800d888 <HAL_DMA_IRQHandler+0x408>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d036      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a24      	ldr	r2, [pc, #144]	; (800d88c <HAL_DMA_IRQHandler+0x40c>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d031      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a23      	ldr	r2, [pc, #140]	; (800d890 <HAL_DMA_IRQHandler+0x410>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d02c      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a21      	ldr	r2, [pc, #132]	; (800d894 <HAL_DMA_IRQHandler+0x414>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d027      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a20      	ldr	r2, [pc, #128]	; (800d898 <HAL_DMA_IRQHandler+0x418>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d022      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a1e      	ldr	r2, [pc, #120]	; (800d89c <HAL_DMA_IRQHandler+0x41c>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d01d      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a1d      	ldr	r2, [pc, #116]	; (800d8a0 <HAL_DMA_IRQHandler+0x420>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d018      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a1b      	ldr	r2, [pc, #108]	; (800d8a4 <HAL_DMA_IRQHandler+0x424>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d013      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a1a      	ldr	r2, [pc, #104]	; (800d8a8 <HAL_DMA_IRQHandler+0x428>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d00e      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a18      	ldr	r2, [pc, #96]	; (800d8ac <HAL_DMA_IRQHandler+0x42c>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d009      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a17      	ldr	r2, [pc, #92]	; (800d8b0 <HAL_DMA_IRQHandler+0x430>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d004      	beq.n	800d862 <HAL_DMA_IRQHandler+0x3e2>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a15      	ldr	r2, [pc, #84]	; (800d8b4 <HAL_DMA_IRQHandler+0x434>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d12a      	bne.n	800d8b8 <HAL_DMA_IRQHandler+0x438>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f003 0302 	and.w	r3, r3, #2
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	bf14      	ite	ne
 800d870:	2301      	movne	r3, #1
 800d872:	2300      	moveq	r3, #0
 800d874:	b2db      	uxtb	r3, r3
 800d876:	e023      	b.n	800d8c0 <HAL_DMA_IRQHandler+0x440>
 800d878:	40020010 	.word	0x40020010
 800d87c:	40020028 	.word	0x40020028
 800d880:	40020040 	.word	0x40020040
 800d884:	40020058 	.word	0x40020058
 800d888:	40020070 	.word	0x40020070
 800d88c:	40020088 	.word	0x40020088
 800d890:	400200a0 	.word	0x400200a0
 800d894:	400200b8 	.word	0x400200b8
 800d898:	40020410 	.word	0x40020410
 800d89c:	40020428 	.word	0x40020428
 800d8a0:	40020440 	.word	0x40020440
 800d8a4:	40020458 	.word	0x40020458
 800d8a8:	40020470 	.word	0x40020470
 800d8ac:	40020488 	.word	0x40020488
 800d8b0:	400204a0 	.word	0x400204a0
 800d8b4:	400204b8 	.word	0x400204b8
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00d      	beq.n	800d8e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8c8:	f003 031f 	and.w	r3, r3, #31
 800d8cc:	2204      	movs	r2, #4
 800d8ce:	409a      	lsls	r2, r3
 800d8d0:	6a3b      	ldr	r3, [r7, #32]
 800d8d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8d8:	f043 0204 	orr.w	r2, r3, #4
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8e4:	f003 031f 	and.w	r3, r3, #31
 800d8e8:	2210      	movs	r2, #16
 800d8ea:	409a      	lsls	r2, r3
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f000 80a6 	beq.w	800da42 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a85      	ldr	r2, [pc, #532]	; (800db10 <HAL_DMA_IRQHandler+0x690>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d04a      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a83      	ldr	r2, [pc, #524]	; (800db14 <HAL_DMA_IRQHandler+0x694>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d045      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a82      	ldr	r2, [pc, #520]	; (800db18 <HAL_DMA_IRQHandler+0x698>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d040      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a80      	ldr	r2, [pc, #512]	; (800db1c <HAL_DMA_IRQHandler+0x69c>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d03b      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a7f      	ldr	r2, [pc, #508]	; (800db20 <HAL_DMA_IRQHandler+0x6a0>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d036      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a7d      	ldr	r2, [pc, #500]	; (800db24 <HAL_DMA_IRQHandler+0x6a4>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d031      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a7c      	ldr	r2, [pc, #496]	; (800db28 <HAL_DMA_IRQHandler+0x6a8>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d02c      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a7a      	ldr	r2, [pc, #488]	; (800db2c <HAL_DMA_IRQHandler+0x6ac>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d027      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a79      	ldr	r2, [pc, #484]	; (800db30 <HAL_DMA_IRQHandler+0x6b0>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d022      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a77      	ldr	r2, [pc, #476]	; (800db34 <HAL_DMA_IRQHandler+0x6b4>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d01d      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a76      	ldr	r2, [pc, #472]	; (800db38 <HAL_DMA_IRQHandler+0x6b8>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d018      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a74      	ldr	r2, [pc, #464]	; (800db3c <HAL_DMA_IRQHandler+0x6bc>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d013      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a73      	ldr	r2, [pc, #460]	; (800db40 <HAL_DMA_IRQHandler+0x6c0>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d00e      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a71      	ldr	r2, [pc, #452]	; (800db44 <HAL_DMA_IRQHandler+0x6c4>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d009      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a70      	ldr	r2, [pc, #448]	; (800db48 <HAL_DMA_IRQHandler+0x6c8>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d004      	beq.n	800d996 <HAL_DMA_IRQHandler+0x516>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a6e      	ldr	r2, [pc, #440]	; (800db4c <HAL_DMA_IRQHandler+0x6cc>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d10a      	bne.n	800d9ac <HAL_DMA_IRQHandler+0x52c>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f003 0308 	and.w	r3, r3, #8
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	bf14      	ite	ne
 800d9a4:	2301      	movne	r3, #1
 800d9a6:	2300      	moveq	r3, #0
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	e009      	b.n	800d9c0 <HAL_DMA_IRQHandler+0x540>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f003 0304 	and.w	r3, r3, #4
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bf14      	ite	ne
 800d9ba:	2301      	movne	r3, #1
 800d9bc:	2300      	moveq	r3, #0
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d03e      	beq.n	800da42 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9c8:	f003 031f 	and.w	r3, r3, #31
 800d9cc:	2210      	movs	r2, #16
 800d9ce:	409a      	lsls	r2, r3
 800d9d0:	6a3b      	ldr	r3, [r7, #32]
 800d9d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d018      	beq.n	800da14 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d108      	bne.n	800da02 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d024      	beq.n	800da42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	4798      	blx	r3
 800da00:	e01f      	b.n	800da42 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da06:	2b00      	cmp	r3, #0
 800da08:	d01b      	beq.n	800da42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	4798      	blx	r3
 800da12:	e016      	b.n	800da42 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d107      	bne.n	800da32 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f022 0208 	bic.w	r2, r2, #8
 800da30:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da36:	2b00      	cmp	r3, #0
 800da38:	d003      	beq.n	800da42 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da46:	f003 031f 	and.w	r3, r3, #31
 800da4a:	2220      	movs	r2, #32
 800da4c:	409a      	lsls	r2, r3
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	4013      	ands	r3, r2
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 8110 	beq.w	800dc78 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a2c      	ldr	r2, [pc, #176]	; (800db10 <HAL_DMA_IRQHandler+0x690>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d04a      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a2b      	ldr	r2, [pc, #172]	; (800db14 <HAL_DMA_IRQHandler+0x694>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d045      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a29      	ldr	r2, [pc, #164]	; (800db18 <HAL_DMA_IRQHandler+0x698>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d040      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a28      	ldr	r2, [pc, #160]	; (800db1c <HAL_DMA_IRQHandler+0x69c>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d03b      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a26      	ldr	r2, [pc, #152]	; (800db20 <HAL_DMA_IRQHandler+0x6a0>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d036      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a25      	ldr	r2, [pc, #148]	; (800db24 <HAL_DMA_IRQHandler+0x6a4>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d031      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a23      	ldr	r2, [pc, #140]	; (800db28 <HAL_DMA_IRQHandler+0x6a8>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d02c      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a22      	ldr	r2, [pc, #136]	; (800db2c <HAL_DMA_IRQHandler+0x6ac>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d027      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a20      	ldr	r2, [pc, #128]	; (800db30 <HAL_DMA_IRQHandler+0x6b0>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d022      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a1f      	ldr	r2, [pc, #124]	; (800db34 <HAL_DMA_IRQHandler+0x6b4>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d01d      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a1d      	ldr	r2, [pc, #116]	; (800db38 <HAL_DMA_IRQHandler+0x6b8>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d018      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a1c      	ldr	r2, [pc, #112]	; (800db3c <HAL_DMA_IRQHandler+0x6bc>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d013      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a1a      	ldr	r2, [pc, #104]	; (800db40 <HAL_DMA_IRQHandler+0x6c0>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d00e      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a19      	ldr	r2, [pc, #100]	; (800db44 <HAL_DMA_IRQHandler+0x6c4>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d009      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a17      	ldr	r2, [pc, #92]	; (800db48 <HAL_DMA_IRQHandler+0x6c8>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d004      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x678>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a16      	ldr	r2, [pc, #88]	; (800db4c <HAL_DMA_IRQHandler+0x6cc>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d12b      	bne.n	800db50 <HAL_DMA_IRQHandler+0x6d0>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f003 0310 	and.w	r3, r3, #16
 800db02:	2b00      	cmp	r3, #0
 800db04:	bf14      	ite	ne
 800db06:	2301      	movne	r3, #1
 800db08:	2300      	moveq	r3, #0
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	e02a      	b.n	800db64 <HAL_DMA_IRQHandler+0x6e4>
 800db0e:	bf00      	nop
 800db10:	40020010 	.word	0x40020010
 800db14:	40020028 	.word	0x40020028
 800db18:	40020040 	.word	0x40020040
 800db1c:	40020058 	.word	0x40020058
 800db20:	40020070 	.word	0x40020070
 800db24:	40020088 	.word	0x40020088
 800db28:	400200a0 	.word	0x400200a0
 800db2c:	400200b8 	.word	0x400200b8
 800db30:	40020410 	.word	0x40020410
 800db34:	40020428 	.word	0x40020428
 800db38:	40020440 	.word	0x40020440
 800db3c:	40020458 	.word	0x40020458
 800db40:	40020470 	.word	0x40020470
 800db44:	40020488 	.word	0x40020488
 800db48:	400204a0 	.word	0x400204a0
 800db4c:	400204b8 	.word	0x400204b8
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f003 0302 	and.w	r3, r3, #2
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	bf14      	ite	ne
 800db5e:	2301      	movne	r3, #1
 800db60:	2300      	moveq	r3, #0
 800db62:	b2db      	uxtb	r3, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	f000 8087 	beq.w	800dc78 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db6e:	f003 031f 	and.w	r3, r3, #31
 800db72:	2220      	movs	r2, #32
 800db74:	409a      	lsls	r2, r3
 800db76:	6a3b      	ldr	r3, [r7, #32]
 800db78:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b04      	cmp	r3, #4
 800db84:	d139      	bne.n	800dbfa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f022 0216 	bic.w	r2, r2, #22
 800db94:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	695a      	ldr	r2, [r3, #20]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dba4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d103      	bne.n	800dbb6 <HAL_DMA_IRQHandler+0x736>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d007      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f022 0208 	bic.w	r2, r2, #8
 800dbc4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbca:	f003 031f 	and.w	r3, r3, #31
 800dbce:	223f      	movs	r2, #63	; 0x3f
 800dbd0:	409a      	lsls	r2, r3
 800dbd2:	6a3b      	ldr	r3, [r7, #32]
 800dbd4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 834a 	beq.w	800e284 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	4798      	blx	r3
          }
          return;
 800dbf8:	e344      	b.n	800e284 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d018      	beq.n	800dc3a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d108      	bne.n	800dc28 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d02c      	beq.n	800dc78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	4798      	blx	r3
 800dc26:	e027      	b.n	800dc78 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d023      	beq.n	800dc78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	4798      	blx	r3
 800dc38:	e01e      	b.n	800dc78 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10f      	bne.n	800dc68 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f022 0210 	bic.w	r2, r2, #16
 800dc56:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d003      	beq.n	800dc78 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	f000 8306 	beq.w	800e28e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 8088 	beq.w	800dda0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2204      	movs	r2, #4
 800dc94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a7a      	ldr	r2, [pc, #488]	; (800de88 <HAL_DMA_IRQHandler+0xa08>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d04a      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a79      	ldr	r2, [pc, #484]	; (800de8c <HAL_DMA_IRQHandler+0xa0c>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d045      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a77      	ldr	r2, [pc, #476]	; (800de90 <HAL_DMA_IRQHandler+0xa10>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d040      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a76      	ldr	r2, [pc, #472]	; (800de94 <HAL_DMA_IRQHandler+0xa14>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d03b      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a74      	ldr	r2, [pc, #464]	; (800de98 <HAL_DMA_IRQHandler+0xa18>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d036      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a73      	ldr	r2, [pc, #460]	; (800de9c <HAL_DMA_IRQHandler+0xa1c>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d031      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a71      	ldr	r2, [pc, #452]	; (800dea0 <HAL_DMA_IRQHandler+0xa20>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d02c      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a70      	ldr	r2, [pc, #448]	; (800dea4 <HAL_DMA_IRQHandler+0xa24>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d027      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a6e      	ldr	r2, [pc, #440]	; (800dea8 <HAL_DMA_IRQHandler+0xa28>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d022      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4a6d      	ldr	r2, [pc, #436]	; (800deac <HAL_DMA_IRQHandler+0xa2c>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d01d      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a6b      	ldr	r2, [pc, #428]	; (800deb0 <HAL_DMA_IRQHandler+0xa30>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d018      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a6a      	ldr	r2, [pc, #424]	; (800deb4 <HAL_DMA_IRQHandler+0xa34>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d013      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a68      	ldr	r2, [pc, #416]	; (800deb8 <HAL_DMA_IRQHandler+0xa38>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d00e      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a67      	ldr	r2, [pc, #412]	; (800debc <HAL_DMA_IRQHandler+0xa3c>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d009      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a65      	ldr	r2, [pc, #404]	; (800dec0 <HAL_DMA_IRQHandler+0xa40>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d004      	beq.n	800dd38 <HAL_DMA_IRQHandler+0x8b8>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a64      	ldr	r2, [pc, #400]	; (800dec4 <HAL_DMA_IRQHandler+0xa44>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d108      	bne.n	800dd4a <HAL_DMA_IRQHandler+0x8ca>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f022 0201 	bic.w	r2, r2, #1
 800dd46:	601a      	str	r2, [r3, #0]
 800dd48:	e007      	b.n	800dd5a <HAL_DMA_IRQHandler+0x8da>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f022 0201 	bic.w	r2, r2, #1
 800dd58:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d307      	bcc.n	800dd76 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 0301 	and.w	r3, r3, #1
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1f2      	bne.n	800dd5a <HAL_DMA_IRQHandler+0x8da>
 800dd74:	e000      	b.n	800dd78 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800dd76:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d004      	beq.n	800dd98 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2203      	movs	r2, #3
 800dd92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800dd96:	e003      	b.n	800dda0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 8272 	beq.w	800e28e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	4798      	blx	r3
 800ddb2:	e26c      	b.n	800e28e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a43      	ldr	r2, [pc, #268]	; (800dec8 <HAL_DMA_IRQHandler+0xa48>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d022      	beq.n	800de04 <HAL_DMA_IRQHandler+0x984>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a42      	ldr	r2, [pc, #264]	; (800decc <HAL_DMA_IRQHandler+0xa4c>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d01d      	beq.n	800de04 <HAL_DMA_IRQHandler+0x984>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a40      	ldr	r2, [pc, #256]	; (800ded0 <HAL_DMA_IRQHandler+0xa50>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d018      	beq.n	800de04 <HAL_DMA_IRQHandler+0x984>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a3f      	ldr	r2, [pc, #252]	; (800ded4 <HAL_DMA_IRQHandler+0xa54>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d013      	beq.n	800de04 <HAL_DMA_IRQHandler+0x984>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a3d      	ldr	r2, [pc, #244]	; (800ded8 <HAL_DMA_IRQHandler+0xa58>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d00e      	beq.n	800de04 <HAL_DMA_IRQHandler+0x984>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a3c      	ldr	r2, [pc, #240]	; (800dedc <HAL_DMA_IRQHandler+0xa5c>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d009      	beq.n	800de04 <HAL_DMA_IRQHandler+0x984>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a3a      	ldr	r2, [pc, #232]	; (800dee0 <HAL_DMA_IRQHandler+0xa60>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d004      	beq.n	800de04 <HAL_DMA_IRQHandler+0x984>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a39      	ldr	r2, [pc, #228]	; (800dee4 <HAL_DMA_IRQHandler+0xa64>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d101      	bne.n	800de08 <HAL_DMA_IRQHandler+0x988>
 800de04:	2301      	movs	r3, #1
 800de06:	e000      	b.n	800de0a <HAL_DMA_IRQHandler+0x98a>
 800de08:	2300      	movs	r3, #0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f000 823f 	beq.w	800e28e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de1c:	f003 031f 	and.w	r3, r3, #31
 800de20:	2204      	movs	r2, #4
 800de22:	409a      	lsls	r2, r3
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	4013      	ands	r3, r2
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f000 80cd 	beq.w	800dfc8 <HAL_DMA_IRQHandler+0xb48>
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	f003 0304 	and.w	r3, r3, #4
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 80c7 	beq.w	800dfc8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de3e:	f003 031f 	and.w	r3, r3, #31
 800de42:	2204      	movs	r2, #4
 800de44:	409a      	lsls	r2, r3
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de50:	2b00      	cmp	r3, #0
 800de52:	d049      	beq.n	800dee8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d109      	bne.n	800de72 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de62:	2b00      	cmp	r3, #0
 800de64:	f000 8210 	beq.w	800e288 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800de70:	e20a      	b.n	800e288 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de76:	2b00      	cmp	r3, #0
 800de78:	f000 8206 	beq.w	800e288 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800de84:	e200      	b.n	800e288 <HAL_DMA_IRQHandler+0xe08>
 800de86:	bf00      	nop
 800de88:	40020010 	.word	0x40020010
 800de8c:	40020028 	.word	0x40020028
 800de90:	40020040 	.word	0x40020040
 800de94:	40020058 	.word	0x40020058
 800de98:	40020070 	.word	0x40020070
 800de9c:	40020088 	.word	0x40020088
 800dea0:	400200a0 	.word	0x400200a0
 800dea4:	400200b8 	.word	0x400200b8
 800dea8:	40020410 	.word	0x40020410
 800deac:	40020428 	.word	0x40020428
 800deb0:	40020440 	.word	0x40020440
 800deb4:	40020458 	.word	0x40020458
 800deb8:	40020470 	.word	0x40020470
 800debc:	40020488 	.word	0x40020488
 800dec0:	400204a0 	.word	0x400204a0
 800dec4:	400204b8 	.word	0x400204b8
 800dec8:	58025408 	.word	0x58025408
 800decc:	5802541c 	.word	0x5802541c
 800ded0:	58025430 	.word	0x58025430
 800ded4:	58025444 	.word	0x58025444
 800ded8:	58025458 	.word	0x58025458
 800dedc:	5802546c 	.word	0x5802546c
 800dee0:	58025480 	.word	0x58025480
 800dee4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	f003 0320 	and.w	r3, r3, #32
 800deee:	2b00      	cmp	r3, #0
 800def0:	d160      	bne.n	800dfb4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a7f      	ldr	r2, [pc, #508]	; (800e0f4 <HAL_DMA_IRQHandler+0xc74>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d04a      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a7d      	ldr	r2, [pc, #500]	; (800e0f8 <HAL_DMA_IRQHandler+0xc78>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d045      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a7c      	ldr	r2, [pc, #496]	; (800e0fc <HAL_DMA_IRQHandler+0xc7c>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d040      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a7a      	ldr	r2, [pc, #488]	; (800e100 <HAL_DMA_IRQHandler+0xc80>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d03b      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4a79      	ldr	r2, [pc, #484]	; (800e104 <HAL_DMA_IRQHandler+0xc84>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d036      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a77      	ldr	r2, [pc, #476]	; (800e108 <HAL_DMA_IRQHandler+0xc88>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d031      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a76      	ldr	r2, [pc, #472]	; (800e10c <HAL_DMA_IRQHandler+0xc8c>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d02c      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a74      	ldr	r2, [pc, #464]	; (800e110 <HAL_DMA_IRQHandler+0xc90>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d027      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a73      	ldr	r2, [pc, #460]	; (800e114 <HAL_DMA_IRQHandler+0xc94>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d022      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a71      	ldr	r2, [pc, #452]	; (800e118 <HAL_DMA_IRQHandler+0xc98>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d01d      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a70      	ldr	r2, [pc, #448]	; (800e11c <HAL_DMA_IRQHandler+0xc9c>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d018      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a6e      	ldr	r2, [pc, #440]	; (800e120 <HAL_DMA_IRQHandler+0xca0>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d013      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a6d      	ldr	r2, [pc, #436]	; (800e124 <HAL_DMA_IRQHandler+0xca4>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d00e      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a6b      	ldr	r2, [pc, #428]	; (800e128 <HAL_DMA_IRQHandler+0xca8>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d009      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a6a      	ldr	r2, [pc, #424]	; (800e12c <HAL_DMA_IRQHandler+0xcac>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d004      	beq.n	800df92 <HAL_DMA_IRQHandler+0xb12>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a68      	ldr	r2, [pc, #416]	; (800e130 <HAL_DMA_IRQHandler+0xcb0>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d108      	bne.n	800dfa4 <HAL_DMA_IRQHandler+0xb24>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f022 0208 	bic.w	r2, r2, #8
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	e007      	b.n	800dfb4 <HAL_DMA_IRQHandler+0xb34>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f022 0204 	bic.w	r2, r2, #4
 800dfb2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 8165 	beq.w	800e288 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dfc6:	e15f      	b.n	800e288 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfcc:	f003 031f 	and.w	r3, r3, #31
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	409a      	lsls	r2, r3
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f000 80c5 	beq.w	800e168 <HAL_DMA_IRQHandler+0xce8>
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	f003 0302 	and.w	r3, r3, #2
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 80bf 	beq.w	800e168 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfee:	f003 031f 	and.w	r3, r3, #31
 800dff2:	2202      	movs	r2, #2
 800dff4:	409a      	lsls	r2, r3
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e000:	2b00      	cmp	r3, #0
 800e002:	d018      	beq.n	800e036 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d109      	bne.n	800e022 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 813a 	beq.w	800e28c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e020:	e134      	b.n	800e28c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 8130 	beq.w	800e28c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e034:	e12a      	b.n	800e28c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	f003 0320 	and.w	r3, r3, #32
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f040 8089 	bne.w	800e154 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a2b      	ldr	r2, [pc, #172]	; (800e0f4 <HAL_DMA_IRQHandler+0xc74>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d04a      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a29      	ldr	r2, [pc, #164]	; (800e0f8 <HAL_DMA_IRQHandler+0xc78>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d045      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a28      	ldr	r2, [pc, #160]	; (800e0fc <HAL_DMA_IRQHandler+0xc7c>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d040      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a26      	ldr	r2, [pc, #152]	; (800e100 <HAL_DMA_IRQHandler+0xc80>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d03b      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a25      	ldr	r2, [pc, #148]	; (800e104 <HAL_DMA_IRQHandler+0xc84>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d036      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a23      	ldr	r2, [pc, #140]	; (800e108 <HAL_DMA_IRQHandler+0xc88>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d031      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a22      	ldr	r2, [pc, #136]	; (800e10c <HAL_DMA_IRQHandler+0xc8c>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d02c      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a20      	ldr	r2, [pc, #128]	; (800e110 <HAL_DMA_IRQHandler+0xc90>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d027      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a1f      	ldr	r2, [pc, #124]	; (800e114 <HAL_DMA_IRQHandler+0xc94>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d022      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a1d      	ldr	r2, [pc, #116]	; (800e118 <HAL_DMA_IRQHandler+0xc98>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d01d      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a1c      	ldr	r2, [pc, #112]	; (800e11c <HAL_DMA_IRQHandler+0xc9c>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d018      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a1a      	ldr	r2, [pc, #104]	; (800e120 <HAL_DMA_IRQHandler+0xca0>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d013      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a19      	ldr	r2, [pc, #100]	; (800e124 <HAL_DMA_IRQHandler+0xca4>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d00e      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a17      	ldr	r2, [pc, #92]	; (800e128 <HAL_DMA_IRQHandler+0xca8>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d009      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4a16      	ldr	r2, [pc, #88]	; (800e12c <HAL_DMA_IRQHandler+0xcac>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d004      	beq.n	800e0e2 <HAL_DMA_IRQHandler+0xc62>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a14      	ldr	r2, [pc, #80]	; (800e130 <HAL_DMA_IRQHandler+0xcb0>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d128      	bne.n	800e134 <HAL_DMA_IRQHandler+0xcb4>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f022 0214 	bic.w	r2, r2, #20
 800e0f0:	601a      	str	r2, [r3, #0]
 800e0f2:	e027      	b.n	800e144 <HAL_DMA_IRQHandler+0xcc4>
 800e0f4:	40020010 	.word	0x40020010
 800e0f8:	40020028 	.word	0x40020028
 800e0fc:	40020040 	.word	0x40020040
 800e100:	40020058 	.word	0x40020058
 800e104:	40020070 	.word	0x40020070
 800e108:	40020088 	.word	0x40020088
 800e10c:	400200a0 	.word	0x400200a0
 800e110:	400200b8 	.word	0x400200b8
 800e114:	40020410 	.word	0x40020410
 800e118:	40020428 	.word	0x40020428
 800e11c:	40020440 	.word	0x40020440
 800e120:	40020458 	.word	0x40020458
 800e124:	40020470 	.word	0x40020470
 800e128:	40020488 	.word	0x40020488
 800e12c:	400204a0 	.word	0x400204a0
 800e130:	400204b8 	.word	0x400204b8
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f022 020a 	bic.w	r2, r2, #10
 800e142:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f000 8097 	beq.w	800e28c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e166:	e091      	b.n	800e28c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e16c:	f003 031f 	and.w	r3, r3, #31
 800e170:	2208      	movs	r2, #8
 800e172:	409a      	lsls	r2, r3
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	4013      	ands	r3, r2
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f000 8088 	beq.w	800e28e <HAL_DMA_IRQHandler+0xe0e>
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	f003 0308 	and.w	r3, r3, #8
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 8082 	beq.w	800e28e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4a41      	ldr	r2, [pc, #260]	; (800e294 <HAL_DMA_IRQHandler+0xe14>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d04a      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a3f      	ldr	r2, [pc, #252]	; (800e298 <HAL_DMA_IRQHandler+0xe18>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d045      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4a3e      	ldr	r2, [pc, #248]	; (800e29c <HAL_DMA_IRQHandler+0xe1c>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d040      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a3c      	ldr	r2, [pc, #240]	; (800e2a0 <HAL_DMA_IRQHandler+0xe20>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d03b      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4a3b      	ldr	r2, [pc, #236]	; (800e2a4 <HAL_DMA_IRQHandler+0xe24>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d036      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a39      	ldr	r2, [pc, #228]	; (800e2a8 <HAL_DMA_IRQHandler+0xe28>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d031      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a38      	ldr	r2, [pc, #224]	; (800e2ac <HAL_DMA_IRQHandler+0xe2c>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d02c      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a36      	ldr	r2, [pc, #216]	; (800e2b0 <HAL_DMA_IRQHandler+0xe30>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d027      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	4a35      	ldr	r2, [pc, #212]	; (800e2b4 <HAL_DMA_IRQHandler+0xe34>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d022      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a33      	ldr	r2, [pc, #204]	; (800e2b8 <HAL_DMA_IRQHandler+0xe38>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d01d      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4a32      	ldr	r2, [pc, #200]	; (800e2bc <HAL_DMA_IRQHandler+0xe3c>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d018      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a30      	ldr	r2, [pc, #192]	; (800e2c0 <HAL_DMA_IRQHandler+0xe40>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d013      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a2f      	ldr	r2, [pc, #188]	; (800e2c4 <HAL_DMA_IRQHandler+0xe44>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d00e      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a2d      	ldr	r2, [pc, #180]	; (800e2c8 <HAL_DMA_IRQHandler+0xe48>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d009      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a2c      	ldr	r2, [pc, #176]	; (800e2cc <HAL_DMA_IRQHandler+0xe4c>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d004      	beq.n	800e22a <HAL_DMA_IRQHandler+0xdaa>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a2a      	ldr	r2, [pc, #168]	; (800e2d0 <HAL_DMA_IRQHandler+0xe50>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d108      	bne.n	800e23c <HAL_DMA_IRQHandler+0xdbc>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f022 021c 	bic.w	r2, r2, #28
 800e238:	601a      	str	r2, [r3, #0]
 800e23a:	e007      	b.n	800e24c <HAL_DMA_IRQHandler+0xdcc>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f022 020e 	bic.w	r2, r2, #14
 800e24a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e250:	f003 031f 	and.w	r3, r3, #31
 800e254:	2201      	movs	r2, #1
 800e256:	409a      	lsls	r2, r3
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2201      	movs	r2, #1
 800e26e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e276:	2b00      	cmp	r3, #0
 800e278:	d009      	beq.n	800e28e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	4798      	blx	r3
 800e282:	e004      	b.n	800e28e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800e284:	bf00      	nop
 800e286:	e002      	b.n	800e28e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e288:	bf00      	nop
 800e28a:	e000      	b.n	800e28e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e28c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e28e:	3728      	adds	r7, #40	; 0x28
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	40020010 	.word	0x40020010
 800e298:	40020028 	.word	0x40020028
 800e29c:	40020040 	.word	0x40020040
 800e2a0:	40020058 	.word	0x40020058
 800e2a4:	40020070 	.word	0x40020070
 800e2a8:	40020088 	.word	0x40020088
 800e2ac:	400200a0 	.word	0x400200a0
 800e2b0:	400200b8 	.word	0x400200b8
 800e2b4:	40020410 	.word	0x40020410
 800e2b8:	40020428 	.word	0x40020428
 800e2bc:	40020440 	.word	0x40020440
 800e2c0:	40020458 	.word	0x40020458
 800e2c4:	40020470 	.word	0x40020470
 800e2c8:	40020488 	.word	0x40020488
 800e2cc:	400204a0 	.word	0x400204a0
 800e2d0:	400204b8 	.word	0x400204b8

0800e2d4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b087      	sub	sp, #28
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e304:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a7f      	ldr	r2, [pc, #508]	; (800e508 <DMA_SetConfig+0x21c>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d072      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a7d      	ldr	r2, [pc, #500]	; (800e50c <DMA_SetConfig+0x220>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d06d      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a7c      	ldr	r2, [pc, #496]	; (800e510 <DMA_SetConfig+0x224>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d068      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a7a      	ldr	r2, [pc, #488]	; (800e514 <DMA_SetConfig+0x228>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d063      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a79      	ldr	r2, [pc, #484]	; (800e518 <DMA_SetConfig+0x22c>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d05e      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a77      	ldr	r2, [pc, #476]	; (800e51c <DMA_SetConfig+0x230>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d059      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a76      	ldr	r2, [pc, #472]	; (800e520 <DMA_SetConfig+0x234>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d054      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a74      	ldr	r2, [pc, #464]	; (800e524 <DMA_SetConfig+0x238>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d04f      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a73      	ldr	r2, [pc, #460]	; (800e528 <DMA_SetConfig+0x23c>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d04a      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a71      	ldr	r2, [pc, #452]	; (800e52c <DMA_SetConfig+0x240>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d045      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a70      	ldr	r2, [pc, #448]	; (800e530 <DMA_SetConfig+0x244>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d040      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a6e      	ldr	r2, [pc, #440]	; (800e534 <DMA_SetConfig+0x248>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d03b      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a6d      	ldr	r2, [pc, #436]	; (800e538 <DMA_SetConfig+0x24c>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d036      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a6b      	ldr	r2, [pc, #428]	; (800e53c <DMA_SetConfig+0x250>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d031      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a6a      	ldr	r2, [pc, #424]	; (800e540 <DMA_SetConfig+0x254>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d02c      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a68      	ldr	r2, [pc, #416]	; (800e544 <DMA_SetConfig+0x258>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d027      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a67      	ldr	r2, [pc, #412]	; (800e548 <DMA_SetConfig+0x25c>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d022      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a65      	ldr	r2, [pc, #404]	; (800e54c <DMA_SetConfig+0x260>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d01d      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a64      	ldr	r2, [pc, #400]	; (800e550 <DMA_SetConfig+0x264>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d018      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a62      	ldr	r2, [pc, #392]	; (800e554 <DMA_SetConfig+0x268>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d013      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a61      	ldr	r2, [pc, #388]	; (800e558 <DMA_SetConfig+0x26c>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d00e      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a5f      	ldr	r2, [pc, #380]	; (800e55c <DMA_SetConfig+0x270>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d009      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a5e      	ldr	r2, [pc, #376]	; (800e560 <DMA_SetConfig+0x274>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d004      	beq.n	800e3f6 <DMA_SetConfig+0x10a>
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a5c      	ldr	r2, [pc, #368]	; (800e564 <DMA_SetConfig+0x278>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d101      	bne.n	800e3fa <DMA_SetConfig+0x10e>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e000      	b.n	800e3fc <DMA_SetConfig+0x110>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00d      	beq.n	800e41c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e408:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d004      	beq.n	800e41c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e41a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a39      	ldr	r2, [pc, #228]	; (800e508 <DMA_SetConfig+0x21c>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d04a      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a38      	ldr	r2, [pc, #224]	; (800e50c <DMA_SetConfig+0x220>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d045      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a36      	ldr	r2, [pc, #216]	; (800e510 <DMA_SetConfig+0x224>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d040      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4a35      	ldr	r2, [pc, #212]	; (800e514 <DMA_SetConfig+0x228>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d03b      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a33      	ldr	r2, [pc, #204]	; (800e518 <DMA_SetConfig+0x22c>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d036      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a32      	ldr	r2, [pc, #200]	; (800e51c <DMA_SetConfig+0x230>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d031      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a30      	ldr	r2, [pc, #192]	; (800e520 <DMA_SetConfig+0x234>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d02c      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a2f      	ldr	r2, [pc, #188]	; (800e524 <DMA_SetConfig+0x238>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d027      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a2d      	ldr	r2, [pc, #180]	; (800e528 <DMA_SetConfig+0x23c>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d022      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a2c      	ldr	r2, [pc, #176]	; (800e52c <DMA_SetConfig+0x240>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d01d      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a2a      	ldr	r2, [pc, #168]	; (800e530 <DMA_SetConfig+0x244>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d018      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a29      	ldr	r2, [pc, #164]	; (800e534 <DMA_SetConfig+0x248>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d013      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a27      	ldr	r2, [pc, #156]	; (800e538 <DMA_SetConfig+0x24c>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d00e      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a26      	ldr	r2, [pc, #152]	; (800e53c <DMA_SetConfig+0x250>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d009      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a24      	ldr	r2, [pc, #144]	; (800e540 <DMA_SetConfig+0x254>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d004      	beq.n	800e4bc <DMA_SetConfig+0x1d0>
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a23      	ldr	r2, [pc, #140]	; (800e544 <DMA_SetConfig+0x258>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d101      	bne.n	800e4c0 <DMA_SetConfig+0x1d4>
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e000      	b.n	800e4c2 <DMA_SetConfig+0x1d6>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d059      	beq.n	800e57a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ca:	f003 031f 	and.w	r3, r3, #31
 800e4ce:	223f      	movs	r2, #63	; 0x3f
 800e4d0:	409a      	lsls	r2, r3
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e4e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	2b40      	cmp	r3, #64	; 0x40
 800e4f4:	d138      	bne.n	800e568 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	68ba      	ldr	r2, [r7, #8]
 800e504:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e506:	e086      	b.n	800e616 <DMA_SetConfig+0x32a>
 800e508:	40020010 	.word	0x40020010
 800e50c:	40020028 	.word	0x40020028
 800e510:	40020040 	.word	0x40020040
 800e514:	40020058 	.word	0x40020058
 800e518:	40020070 	.word	0x40020070
 800e51c:	40020088 	.word	0x40020088
 800e520:	400200a0 	.word	0x400200a0
 800e524:	400200b8 	.word	0x400200b8
 800e528:	40020410 	.word	0x40020410
 800e52c:	40020428 	.word	0x40020428
 800e530:	40020440 	.word	0x40020440
 800e534:	40020458 	.word	0x40020458
 800e538:	40020470 	.word	0x40020470
 800e53c:	40020488 	.word	0x40020488
 800e540:	400204a0 	.word	0x400204a0
 800e544:	400204b8 	.word	0x400204b8
 800e548:	58025408 	.word	0x58025408
 800e54c:	5802541c 	.word	0x5802541c
 800e550:	58025430 	.word	0x58025430
 800e554:	58025444 	.word	0x58025444
 800e558:	58025458 	.word	0x58025458
 800e55c:	5802546c 	.word	0x5802546c
 800e560:	58025480 	.word	0x58025480
 800e564:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	60da      	str	r2, [r3, #12]
}
 800e578:	e04d      	b.n	800e616 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4a29      	ldr	r2, [pc, #164]	; (800e624 <DMA_SetConfig+0x338>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d022      	beq.n	800e5ca <DMA_SetConfig+0x2de>
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a27      	ldr	r2, [pc, #156]	; (800e628 <DMA_SetConfig+0x33c>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d01d      	beq.n	800e5ca <DMA_SetConfig+0x2de>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a26      	ldr	r2, [pc, #152]	; (800e62c <DMA_SetConfig+0x340>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d018      	beq.n	800e5ca <DMA_SetConfig+0x2de>
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a24      	ldr	r2, [pc, #144]	; (800e630 <DMA_SetConfig+0x344>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d013      	beq.n	800e5ca <DMA_SetConfig+0x2de>
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a23      	ldr	r2, [pc, #140]	; (800e634 <DMA_SetConfig+0x348>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d00e      	beq.n	800e5ca <DMA_SetConfig+0x2de>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a21      	ldr	r2, [pc, #132]	; (800e638 <DMA_SetConfig+0x34c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d009      	beq.n	800e5ca <DMA_SetConfig+0x2de>
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a20      	ldr	r2, [pc, #128]	; (800e63c <DMA_SetConfig+0x350>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d004      	beq.n	800e5ca <DMA_SetConfig+0x2de>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a1e      	ldr	r2, [pc, #120]	; (800e640 <DMA_SetConfig+0x354>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d101      	bne.n	800e5ce <DMA_SetConfig+0x2e2>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e000      	b.n	800e5d0 <DMA_SetConfig+0x2e4>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d020      	beq.n	800e616 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5d8:	f003 031f 	and.w	r3, r3, #31
 800e5dc:	2201      	movs	r2, #1
 800e5de:	409a      	lsls	r2, r3
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	2b40      	cmp	r3, #64	; 0x40
 800e5f2:	d108      	bne.n	800e606 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68ba      	ldr	r2, [r7, #8]
 800e602:	60da      	str	r2, [r3, #12]
}
 800e604:	e007      	b.n	800e616 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	60da      	str	r2, [r3, #12]
}
 800e616:	bf00      	nop
 800e618:	371c      	adds	r7, #28
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	58025408 	.word	0x58025408
 800e628:	5802541c 	.word	0x5802541c
 800e62c:	58025430 	.word	0x58025430
 800e630:	58025444 	.word	0x58025444
 800e634:	58025458 	.word	0x58025458
 800e638:	5802546c 	.word	0x5802546c
 800e63c:	58025480 	.word	0x58025480
 800e640:	58025494 	.word	0x58025494

0800e644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a42      	ldr	r2, [pc, #264]	; (800e75c <DMA_CalcBaseAndBitshift+0x118>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d04a      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a41      	ldr	r2, [pc, #260]	; (800e760 <DMA_CalcBaseAndBitshift+0x11c>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d045      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a3f      	ldr	r2, [pc, #252]	; (800e764 <DMA_CalcBaseAndBitshift+0x120>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d040      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a3e      	ldr	r2, [pc, #248]	; (800e768 <DMA_CalcBaseAndBitshift+0x124>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d03b      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a3c      	ldr	r2, [pc, #240]	; (800e76c <DMA_CalcBaseAndBitshift+0x128>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d036      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a3b      	ldr	r2, [pc, #236]	; (800e770 <DMA_CalcBaseAndBitshift+0x12c>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d031      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a39      	ldr	r2, [pc, #228]	; (800e774 <DMA_CalcBaseAndBitshift+0x130>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d02c      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a38      	ldr	r2, [pc, #224]	; (800e778 <DMA_CalcBaseAndBitshift+0x134>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d027      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a36      	ldr	r2, [pc, #216]	; (800e77c <DMA_CalcBaseAndBitshift+0x138>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d022      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a35      	ldr	r2, [pc, #212]	; (800e780 <DMA_CalcBaseAndBitshift+0x13c>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d01d      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a33      	ldr	r2, [pc, #204]	; (800e784 <DMA_CalcBaseAndBitshift+0x140>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d018      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4a32      	ldr	r2, [pc, #200]	; (800e788 <DMA_CalcBaseAndBitshift+0x144>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d013      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a30      	ldr	r2, [pc, #192]	; (800e78c <DMA_CalcBaseAndBitshift+0x148>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d00e      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4a2f      	ldr	r2, [pc, #188]	; (800e790 <DMA_CalcBaseAndBitshift+0x14c>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d009      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a2d      	ldr	r2, [pc, #180]	; (800e794 <DMA_CalcBaseAndBitshift+0x150>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d004      	beq.n	800e6ec <DMA_CalcBaseAndBitshift+0xa8>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4a2c      	ldr	r2, [pc, #176]	; (800e798 <DMA_CalcBaseAndBitshift+0x154>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d101      	bne.n	800e6f0 <DMA_CalcBaseAndBitshift+0xac>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e000      	b.n	800e6f2 <DMA_CalcBaseAndBitshift+0xae>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d024      	beq.n	800e740 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	3b10      	subs	r3, #16
 800e6fe:	4a27      	ldr	r2, [pc, #156]	; (800e79c <DMA_CalcBaseAndBitshift+0x158>)
 800e700:	fba2 2303 	umull	r2, r3, r2, r3
 800e704:	091b      	lsrs	r3, r3, #4
 800e706:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f003 0307 	and.w	r3, r3, #7
 800e70e:	4a24      	ldr	r2, [pc, #144]	; (800e7a0 <DMA_CalcBaseAndBitshift+0x15c>)
 800e710:	5cd3      	ldrb	r3, [r2, r3]
 800e712:	461a      	mov	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b03      	cmp	r3, #3
 800e71c:	d908      	bls.n	800e730 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	461a      	mov	r2, r3
 800e724:	4b1f      	ldr	r3, [pc, #124]	; (800e7a4 <DMA_CalcBaseAndBitshift+0x160>)
 800e726:	4013      	ands	r3, r2
 800e728:	1d1a      	adds	r2, r3, #4
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	659a      	str	r2, [r3, #88]	; 0x58
 800e72e:	e00d      	b.n	800e74c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	4b1b      	ldr	r3, [pc, #108]	; (800e7a4 <DMA_CalcBaseAndBitshift+0x160>)
 800e738:	4013      	ands	r3, r2
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	6593      	str	r3, [r2, #88]	; 0x58
 800e73e:	e005      	b.n	800e74c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e750:	4618      	mov	r0, r3
 800e752:	3714      	adds	r7, #20
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr
 800e75c:	40020010 	.word	0x40020010
 800e760:	40020028 	.word	0x40020028
 800e764:	40020040 	.word	0x40020040
 800e768:	40020058 	.word	0x40020058
 800e76c:	40020070 	.word	0x40020070
 800e770:	40020088 	.word	0x40020088
 800e774:	400200a0 	.word	0x400200a0
 800e778:	400200b8 	.word	0x400200b8
 800e77c:	40020410 	.word	0x40020410
 800e780:	40020428 	.word	0x40020428
 800e784:	40020440 	.word	0x40020440
 800e788:	40020458 	.word	0x40020458
 800e78c:	40020470 	.word	0x40020470
 800e790:	40020488 	.word	0x40020488
 800e794:	400204a0 	.word	0x400204a0
 800e798:	400204b8 	.word	0x400204b8
 800e79c:	aaaaaaab 	.word	0xaaaaaaab
 800e7a0:	240084b8 	.word	0x240084b8
 800e7a4:	fffffc00 	.word	0xfffffc00

0800e7a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d120      	bne.n	800e7fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c0:	2b03      	cmp	r3, #3
 800e7c2:	d858      	bhi.n	800e876 <DMA_CheckFifoParam+0xce>
 800e7c4:	a201      	add	r2, pc, #4	; (adr r2, 800e7cc <DMA_CheckFifoParam+0x24>)
 800e7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ca:	bf00      	nop
 800e7cc:	0800e7dd 	.word	0x0800e7dd
 800e7d0:	0800e7ef 	.word	0x0800e7ef
 800e7d4:	0800e7dd 	.word	0x0800e7dd
 800e7d8:	0800e877 	.word	0x0800e877
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d048      	beq.n	800e87a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e7ec:	e045      	b.n	800e87a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e7f6:	d142      	bne.n	800e87e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e7fc:	e03f      	b.n	800e87e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	699b      	ldr	r3, [r3, #24]
 800e802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e806:	d123      	bne.n	800e850 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80c:	2b03      	cmp	r3, #3
 800e80e:	d838      	bhi.n	800e882 <DMA_CheckFifoParam+0xda>
 800e810:	a201      	add	r2, pc, #4	; (adr r2, 800e818 <DMA_CheckFifoParam+0x70>)
 800e812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e816:	bf00      	nop
 800e818:	0800e829 	.word	0x0800e829
 800e81c:	0800e82f 	.word	0x0800e82f
 800e820:	0800e829 	.word	0x0800e829
 800e824:	0800e841 	.word	0x0800e841
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e828:	2301      	movs	r3, #1
 800e82a:	73fb      	strb	r3, [r7, #15]
        break;
 800e82c:	e030      	b.n	800e890 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e836:	2b00      	cmp	r3, #0
 800e838:	d025      	beq.n	800e886 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e83e:	e022      	b.n	800e886 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e844:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e848:	d11f      	bne.n	800e88a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e84a:	2301      	movs	r3, #1
 800e84c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e84e:	e01c      	b.n	800e88a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e854:	2b02      	cmp	r3, #2
 800e856:	d902      	bls.n	800e85e <DMA_CheckFifoParam+0xb6>
 800e858:	2b03      	cmp	r3, #3
 800e85a:	d003      	beq.n	800e864 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e85c:	e018      	b.n	800e890 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e85e:	2301      	movs	r3, #1
 800e860:	73fb      	strb	r3, [r7, #15]
        break;
 800e862:	e015      	b.n	800e890 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00e      	beq.n	800e88e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	73fb      	strb	r3, [r7, #15]
    break;
 800e874:	e00b      	b.n	800e88e <DMA_CheckFifoParam+0xe6>
        break;
 800e876:	bf00      	nop
 800e878:	e00a      	b.n	800e890 <DMA_CheckFifoParam+0xe8>
        break;
 800e87a:	bf00      	nop
 800e87c:	e008      	b.n	800e890 <DMA_CheckFifoParam+0xe8>
        break;
 800e87e:	bf00      	nop
 800e880:	e006      	b.n	800e890 <DMA_CheckFifoParam+0xe8>
        break;
 800e882:	bf00      	nop
 800e884:	e004      	b.n	800e890 <DMA_CheckFifoParam+0xe8>
        break;
 800e886:	bf00      	nop
 800e888:	e002      	b.n	800e890 <DMA_CheckFifoParam+0xe8>
        break;
 800e88a:	bf00      	nop
 800e88c:	e000      	b.n	800e890 <DMA_CheckFifoParam+0xe8>
    break;
 800e88e:	bf00      	nop
    }
  }

  return status;
 800e890:	7bfb      	ldrb	r3, [r7, #15]
}
 800e892:	4618      	mov	r0, r3
 800e894:	3714      	adds	r7, #20
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop

0800e8a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a38      	ldr	r2, [pc, #224]	; (800e994 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d022      	beq.n	800e8fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a36      	ldr	r2, [pc, #216]	; (800e998 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d01d      	beq.n	800e8fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a35      	ldr	r2, [pc, #212]	; (800e99c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d018      	beq.n	800e8fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a33      	ldr	r2, [pc, #204]	; (800e9a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d013      	beq.n	800e8fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a32      	ldr	r2, [pc, #200]	; (800e9a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d00e      	beq.n	800e8fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a30      	ldr	r2, [pc, #192]	; (800e9a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d009      	beq.n	800e8fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a2f      	ldr	r2, [pc, #188]	; (800e9ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d004      	beq.n	800e8fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a2d      	ldr	r2, [pc, #180]	; (800e9b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d101      	bne.n	800e902 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e8fe:	2301      	movs	r3, #1
 800e900:	e000      	b.n	800e904 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e902:	2300      	movs	r3, #0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d01a      	beq.n	800e93e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	3b08      	subs	r3, #8
 800e910:	4a28      	ldr	r2, [pc, #160]	; (800e9b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e912:	fba2 2303 	umull	r2, r3, r2, r3
 800e916:	091b      	lsrs	r3, r3, #4
 800e918:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	4b26      	ldr	r3, [pc, #152]	; (800e9b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e91e:	4413      	add	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	461a      	mov	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a24      	ldr	r2, [pc, #144]	; (800e9bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e92c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f003 031f 	and.w	r3, r3, #31
 800e934:	2201      	movs	r2, #1
 800e936:	409a      	lsls	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e93c:	e024      	b.n	800e988 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	b2db      	uxtb	r3, r3
 800e944:	3b10      	subs	r3, #16
 800e946:	4a1e      	ldr	r2, [pc, #120]	; (800e9c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e948:	fba2 2303 	umull	r2, r3, r2, r3
 800e94c:	091b      	lsrs	r3, r3, #4
 800e94e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	4a1c      	ldr	r2, [pc, #112]	; (800e9c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d806      	bhi.n	800e966 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4a1b      	ldr	r2, [pc, #108]	; (800e9c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d902      	bls.n	800e966 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	3308      	adds	r3, #8
 800e964:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	4b18      	ldr	r3, [pc, #96]	; (800e9cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e96a:	4413      	add	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	461a      	mov	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4a16      	ldr	r2, [pc, #88]	; (800e9d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e978:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f003 031f 	and.w	r3, r3, #31
 800e980:	2201      	movs	r2, #1
 800e982:	409a      	lsls	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	669a      	str	r2, [r3, #104]	; 0x68
}
 800e988:	bf00      	nop
 800e98a:	3714      	adds	r7, #20
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr
 800e994:	58025408 	.word	0x58025408
 800e998:	5802541c 	.word	0x5802541c
 800e99c:	58025430 	.word	0x58025430
 800e9a0:	58025444 	.word	0x58025444
 800e9a4:	58025458 	.word	0x58025458
 800e9a8:	5802546c 	.word	0x5802546c
 800e9ac:	58025480 	.word	0x58025480
 800e9b0:	58025494 	.word	0x58025494
 800e9b4:	cccccccd 	.word	0xcccccccd
 800e9b8:	16009600 	.word	0x16009600
 800e9bc:	58025880 	.word	0x58025880
 800e9c0:	aaaaaaab 	.word	0xaaaaaaab
 800e9c4:	400204b8 	.word	0x400204b8
 800e9c8:	4002040f 	.word	0x4002040f
 800e9cc:	10008200 	.word	0x10008200
 800e9d0:	40020880 	.word	0x40020880

0800e9d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b085      	sub	sp, #20
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d04a      	beq.n	800ea80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2b08      	cmp	r3, #8
 800e9ee:	d847      	bhi.n	800ea80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a25      	ldr	r2, [pc, #148]	; (800ea8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d022      	beq.n	800ea40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a24      	ldr	r2, [pc, #144]	; (800ea90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d01d      	beq.n	800ea40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a22      	ldr	r2, [pc, #136]	; (800ea94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d018      	beq.n	800ea40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a21      	ldr	r2, [pc, #132]	; (800ea98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d013      	beq.n	800ea40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a1f      	ldr	r2, [pc, #124]	; (800ea9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d00e      	beq.n	800ea40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a1e      	ldr	r2, [pc, #120]	; (800eaa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d009      	beq.n	800ea40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a1c      	ldr	r2, [pc, #112]	; (800eaa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d004      	beq.n	800ea40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a1b      	ldr	r2, [pc, #108]	; (800eaa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d101      	bne.n	800ea44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ea40:	2301      	movs	r3, #1
 800ea42:	e000      	b.n	800ea46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ea44:	2300      	movs	r3, #0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00a      	beq.n	800ea60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	4b17      	ldr	r3, [pc, #92]	; (800eaac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ea4e:	4413      	add	r3, r2
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	461a      	mov	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4a15      	ldr	r2, [pc, #84]	; (800eab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ea5c:	671a      	str	r2, [r3, #112]	; 0x70
 800ea5e:	e009      	b.n	800ea74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	4b14      	ldr	r3, [pc, #80]	; (800eab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ea64:	4413      	add	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	461a      	mov	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a11      	ldr	r2, [pc, #68]	; (800eab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ea72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3b01      	subs	r3, #1
 800ea78:	2201      	movs	r2, #1
 800ea7a:	409a      	lsls	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800ea80:	bf00      	nop
 800ea82:	3714      	adds	r7, #20
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	58025408 	.word	0x58025408
 800ea90:	5802541c 	.word	0x5802541c
 800ea94:	58025430 	.word	0x58025430
 800ea98:	58025444 	.word	0x58025444
 800ea9c:	58025458 	.word	0x58025458
 800eaa0:	5802546c 	.word	0x5802546c
 800eaa4:	58025480 	.word	0x58025480
 800eaa8:	58025494 	.word	0x58025494
 800eaac:	1600963f 	.word	0x1600963f
 800eab0:	58025940 	.word	0x58025940
 800eab4:	1000823f 	.word	0x1000823f
 800eab8:	40020940 	.word	0x40020940

0800eabc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b089      	sub	sp, #36	; 0x24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800eac6:	2300      	movs	r3, #0
 800eac8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800eaca:	4b89      	ldr	r3, [pc, #548]	; (800ecf0 <HAL_GPIO_Init+0x234>)
 800eacc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800eace:	e194      	b.n	800edfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	2101      	movs	r1, #1
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	fa01 f303 	lsl.w	r3, r1, r3
 800eadc:	4013      	ands	r3, r2
 800eade:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 8186 	beq.w	800edf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d00b      	beq.n	800eb08 <HAL_GPIO_Init+0x4c>
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	2b02      	cmp	r3, #2
 800eaf6:	d007      	beq.n	800eb08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800eafc:	2b11      	cmp	r3, #17
 800eafe:	d003      	beq.n	800eb08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	2b12      	cmp	r3, #18
 800eb06:	d130      	bne.n	800eb6a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	005b      	lsls	r3, r3, #1
 800eb12:	2203      	movs	r2, #3
 800eb14:	fa02 f303 	lsl.w	r3, r2, r3
 800eb18:	43db      	mvns	r3, r3
 800eb1a:	69ba      	ldr	r2, [r7, #24]
 800eb1c:	4013      	ands	r3, r2
 800eb1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	68da      	ldr	r2, [r3, #12]
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	005b      	lsls	r3, r3, #1
 800eb28:	fa02 f303 	lsl.w	r3, r2, r3
 800eb2c:	69ba      	ldr	r2, [r7, #24]
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	69ba      	ldr	r2, [r7, #24]
 800eb36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800eb3e:	2201      	movs	r2, #1
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	fa02 f303 	lsl.w	r3, r2, r3
 800eb46:	43db      	mvns	r3, r3
 800eb48:	69ba      	ldr	r2, [r7, #24]
 800eb4a:	4013      	ands	r3, r2
 800eb4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	091b      	lsrs	r3, r3, #4
 800eb54:	f003 0201 	and.w	r2, r3, #1
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb5e:	69ba      	ldr	r2, [r7, #24]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	69ba      	ldr	r2, [r7, #24]
 800eb68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	005b      	lsls	r3, r3, #1
 800eb74:	2203      	movs	r2, #3
 800eb76:	fa02 f303 	lsl.w	r3, r2, r3
 800eb7a:	43db      	mvns	r3, r3
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	4013      	ands	r3, r2
 800eb80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	689a      	ldr	r2, [r3, #8]
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	005b      	lsls	r3, r3, #1
 800eb8a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb8e:	69ba      	ldr	r2, [r7, #24]
 800eb90:	4313      	orrs	r3, r2
 800eb92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	2b02      	cmp	r3, #2
 800eba0:	d003      	beq.n	800ebaa <HAL_GPIO_Init+0xee>
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	2b12      	cmp	r3, #18
 800eba8:	d123      	bne.n	800ebf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	08da      	lsrs	r2, r3, #3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	3208      	adds	r2, #8
 800ebb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	f003 0307 	and.w	r3, r3, #7
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	220f      	movs	r2, #15
 800ebc2:	fa02 f303 	lsl.w	r3, r2, r3
 800ebc6:	43db      	mvns	r3, r3
 800ebc8:	69ba      	ldr	r2, [r7, #24]
 800ebca:	4013      	ands	r3, r2
 800ebcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	691a      	ldr	r2, [r3, #16]
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	f003 0307 	and.w	r3, r3, #7
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	fa02 f303 	lsl.w	r3, r2, r3
 800ebde:	69ba      	ldr	r2, [r7, #24]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	08da      	lsrs	r2, r3, #3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	3208      	adds	r2, #8
 800ebec:	69b9      	ldr	r1, [r7, #24]
 800ebee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	005b      	lsls	r3, r3, #1
 800ebfc:	2203      	movs	r2, #3
 800ebfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ec02:	43db      	mvns	r3, r3
 800ec04:	69ba      	ldr	r2, [r7, #24]
 800ec06:	4013      	ands	r3, r2
 800ec08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	f003 0203 	and.w	r2, r3, #3
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	005b      	lsls	r3, r3, #1
 800ec16:	fa02 f303 	lsl.w	r3, r2, r3
 800ec1a:	69ba      	ldr	r2, [r7, #24]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	69ba      	ldr	r2, [r7, #24]
 800ec24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f000 80e0 	beq.w	800edf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ec34:	4b2f      	ldr	r3, [pc, #188]	; (800ecf4 <HAL_GPIO_Init+0x238>)
 800ec36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec3a:	4a2e      	ldr	r2, [pc, #184]	; (800ecf4 <HAL_GPIO_Init+0x238>)
 800ec3c:	f043 0302 	orr.w	r3, r3, #2
 800ec40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ec44:	4b2b      	ldr	r3, [pc, #172]	; (800ecf4 <HAL_GPIO_Init+0x238>)
 800ec46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec4a:	f003 0302 	and.w	r3, r3, #2
 800ec4e:	60fb      	str	r3, [r7, #12]
 800ec50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ec52:	4a29      	ldr	r2, [pc, #164]	; (800ecf8 <HAL_GPIO_Init+0x23c>)
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	089b      	lsrs	r3, r3, #2
 800ec58:	3302      	adds	r3, #2
 800ec5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	f003 0303 	and.w	r3, r3, #3
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	220f      	movs	r2, #15
 800ec6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec6e:	43db      	mvns	r3, r3
 800ec70:	69ba      	ldr	r2, [r7, #24]
 800ec72:	4013      	ands	r3, r2
 800ec74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4a20      	ldr	r2, [pc, #128]	; (800ecfc <HAL_GPIO_Init+0x240>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d052      	beq.n	800ed24 <HAL_GPIO_Init+0x268>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4a1f      	ldr	r2, [pc, #124]	; (800ed00 <HAL_GPIO_Init+0x244>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d031      	beq.n	800ecea <HAL_GPIO_Init+0x22e>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4a1e      	ldr	r2, [pc, #120]	; (800ed04 <HAL_GPIO_Init+0x248>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d02b      	beq.n	800ece6 <HAL_GPIO_Init+0x22a>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	4a1d      	ldr	r2, [pc, #116]	; (800ed08 <HAL_GPIO_Init+0x24c>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d025      	beq.n	800ece2 <HAL_GPIO_Init+0x226>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	4a1c      	ldr	r2, [pc, #112]	; (800ed0c <HAL_GPIO_Init+0x250>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d01f      	beq.n	800ecde <HAL_GPIO_Init+0x222>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a1b      	ldr	r2, [pc, #108]	; (800ed10 <HAL_GPIO_Init+0x254>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d019      	beq.n	800ecda <HAL_GPIO_Init+0x21e>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4a1a      	ldr	r2, [pc, #104]	; (800ed14 <HAL_GPIO_Init+0x258>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d013      	beq.n	800ecd6 <HAL_GPIO_Init+0x21a>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4a19      	ldr	r2, [pc, #100]	; (800ed18 <HAL_GPIO_Init+0x25c>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d00d      	beq.n	800ecd2 <HAL_GPIO_Init+0x216>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a18      	ldr	r2, [pc, #96]	; (800ed1c <HAL_GPIO_Init+0x260>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d007      	beq.n	800ecce <HAL_GPIO_Init+0x212>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a17      	ldr	r2, [pc, #92]	; (800ed20 <HAL_GPIO_Init+0x264>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d101      	bne.n	800ecca <HAL_GPIO_Init+0x20e>
 800ecc6:	2309      	movs	r3, #9
 800ecc8:	e02d      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ecca:	230a      	movs	r3, #10
 800eccc:	e02b      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ecce:	2308      	movs	r3, #8
 800ecd0:	e029      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ecd2:	2307      	movs	r3, #7
 800ecd4:	e027      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ecd6:	2306      	movs	r3, #6
 800ecd8:	e025      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ecda:	2305      	movs	r3, #5
 800ecdc:	e023      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ecde:	2304      	movs	r3, #4
 800ece0:	e021      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ece2:	2303      	movs	r3, #3
 800ece4:	e01f      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ece6:	2302      	movs	r3, #2
 800ece8:	e01d      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ecea:	2301      	movs	r3, #1
 800ecec:	e01b      	b.n	800ed26 <HAL_GPIO_Init+0x26a>
 800ecee:	bf00      	nop
 800ecf0:	58000080 	.word	0x58000080
 800ecf4:	58024400 	.word	0x58024400
 800ecf8:	58000400 	.word	0x58000400
 800ecfc:	58020000 	.word	0x58020000
 800ed00:	58020400 	.word	0x58020400
 800ed04:	58020800 	.word	0x58020800
 800ed08:	58020c00 	.word	0x58020c00
 800ed0c:	58021000 	.word	0x58021000
 800ed10:	58021400 	.word	0x58021400
 800ed14:	58021800 	.word	0x58021800
 800ed18:	58021c00 	.word	0x58021c00
 800ed1c:	58022000 	.word	0x58022000
 800ed20:	58022400 	.word	0x58022400
 800ed24:	2300      	movs	r3, #0
 800ed26:	69fa      	ldr	r2, [r7, #28]
 800ed28:	f002 0203 	and.w	r2, r2, #3
 800ed2c:	0092      	lsls	r2, r2, #2
 800ed2e:	4093      	lsls	r3, r2
 800ed30:	69ba      	ldr	r2, [r7, #24]
 800ed32:	4313      	orrs	r3, r2
 800ed34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ed36:	4938      	ldr	r1, [pc, #224]	; (800ee18 <HAL_GPIO_Init+0x35c>)
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	089b      	lsrs	r3, r3, #2
 800ed3c:	3302      	adds	r3, #2
 800ed3e:	69ba      	ldr	r2, [r7, #24]
 800ed40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	43db      	mvns	r3, r3
 800ed4e:	69ba      	ldr	r2, [r7, #24]
 800ed50:	4013      	ands	r3, r2
 800ed52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d003      	beq.n	800ed68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ed60:	69ba      	ldr	r2, [r7, #24]
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	43db      	mvns	r3, r3
 800ed78:	69ba      	ldr	r2, [r7, #24]
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ed8a:	69ba      	ldr	r2, [r7, #24]
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	69ba      	ldr	r2, [r7, #24]
 800ed96:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ed98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	43db      	mvns	r3, r3
 800eda4:	69ba      	ldr	r2, [r7, #24]
 800eda6:	4013      	ands	r3, r2
 800eda8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d003      	beq.n	800edbe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800edb6:	69ba      	ldr	r2, [r7, #24]
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	4313      	orrs	r3, r2
 800edbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800edbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800edc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	43db      	mvns	r3, r3
 800edd2:	69ba      	ldr	r2, [r7, #24]
 800edd4:	4013      	ands	r3, r2
 800edd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d003      	beq.n	800edec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800ede4:	69ba      	ldr	r2, [r7, #24]
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	4313      	orrs	r3, r2
 800edea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800edec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	3301      	adds	r3, #1
 800edf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	fa22 f303 	lsr.w	r3, r2, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f47f ae63 	bne.w	800ead0 <HAL_GPIO_Init+0x14>
  }
}
 800ee0a:	bf00      	nop
 800ee0c:	bf00      	nop
 800ee0e:	3724      	adds	r7, #36	; 0x24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr
 800ee18:	58000400 	.word	0x58000400

0800ee1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b087      	sub	sp, #28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ee26:	2300      	movs	r3, #0
 800ee28:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ee2a:	4b75      	ldr	r3, [pc, #468]	; (800f000 <HAL_GPIO_DeInit+0x1e4>)
 800ee2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800ee2e:	e0d9      	b.n	800efe4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800ee30:	2201      	movs	r2, #1
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	fa02 f303 	lsl.w	r3, r2, r3
 800ee38:	683a      	ldr	r2, [r7, #0]
 800ee3a:	4013      	ands	r3, r2
 800ee3c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f000 80cc 	beq.w	800efde <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ee46:	4a6f      	ldr	r2, [pc, #444]	; (800f004 <HAL_GPIO_DeInit+0x1e8>)
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	089b      	lsrs	r3, r3, #2
 800ee4c:	3302      	adds	r3, #2
 800ee4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee52:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	f003 0303 	and.w	r3, r3, #3
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	220f      	movs	r2, #15
 800ee5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee62:	68ba      	ldr	r2, [r7, #8]
 800ee64:	4013      	ands	r3, r2
 800ee66:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4a67      	ldr	r2, [pc, #412]	; (800f008 <HAL_GPIO_DeInit+0x1ec>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d037      	beq.n	800eee0 <HAL_GPIO_DeInit+0xc4>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4a66      	ldr	r2, [pc, #408]	; (800f00c <HAL_GPIO_DeInit+0x1f0>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d031      	beq.n	800eedc <HAL_GPIO_DeInit+0xc0>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4a65      	ldr	r2, [pc, #404]	; (800f010 <HAL_GPIO_DeInit+0x1f4>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d02b      	beq.n	800eed8 <HAL_GPIO_DeInit+0xbc>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4a64      	ldr	r2, [pc, #400]	; (800f014 <HAL_GPIO_DeInit+0x1f8>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d025      	beq.n	800eed4 <HAL_GPIO_DeInit+0xb8>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a63      	ldr	r2, [pc, #396]	; (800f018 <HAL_GPIO_DeInit+0x1fc>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d01f      	beq.n	800eed0 <HAL_GPIO_DeInit+0xb4>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a62      	ldr	r2, [pc, #392]	; (800f01c <HAL_GPIO_DeInit+0x200>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d019      	beq.n	800eecc <HAL_GPIO_DeInit+0xb0>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a61      	ldr	r2, [pc, #388]	; (800f020 <HAL_GPIO_DeInit+0x204>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d013      	beq.n	800eec8 <HAL_GPIO_DeInit+0xac>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4a60      	ldr	r2, [pc, #384]	; (800f024 <HAL_GPIO_DeInit+0x208>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d00d      	beq.n	800eec4 <HAL_GPIO_DeInit+0xa8>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4a5f      	ldr	r2, [pc, #380]	; (800f028 <HAL_GPIO_DeInit+0x20c>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d007      	beq.n	800eec0 <HAL_GPIO_DeInit+0xa4>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4a5e      	ldr	r2, [pc, #376]	; (800f02c <HAL_GPIO_DeInit+0x210>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d101      	bne.n	800eebc <HAL_GPIO_DeInit+0xa0>
 800eeb8:	2309      	movs	r3, #9
 800eeba:	e012      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eebc:	230a      	movs	r3, #10
 800eebe:	e010      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eec0:	2308      	movs	r3, #8
 800eec2:	e00e      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eec4:	2307      	movs	r3, #7
 800eec6:	e00c      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eec8:	2306      	movs	r3, #6
 800eeca:	e00a      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eecc:	2305      	movs	r3, #5
 800eece:	e008      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eed0:	2304      	movs	r3, #4
 800eed2:	e006      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eed4:	2303      	movs	r3, #3
 800eed6:	e004      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eed8:	2302      	movs	r3, #2
 800eeda:	e002      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eedc:	2301      	movs	r3, #1
 800eede:	e000      	b.n	800eee2 <HAL_GPIO_DeInit+0xc6>
 800eee0:	2300      	movs	r3, #0
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	f002 0203 	and.w	r2, r2, #3
 800eee8:	0092      	lsls	r2, r2, #2
 800eeea:	4093      	lsls	r3, r2
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d136      	bne.n	800ef60 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	43db      	mvns	r3, r3
 800eefa:	401a      	ands	r2, r3
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	685a      	ldr	r2, [r3, #4]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	43db      	mvns	r3, r3
 800ef08:	401a      	ands	r2, r3
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800ef0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	43db      	mvns	r3, r3
 800ef18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800ef20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	43db      	mvns	r3, r3
 800ef2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef2e:	4013      	ands	r3, r2
 800ef30:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	f003 0303 	and.w	r3, r3, #3
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	220f      	movs	r2, #15
 800ef3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ef40:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ef42:	4a30      	ldr	r2, [pc, #192]	; (800f004 <HAL_GPIO_DeInit+0x1e8>)
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	089b      	lsrs	r3, r3, #2
 800ef48:	3302      	adds	r3, #2
 800ef4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	43da      	mvns	r2, r3
 800ef52:	482c      	ldr	r0, [pc, #176]	; (800f004 <HAL_GPIO_DeInit+0x1e8>)
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	089b      	lsrs	r3, r3, #2
 800ef58:	400a      	ands	r2, r1
 800ef5a:	3302      	adds	r3, #2
 800ef5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	005b      	lsls	r3, r3, #1
 800ef68:	2103      	movs	r1, #3
 800ef6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef6e:	431a      	orrs	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	08da      	lsrs	r2, r3, #3
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3208      	adds	r2, #8
 800ef7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	f003 0307 	and.w	r3, r3, #7
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	220f      	movs	r2, #15
 800ef8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef8e:	43db      	mvns	r3, r3
 800ef90:	697a      	ldr	r2, [r7, #20]
 800ef92:	08d2      	lsrs	r2, r2, #3
 800ef94:	4019      	ands	r1, r3
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3208      	adds	r2, #8
 800ef9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68da      	ldr	r2, [r3, #12]
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	005b      	lsls	r3, r3, #1
 800efa6:	2103      	movs	r1, #3
 800efa8:	fa01 f303 	lsl.w	r3, r1, r3
 800efac:	43db      	mvns	r3, r3
 800efae:	401a      	ands	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	685a      	ldr	r2, [r3, #4]
 800efb8:	2101      	movs	r1, #1
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	fa01 f303 	lsl.w	r3, r1, r3
 800efc0:	43db      	mvns	r3, r3
 800efc2:	401a      	ands	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	689a      	ldr	r2, [r3, #8]
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	2103      	movs	r1, #3
 800efd2:	fa01 f303 	lsl.w	r3, r1, r3
 800efd6:	43db      	mvns	r3, r3
 800efd8:	401a      	ands	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	609a      	str	r2, [r3, #8]
    }

    position++;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	3301      	adds	r3, #1
 800efe2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	fa22 f303 	lsr.w	r3, r2, r3
 800efec:	2b00      	cmp	r3, #0
 800efee:	f47f af1f 	bne.w	800ee30 <HAL_GPIO_DeInit+0x14>
  }
}
 800eff2:	bf00      	nop
 800eff4:	bf00      	nop
 800eff6:	371c      	adds	r7, #28
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr
 800f000:	58000080 	.word	0x58000080
 800f004:	58000400 	.word	0x58000400
 800f008:	58020000 	.word	0x58020000
 800f00c:	58020400 	.word	0x58020400
 800f010:	58020800 	.word	0x58020800
 800f014:	58020c00 	.word	0x58020c00
 800f018:	58021000 	.word	0x58021000
 800f01c:	58021400 	.word	0x58021400
 800f020:	58021800 	.word	0x58021800
 800f024:	58021c00 	.word	0x58021c00
 800f028:	58022000 	.word	0x58022000
 800f02c:	58022400 	.word	0x58022400

0800f030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	460b      	mov	r3, r1
 800f03a:	807b      	strh	r3, [r7, #2]
 800f03c:	4613      	mov	r3, r2
 800f03e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f040:	787b      	ldrb	r3, [r7, #1]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d003      	beq.n	800f04e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f046:	887a      	ldrh	r2, [r7, #2]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800f04c:	e003      	b.n	800f056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f04e:	887b      	ldrh	r3, [r7, #2]
 800f050:	041a      	lsls	r2, r3, #16
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	619a      	str	r2, [r3, #24]
}
 800f056:	bf00      	nop
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
	...

0800f064 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800f06c:	4a08      	ldr	r2, [pc, #32]	; (800f090 <HAL_HSEM_FastTake+0x2c>)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3320      	adds	r3, #32
 800f072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f076:	4a07      	ldr	r2, [pc, #28]	; (800f094 <HAL_HSEM_FastTake+0x30>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d101      	bne.n	800f080 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800f07c:	2300      	movs	r3, #0
 800f07e:	e000      	b.n	800f082 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800f080:	2301      	movs	r3, #1
}
 800f082:	4618      	mov	r0, r3
 800f084:	370c      	adds	r7, #12
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop
 800f090:	58026400 	.word	0x58026400
 800f094:	80000300 	.word	0x80000300

0800f098 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800f0a2:	4906      	ldr	r1, [pc, #24]	; (800f0bc <HAL_HSEM_Release+0x24>)
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800f0b0:	bf00      	nop
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr
 800f0bc:	58026400 	.word	0x58026400

0800f0c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c2:	b08f      	sub	sp, #60	; 0x3c
 800f0c4:	af0a      	add	r7, sp, #40	; 0x28
 800f0c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e116      	b.n	800f300 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d106      	bne.n	800f0f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f00c fe43 	bl	801bd78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2203      	movs	r2, #3
 800f0f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f102:	2b00      	cmp	r3, #0
 800f104:	d102      	bne.n	800f10c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f006 fc7e 	bl	8015a12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	603b      	str	r3, [r7, #0]
 800f11c:	687e      	ldr	r6, [r7, #4]
 800f11e:	466d      	mov	r5, sp
 800f120:	f106 0410 	add.w	r4, r6, #16
 800f124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f12a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f12c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f130:	e885 0003 	stmia.w	r5, {r0, r1}
 800f134:	1d33      	adds	r3, r6, #4
 800f136:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f138:	6838      	ldr	r0, [r7, #0]
 800f13a:	f006 fb49 	bl	80157d0 <USB_CoreInit>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d005      	beq.n	800f150 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2202      	movs	r2, #2
 800f148:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	e0d7      	b.n	800f300 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2100      	movs	r1, #0
 800f156:	4618      	mov	r0, r3
 800f158:	f006 fc6c 	bl	8015a34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f15c:	2300      	movs	r3, #0
 800f15e:	73fb      	strb	r3, [r7, #15]
 800f160:	e04a      	b.n	800f1f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f162:	7bfa      	ldrb	r2, [r7, #15]
 800f164:	6879      	ldr	r1, [r7, #4]
 800f166:	4613      	mov	r3, r2
 800f168:	00db      	lsls	r3, r3, #3
 800f16a:	1a9b      	subs	r3, r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	440b      	add	r3, r1
 800f170:	333d      	adds	r3, #61	; 0x3d
 800f172:	2201      	movs	r2, #1
 800f174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f176:	7bfa      	ldrb	r2, [r7, #15]
 800f178:	6879      	ldr	r1, [r7, #4]
 800f17a:	4613      	mov	r3, r2
 800f17c:	00db      	lsls	r3, r3, #3
 800f17e:	1a9b      	subs	r3, r3, r2
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	440b      	add	r3, r1
 800f184:	333c      	adds	r3, #60	; 0x3c
 800f186:	7bfa      	ldrb	r2, [r7, #15]
 800f188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800f18a:	7bfa      	ldrb	r2, [r7, #15]
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
 800f18e:	b298      	uxth	r0, r3
 800f190:	6879      	ldr	r1, [r7, #4]
 800f192:	4613      	mov	r3, r2
 800f194:	00db      	lsls	r3, r3, #3
 800f196:	1a9b      	subs	r3, r3, r2
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	440b      	add	r3, r1
 800f19c:	3342      	adds	r3, #66	; 0x42
 800f19e:	4602      	mov	r2, r0
 800f1a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f1a2:	7bfa      	ldrb	r2, [r7, #15]
 800f1a4:	6879      	ldr	r1, [r7, #4]
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	1a9b      	subs	r3, r3, r2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	440b      	add	r3, r1
 800f1b0:	333f      	adds	r3, #63	; 0x3f
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f1b6:	7bfa      	ldrb	r2, [r7, #15]
 800f1b8:	6879      	ldr	r1, [r7, #4]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	00db      	lsls	r3, r3, #3
 800f1be:	1a9b      	subs	r3, r3, r2
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	440b      	add	r3, r1
 800f1c4:	3344      	adds	r3, #68	; 0x44
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f1ca:	7bfa      	ldrb	r2, [r7, #15]
 800f1cc:	6879      	ldr	r1, [r7, #4]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	1a9b      	subs	r3, r3, r2
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	440b      	add	r3, r1
 800f1d8:	3348      	adds	r3, #72	; 0x48
 800f1da:	2200      	movs	r2, #0
 800f1dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f1de:	7bfa      	ldrb	r2, [r7, #15]
 800f1e0:	6879      	ldr	r1, [r7, #4]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	00db      	lsls	r3, r3, #3
 800f1e6:	1a9b      	subs	r3, r3, r2
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	440b      	add	r3, r1
 800f1ec:	3350      	adds	r3, #80	; 0x50
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f1f2:	7bfb      	ldrb	r3, [r7, #15]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	73fb      	strb	r3, [r7, #15]
 800f1f8:	7bfa      	ldrb	r2, [r7, #15]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d3af      	bcc.n	800f162 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f202:	2300      	movs	r3, #0
 800f204:	73fb      	strb	r3, [r7, #15]
 800f206:	e044      	b.n	800f292 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f208:	7bfa      	ldrb	r2, [r7, #15]
 800f20a:	6879      	ldr	r1, [r7, #4]
 800f20c:	4613      	mov	r3, r2
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	1a9b      	subs	r3, r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	440b      	add	r3, r1
 800f216:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800f21a:	2200      	movs	r2, #0
 800f21c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f21e:	7bfa      	ldrb	r2, [r7, #15]
 800f220:	6879      	ldr	r1, [r7, #4]
 800f222:	4613      	mov	r3, r2
 800f224:	00db      	lsls	r3, r3, #3
 800f226:	1a9b      	subs	r3, r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	440b      	add	r3, r1
 800f22c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800f230:	7bfa      	ldrb	r2, [r7, #15]
 800f232:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f234:	7bfa      	ldrb	r2, [r7, #15]
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	4613      	mov	r3, r2
 800f23a:	00db      	lsls	r3, r3, #3
 800f23c:	1a9b      	subs	r3, r3, r2
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	440b      	add	r3, r1
 800f242:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f246:	2200      	movs	r2, #0
 800f248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f24a:	7bfa      	ldrb	r2, [r7, #15]
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	4613      	mov	r3, r2
 800f250:	00db      	lsls	r3, r3, #3
 800f252:	1a9b      	subs	r3, r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	440b      	add	r3, r1
 800f258:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800f25c:	2200      	movs	r2, #0
 800f25e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f260:	7bfa      	ldrb	r2, [r7, #15]
 800f262:	6879      	ldr	r1, [r7, #4]
 800f264:	4613      	mov	r3, r2
 800f266:	00db      	lsls	r3, r3, #3
 800f268:	1a9b      	subs	r3, r3, r2
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	440b      	add	r3, r1
 800f26e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f272:	2200      	movs	r2, #0
 800f274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f276:	7bfa      	ldrb	r2, [r7, #15]
 800f278:	6879      	ldr	r1, [r7, #4]
 800f27a:	4613      	mov	r3, r2
 800f27c:	00db      	lsls	r3, r3, #3
 800f27e:	1a9b      	subs	r3, r3, r2
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	440b      	add	r3, r1
 800f284:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800f288:	2200      	movs	r2, #0
 800f28a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
 800f28e:	3301      	adds	r3, #1
 800f290:	73fb      	strb	r3, [r7, #15]
 800f292:	7bfa      	ldrb	r2, [r7, #15]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d3b5      	bcc.n	800f208 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	603b      	str	r3, [r7, #0]
 800f2a2:	687e      	ldr	r6, [r7, #4]
 800f2a4:	466d      	mov	r5, sp
 800f2a6:	f106 0410 	add.w	r4, r6, #16
 800f2aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f2b6:	e885 0003 	stmia.w	r5, {r0, r1}
 800f2ba:	1d33      	adds	r3, r6, #4
 800f2bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f2be:	6838      	ldr	r0, [r7, #0]
 800f2c0:	f006 fbe2 	bl	8015a88 <USB_DevInit>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d005      	beq.n	800f2d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2202      	movs	r2, #2
 800f2ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e014      	b.n	800f300 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d102      	bne.n	800f2f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f001 f892 	bl	8010418 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f007 fc62 	bl	8016bc2 <USB_DevDisconnect>

  return HAL_OK;
 800f2fe:	2300      	movs	r3, #0
}
 800f300:	4618      	mov	r0, r3
 800f302:	3714      	adds	r7, #20
 800f304:	46bd      	mov	sp, r7
 800f306:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f308 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d101      	bne.n	800f324 <HAL_PCD_Start+0x1c>
 800f320:	2302      	movs	r3, #2
 800f322:	e020      	b.n	800f366 <HAL_PCD_Start+0x5e>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f330:	2b01      	cmp	r3, #1
 800f332:	d109      	bne.n	800f348 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d005      	beq.n	800f348 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f340:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f006 fb4f 	bl	80159f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4618      	mov	r0, r3
 800f358:	f007 fc12 	bl	8016b80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f36e:	b590      	push	{r4, r7, lr}
 800f370:	b08d      	sub	sp, #52	; 0x34
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4618      	mov	r0, r3
 800f386:	f007 fcd0 	bl	8016d2a <USB_GetMode>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f040 83ca 	bne.w	800fb26 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4618      	mov	r0, r3
 800f398:	f007 fc34 	bl	8016c04 <USB_ReadInterrupts>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f000 83c0 	beq.w	800fb24 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f007 fc2b 	bl	8016c04 <USB_ReadInterrupts>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	f003 0302 	and.w	r3, r3, #2
 800f3b4:	2b02      	cmp	r3, #2
 800f3b6:	d107      	bne.n	800f3c8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	695a      	ldr	r2, [r3, #20]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f002 0202 	and.w	r2, r2, #2
 800f3c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f007 fc19 	bl	8016c04 <USB_ReadInterrupts>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	f003 0310 	and.w	r3, r3, #16
 800f3d8:	2b10      	cmp	r3, #16
 800f3da:	d161      	bne.n	800f4a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	699a      	ldr	r2, [r3, #24]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f022 0210 	bic.w	r2, r2, #16
 800f3ea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800f3ec:	6a3b      	ldr	r3, [r7, #32]
 800f3ee:	6a1b      	ldr	r3, [r3, #32]
 800f3f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	f003 020f 	and.w	r2, r3, #15
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	00db      	lsls	r3, r3, #3
 800f3fc:	1a9b      	subs	r3, r3, r2
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	4413      	add	r3, r2
 800f408:	3304      	adds	r3, #4
 800f40a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	0c5b      	lsrs	r3, r3, #17
 800f410:	f003 030f 	and.w	r3, r3, #15
 800f414:	2b02      	cmp	r3, #2
 800f416:	d124      	bne.n	800f462 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800f418:	69ba      	ldr	r2, [r7, #24]
 800f41a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800f41e:	4013      	ands	r3, r2
 800f420:	2b00      	cmp	r3, #0
 800f422:	d035      	beq.n	800f490 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	091b      	lsrs	r3, r3, #4
 800f42c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f42e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f432:	b29b      	uxth	r3, r3
 800f434:	461a      	mov	r2, r3
 800f436:	6a38      	ldr	r0, [r7, #32]
 800f438:	f007 fa50 	bl	80168dc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	68da      	ldr	r2, [r3, #12]
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	091b      	lsrs	r3, r3, #4
 800f444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f448:	441a      	add	r2, r3
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	699a      	ldr	r2, [r3, #24]
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	091b      	lsrs	r3, r3, #4
 800f456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f45a:	441a      	add	r2, r3
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	619a      	str	r2, [r3, #24]
 800f460:	e016      	b.n	800f490 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800f462:	69bb      	ldr	r3, [r7, #24]
 800f464:	0c5b      	lsrs	r3, r3, #17
 800f466:	f003 030f 	and.w	r3, r3, #15
 800f46a:	2b06      	cmp	r3, #6
 800f46c:	d110      	bne.n	800f490 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f474:	2208      	movs	r2, #8
 800f476:	4619      	mov	r1, r3
 800f478:	6a38      	ldr	r0, [r7, #32]
 800f47a:	f007 fa2f 	bl	80168dc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	699a      	ldr	r2, [r3, #24]
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	091b      	lsrs	r3, r3, #4
 800f486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f48a:	441a      	add	r2, r3
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	699a      	ldr	r2, [r3, #24]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f042 0210 	orr.w	r2, r2, #16
 800f49e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f007 fbad 	bl	8016c04 <USB_ReadInterrupts>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f4b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f4b4:	d16e      	bne.n	800f594 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f007 fbb3 	bl	8016c2a <USB_ReadDevAllOutEpInterrupt>
 800f4c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800f4c6:	e062      	b.n	800f58e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800f4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ca:	f003 0301 	and.w	r3, r3, #1
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d057      	beq.n	800f582 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4d8:	b2d2      	uxtb	r2, r2
 800f4da:	4611      	mov	r1, r2
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f007 fbd8 	bl	8016c92 <USB_ReadDevOutEPInterrupt>
 800f4e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	f003 0301 	and.w	r3, r3, #1
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00c      	beq.n	800f508 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	015a      	lsls	r2, r3, #5
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 fdde 	bl	80100c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	f003 0308 	and.w	r3, r3, #8
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00c      	beq.n	800f52c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f514:	015a      	lsls	r2, r3, #5
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	4413      	add	r3, r2
 800f51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f51e:	461a      	mov	r2, r3
 800f520:	2308      	movs	r3, #8
 800f522:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fed8 	bl	80102dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	f003 0310 	and.w	r3, r3, #16
 800f532:	2b00      	cmp	r3, #0
 800f534:	d008      	beq.n	800f548 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f538:	015a      	lsls	r2, r3, #5
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	4413      	add	r3, r2
 800f53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f542:	461a      	mov	r2, r3
 800f544:	2310      	movs	r3, #16
 800f546:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	f003 0320 	and.w	r3, r3, #32
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d008      	beq.n	800f564 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f554:	015a      	lsls	r2, r3, #5
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	4413      	add	r3, r2
 800f55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f55e:	461a      	mov	r2, r3
 800f560:	2320      	movs	r3, #32
 800f562:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d009      	beq.n	800f582 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f570:	015a      	lsls	r2, r3, #5
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	4413      	add	r3, r2
 800f576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f57a:	461a      	mov	r2, r3
 800f57c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f580:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f584:	3301      	adds	r3, #1
 800f586:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	085b      	lsrs	r3, r3, #1
 800f58c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	2b00      	cmp	r3, #0
 800f592:	d199      	bne.n	800f4c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4618      	mov	r0, r3
 800f59a:	f007 fb33 	bl	8016c04 <USB_ReadInterrupts>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f5a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5a8:	f040 80c0 	bne.w	800f72c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f007 fb54 	bl	8016c5e <USB_ReadDevAllInEpInterrupt>
 800f5b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f5bc:	e0b2      	b.n	800f724 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 80a7 	beq.w	800f718 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d0:	b2d2      	uxtb	r2, r2
 800f5d2:	4611      	mov	r1, r2
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f007 fb7a 	bl	8016cce <USB_ReadDevInEPInterrupt>
 800f5da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d057      	beq.n	800f696 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e8:	f003 030f 	and.w	r3, r3, #15
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800f5f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	43db      	mvns	r3, r3
 800f600:	69f9      	ldr	r1, [r7, #28]
 800f602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f606:	4013      	ands	r3, r2
 800f608:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	015a      	lsls	r2, r3, #5
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	4413      	add	r3, r2
 800f612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f616:	461a      	mov	r2, r3
 800f618:	2301      	movs	r3, #1
 800f61a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	691b      	ldr	r3, [r3, #16]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d132      	bne.n	800f68a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800f624:	6879      	ldr	r1, [r7, #4]
 800f626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f628:	4613      	mov	r3, r2
 800f62a:	00db      	lsls	r3, r3, #3
 800f62c:	1a9b      	subs	r3, r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	440b      	add	r3, r1
 800f632:	3348      	adds	r3, #72	; 0x48
 800f634:	6819      	ldr	r1, [r3, #0]
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f63a:	4613      	mov	r3, r2
 800f63c:	00db      	lsls	r3, r3, #3
 800f63e:	1a9b      	subs	r3, r3, r2
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	4403      	add	r3, r0
 800f644:	3344      	adds	r3, #68	; 0x44
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4419      	add	r1, r3
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f64e:	4613      	mov	r3, r2
 800f650:	00db      	lsls	r3, r3, #3
 800f652:	1a9b      	subs	r3, r3, r2
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	4403      	add	r3, r0
 800f658:	3348      	adds	r3, #72	; 0x48
 800f65a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d113      	bne.n	800f68a <HAL_PCD_IRQHandler+0x31c>
 800f662:	6879      	ldr	r1, [r7, #4]
 800f664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f666:	4613      	mov	r3, r2
 800f668:	00db      	lsls	r3, r3, #3
 800f66a:	1a9b      	subs	r3, r3, r2
 800f66c:	009b      	lsls	r3, r3, #2
 800f66e:	440b      	add	r3, r1
 800f670:	3350      	adds	r3, #80	; 0x50
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d108      	bne.n	800f68a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6818      	ldr	r0, [r3, #0]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f682:	461a      	mov	r2, r3
 800f684:	2101      	movs	r1, #1
 800f686:	f007 fb83 	bl	8016d90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800f68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	4619      	mov	r1, r3
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f00c fc2e 	bl	801bef2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	f003 0308 	and.w	r3, r3, #8
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d008      	beq.n	800f6b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800f6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a2:	015a      	lsls	r2, r3, #5
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	2308      	movs	r3, #8
 800f6b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	f003 0310 	and.w	r3, r3, #16
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d008      	beq.n	800f6ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800f6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6be:	015a      	lsls	r2, r3, #5
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	2310      	movs	r3, #16
 800f6cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d008      	beq.n	800f6ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6da:	015a      	lsls	r2, r3, #5
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	4413      	add	r3, r2
 800f6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	2340      	movs	r3, #64	; 0x40
 800f6e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	f003 0302 	and.w	r3, r3, #2
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d008      	beq.n	800f706 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	015a      	lsls	r2, r3, #5
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f700:	461a      	mov	r2, r3
 800f702:	2302      	movs	r3, #2
 800f704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d003      	beq.n	800f718 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800f710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 fc48 	bl	800ffa8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800f718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71a:	3301      	adds	r3, #1
 800f71c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f720:	085b      	lsrs	r3, r3, #1
 800f722:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f726:	2b00      	cmp	r3, #0
 800f728:	f47f af49 	bne.w	800f5be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4618      	mov	r0, r3
 800f732:	f007 fa67 	bl	8016c04 <USB_ReadInterrupts>
 800f736:	4603      	mov	r3, r0
 800f738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f73c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f740:	d122      	bne.n	800f788 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	69fa      	ldr	r2, [r7, #28]
 800f74c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f750:	f023 0301 	bic.w	r3, r3, #1
 800f754:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d108      	bne.n	800f772 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f768:	2100      	movs	r1, #0
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fe78 	bl	8010460 <HAL_PCDEx_LPM_Callback>
 800f770:	e002      	b.n	800f778 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f00c fc34 	bl	801bfe0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	695a      	ldr	r2, [r3, #20]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f007 fa39 	bl	8016c04 <USB_ReadInterrupts>
 800f792:	4603      	mov	r3, r0
 800f794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f79c:	d112      	bne.n	800f7c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	f003 0301 	and.w	r3, r3, #1
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d102      	bne.n	800f7b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f00c fbf0 	bl	801bf94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	695a      	ldr	r2, [r3, #20]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f7c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f007 fa1b 	bl	8016c04 <USB_ReadInterrupts>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f7d8:	d121      	bne.n	800f81e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	695a      	ldr	r2, [r3, #20]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800f7e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d111      	bne.n	800f818 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f802:	089b      	lsrs	r3, r3, #2
 800f804:	f003 020f 	and.w	r2, r3, #15
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800f80e:	2101      	movs	r1, #1
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 fe25 	bl	8010460 <HAL_PCDEx_LPM_Callback>
 800f816:	e002      	b.n	800f81e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f00c fbbb 	bl	801bf94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4618      	mov	r0, r3
 800f824:	f007 f9ee 	bl	8016c04 <USB_ReadInterrupts>
 800f828:	4603      	mov	r3, r0
 800f82a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f82e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f832:	f040 80c7 	bne.w	800f9c4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	69fa      	ldr	r2, [r7, #28]
 800f840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f844:	f023 0301 	bic.w	r3, r3, #1
 800f848:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2110      	movs	r1, #16
 800f850:	4618      	mov	r0, r3
 800f852:	f006 fa77 	bl	8015d44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f856:	2300      	movs	r3, #0
 800f858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f85a:	e056      	b.n	800f90a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85e:	015a      	lsls	r2, r3, #5
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	4413      	add	r3, r2
 800f864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f868:	461a      	mov	r2, r3
 800f86a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f86e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f872:	015a      	lsls	r2, r3, #5
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	4413      	add	r3, r2
 800f878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f880:	0151      	lsls	r1, r2, #5
 800f882:	69fa      	ldr	r2, [r7, #28]
 800f884:	440a      	add	r2, r1
 800f886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f88a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f88e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f892:	015a      	lsls	r2, r3, #5
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	4413      	add	r3, r2
 800f898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8a0:	0151      	lsls	r1, r2, #5
 800f8a2:	69fa      	ldr	r2, [r7, #28]
 800f8a4:	440a      	add	r2, r1
 800f8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f8ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b2:	015a      	lsls	r2, r3, #5
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8bc:	461a      	mov	r2, r3
 800f8be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c6:	015a      	lsls	r2, r3, #5
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8d4:	0151      	lsls	r1, r2, #5
 800f8d6:	69fa      	ldr	r2, [r7, #28]
 800f8d8:	440a      	add	r2, r1
 800f8da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e6:	015a      	lsls	r2, r3, #5
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8f4:	0151      	lsls	r1, r2, #5
 800f8f6:	69fa      	ldr	r2, [r7, #28]
 800f8f8:	440a      	add	r2, r1
 800f8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f902:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	3301      	adds	r3, #1
 800f908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f910:	429a      	cmp	r2, r3
 800f912:	d3a3      	bcc.n	800f85c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f91a:	69db      	ldr	r3, [r3, #28]
 800f91c:	69fa      	ldr	r2, [r7, #28]
 800f91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f922:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f926:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d016      	beq.n	800f95e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f93a:	69fa      	ldr	r2, [r7, #28]
 800f93c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f940:	f043 030b 	orr.w	r3, r3, #11
 800f944:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f950:	69fa      	ldr	r2, [r7, #28]
 800f952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f956:	f043 030b 	orr.w	r3, r3, #11
 800f95a:	6453      	str	r3, [r2, #68]	; 0x44
 800f95c:	e015      	b.n	800f98a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f964:	695a      	ldr	r2, [r3, #20]
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f96c:	4619      	mov	r1, r3
 800f96e:	f242 032b 	movw	r3, #8235	; 0x202b
 800f972:	4313      	orrs	r3, r2
 800f974:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f97c:	691b      	ldr	r3, [r3, #16]
 800f97e:	69fa      	ldr	r2, [r7, #28]
 800f980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f984:	f043 030b 	orr.w	r3, r3, #11
 800f988:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	69fa      	ldr	r2, [r7, #28]
 800f994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f998:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f99c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6818      	ldr	r0, [r3, #0]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	691b      	ldr	r3, [r3, #16]
 800f9a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	f007 f9ee 	bl	8016d90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	695a      	ldr	r2, [r3, #20]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f9c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f007 f91b 	bl	8016c04 <USB_ReadInterrupts>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f9d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9d8:	d124      	bne.n	800fa24 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f007 f9b2 	bl	8016d48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f006 fa0c 	bl	8015e06 <USB_GetDevSpeed>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681c      	ldr	r4, [r3, #0]
 800f9fa:	f001 fce5 	bl	80113c8 <HAL_RCC_GetHCLKFreq>
 800f9fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	461a      	mov	r2, r3
 800fa08:	4620      	mov	r0, r4
 800fa0a:	f005 ff4f 	bl	80158ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f00c fa97 	bl	801bf42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	695a      	ldr	r2, [r3, #20]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fa22:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f007 f8eb 	bl	8016c04 <USB_ReadInterrupts>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	f003 0308 	and.w	r3, r3, #8
 800fa34:	2b08      	cmp	r3, #8
 800fa36:	d10a      	bne.n	800fa4e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f00c fa74 	bl	801bf26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	695a      	ldr	r2, [r3, #20]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f002 0208 	and.w	r2, r2, #8
 800fa4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f007 f8d6 	bl	8016c04 <USB_ReadInterrupts>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa62:	d10f      	bne.n	800fa84 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800fa64:	2300      	movs	r3, #0
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f00c fad6 	bl	801c020 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	695a      	ldr	r2, [r3, #20]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800fa82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f007 f8bb 	bl	8016c04 <USB_ReadInterrupts>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fa94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa98:	d10f      	bne.n	800faba <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	4619      	mov	r1, r3
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f00c faa9 	bl	801bffc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	695a      	ldr	r2, [r3, #20]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800fab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4618      	mov	r0, r3
 800fac0:	f007 f8a0 	bl	8016c04 <USB_ReadInterrupts>
 800fac4:	4603      	mov	r3, r0
 800fac6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800faca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800face:	d10a      	bne.n	800fae6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f00c fab7 	bl	801c044 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	695a      	ldr	r2, [r3, #20]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800fae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4618      	mov	r0, r3
 800faec:	f007 f88a 	bl	8016c04 <USB_ReadInterrupts>
 800faf0:	4603      	mov	r3, r0
 800faf2:	f003 0304 	and.w	r3, r3, #4
 800faf6:	2b04      	cmp	r3, #4
 800faf8:	d115      	bne.n	800fb26 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	f003 0304 	and.w	r3, r3, #4
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d002      	beq.n	800fb12 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f00c faa7 	bl	801c060 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	6859      	ldr	r1, [r3, #4]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	69ba      	ldr	r2, [r7, #24]
 800fb1e:	430a      	orrs	r2, r1
 800fb20:	605a      	str	r2, [r3, #4]
 800fb22:	e000      	b.n	800fb26 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800fb24:	bf00      	nop
    }
  }
}
 800fb26:	3734      	adds	r7, #52	; 0x34
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd90      	pop	{r4, r7, pc}

0800fb2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	460b      	mov	r3, r1
 800fb36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d101      	bne.n	800fb46 <HAL_PCD_SetAddress+0x1a>
 800fb42:	2302      	movs	r3, #2
 800fb44:	e013      	b.n	800fb6e <HAL_PCD_SetAddress+0x42>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	78fa      	ldrb	r2, [r7, #3]
 800fb52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	78fa      	ldrb	r2, [r7, #3]
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f006 ffe8 	bl	8016b34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b084      	sub	sp, #16
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	4608      	mov	r0, r1
 800fb80:	4611      	mov	r1, r2
 800fb82:	461a      	mov	r2, r3
 800fb84:	4603      	mov	r3, r0
 800fb86:	70fb      	strb	r3, [r7, #3]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	803b      	strh	r3, [r7, #0]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fb94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	da0f      	bge.n	800fbbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fb9c:	78fb      	ldrb	r3, [r7, #3]
 800fb9e:	f003 020f 	and.w	r2, r3, #15
 800fba2:	4613      	mov	r3, r2
 800fba4:	00db      	lsls	r3, r3, #3
 800fba6:	1a9b      	subs	r3, r3, r2
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	3338      	adds	r3, #56	; 0x38
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	4413      	add	r3, r2
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	705a      	strb	r2, [r3, #1]
 800fbba:	e00f      	b.n	800fbdc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fbbc:	78fb      	ldrb	r3, [r7, #3]
 800fbbe:	f003 020f 	and.w	r2, r3, #15
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	00db      	lsls	r3, r3, #3
 800fbc6:	1a9b      	subs	r3, r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800fbdc:	78fb      	ldrb	r3, [r7, #3]
 800fbde:	f003 030f 	and.w	r3, r3, #15
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800fbe8:	883a      	ldrh	r2, [r7, #0]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	78ba      	ldrb	r2, [r7, #2]
 800fbf2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	785b      	ldrb	r3, [r3, #1]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d004      	beq.n	800fc06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800fc06:	78bb      	ldrb	r3, [r7, #2]
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	d102      	bne.n	800fc12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d101      	bne.n	800fc20 <HAL_PCD_EP_Open+0xaa>
 800fc1c:	2302      	movs	r3, #2
 800fc1e:	e00e      	b.n	800fc3e <HAL_PCD_EP_Open+0xc8>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2201      	movs	r2, #1
 800fc24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68f9      	ldr	r1, [r7, #12]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f006 f90e 	bl	8015e50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800fc3c:	7afb      	ldrb	r3, [r7, #11]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
 800fc4e:	460b      	mov	r3, r1
 800fc50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fc52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	da0f      	bge.n	800fc7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc5a:	78fb      	ldrb	r3, [r7, #3]
 800fc5c:	f003 020f 	and.w	r2, r3, #15
 800fc60:	4613      	mov	r3, r2
 800fc62:	00db      	lsls	r3, r3, #3
 800fc64:	1a9b      	subs	r3, r3, r2
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	3338      	adds	r3, #56	; 0x38
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	3304      	adds	r3, #4
 800fc70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2201      	movs	r2, #1
 800fc76:	705a      	strb	r2, [r3, #1]
 800fc78:	e00f      	b.n	800fc9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fc7a:	78fb      	ldrb	r3, [r7, #3]
 800fc7c:	f003 020f 	and.w	r2, r3, #15
 800fc80:	4613      	mov	r3, r2
 800fc82:	00db      	lsls	r3, r3, #3
 800fc84:	1a9b      	subs	r3, r3, r2
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	4413      	add	r3, r2
 800fc90:	3304      	adds	r3, #4
 800fc92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2200      	movs	r2, #0
 800fc98:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800fc9a:	78fb      	ldrb	r3, [r7, #3]
 800fc9c:	f003 030f 	and.w	r3, r3, #15
 800fca0:	b2da      	uxtb	r2, r3
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d101      	bne.n	800fcb4 <HAL_PCD_EP_Close+0x6e>
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	e00e      	b.n	800fcd2 <HAL_PCD_EP_Close+0x8c>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	68f9      	ldr	r1, [r7, #12]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f006 f94c 	bl	8015f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b086      	sub	sp, #24
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60f8      	str	r0, [r7, #12]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	603b      	str	r3, [r7, #0]
 800fce6:	460b      	mov	r3, r1
 800fce8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fcea:	7afb      	ldrb	r3, [r7, #11]
 800fcec:	f003 020f 	and.w	r2, r3, #15
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	00db      	lsls	r3, r3, #3
 800fcf4:	1a9b      	subs	r3, r3, r2
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	4413      	add	r3, r2
 800fd00:	3304      	adds	r3, #4
 800fd02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	683a      	ldr	r2, [r7, #0]
 800fd0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	2200      	movs	r2, #0
 800fd14:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fd1c:	7afb      	ldrb	r3, [r7, #11]
 800fd1e:	f003 030f 	and.w	r3, r3, #15
 800fd22:	b2da      	uxtb	r2, r3
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	691b      	ldr	r3, [r3, #16]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d102      	bne.n	800fd36 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fd36:	7afb      	ldrb	r3, [r7, #11]
 800fd38:	f003 030f 	and.w	r3, r3, #15
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d109      	bne.n	800fd54 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	6818      	ldr	r0, [r3, #0]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	691b      	ldr	r3, [r3, #16]
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	6979      	ldr	r1, [r7, #20]
 800fd4e:	f006 fc2f 	bl	80165b0 <USB_EP0StartXfer>
 800fd52:	e008      	b.n	800fd66 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6818      	ldr	r0, [r3, #0]
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	691b      	ldr	r3, [r3, #16]
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	461a      	mov	r2, r3
 800fd60:	6979      	ldr	r1, [r7, #20]
 800fd62:	f006 f9d9 	bl	8016118 <USB_EPStartXfer>
  }

  return HAL_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3718      	adds	r7, #24
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	460b      	mov	r3, r1
 800fd7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800fd7c:	78fb      	ldrb	r3, [r7, #3]
 800fd7e:	f003 020f 	and.w	r2, r3, #15
 800fd82:	6879      	ldr	r1, [r7, #4]
 800fd84:	4613      	mov	r3, r2
 800fd86:	00db      	lsls	r3, r3, #3
 800fd88:	1a9b      	subs	r3, r3, r2
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	440b      	add	r3, r1
 800fd8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fd92:	681b      	ldr	r3, [r3, #0]
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b086      	sub	sp, #24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	607a      	str	r2, [r7, #4]
 800fdaa:	603b      	str	r3, [r7, #0]
 800fdac:	460b      	mov	r3, r1
 800fdae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fdb0:	7afb      	ldrb	r3, [r7, #11]
 800fdb2:	f003 020f 	and.w	r2, r3, #15
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	00db      	lsls	r3, r3, #3
 800fdba:	1a9b      	subs	r3, r3, r2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	3338      	adds	r3, #56	; 0x38
 800fdc0:	68fa      	ldr	r2, [r7, #12]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	3304      	adds	r3, #4
 800fdc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	683a      	ldr	r2, [r7, #0]
 800fdd2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2201      	movs	r2, #1
 800fdde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fde0:	7afb      	ldrb	r3, [r7, #11]
 800fde2:	f003 030f 	and.w	r3, r3, #15
 800fde6:	b2da      	uxtb	r2, r3
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	691b      	ldr	r3, [r3, #16]
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d102      	bne.n	800fdfa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fdfa:	7afb      	ldrb	r3, [r7, #11]
 800fdfc:	f003 030f 	and.w	r3, r3, #15
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d109      	bne.n	800fe18 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	6818      	ldr	r0, [r3, #0]
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	461a      	mov	r2, r3
 800fe10:	6979      	ldr	r1, [r7, #20]
 800fe12:	f006 fbcd 	bl	80165b0 <USB_EP0StartXfer>
 800fe16:	e008      	b.n	800fe2a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6818      	ldr	r0, [r3, #0]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	691b      	ldr	r3, [r3, #16]
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	461a      	mov	r2, r3
 800fe24:	6979      	ldr	r1, [r7, #20]
 800fe26:	f006 f977 	bl	8016118 <USB_EPStartXfer>
  }

  return HAL_OK;
 800fe2a:	2300      	movs	r3, #0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3718      	adds	r7, #24
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800fe40:	78fb      	ldrb	r3, [r7, #3]
 800fe42:	f003 020f 	and.w	r2, r3, #15
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d901      	bls.n	800fe52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800fe4e:	2301      	movs	r3, #1
 800fe50:	e050      	b.n	800fef4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fe52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	da0f      	bge.n	800fe7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fe5a:	78fb      	ldrb	r3, [r7, #3]
 800fe5c:	f003 020f 	and.w	r2, r3, #15
 800fe60:	4613      	mov	r3, r2
 800fe62:	00db      	lsls	r3, r3, #3
 800fe64:	1a9b      	subs	r3, r3, r2
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	3338      	adds	r3, #56	; 0x38
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	3304      	adds	r3, #4
 800fe70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2201      	movs	r2, #1
 800fe76:	705a      	strb	r2, [r3, #1]
 800fe78:	e00d      	b.n	800fe96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fe7a:	78fa      	ldrb	r2, [r7, #3]
 800fe7c:	4613      	mov	r3, r2
 800fe7e:	00db      	lsls	r3, r3, #3
 800fe80:	1a9b      	subs	r3, r3, r2
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	3304      	adds	r3, #4
 800fe8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2200      	movs	r2, #0
 800fe94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2201      	movs	r2, #1
 800fe9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fe9c:	78fb      	ldrb	r3, [r7, #3]
 800fe9e:	f003 030f 	and.w	r3, r3, #15
 800fea2:	b2da      	uxtb	r2, r3
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d101      	bne.n	800feb6 <HAL_PCD_EP_SetStall+0x82>
 800feb2:	2302      	movs	r3, #2
 800feb4:	e01e      	b.n	800fef4 <HAL_PCD_EP_SetStall+0xc0>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2201      	movs	r2, #1
 800feba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	68f9      	ldr	r1, [r7, #12]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f006 fd61 	bl	801698c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800feca:	78fb      	ldrb	r3, [r7, #3]
 800fecc:	f003 030f 	and.w	r3, r3, #15
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d10a      	bne.n	800feea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6818      	ldr	r0, [r3, #0]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	b2d9      	uxtb	r1, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fee4:	461a      	mov	r2, r3
 800fee6:	f006 ff53 	bl	8016d90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2200      	movs	r2, #0
 800feee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800fef2:	2300      	movs	r3, #0
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	460b      	mov	r3, r1
 800ff06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ff08:	78fb      	ldrb	r3, [r7, #3]
 800ff0a:	f003 020f 	and.w	r2, r3, #15
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d901      	bls.n	800ff1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ff16:	2301      	movs	r3, #1
 800ff18:	e042      	b.n	800ffa0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ff1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	da0f      	bge.n	800ff42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ff22:	78fb      	ldrb	r3, [r7, #3]
 800ff24:	f003 020f 	and.w	r2, r3, #15
 800ff28:	4613      	mov	r3, r2
 800ff2a:	00db      	lsls	r3, r3, #3
 800ff2c:	1a9b      	subs	r3, r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	3338      	adds	r3, #56	; 0x38
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	4413      	add	r3, r2
 800ff36:	3304      	adds	r3, #4
 800ff38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	705a      	strb	r2, [r3, #1]
 800ff40:	e00f      	b.n	800ff62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ff42:	78fb      	ldrb	r3, [r7, #3]
 800ff44:	f003 020f 	and.w	r2, r3, #15
 800ff48:	4613      	mov	r3, r2
 800ff4a:	00db      	lsls	r3, r3, #3
 800ff4c:	1a9b      	subs	r3, r3, r2
 800ff4e:	009b      	lsls	r3, r3, #2
 800ff50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	4413      	add	r3, r2
 800ff58:	3304      	adds	r3, #4
 800ff5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ff68:	78fb      	ldrb	r3, [r7, #3]
 800ff6a:	f003 030f 	and.w	r3, r3, #15
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d101      	bne.n	800ff82 <HAL_PCD_EP_ClrStall+0x86>
 800ff7e:	2302      	movs	r3, #2
 800ff80:	e00e      	b.n	800ffa0 <HAL_PCD_EP_ClrStall+0xa4>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2201      	movs	r2, #1
 800ff86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	68f9      	ldr	r1, [r7, #12]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f006 fd69 	bl	8016a68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3710      	adds	r7, #16
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b08a      	sub	sp, #40	; 0x28
 800ffac:	af02      	add	r7, sp, #8
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ffbc:	683a      	ldr	r2, [r7, #0]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	1a9b      	subs	r3, r3, r2
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	3338      	adds	r3, #56	; 0x38
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	4413      	add	r3, r2
 800ffcc:	3304      	adds	r3, #4
 800ffce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	699a      	ldr	r2, [r3, #24]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	695b      	ldr	r3, [r3, #20]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d901      	bls.n	800ffe0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e06c      	b.n	80100ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	695a      	ldr	r2, [r3, #20]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	699b      	ldr	r3, [r3, #24]
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	69fa      	ldr	r2, [r7, #28]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d902      	bls.n	800fffc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	3303      	adds	r3, #3
 8010000:	089b      	lsrs	r3, r3, #2
 8010002:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010004:	e02b      	b.n	801005e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	695a      	ldr	r2, [r3, #20]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	69fa      	ldr	r2, [r7, #28]
 8010018:	429a      	cmp	r2, r3
 801001a:	d902      	bls.n	8010022 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	3303      	adds	r3, #3
 8010026:	089b      	lsrs	r3, r3, #2
 8010028:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	68d9      	ldr	r1, [r3, #12]
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	b2da      	uxtb	r2, r3
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801003a:	b2db      	uxtb	r3, r3
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	4603      	mov	r3, r0
 8010040:	6978      	ldr	r0, [r7, #20]
 8010042:	f006 fc0d 	bl	8016860 <USB_WritePacket>

    ep->xfer_buff  += len;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	68da      	ldr	r2, [r3, #12]
 801004a:	69fb      	ldr	r3, [r7, #28]
 801004c:	441a      	add	r2, r3
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	699a      	ldr	r2, [r3, #24]
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	441a      	add	r2, r3
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	015a      	lsls	r2, r3, #5
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	4413      	add	r3, r2
 8010066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801006a:	699b      	ldr	r3, [r3, #24]
 801006c:	b29b      	uxth	r3, r3
 801006e:	69ba      	ldr	r2, [r7, #24]
 8010070:	429a      	cmp	r2, r3
 8010072:	d809      	bhi.n	8010088 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	699a      	ldr	r2, [r3, #24]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801007c:	429a      	cmp	r2, r3
 801007e:	d203      	bcs.n	8010088 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	695b      	ldr	r3, [r3, #20]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d1be      	bne.n	8010006 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	695a      	ldr	r2, [r3, #20]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	699b      	ldr	r3, [r3, #24]
 8010090:	429a      	cmp	r2, r3
 8010092:	d811      	bhi.n	80100b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	f003 030f 	and.w	r3, r3, #15
 801009a:	2201      	movs	r2, #1
 801009c:	fa02 f303 	lsl.w	r3, r2, r3
 80100a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	43db      	mvns	r3, r3
 80100ae:	6939      	ldr	r1, [r7, #16]
 80100b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100b4:	4013      	ands	r3, r2
 80100b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80100b8:	2300      	movs	r3, #0
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3720      	adds	r7, #32
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
	...

080100c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b086      	sub	sp, #24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	333c      	adds	r3, #60	; 0x3c
 80100dc:	3304      	adds	r3, #4
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	015a      	lsls	r2, r3, #5
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	4413      	add	r3, r2
 80100ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	691b      	ldr	r3, [r3, #16]
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	f040 80a0 	bne.w	801023c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	f003 0308 	and.w	r3, r3, #8
 8010102:	2b00      	cmp	r3, #0
 8010104:	d015      	beq.n	8010132 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	4a72      	ldr	r2, [pc, #456]	; (80102d4 <PCD_EP_OutXfrComplete_int+0x210>)
 801010a:	4293      	cmp	r3, r2
 801010c:	f240 80dd 	bls.w	80102ca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010116:	2b00      	cmp	r3, #0
 8010118:	f000 80d7 	beq.w	80102ca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	015a      	lsls	r2, r3, #5
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	4413      	add	r3, r2
 8010124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010128:	461a      	mov	r2, r3
 801012a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801012e:	6093      	str	r3, [r2, #8]
 8010130:	e0cb      	b.n	80102ca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	f003 0320 	and.w	r3, r3, #32
 8010138:	2b00      	cmp	r3, #0
 801013a:	d009      	beq.n	8010150 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	015a      	lsls	r2, r3, #5
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	4413      	add	r3, r2
 8010144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010148:	461a      	mov	r2, r3
 801014a:	2320      	movs	r3, #32
 801014c:	6093      	str	r3, [r2, #8]
 801014e:	e0bc      	b.n	80102ca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010156:	2b00      	cmp	r3, #0
 8010158:	f040 80b7 	bne.w	80102ca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	4a5d      	ldr	r2, [pc, #372]	; (80102d4 <PCD_EP_OutXfrComplete_int+0x210>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d90f      	bls.n	8010184 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00a      	beq.n	8010184 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	015a      	lsls	r2, r3, #5
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	4413      	add	r3, r2
 8010176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801017a:	461a      	mov	r2, r3
 801017c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010180:	6093      	str	r3, [r2, #8]
 8010182:	e0a2      	b.n	80102ca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8010184:	6879      	ldr	r1, [r7, #4]
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	4613      	mov	r3, r2
 801018a:	00db      	lsls	r3, r3, #3
 801018c:	1a9b      	subs	r3, r3, r2
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	440b      	add	r3, r1
 8010192:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8010196:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	0159      	lsls	r1, r3, #5
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	440b      	add	r3, r1
 80101a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a4:	691b      	ldr	r3, [r3, #16]
 80101a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80101aa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	4613      	mov	r3, r2
 80101b2:	00db      	lsls	r3, r3, #3
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	4403      	add	r3, r0
 80101ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80101be:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80101c0:	6879      	ldr	r1, [r7, #4]
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	4613      	mov	r3, r2
 80101c6:	00db      	lsls	r3, r3, #3
 80101c8:	1a9b      	subs	r3, r3, r2
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	440b      	add	r3, r1
 80101ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80101d2:	6819      	ldr	r1, [r3, #0]
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	683a      	ldr	r2, [r7, #0]
 80101d8:	4613      	mov	r3, r2
 80101da:	00db      	lsls	r3, r3, #3
 80101dc:	1a9b      	subs	r3, r3, r2
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	4403      	add	r3, r0
 80101e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4419      	add	r1, r3
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	683a      	ldr	r2, [r7, #0]
 80101ee:	4613      	mov	r3, r2
 80101f0:	00db      	lsls	r3, r3, #3
 80101f2:	1a9b      	subs	r3, r3, r2
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4403      	add	r3, r0
 80101f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80101fc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d114      	bne.n	801022e <PCD_EP_OutXfrComplete_int+0x16a>
 8010204:	6879      	ldr	r1, [r7, #4]
 8010206:	683a      	ldr	r2, [r7, #0]
 8010208:	4613      	mov	r3, r2
 801020a:	00db      	lsls	r3, r3, #3
 801020c:	1a9b      	subs	r3, r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	440b      	add	r3, r1
 8010212:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d108      	bne.n	801022e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6818      	ldr	r0, [r3, #0]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010226:	461a      	mov	r2, r3
 8010228:	2101      	movs	r1, #1
 801022a:	f006 fdb1 	bl	8016d90 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	b2db      	uxtb	r3, r3
 8010232:	4619      	mov	r1, r3
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f00b fe41 	bl	801bebc <HAL_PCD_DataOutStageCallback>
 801023a:	e046      	b.n	80102ca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	4a26      	ldr	r2, [pc, #152]	; (80102d8 <PCD_EP_OutXfrComplete_int+0x214>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d124      	bne.n	801028e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00a      	beq.n	8010264 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	015a      	lsls	r2, r3, #5
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	4413      	add	r3, r2
 8010256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801025a:	461a      	mov	r2, r3
 801025c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010260:	6093      	str	r3, [r2, #8]
 8010262:	e032      	b.n	80102ca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	f003 0320 	and.w	r3, r3, #32
 801026a:	2b00      	cmp	r3, #0
 801026c:	d008      	beq.n	8010280 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	015a      	lsls	r2, r3, #5
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	4413      	add	r3, r2
 8010276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027a:	461a      	mov	r2, r3
 801027c:	2320      	movs	r3, #32
 801027e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	b2db      	uxtb	r3, r3
 8010284:	4619      	mov	r1, r3
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f00b fe18 	bl	801bebc <HAL_PCD_DataOutStageCallback>
 801028c:	e01d      	b.n	80102ca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d114      	bne.n	80102be <PCD_EP_OutXfrComplete_int+0x1fa>
 8010294:	6879      	ldr	r1, [r7, #4]
 8010296:	683a      	ldr	r2, [r7, #0]
 8010298:	4613      	mov	r3, r2
 801029a:	00db      	lsls	r3, r3, #3
 801029c:	1a9b      	subs	r3, r3, r2
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	440b      	add	r3, r1
 80102a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d108      	bne.n	80102be <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6818      	ldr	r0, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80102b6:	461a      	mov	r2, r3
 80102b8:	2100      	movs	r1, #0
 80102ba:	f006 fd69 	bl	8016d90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	4619      	mov	r1, r3
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f00b fdf9 	bl	801bebc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80102ca:	2300      	movs	r3, #0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3718      	adds	r7, #24
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	4f54300a 	.word	0x4f54300a
 80102d8:	4f54310a 	.word	0x4f54310a

080102dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b086      	sub	sp, #24
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	333c      	adds	r3, #60	; 0x3c
 80102f4:	3304      	adds	r3, #4
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	015a      	lsls	r2, r3, #5
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	4413      	add	r3, r2
 8010302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	4a15      	ldr	r2, [pc, #84]	; (8010364 <PCD_EP_OutSetupPacket_int+0x88>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d90e      	bls.n	8010330 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010318:	2b00      	cmp	r3, #0
 801031a:	d009      	beq.n	8010330 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	015a      	lsls	r2, r3, #5
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	4413      	add	r3, r2
 8010324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010328:	461a      	mov	r2, r3
 801032a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801032e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f00b fdb1 	bl	801be98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	4a0a      	ldr	r2, [pc, #40]	; (8010364 <PCD_EP_OutSetupPacket_int+0x88>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d90c      	bls.n	8010358 <PCD_EP_OutSetupPacket_int+0x7c>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d108      	bne.n	8010358 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6818      	ldr	r0, [r3, #0]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010350:	461a      	mov	r2, r3
 8010352:	2101      	movs	r1, #1
 8010354:	f006 fd1c 	bl	8016d90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3718      	adds	r7, #24
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	4f54300a 	.word	0x4f54300a

08010368 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8010368:	b480      	push	{r7}
 801036a:	b085      	sub	sp, #20
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	460b      	mov	r3, r1
 8010372:	70fb      	strb	r3, [r7, #3]
 8010374:	4613      	mov	r3, r2
 8010376:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801037e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8010380:	78fb      	ldrb	r3, [r7, #3]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d107      	bne.n	8010396 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8010386:	883b      	ldrh	r3, [r7, #0]
 8010388:	0419      	lsls	r1, r3, #16
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	430a      	orrs	r2, r1
 8010392:	629a      	str	r2, [r3, #40]	; 0x28
 8010394:	e028      	b.n	80103e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801039c:	0c1b      	lsrs	r3, r3, #16
 801039e:	68ba      	ldr	r2, [r7, #8]
 80103a0:	4413      	add	r3, r2
 80103a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80103a4:	2300      	movs	r3, #0
 80103a6:	73fb      	strb	r3, [r7, #15]
 80103a8:	e00d      	b.n	80103c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	7bfb      	ldrb	r3, [r7, #15]
 80103b0:	3340      	adds	r3, #64	; 0x40
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	4413      	add	r3, r2
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	0c1b      	lsrs	r3, r3, #16
 80103ba:	68ba      	ldr	r2, [r7, #8]
 80103bc:	4413      	add	r3, r2
 80103be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80103c0:	7bfb      	ldrb	r3, [r7, #15]
 80103c2:	3301      	adds	r3, #1
 80103c4:	73fb      	strb	r3, [r7, #15]
 80103c6:	7bfa      	ldrb	r2, [r7, #15]
 80103c8:	78fb      	ldrb	r3, [r7, #3]
 80103ca:	3b01      	subs	r3, #1
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d3ec      	bcc.n	80103aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80103d0:	883b      	ldrh	r3, [r7, #0]
 80103d2:	0418      	lsls	r0, r3, #16
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6819      	ldr	r1, [r3, #0]
 80103d8:	78fb      	ldrb	r3, [r7, #3]
 80103da:	3b01      	subs	r3, #1
 80103dc:	68ba      	ldr	r2, [r7, #8]
 80103de:	4302      	orrs	r2, r0
 80103e0:	3340      	adds	r3, #64	; 0x40
 80103e2:	009b      	lsls	r3, r3, #2
 80103e4:	440b      	add	r3, r1
 80103e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3714      	adds	r7, #20
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr

080103f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80103f6:	b480      	push	{r7}
 80103f8:	b083      	sub	sp, #12
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
 80103fe:	460b      	mov	r3, r1
 8010400:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	887a      	ldrh	r2, [r7, #2]
 8010408:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801040a:	2300      	movs	r3, #0
}
 801040c:	4618      	mov	r0, r3
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2201      	movs	r2, #1
 801042a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010446:	4b05      	ldr	r3, [pc, #20]	; (801045c <HAL_PCDEx_ActivateLPM+0x44>)
 8010448:	4313      	orrs	r3, r2
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801044e:	2300      	movs	r3, #0
}
 8010450:	4618      	mov	r0, r3
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr
 801045c:	10000003 	.word	0x10000003

08010460 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801046c:	bf00      	nop
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8010480:	4b29      	ldr	r3, [pc, #164]	; (8010528 <HAL_PWREx_ConfigSupply+0xb0>)
 8010482:	68db      	ldr	r3, [r3, #12]
 8010484:	f003 0307 	and.w	r3, r3, #7
 8010488:	2b06      	cmp	r3, #6
 801048a:	d00a      	beq.n	80104a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801048c:	4b26      	ldr	r3, [pc, #152]	; (8010528 <HAL_PWREx_ConfigSupply+0xb0>)
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	429a      	cmp	r2, r3
 8010498:	d001      	beq.n	801049e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801049a:	2301      	movs	r3, #1
 801049c:	e040      	b.n	8010520 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801049e:	2300      	movs	r3, #0
 80104a0:	e03e      	b.n	8010520 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80104a2:	4b21      	ldr	r3, [pc, #132]	; (8010528 <HAL_PWREx_ConfigSupply+0xb0>)
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80104aa:	491f      	ldr	r1, [pc, #124]	; (8010528 <HAL_PWREx_ConfigSupply+0xb0>)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	4313      	orrs	r3, r2
 80104b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80104b2:	f7fa ff3d 	bl	800b330 <HAL_GetTick>
 80104b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80104b8:	e009      	b.n	80104ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80104ba:	f7fa ff39 	bl	800b330 <HAL_GetTick>
 80104be:	4602      	mov	r2, r0
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80104c8:	d901      	bls.n	80104ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80104ca:	2301      	movs	r3, #1
 80104cc:	e028      	b.n	8010520 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80104ce:	4b16      	ldr	r3, [pc, #88]	; (8010528 <HAL_PWREx_ConfigSupply+0xb0>)
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80104d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104da:	d1ee      	bne.n	80104ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2b1e      	cmp	r3, #30
 80104e0:	d008      	beq.n	80104f4 <HAL_PWREx_ConfigSupply+0x7c>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b2e      	cmp	r3, #46	; 0x2e
 80104e6:	d005      	beq.n	80104f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b1d      	cmp	r3, #29
 80104ec:	d002      	beq.n	80104f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b2d      	cmp	r3, #45	; 0x2d
 80104f2:	d114      	bne.n	801051e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80104f4:	f7fa ff1c 	bl	800b330 <HAL_GetTick>
 80104f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80104fa:	e009      	b.n	8010510 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80104fc:	f7fa ff18 	bl	800b330 <HAL_GetTick>
 8010500:	4602      	mov	r2, r0
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	1ad3      	subs	r3, r2, r3
 8010506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801050a:	d901      	bls.n	8010510 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801050c:	2301      	movs	r3, #1
 801050e:	e007      	b.n	8010520 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8010510:	4b05      	ldr	r3, [pc, #20]	; (8010528 <HAL_PWREx_ConfigSupply+0xb0>)
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801051c:	d1ee      	bne.n	80104fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801051e:	2300      	movs	r3, #0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3710      	adds	r7, #16
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	58024800 	.word	0x58024800

0801052c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 801052c:	b480      	push	{r7}
 801052e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8010530:	4b05      	ldr	r3, [pc, #20]	; (8010548 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	4a04      	ldr	r2, [pc, #16]	; (8010548 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8010536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801053a:	60d3      	str	r3, [r2, #12]
}
 801053c:	bf00      	nop
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	58024800 	.word	0x58024800

0801054c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b08c      	sub	sp, #48	; 0x30
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d101      	bne.n	801055e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801055a:	2301      	movs	r3, #1
 801055c:	e3fd      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f003 0301 	and.w	r3, r3, #1
 8010566:	2b00      	cmp	r3, #0
 8010568:	f000 8087 	beq.w	801067a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801056c:	4b99      	ldr	r3, [pc, #612]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 801056e:	691b      	ldr	r3, [r3, #16]
 8010570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010574:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010576:	4b97      	ldr	r3, [pc, #604]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801057a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	2b10      	cmp	r3, #16
 8010580:	d007      	beq.n	8010592 <HAL_RCC_OscConfig+0x46>
 8010582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010584:	2b18      	cmp	r3, #24
 8010586:	d110      	bne.n	80105aa <HAL_RCC_OscConfig+0x5e>
 8010588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058a:	f003 0303 	and.w	r3, r3, #3
 801058e:	2b02      	cmp	r3, #2
 8010590:	d10b      	bne.n	80105aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010592:	4b90      	ldr	r3, [pc, #576]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801059a:	2b00      	cmp	r3, #0
 801059c:	d06c      	beq.n	8010678 <HAL_RCC_OscConfig+0x12c>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d168      	bne.n	8010678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80105a6:	2301      	movs	r3, #1
 80105a8:	e3d7      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105b2:	d106      	bne.n	80105c2 <HAL_RCC_OscConfig+0x76>
 80105b4:	4b87      	ldr	r3, [pc, #540]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4a86      	ldr	r2, [pc, #536]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105be:	6013      	str	r3, [r2, #0]
 80105c0:	e02e      	b.n	8010620 <HAL_RCC_OscConfig+0xd4>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d10c      	bne.n	80105e4 <HAL_RCC_OscConfig+0x98>
 80105ca:	4b82      	ldr	r3, [pc, #520]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4a81      	ldr	r2, [pc, #516]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80105d4:	6013      	str	r3, [r2, #0]
 80105d6:	4b7f      	ldr	r3, [pc, #508]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a7e      	ldr	r2, [pc, #504]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80105e0:	6013      	str	r3, [r2, #0]
 80105e2:	e01d      	b.n	8010620 <HAL_RCC_OscConfig+0xd4>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80105ec:	d10c      	bne.n	8010608 <HAL_RCC_OscConfig+0xbc>
 80105ee:	4b79      	ldr	r3, [pc, #484]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4a78      	ldr	r2, [pc, #480]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80105f8:	6013      	str	r3, [r2, #0]
 80105fa:	4b76      	ldr	r3, [pc, #472]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4a75      	ldr	r2, [pc, #468]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010604:	6013      	str	r3, [r2, #0]
 8010606:	e00b      	b.n	8010620 <HAL_RCC_OscConfig+0xd4>
 8010608:	4b72      	ldr	r3, [pc, #456]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a71      	ldr	r2, [pc, #452]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 801060e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010612:	6013      	str	r3, [r2, #0]
 8010614:	4b6f      	ldr	r3, [pc, #444]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4a6e      	ldr	r2, [pc, #440]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 801061a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801061e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d013      	beq.n	8010650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010628:	f7fa fe82 	bl	800b330 <HAL_GetTick>
 801062c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801062e:	e008      	b.n	8010642 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010630:	f7fa fe7e 	bl	800b330 <HAL_GetTick>
 8010634:	4602      	mov	r2, r0
 8010636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	2b64      	cmp	r3, #100	; 0x64
 801063c:	d901      	bls.n	8010642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801063e:	2303      	movs	r3, #3
 8010640:	e38b      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010642:	4b64      	ldr	r3, [pc, #400]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801064a:	2b00      	cmp	r3, #0
 801064c:	d0f0      	beq.n	8010630 <HAL_RCC_OscConfig+0xe4>
 801064e:	e014      	b.n	801067a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010650:	f7fa fe6e 	bl	800b330 <HAL_GetTick>
 8010654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010656:	e008      	b.n	801066a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010658:	f7fa fe6a 	bl	800b330 <HAL_GetTick>
 801065c:	4602      	mov	r2, r0
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	2b64      	cmp	r3, #100	; 0x64
 8010664:	d901      	bls.n	801066a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010666:	2303      	movs	r3, #3
 8010668:	e377      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801066a:	4b5a      	ldr	r3, [pc, #360]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1f0      	bne.n	8010658 <HAL_RCC_OscConfig+0x10c>
 8010676:	e000      	b.n	801067a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f003 0302 	and.w	r3, r3, #2
 8010682:	2b00      	cmp	r3, #0
 8010684:	f000 80ae 	beq.w	80107e4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010688:	4b52      	ldr	r3, [pc, #328]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 801068a:	691b      	ldr	r3, [r3, #16]
 801068c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010690:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010692:	4b50      	ldr	r3, [pc, #320]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010696:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010698:	6a3b      	ldr	r3, [r7, #32]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d007      	beq.n	80106ae <HAL_RCC_OscConfig+0x162>
 801069e:	6a3b      	ldr	r3, [r7, #32]
 80106a0:	2b18      	cmp	r3, #24
 80106a2:	d13a      	bne.n	801071a <HAL_RCC_OscConfig+0x1ce>
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	f003 0303 	and.w	r3, r3, #3
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d135      	bne.n	801071a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80106ae:	4b49      	ldr	r3, [pc, #292]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f003 0304 	and.w	r3, r3, #4
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d005      	beq.n	80106c6 <HAL_RCC_OscConfig+0x17a>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d101      	bne.n	80106c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80106c2:	2301      	movs	r3, #1
 80106c4:	e349      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80106c6:	f7fa fe63 	bl	800b390 <HAL_GetREVID>
 80106ca:	4603      	mov	r3, r0
 80106cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d817      	bhi.n	8010704 <HAL_RCC_OscConfig+0x1b8>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	691b      	ldr	r3, [r3, #16]
 80106d8:	2b40      	cmp	r3, #64	; 0x40
 80106da:	d108      	bne.n	80106ee <HAL_RCC_OscConfig+0x1a2>
 80106dc:	4b3d      	ldr	r3, [pc, #244]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80106e4:	4a3b      	ldr	r2, [pc, #236]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80106e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80106ea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80106ec:	e07a      	b.n	80107e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80106ee:	4b39      	ldr	r3, [pc, #228]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	691b      	ldr	r3, [r3, #16]
 80106fa:	031b      	lsls	r3, r3, #12
 80106fc:	4935      	ldr	r1, [pc, #212]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80106fe:	4313      	orrs	r3, r2
 8010700:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010702:	e06f      	b.n	80107e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010704:	4b33      	ldr	r3, [pc, #204]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	691b      	ldr	r3, [r3, #16]
 8010710:	061b      	lsls	r3, r3, #24
 8010712:	4930      	ldr	r1, [pc, #192]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010714:	4313      	orrs	r3, r2
 8010716:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010718:	e064      	b.n	80107e4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d045      	beq.n	80107ae <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010722:	4b2c      	ldr	r3, [pc, #176]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f023 0219 	bic.w	r2, r3, #25
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	4929      	ldr	r1, [pc, #164]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010730:	4313      	orrs	r3, r2
 8010732:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010734:	f7fa fdfc 	bl	800b330 <HAL_GetTick>
 8010738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801073a:	e008      	b.n	801074e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801073c:	f7fa fdf8 	bl	800b330 <HAL_GetTick>
 8010740:	4602      	mov	r2, r0
 8010742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	2b02      	cmp	r3, #2
 8010748:	d901      	bls.n	801074e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 801074a:	2303      	movs	r3, #3
 801074c:	e305      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801074e:	4b21      	ldr	r3, [pc, #132]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f003 0304 	and.w	r3, r3, #4
 8010756:	2b00      	cmp	r3, #0
 8010758:	d0f0      	beq.n	801073c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801075a:	f7fa fe19 	bl	800b390 <HAL_GetREVID>
 801075e:	4603      	mov	r3, r0
 8010760:	f241 0203 	movw	r2, #4099	; 0x1003
 8010764:	4293      	cmp	r3, r2
 8010766:	d817      	bhi.n	8010798 <HAL_RCC_OscConfig+0x24c>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	691b      	ldr	r3, [r3, #16]
 801076c:	2b40      	cmp	r3, #64	; 0x40
 801076e:	d108      	bne.n	8010782 <HAL_RCC_OscConfig+0x236>
 8010770:	4b18      	ldr	r3, [pc, #96]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010778:	4a16      	ldr	r2, [pc, #88]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 801077a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801077e:	6053      	str	r3, [r2, #4]
 8010780:	e030      	b.n	80107e4 <HAL_RCC_OscConfig+0x298>
 8010782:	4b14      	ldr	r3, [pc, #80]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	691b      	ldr	r3, [r3, #16]
 801078e:	031b      	lsls	r3, r3, #12
 8010790:	4910      	ldr	r1, [pc, #64]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 8010792:	4313      	orrs	r3, r2
 8010794:	604b      	str	r3, [r1, #4]
 8010796:	e025      	b.n	80107e4 <HAL_RCC_OscConfig+0x298>
 8010798:	4b0e      	ldr	r3, [pc, #56]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	691b      	ldr	r3, [r3, #16]
 80107a4:	061b      	lsls	r3, r3, #24
 80107a6:	490b      	ldr	r1, [pc, #44]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80107a8:	4313      	orrs	r3, r2
 80107aa:	604b      	str	r3, [r1, #4]
 80107ac:	e01a      	b.n	80107e4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80107ae:	4b09      	ldr	r3, [pc, #36]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4a08      	ldr	r2, [pc, #32]	; (80107d4 <HAL_RCC_OscConfig+0x288>)
 80107b4:	f023 0301 	bic.w	r3, r3, #1
 80107b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107ba:	f7fa fdb9 	bl	800b330 <HAL_GetTick>
 80107be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80107c0:	e00a      	b.n	80107d8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80107c2:	f7fa fdb5 	bl	800b330 <HAL_GetTick>
 80107c6:	4602      	mov	r2, r0
 80107c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ca:	1ad3      	subs	r3, r2, r3
 80107cc:	2b02      	cmp	r3, #2
 80107ce:	d903      	bls.n	80107d8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80107d0:	2303      	movs	r3, #3
 80107d2:	e2c2      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
 80107d4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80107d8:	4b94      	ldr	r3, [pc, #592]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f003 0304 	and.w	r3, r3, #4
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d1ee      	bne.n	80107c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f003 0310 	and.w	r3, r3, #16
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	f000 80a9 	beq.w	8010944 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80107f2:	4b8e      	ldr	r3, [pc, #568]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80107f4:	691b      	ldr	r3, [r3, #16]
 80107f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80107fc:	4b8b      	ldr	r3, [pc, #556]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80107fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010800:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	2b08      	cmp	r3, #8
 8010806:	d007      	beq.n	8010818 <HAL_RCC_OscConfig+0x2cc>
 8010808:	69bb      	ldr	r3, [r7, #24]
 801080a:	2b18      	cmp	r3, #24
 801080c:	d13a      	bne.n	8010884 <HAL_RCC_OscConfig+0x338>
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	f003 0303 	and.w	r3, r3, #3
 8010814:	2b01      	cmp	r3, #1
 8010816:	d135      	bne.n	8010884 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010818:	4b84      	ldr	r3, [pc, #528]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010820:	2b00      	cmp	r3, #0
 8010822:	d005      	beq.n	8010830 <HAL_RCC_OscConfig+0x2e4>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	69db      	ldr	r3, [r3, #28]
 8010828:	2b80      	cmp	r3, #128	; 0x80
 801082a:	d001      	beq.n	8010830 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 801082c:	2301      	movs	r3, #1
 801082e:	e294      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010830:	f7fa fdae 	bl	800b390 <HAL_GetREVID>
 8010834:	4603      	mov	r3, r0
 8010836:	f241 0203 	movw	r2, #4099	; 0x1003
 801083a:	4293      	cmp	r3, r2
 801083c:	d817      	bhi.n	801086e <HAL_RCC_OscConfig+0x322>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6a1b      	ldr	r3, [r3, #32]
 8010842:	2b20      	cmp	r3, #32
 8010844:	d108      	bne.n	8010858 <HAL_RCC_OscConfig+0x30c>
 8010846:	4b79      	ldr	r3, [pc, #484]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801084e:	4a77      	ldr	r2, [pc, #476]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010854:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010856:	e075      	b.n	8010944 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010858:	4b74      	ldr	r3, [pc, #464]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6a1b      	ldr	r3, [r3, #32]
 8010864:	069b      	lsls	r3, r3, #26
 8010866:	4971      	ldr	r1, [pc, #452]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010868:	4313      	orrs	r3, r2
 801086a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801086c:	e06a      	b.n	8010944 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801086e:	4b6f      	ldr	r3, [pc, #444]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6a1b      	ldr	r3, [r3, #32]
 801087a:	061b      	lsls	r3, r3, #24
 801087c:	496b      	ldr	r1, [pc, #428]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801087e:	4313      	orrs	r3, r2
 8010880:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010882:	e05f      	b.n	8010944 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	69db      	ldr	r3, [r3, #28]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d042      	beq.n	8010912 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801088c:	4b67      	ldr	r3, [pc, #412]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a66      	ldr	r2, [pc, #408]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010898:	f7fa fd4a 	bl	800b330 <HAL_GetTick>
 801089c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801089e:	e008      	b.n	80108b2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80108a0:	f7fa fd46 	bl	800b330 <HAL_GetTick>
 80108a4:	4602      	mov	r2, r0
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	1ad3      	subs	r3, r2, r3
 80108aa:	2b02      	cmp	r3, #2
 80108ac:	d901      	bls.n	80108b2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80108ae:	2303      	movs	r3, #3
 80108b0:	e253      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80108b2:	4b5e      	ldr	r3, [pc, #376]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d0f0      	beq.n	80108a0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80108be:	f7fa fd67 	bl	800b390 <HAL_GetREVID>
 80108c2:	4603      	mov	r3, r0
 80108c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d817      	bhi.n	80108fc <HAL_RCC_OscConfig+0x3b0>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6a1b      	ldr	r3, [r3, #32]
 80108d0:	2b20      	cmp	r3, #32
 80108d2:	d108      	bne.n	80108e6 <HAL_RCC_OscConfig+0x39a>
 80108d4:	4b55      	ldr	r3, [pc, #340]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80108dc:	4a53      	ldr	r2, [pc, #332]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80108de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80108e2:	6053      	str	r3, [r2, #4]
 80108e4:	e02e      	b.n	8010944 <HAL_RCC_OscConfig+0x3f8>
 80108e6:	4b51      	ldr	r3, [pc, #324]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a1b      	ldr	r3, [r3, #32]
 80108f2:	069b      	lsls	r3, r3, #26
 80108f4:	494d      	ldr	r1, [pc, #308]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80108f6:	4313      	orrs	r3, r2
 80108f8:	604b      	str	r3, [r1, #4]
 80108fa:	e023      	b.n	8010944 <HAL_RCC_OscConfig+0x3f8>
 80108fc:	4b4b      	ldr	r3, [pc, #300]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80108fe:	68db      	ldr	r3, [r3, #12]
 8010900:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6a1b      	ldr	r3, [r3, #32]
 8010908:	061b      	lsls	r3, r3, #24
 801090a:	4948      	ldr	r1, [pc, #288]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801090c:	4313      	orrs	r3, r2
 801090e:	60cb      	str	r3, [r1, #12]
 8010910:	e018      	b.n	8010944 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010912:	4b46      	ldr	r3, [pc, #280]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a45      	ldr	r2, [pc, #276]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801091c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801091e:	f7fa fd07 	bl	800b330 <HAL_GetTick>
 8010922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010924:	e008      	b.n	8010938 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010926:	f7fa fd03 	bl	800b330 <HAL_GetTick>
 801092a:	4602      	mov	r2, r0
 801092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	2b02      	cmp	r3, #2
 8010932:	d901      	bls.n	8010938 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8010934:	2303      	movs	r3, #3
 8010936:	e210      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010938:	4b3c      	ldr	r3, [pc, #240]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1f0      	bne.n	8010926 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f003 0308 	and.w	r3, r3, #8
 801094c:	2b00      	cmp	r3, #0
 801094e:	d036      	beq.n	80109be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	695b      	ldr	r3, [r3, #20]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d019      	beq.n	801098c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010958:	4b34      	ldr	r3, [pc, #208]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801095a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801095c:	4a33      	ldr	r2, [pc, #204]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801095e:	f043 0301 	orr.w	r3, r3, #1
 8010962:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010964:	f7fa fce4 	bl	800b330 <HAL_GetTick>
 8010968:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801096a:	e008      	b.n	801097e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801096c:	f7fa fce0 	bl	800b330 <HAL_GetTick>
 8010970:	4602      	mov	r2, r0
 8010972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010974:	1ad3      	subs	r3, r2, r3
 8010976:	2b02      	cmp	r3, #2
 8010978:	d901      	bls.n	801097e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 801097a:	2303      	movs	r3, #3
 801097c:	e1ed      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801097e:	4b2b      	ldr	r3, [pc, #172]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010982:	f003 0302 	and.w	r3, r3, #2
 8010986:	2b00      	cmp	r3, #0
 8010988:	d0f0      	beq.n	801096c <HAL_RCC_OscConfig+0x420>
 801098a:	e018      	b.n	80109be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801098c:	4b27      	ldr	r3, [pc, #156]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 801098e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010990:	4a26      	ldr	r2, [pc, #152]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010992:	f023 0301 	bic.w	r3, r3, #1
 8010996:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010998:	f7fa fcca 	bl	800b330 <HAL_GetTick>
 801099c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801099e:	e008      	b.n	80109b2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80109a0:	f7fa fcc6 	bl	800b330 <HAL_GetTick>
 80109a4:	4602      	mov	r2, r0
 80109a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a8:	1ad3      	subs	r3, r2, r3
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	d901      	bls.n	80109b2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80109ae:	2303      	movs	r3, #3
 80109b0:	e1d3      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80109b2:	4b1e      	ldr	r3, [pc, #120]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80109b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109b6:	f003 0302 	and.w	r3, r3, #2
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1f0      	bne.n	80109a0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f003 0320 	and.w	r3, r3, #32
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d038      	beq.n	8010a3c <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	699b      	ldr	r3, [r3, #24]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d019      	beq.n	8010a06 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80109d2:	4b16      	ldr	r3, [pc, #88]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	4a15      	ldr	r2, [pc, #84]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80109d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80109dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80109de:	f7fa fca7 	bl	800b330 <HAL_GetTick>
 80109e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80109e4:	e008      	b.n	80109f8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80109e6:	f7fa fca3 	bl	800b330 <HAL_GetTick>
 80109ea:	4602      	mov	r2, r0
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	1ad3      	subs	r3, r2, r3
 80109f0:	2b02      	cmp	r3, #2
 80109f2:	d901      	bls.n	80109f8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80109f4:	2303      	movs	r3, #3
 80109f6:	e1b0      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80109f8:	4b0c      	ldr	r3, [pc, #48]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d0f0      	beq.n	80109e6 <HAL_RCC_OscConfig+0x49a>
 8010a04:	e01a      	b.n	8010a3c <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010a06:	4b09      	ldr	r3, [pc, #36]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4a08      	ldr	r2, [pc, #32]	; (8010a2c <HAL_RCC_OscConfig+0x4e0>)
 8010a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010a12:	f7fa fc8d 	bl	800b330 <HAL_GetTick>
 8010a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010a18:	e00a      	b.n	8010a30 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010a1a:	f7fa fc89 	bl	800b330 <HAL_GetTick>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a22:	1ad3      	subs	r3, r2, r3
 8010a24:	2b02      	cmp	r3, #2
 8010a26:	d903      	bls.n	8010a30 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8010a28:	2303      	movs	r3, #3
 8010a2a:	e196      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
 8010a2c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010a30:	4b99      	ldr	r3, [pc, #612]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d1ee      	bne.n	8010a1a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f003 0304 	and.w	r3, r3, #4
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f000 8081 	beq.w	8010b4c <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010a4a:	4b94      	ldr	r3, [pc, #592]	; (8010c9c <HAL_RCC_OscConfig+0x750>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a93      	ldr	r2, [pc, #588]	; (8010c9c <HAL_RCC_OscConfig+0x750>)
 8010a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010a56:	f7fa fc6b 	bl	800b330 <HAL_GetTick>
 8010a5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010a5c:	e008      	b.n	8010a70 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010a5e:	f7fa fc67 	bl	800b330 <HAL_GetTick>
 8010a62:	4602      	mov	r2, r0
 8010a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a66:	1ad3      	subs	r3, r2, r3
 8010a68:	2b64      	cmp	r3, #100	; 0x64
 8010a6a:	d901      	bls.n	8010a70 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8010a6c:	2303      	movs	r3, #3
 8010a6e:	e174      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010a70:	4b8a      	ldr	r3, [pc, #552]	; (8010c9c <HAL_RCC_OscConfig+0x750>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d0f0      	beq.n	8010a5e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d106      	bne.n	8010a92 <HAL_RCC_OscConfig+0x546>
 8010a84:	4b84      	ldr	r3, [pc, #528]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a88:	4a83      	ldr	r2, [pc, #524]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010a8a:	f043 0301 	orr.w	r3, r3, #1
 8010a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8010a90:	e02d      	b.n	8010aee <HAL_RCC_OscConfig+0x5a2>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	689b      	ldr	r3, [r3, #8]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d10c      	bne.n	8010ab4 <HAL_RCC_OscConfig+0x568>
 8010a9a:	4b7f      	ldr	r3, [pc, #508]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a9e:	4a7e      	ldr	r2, [pc, #504]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010aa0:	f023 0301 	bic.w	r3, r3, #1
 8010aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8010aa6:	4b7c      	ldr	r3, [pc, #496]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aaa:	4a7b      	ldr	r2, [pc, #492]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010aac:	f023 0304 	bic.w	r3, r3, #4
 8010ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8010ab2:	e01c      	b.n	8010aee <HAL_RCC_OscConfig+0x5a2>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	2b05      	cmp	r3, #5
 8010aba:	d10c      	bne.n	8010ad6 <HAL_RCC_OscConfig+0x58a>
 8010abc:	4b76      	ldr	r3, [pc, #472]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ac0:	4a75      	ldr	r2, [pc, #468]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010ac2:	f043 0304 	orr.w	r3, r3, #4
 8010ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8010ac8:	4b73      	ldr	r3, [pc, #460]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010acc:	4a72      	ldr	r2, [pc, #456]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010ace:	f043 0301 	orr.w	r3, r3, #1
 8010ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8010ad4:	e00b      	b.n	8010aee <HAL_RCC_OscConfig+0x5a2>
 8010ad6:	4b70      	ldr	r3, [pc, #448]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ada:	4a6f      	ldr	r2, [pc, #444]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010adc:	f023 0301 	bic.w	r3, r3, #1
 8010ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8010ae2:	4b6d      	ldr	r3, [pc, #436]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ae6:	4a6c      	ldr	r2, [pc, #432]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010ae8:	f023 0304 	bic.w	r3, r3, #4
 8010aec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	689b      	ldr	r3, [r3, #8]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d015      	beq.n	8010b22 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010af6:	f7fa fc1b 	bl	800b330 <HAL_GetTick>
 8010afa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010afc:	e00a      	b.n	8010b14 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010afe:	f7fa fc17 	bl	800b330 <HAL_GetTick>
 8010b02:	4602      	mov	r2, r0
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d901      	bls.n	8010b14 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8010b10:	2303      	movs	r3, #3
 8010b12:	e122      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010b14:	4b60      	ldr	r3, [pc, #384]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b18:	f003 0302 	and.w	r3, r3, #2
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d0ee      	beq.n	8010afe <HAL_RCC_OscConfig+0x5b2>
 8010b20:	e014      	b.n	8010b4c <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b22:	f7fa fc05 	bl	800b330 <HAL_GetTick>
 8010b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010b28:	e00a      	b.n	8010b40 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b2a:	f7fa fc01 	bl	800b330 <HAL_GetTick>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b32:	1ad3      	subs	r3, r2, r3
 8010b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d901      	bls.n	8010b40 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8010b3c:	2303      	movs	r3, #3
 8010b3e:	e10c      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010b40:	4b55      	ldr	r3, [pc, #340]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b44:	f003 0302 	and.w	r3, r3, #2
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1ee      	bne.n	8010b2a <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f000 8101 	beq.w	8010d58 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010b56:	4b50      	ldr	r3, [pc, #320]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010b58:	691b      	ldr	r3, [r3, #16]
 8010b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b5e:	2b18      	cmp	r3, #24
 8010b60:	f000 80bc 	beq.w	8010cdc <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	f040 809d 	bne.w	8010ca8 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010b6e:	4b4a      	ldr	r3, [pc, #296]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	4a49      	ldr	r2, [pc, #292]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010b7a:	f7fa fbd9 	bl	800b330 <HAL_GetTick>
 8010b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010b80:	e008      	b.n	8010b94 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010b82:	f7fa fbd5 	bl	800b330 <HAL_GetTick>
 8010b86:	4602      	mov	r2, r0
 8010b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8a:	1ad3      	subs	r3, r2, r3
 8010b8c:	2b02      	cmp	r3, #2
 8010b8e:	d901      	bls.n	8010b94 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8010b90:	2303      	movs	r3, #3
 8010b92:	e0e2      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010b94:	4b40      	ldr	r3, [pc, #256]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d1f0      	bne.n	8010b82 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010ba0:	4b3d      	ldr	r3, [pc, #244]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ba4:	4b3e      	ldr	r3, [pc, #248]	; (8010ca0 <HAL_RCC_OscConfig+0x754>)
 8010ba6:	4013      	ands	r3, r2
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010bb0:	0112      	lsls	r2, r2, #4
 8010bb2:	430a      	orrs	r2, r1
 8010bb4:	4938      	ldr	r1, [pc, #224]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	628b      	str	r3, [r1, #40]	; 0x28
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bbe:	3b01      	subs	r3, #1
 8010bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	025b      	lsls	r3, r3, #9
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	431a      	orrs	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	041b      	lsls	r3, r3, #16
 8010bd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010bdc:	431a      	orrs	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010be2:	3b01      	subs	r3, #1
 8010be4:	061b      	lsls	r3, r3, #24
 8010be6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010bea:	492b      	ldr	r1, [pc, #172]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010bec:	4313      	orrs	r3, r2
 8010bee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8010bf0:	4b29      	ldr	r3, [pc, #164]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf4:	4a28      	ldr	r2, [pc, #160]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010bf6:	f023 0301 	bic.w	r3, r3, #1
 8010bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010bfc:	4b26      	ldr	r3, [pc, #152]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c00:	4b28      	ldr	r3, [pc, #160]	; (8010ca4 <HAL_RCC_OscConfig+0x758>)
 8010c02:	4013      	ands	r3, r2
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010c08:	00d2      	lsls	r2, r2, #3
 8010c0a:	4923      	ldr	r1, [pc, #140]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010c10:	4b21      	ldr	r3, [pc, #132]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c14:	f023 020c 	bic.w	r2, r3, #12
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c1c:	491e      	ldr	r1, [pc, #120]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010c22:	4b1d      	ldr	r3, [pc, #116]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c26:	f023 0202 	bic.w	r2, r3, #2
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c2e:	491a      	ldr	r1, [pc, #104]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c30:	4313      	orrs	r3, r2
 8010c32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010c34:	4b18      	ldr	r3, [pc, #96]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c38:	4a17      	ldr	r2, [pc, #92]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c40:	4b15      	ldr	r3, [pc, #84]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c44:	4a14      	ldr	r2, [pc, #80]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010c4c:	4b12      	ldr	r3, [pc, #72]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c50:	4a11      	ldr	r2, [pc, #68]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8010c58:	4b0f      	ldr	r3, [pc, #60]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c5c:	4a0e      	ldr	r2, [pc, #56]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c5e:	f043 0301 	orr.w	r3, r3, #1
 8010c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010c64:	4b0c      	ldr	r3, [pc, #48]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a0b      	ldr	r2, [pc, #44]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c70:	f7fa fb5e 	bl	800b330 <HAL_GetTick>
 8010c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010c76:	e008      	b.n	8010c8a <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c78:	f7fa fb5a 	bl	800b330 <HAL_GetTick>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d901      	bls.n	8010c8a <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8010c86:	2303      	movs	r3, #3
 8010c88:	e067      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010c8a:	4b03      	ldr	r3, [pc, #12]	; (8010c98 <HAL_RCC_OscConfig+0x74c>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d0f0      	beq.n	8010c78 <HAL_RCC_OscConfig+0x72c>
 8010c96:	e05f      	b.n	8010d58 <HAL_RCC_OscConfig+0x80c>
 8010c98:	58024400 	.word	0x58024400
 8010c9c:	58024800 	.word	0x58024800
 8010ca0:	fffffc0c 	.word	0xfffffc0c
 8010ca4:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010ca8:	4b2e      	ldr	r3, [pc, #184]	; (8010d64 <HAL_RCC_OscConfig+0x818>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a2d      	ldr	r2, [pc, #180]	; (8010d64 <HAL_RCC_OscConfig+0x818>)
 8010cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010cb4:	f7fa fb3c 	bl	800b330 <HAL_GetTick>
 8010cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010cba:	e008      	b.n	8010cce <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010cbc:	f7fa fb38 	bl	800b330 <HAL_GetTick>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	2b02      	cmp	r3, #2
 8010cc8:	d901      	bls.n	8010cce <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8010cca:	2303      	movs	r3, #3
 8010ccc:	e045      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010cce:	4b25      	ldr	r3, [pc, #148]	; (8010d64 <HAL_RCC_OscConfig+0x818>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1f0      	bne.n	8010cbc <HAL_RCC_OscConfig+0x770>
 8010cda:	e03d      	b.n	8010d58 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010cdc:	4b21      	ldr	r3, [pc, #132]	; (8010d64 <HAL_RCC_OscConfig+0x818>)
 8010cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ce0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010ce2:	4b20      	ldr	r3, [pc, #128]	; (8010d64 <HAL_RCC_OscConfig+0x818>)
 8010ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ce6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cec:	2b01      	cmp	r3, #1
 8010cee:	d031      	beq.n	8010d54 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	f003 0203 	and.w	r2, r3, #3
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d12a      	bne.n	8010d54 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	091b      	lsrs	r3, r3, #4
 8010d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d122      	bne.n	8010d54 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d11a      	bne.n	8010d54 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	0a5b      	lsrs	r3, r3, #9
 8010d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d111      	bne.n	8010d54 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	0c1b      	lsrs	r3, r3, #16
 8010d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d108      	bne.n	8010d54 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	0e1b      	lsrs	r3, r3, #24
 8010d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d001      	beq.n	8010d58 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8010d54:	2301      	movs	r3, #1
 8010d56:	e000      	b.n	8010d5a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8010d58:	2300      	movs	r3, #0
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3730      	adds	r7, #48	; 0x30
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	58024400 	.word	0x58024400

08010d68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b086      	sub	sp, #24
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d101      	bne.n	8010d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e19c      	b.n	80110b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010d7c:	4b8a      	ldr	r3, [pc, #552]	; (8010fa8 <HAL_RCC_ClockConfig+0x240>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f003 030f 	and.w	r3, r3, #15
 8010d84:	683a      	ldr	r2, [r7, #0]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d910      	bls.n	8010dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d8a:	4b87      	ldr	r3, [pc, #540]	; (8010fa8 <HAL_RCC_ClockConfig+0x240>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f023 020f 	bic.w	r2, r3, #15
 8010d92:	4985      	ldr	r1, [pc, #532]	; (8010fa8 <HAL_RCC_ClockConfig+0x240>)
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	4313      	orrs	r3, r2
 8010d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010d9a:	4b83      	ldr	r3, [pc, #524]	; (8010fa8 <HAL_RCC_ClockConfig+0x240>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f003 030f 	and.w	r3, r3, #15
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d001      	beq.n	8010dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010da8:	2301      	movs	r3, #1
 8010daa:	e184      	b.n	80110b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f003 0304 	and.w	r3, r3, #4
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d010      	beq.n	8010dda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	691a      	ldr	r2, [r3, #16]
 8010dbc:	4b7b      	ldr	r3, [pc, #492]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010dbe:	699b      	ldr	r3, [r3, #24]
 8010dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d908      	bls.n	8010dda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010dc8:	4b78      	ldr	r3, [pc, #480]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010dca:	699b      	ldr	r3, [r3, #24]
 8010dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	691b      	ldr	r3, [r3, #16]
 8010dd4:	4975      	ldr	r1, [pc, #468]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f003 0308 	and.w	r3, r3, #8
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d010      	beq.n	8010e08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	695a      	ldr	r2, [r3, #20]
 8010dea:	4b70      	ldr	r3, [pc, #448]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010dec:	69db      	ldr	r3, [r3, #28]
 8010dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d908      	bls.n	8010e08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010df6:	4b6d      	ldr	r3, [pc, #436]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010df8:	69db      	ldr	r3, [r3, #28]
 8010dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	695b      	ldr	r3, [r3, #20]
 8010e02:	496a      	ldr	r1, [pc, #424]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e04:	4313      	orrs	r3, r2
 8010e06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f003 0310 	and.w	r3, r3, #16
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d010      	beq.n	8010e36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	699a      	ldr	r2, [r3, #24]
 8010e18:	4b64      	ldr	r3, [pc, #400]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e1a:	69db      	ldr	r3, [r3, #28]
 8010e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d908      	bls.n	8010e36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010e24:	4b61      	ldr	r3, [pc, #388]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e26:	69db      	ldr	r3, [r3, #28]
 8010e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	699b      	ldr	r3, [r3, #24]
 8010e30:	495e      	ldr	r1, [pc, #376]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e32:	4313      	orrs	r3, r2
 8010e34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f003 0320 	and.w	r3, r3, #32
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d010      	beq.n	8010e64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	69da      	ldr	r2, [r3, #28]
 8010e46:	4b59      	ldr	r3, [pc, #356]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e48:	6a1b      	ldr	r3, [r3, #32]
 8010e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d908      	bls.n	8010e64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010e52:	4b56      	ldr	r3, [pc, #344]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e54:	6a1b      	ldr	r3, [r3, #32]
 8010e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	69db      	ldr	r3, [r3, #28]
 8010e5e:	4953      	ldr	r1, [pc, #332]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e60:	4313      	orrs	r3, r2
 8010e62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f003 0302 	and.w	r3, r3, #2
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d010      	beq.n	8010e92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	68da      	ldr	r2, [r3, #12]
 8010e74:	4b4d      	ldr	r3, [pc, #308]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e76:	699b      	ldr	r3, [r3, #24]
 8010e78:	f003 030f 	and.w	r3, r3, #15
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d908      	bls.n	8010e92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010e80:	4b4a      	ldr	r3, [pc, #296]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e82:	699b      	ldr	r3, [r3, #24]
 8010e84:	f023 020f 	bic.w	r2, r3, #15
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	4947      	ldr	r1, [pc, #284]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f003 0301 	and.w	r3, r3, #1
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d055      	beq.n	8010f4a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010e9e:	4b43      	ldr	r3, [pc, #268]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010ea0:	699b      	ldr	r3, [r3, #24]
 8010ea2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	689b      	ldr	r3, [r3, #8]
 8010eaa:	4940      	ldr	r1, [pc, #256]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010eac:	4313      	orrs	r3, r2
 8010eae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	d107      	bne.n	8010ec8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010eb8:	4b3c      	ldr	r3, [pc, #240]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d121      	bne.n	8010f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e0f6      	b.n	80110b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	2b03      	cmp	r3, #3
 8010ece:	d107      	bne.n	8010ee0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010ed0:	4b36      	ldr	r3, [pc, #216]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d115      	bne.n	8010f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010edc:	2301      	movs	r3, #1
 8010ede:	e0ea      	b.n	80110b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d107      	bne.n	8010ef8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010ee8:	4b30      	ldr	r3, [pc, #192]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d109      	bne.n	8010f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e0de      	b.n	80110b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010ef8:	4b2c      	ldr	r3, [pc, #176]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f003 0304 	and.w	r3, r3, #4
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d101      	bne.n	8010f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010f04:	2301      	movs	r3, #1
 8010f06:	e0d6      	b.n	80110b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010f08:	4b28      	ldr	r3, [pc, #160]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010f0a:	691b      	ldr	r3, [r3, #16]
 8010f0c:	f023 0207 	bic.w	r2, r3, #7
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	4925      	ldr	r1, [pc, #148]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010f16:	4313      	orrs	r3, r2
 8010f18:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f1a:	f7fa fa09 	bl	800b330 <HAL_GetTick>
 8010f1e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010f20:	e00a      	b.n	8010f38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f22:	f7fa fa05 	bl	800b330 <HAL_GetTick>
 8010f26:	4602      	mov	r2, r0
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d901      	bls.n	8010f38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8010f34:	2303      	movs	r3, #3
 8010f36:	e0be      	b.n	80110b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010f38:	4b1c      	ldr	r3, [pc, #112]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010f3a:	691b      	ldr	r3, [r3, #16]
 8010f3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	00db      	lsls	r3, r3, #3
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d1eb      	bne.n	8010f22 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f003 0302 	and.w	r3, r3, #2
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d010      	beq.n	8010f78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	68da      	ldr	r2, [r3, #12]
 8010f5a:	4b14      	ldr	r3, [pc, #80]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010f5c:	699b      	ldr	r3, [r3, #24]
 8010f5e:	f003 030f 	and.w	r3, r3, #15
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d208      	bcs.n	8010f78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010f66:	4b11      	ldr	r3, [pc, #68]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010f68:	699b      	ldr	r3, [r3, #24]
 8010f6a:	f023 020f 	bic.w	r2, r3, #15
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	490e      	ldr	r1, [pc, #56]	; (8010fac <HAL_RCC_ClockConfig+0x244>)
 8010f74:	4313      	orrs	r3, r2
 8010f76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010f78:	4b0b      	ldr	r3, [pc, #44]	; (8010fa8 <HAL_RCC_ClockConfig+0x240>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f003 030f 	and.w	r3, r3, #15
 8010f80:	683a      	ldr	r2, [r7, #0]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d214      	bcs.n	8010fb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010f86:	4b08      	ldr	r3, [pc, #32]	; (8010fa8 <HAL_RCC_ClockConfig+0x240>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f023 020f 	bic.w	r2, r3, #15
 8010f8e:	4906      	ldr	r1, [pc, #24]	; (8010fa8 <HAL_RCC_ClockConfig+0x240>)
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	4313      	orrs	r3, r2
 8010f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010f96:	4b04      	ldr	r3, [pc, #16]	; (8010fa8 <HAL_RCC_ClockConfig+0x240>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f003 030f 	and.w	r3, r3, #15
 8010f9e:	683a      	ldr	r2, [r7, #0]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d005      	beq.n	8010fb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e086      	b.n	80110b6 <HAL_RCC_ClockConfig+0x34e>
 8010fa8:	52002000 	.word	0x52002000
 8010fac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f003 0304 	and.w	r3, r3, #4
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d010      	beq.n	8010fde <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	691a      	ldr	r2, [r3, #16]
 8010fc0:	4b3f      	ldr	r3, [pc, #252]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8010fc2:	699b      	ldr	r3, [r3, #24]
 8010fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d208      	bcs.n	8010fde <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010fcc:	4b3c      	ldr	r3, [pc, #240]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8010fce:	699b      	ldr	r3, [r3, #24]
 8010fd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	4939      	ldr	r1, [pc, #228]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f003 0308 	and.w	r3, r3, #8
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d010      	beq.n	801100c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	695a      	ldr	r2, [r3, #20]
 8010fee:	4b34      	ldr	r3, [pc, #208]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8010ff0:	69db      	ldr	r3, [r3, #28]
 8010ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d208      	bcs.n	801100c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010ffa:	4b31      	ldr	r3, [pc, #196]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8010ffc:	69db      	ldr	r3, [r3, #28]
 8010ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	695b      	ldr	r3, [r3, #20]
 8011006:	492e      	ldr	r1, [pc, #184]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8011008:	4313      	orrs	r3, r2
 801100a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f003 0310 	and.w	r3, r3, #16
 8011014:	2b00      	cmp	r3, #0
 8011016:	d010      	beq.n	801103a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	699a      	ldr	r2, [r3, #24]
 801101c:	4b28      	ldr	r3, [pc, #160]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 801101e:	69db      	ldr	r3, [r3, #28]
 8011020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011024:	429a      	cmp	r2, r3
 8011026:	d208      	bcs.n	801103a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011028:	4b25      	ldr	r3, [pc, #148]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 801102a:	69db      	ldr	r3, [r3, #28]
 801102c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	699b      	ldr	r3, [r3, #24]
 8011034:	4922      	ldr	r1, [pc, #136]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8011036:	4313      	orrs	r3, r2
 8011038:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f003 0320 	and.w	r3, r3, #32
 8011042:	2b00      	cmp	r3, #0
 8011044:	d010      	beq.n	8011068 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	69da      	ldr	r2, [r3, #28]
 801104a:	4b1d      	ldr	r3, [pc, #116]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 801104c:	6a1b      	ldr	r3, [r3, #32]
 801104e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011052:	429a      	cmp	r2, r3
 8011054:	d208      	bcs.n	8011068 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8011056:	4b1a      	ldr	r3, [pc, #104]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8011058:	6a1b      	ldr	r3, [r3, #32]
 801105a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	69db      	ldr	r3, [r3, #28]
 8011062:	4917      	ldr	r1, [pc, #92]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8011064:	4313      	orrs	r3, r2
 8011066:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011068:	f000 f834 	bl	80110d4 <HAL_RCC_GetSysClockFreq>
 801106c:	4602      	mov	r2, r0
 801106e:	4b14      	ldr	r3, [pc, #80]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8011070:	699b      	ldr	r3, [r3, #24]
 8011072:	0a1b      	lsrs	r3, r3, #8
 8011074:	f003 030f 	and.w	r3, r3, #15
 8011078:	4912      	ldr	r1, [pc, #72]	; (80110c4 <HAL_RCC_ClockConfig+0x35c>)
 801107a:	5ccb      	ldrb	r3, [r1, r3]
 801107c:	f003 031f 	and.w	r3, r3, #31
 8011080:	fa22 f303 	lsr.w	r3, r2, r3
 8011084:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011086:	4b0e      	ldr	r3, [pc, #56]	; (80110c0 <HAL_RCC_ClockConfig+0x358>)
 8011088:	699b      	ldr	r3, [r3, #24]
 801108a:	f003 030f 	and.w	r3, r3, #15
 801108e:	4a0d      	ldr	r2, [pc, #52]	; (80110c4 <HAL_RCC_ClockConfig+0x35c>)
 8011090:	5cd3      	ldrb	r3, [r2, r3]
 8011092:	f003 031f 	and.w	r3, r3, #31
 8011096:	693a      	ldr	r2, [r7, #16]
 8011098:	fa22 f303 	lsr.w	r3, r2, r3
 801109c:	4a0a      	ldr	r2, [pc, #40]	; (80110c8 <HAL_RCC_ClockConfig+0x360>)
 801109e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80110a0:	4a0a      	ldr	r2, [pc, #40]	; (80110cc <HAL_RCC_ClockConfig+0x364>)
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80110a6:	4b0a      	ldr	r3, [pc, #40]	; (80110d0 <HAL_RCC_ClockConfig+0x368>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7f9 ff7c 	bl	800afa8 <HAL_InitTick>
 80110b0:	4603      	mov	r3, r0
 80110b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80110b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3718      	adds	r7, #24
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	58024400 	.word	0x58024400
 80110c4:	240084a8 	.word	0x240084a8
 80110c8:	24008004 	.word	0x24008004
 80110cc:	24008000 	.word	0x24008000
 80110d0:	24008018 	.word	0x24008018

080110d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b089      	sub	sp, #36	; 0x24
 80110d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80110da:	4bb3      	ldr	r3, [pc, #716]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80110dc:	691b      	ldr	r3, [r3, #16]
 80110de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110e2:	2b18      	cmp	r3, #24
 80110e4:	f200 8155 	bhi.w	8011392 <HAL_RCC_GetSysClockFreq+0x2be>
 80110e8:	a201      	add	r2, pc, #4	; (adr r2, 80110f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80110ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ee:	bf00      	nop
 80110f0:	08011155 	.word	0x08011155
 80110f4:	08011393 	.word	0x08011393
 80110f8:	08011393 	.word	0x08011393
 80110fc:	08011393 	.word	0x08011393
 8011100:	08011393 	.word	0x08011393
 8011104:	08011393 	.word	0x08011393
 8011108:	08011393 	.word	0x08011393
 801110c:	08011393 	.word	0x08011393
 8011110:	0801117b 	.word	0x0801117b
 8011114:	08011393 	.word	0x08011393
 8011118:	08011393 	.word	0x08011393
 801111c:	08011393 	.word	0x08011393
 8011120:	08011393 	.word	0x08011393
 8011124:	08011393 	.word	0x08011393
 8011128:	08011393 	.word	0x08011393
 801112c:	08011393 	.word	0x08011393
 8011130:	08011181 	.word	0x08011181
 8011134:	08011393 	.word	0x08011393
 8011138:	08011393 	.word	0x08011393
 801113c:	08011393 	.word	0x08011393
 8011140:	08011393 	.word	0x08011393
 8011144:	08011393 	.word	0x08011393
 8011148:	08011393 	.word	0x08011393
 801114c:	08011393 	.word	0x08011393
 8011150:	08011187 	.word	0x08011187
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011154:	4b94      	ldr	r3, [pc, #592]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f003 0320 	and.w	r3, r3, #32
 801115c:	2b00      	cmp	r3, #0
 801115e:	d009      	beq.n	8011174 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011160:	4b91      	ldr	r3, [pc, #580]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	08db      	lsrs	r3, r3, #3
 8011166:	f003 0303 	and.w	r3, r3, #3
 801116a:	4a90      	ldr	r2, [pc, #576]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 801116c:	fa22 f303 	lsr.w	r3, r2, r3
 8011170:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8011172:	e111      	b.n	8011398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011174:	4b8d      	ldr	r3, [pc, #564]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011176:	61bb      	str	r3, [r7, #24]
    break;
 8011178:	e10e      	b.n	8011398 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801117a:	4b8d      	ldr	r3, [pc, #564]	; (80113b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801117c:	61bb      	str	r3, [r7, #24]
    break;
 801117e:	e10b      	b.n	8011398 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8011180:	4b8c      	ldr	r3, [pc, #560]	; (80113b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011182:	61bb      	str	r3, [r7, #24]
    break;
 8011184:	e108      	b.n	8011398 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011186:	4b88      	ldr	r3, [pc, #544]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801118a:	f003 0303 	and.w	r3, r3, #3
 801118e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8011190:	4b85      	ldr	r3, [pc, #532]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011194:	091b      	lsrs	r3, r3, #4
 8011196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801119a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801119c:	4b82      	ldr	r3, [pc, #520]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a0:	f003 0301 	and.w	r3, r3, #1
 80111a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80111a6:	4b80      	ldr	r3, [pc, #512]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111aa:	08db      	lsrs	r3, r3, #3
 80111ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	fb02 f303 	mul.w	r3, r2, r3
 80111b6:	ee07 3a90 	vmov	s15, r3
 80111ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	f000 80e1 	beq.w	801138c <HAL_RCC_GetSysClockFreq+0x2b8>
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	2b02      	cmp	r3, #2
 80111ce:	f000 8083 	beq.w	80112d8 <HAL_RCC_GetSysClockFreq+0x204>
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	2b02      	cmp	r3, #2
 80111d6:	f200 80a1 	bhi.w	801131c <HAL_RCC_GetSysClockFreq+0x248>
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d003      	beq.n	80111e8 <HAL_RCC_GetSysClockFreq+0x114>
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	2b01      	cmp	r3, #1
 80111e4:	d056      	beq.n	8011294 <HAL_RCC_GetSysClockFreq+0x1c0>
 80111e6:	e099      	b.n	801131c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111e8:	4b6f      	ldr	r3, [pc, #444]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f003 0320 	and.w	r3, r3, #32
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d02d      	beq.n	8011250 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80111f4:	4b6c      	ldr	r3, [pc, #432]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	08db      	lsrs	r3, r3, #3
 80111fa:	f003 0303 	and.w	r3, r3, #3
 80111fe:	4a6b      	ldr	r2, [pc, #428]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011200:	fa22 f303 	lsr.w	r3, r2, r3
 8011204:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	ee07 3a90 	vmov	s15, r3
 801120c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	ee07 3a90 	vmov	s15, r3
 8011216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801121a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801121e:	4b62      	ldr	r3, [pc, #392]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011226:	ee07 3a90 	vmov	s15, r3
 801122a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801122e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011232:	eddf 5a61 	vldr	s11, [pc, #388]	; 80113b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801123a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801123e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011246:	ee67 7a27 	vmul.f32	s15, s14, s15
 801124a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 801124e:	e087      	b.n	8011360 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	ee07 3a90 	vmov	s15, r3
 8011256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801125a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80113bc <HAL_RCC_GetSysClockFreq+0x2e8>
 801125e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011262:	4b51      	ldr	r3, [pc, #324]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801126a:	ee07 3a90 	vmov	s15, r3
 801126e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011272:	ed97 6a02 	vldr	s12, [r7, #8]
 8011276:	eddf 5a50 	vldr	s11, [pc, #320]	; 80113b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801127a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801127e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801128e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011292:	e065      	b.n	8011360 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	ee07 3a90 	vmov	s15, r3
 801129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801129e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80113c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80112a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112a6:	4b40      	ldr	r3, [pc, #256]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80112a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112ae:	ee07 3a90 	vmov	s15, r3
 80112b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80112ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80113b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80112be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80112d6:	e043      	b.n	8011360 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	ee07 3a90 	vmov	s15, r3
 80112de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80113c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80112e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112ea:	4b2f      	ldr	r3, [pc, #188]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80112ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112f2:	ee07 3a90 	vmov	s15, r3
 80112f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80112fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80113b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801130a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801130e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801131a:	e021      	b.n	8011360 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	ee07 3a90 	vmov	s15, r3
 8011322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011326:	eddf 6a26 	vldr	s13, [pc, #152]	; 80113c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801132a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801132e:	4b1e      	ldr	r3, [pc, #120]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011336:	ee07 3a90 	vmov	s15, r3
 801133a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801133e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011342:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80113b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801134a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801134e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011356:	ee67 7a27 	vmul.f32	s15, s14, s15
 801135a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801135e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8011360:	4b11      	ldr	r3, [pc, #68]	; (80113a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011364:	0a5b      	lsrs	r3, r3, #9
 8011366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801136a:	3301      	adds	r3, #1
 801136c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	ee07 3a90 	vmov	s15, r3
 8011374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011378:	edd7 6a07 	vldr	s13, [r7, #28]
 801137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011384:	ee17 3a90 	vmov	r3, s15
 8011388:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801138a:	e005      	b.n	8011398 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 801138c:	2300      	movs	r3, #0
 801138e:	61bb      	str	r3, [r7, #24]
    break;
 8011390:	e002      	b.n	8011398 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8011392:	4b07      	ldr	r3, [pc, #28]	; (80113b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011394:	61bb      	str	r3, [r7, #24]
    break;
 8011396:	bf00      	nop
  }

  return sysclockfreq;
 8011398:	69bb      	ldr	r3, [r7, #24]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3724      	adds	r7, #36	; 0x24
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop
 80113a8:	58024400 	.word	0x58024400
 80113ac:	03d09000 	.word	0x03d09000
 80113b0:	003d0900 	.word	0x003d0900
 80113b4:	007a1200 	.word	0x007a1200
 80113b8:	46000000 	.word	0x46000000
 80113bc:	4c742400 	.word	0x4c742400
 80113c0:	4a742400 	.word	0x4a742400
 80113c4:	4af42400 	.word	0x4af42400

080113c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80113ce:	f7ff fe81 	bl	80110d4 <HAL_RCC_GetSysClockFreq>
 80113d2:	4602      	mov	r2, r0
 80113d4:	4b10      	ldr	r3, [pc, #64]	; (8011418 <HAL_RCC_GetHCLKFreq+0x50>)
 80113d6:	699b      	ldr	r3, [r3, #24]
 80113d8:	0a1b      	lsrs	r3, r3, #8
 80113da:	f003 030f 	and.w	r3, r3, #15
 80113de:	490f      	ldr	r1, [pc, #60]	; (801141c <HAL_RCC_GetHCLKFreq+0x54>)
 80113e0:	5ccb      	ldrb	r3, [r1, r3]
 80113e2:	f003 031f 	and.w	r3, r3, #31
 80113e6:	fa22 f303 	lsr.w	r3, r2, r3
 80113ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80113ec:	4b0a      	ldr	r3, [pc, #40]	; (8011418 <HAL_RCC_GetHCLKFreq+0x50>)
 80113ee:	699b      	ldr	r3, [r3, #24]
 80113f0:	f003 030f 	and.w	r3, r3, #15
 80113f4:	4a09      	ldr	r2, [pc, #36]	; (801141c <HAL_RCC_GetHCLKFreq+0x54>)
 80113f6:	5cd3      	ldrb	r3, [r2, r3]
 80113f8:	f003 031f 	and.w	r3, r3, #31
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011402:	4a07      	ldr	r2, [pc, #28]	; (8011420 <HAL_RCC_GetHCLKFreq+0x58>)
 8011404:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011406:	4a07      	ldr	r2, [pc, #28]	; (8011424 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801140c:	4b04      	ldr	r3, [pc, #16]	; (8011420 <HAL_RCC_GetHCLKFreq+0x58>)
 801140e:	681b      	ldr	r3, [r3, #0]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	58024400 	.word	0x58024400
 801141c:	240084a8 	.word	0x240084a8
 8011420:	24008004 	.word	0x24008004
 8011424:	24008000 	.word	0x24008000

08011428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801142c:	f7ff ffcc 	bl	80113c8 <HAL_RCC_GetHCLKFreq>
 8011430:	4602      	mov	r2, r0
 8011432:	4b06      	ldr	r3, [pc, #24]	; (801144c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011434:	69db      	ldr	r3, [r3, #28]
 8011436:	091b      	lsrs	r3, r3, #4
 8011438:	f003 0307 	and.w	r3, r3, #7
 801143c:	4904      	ldr	r1, [pc, #16]	; (8011450 <HAL_RCC_GetPCLK1Freq+0x28>)
 801143e:	5ccb      	ldrb	r3, [r1, r3]
 8011440:	f003 031f 	and.w	r3, r3, #31
 8011444:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011448:	4618      	mov	r0, r3
 801144a:	bd80      	pop	{r7, pc}
 801144c:	58024400 	.word	0x58024400
 8011450:	240084a8 	.word	0x240084a8

08011454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011458:	f7ff ffb6 	bl	80113c8 <HAL_RCC_GetHCLKFreq>
 801145c:	4602      	mov	r2, r0
 801145e:	4b06      	ldr	r3, [pc, #24]	; (8011478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011460:	69db      	ldr	r3, [r3, #28]
 8011462:	0a1b      	lsrs	r3, r3, #8
 8011464:	f003 0307 	and.w	r3, r3, #7
 8011468:	4904      	ldr	r1, [pc, #16]	; (801147c <HAL_RCC_GetPCLK2Freq+0x28>)
 801146a:	5ccb      	ldrb	r3, [r1, r3]
 801146c:	f003 031f 	and.w	r3, r3, #31
 8011470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011474:	4618      	mov	r0, r3
 8011476:	bd80      	pop	{r7, pc}
 8011478:	58024400 	.word	0x58024400
 801147c:	240084a8 	.word	0x240084a8

08011480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011480:	b480      	push	{r7}
 8011482:	b083      	sub	sp, #12
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	223f      	movs	r2, #63	; 0x3f
 801148e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011490:	4b1a      	ldr	r3, [pc, #104]	; (80114fc <HAL_RCC_GetClockConfig+0x7c>)
 8011492:	691b      	ldr	r3, [r3, #16]
 8011494:	f003 0207 	and.w	r2, r3, #7
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801149c:	4b17      	ldr	r3, [pc, #92]	; (80114fc <HAL_RCC_GetClockConfig+0x7c>)
 801149e:	699b      	ldr	r3, [r3, #24]
 80114a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80114a8:	4b14      	ldr	r3, [pc, #80]	; (80114fc <HAL_RCC_GetClockConfig+0x7c>)
 80114aa:	699b      	ldr	r3, [r3, #24]
 80114ac:	f003 020f 	and.w	r2, r3, #15
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80114b4:	4b11      	ldr	r3, [pc, #68]	; (80114fc <HAL_RCC_GetClockConfig+0x7c>)
 80114b6:	699b      	ldr	r3, [r3, #24]
 80114b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80114c0:	4b0e      	ldr	r3, [pc, #56]	; (80114fc <HAL_RCC_GetClockConfig+0x7c>)
 80114c2:	69db      	ldr	r3, [r3, #28]
 80114c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80114cc:	4b0b      	ldr	r3, [pc, #44]	; (80114fc <HAL_RCC_GetClockConfig+0x7c>)
 80114ce:	69db      	ldr	r3, [r3, #28]
 80114d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80114d8:	4b08      	ldr	r3, [pc, #32]	; (80114fc <HAL_RCC_GetClockConfig+0x7c>)
 80114da:	6a1b      	ldr	r3, [r3, #32]
 80114dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80114e4:	4b06      	ldr	r3, [pc, #24]	; (8011500 <HAL_RCC_GetClockConfig+0x80>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f003 020f 	and.w	r2, r3, #15
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	601a      	str	r2, [r3, #0]
}
 80114f0:	bf00      	nop
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr
 80114fc:	58024400 	.word	0x58024400
 8011500:	52002000 	.word	0x52002000

08011504 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b086      	sub	sp, #24
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801150c:	2300      	movs	r3, #0
 801150e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011510:	2300      	movs	r3, #0
 8011512:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801151c:	2b00      	cmp	r3, #0
 801151e:	d03f      	beq.n	80115a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011524:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011528:	d02a      	beq.n	8011580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801152e:	d824      	bhi.n	801157a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011534:	d018      	beq.n	8011568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801153a:	d81e      	bhi.n	801157a <HAL_RCCEx_PeriphCLKConfig+0x76>
 801153c:	2b00      	cmp	r3, #0
 801153e:	d003      	beq.n	8011548 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011544:	d007      	beq.n	8011556 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8011546:	e018      	b.n	801157a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011548:	4ba3      	ldr	r3, [pc, #652]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801154c:	4aa2      	ldr	r2, [pc, #648]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801154e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011554:	e015      	b.n	8011582 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	3304      	adds	r3, #4
 801155a:	2102      	movs	r1, #2
 801155c:	4618      	mov	r0, r3
 801155e:	f001 f9d5 	bl	801290c <RCCEx_PLL2_Config>
 8011562:	4603      	mov	r3, r0
 8011564:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011566:	e00c      	b.n	8011582 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	3324      	adds	r3, #36	; 0x24
 801156c:	2102      	movs	r1, #2
 801156e:	4618      	mov	r0, r3
 8011570:	f001 fa7e 	bl	8012a70 <RCCEx_PLL3_Config>
 8011574:	4603      	mov	r3, r0
 8011576:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011578:	e003      	b.n	8011582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801157a:	2301      	movs	r3, #1
 801157c:	75fb      	strb	r3, [r7, #23]
      break;
 801157e:	e000      	b.n	8011582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8011580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011582:	7dfb      	ldrb	r3, [r7, #23]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d109      	bne.n	801159c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011588:	4b93      	ldr	r3, [pc, #588]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801158a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801158c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011594:	4990      	ldr	r1, [pc, #576]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011596:	4313      	orrs	r3, r2
 8011598:	650b      	str	r3, [r1, #80]	; 0x50
 801159a:	e001      	b.n	80115a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801159c:	7dfb      	ldrb	r3, [r7, #23]
 801159e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d03d      	beq.n	8011628 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115b0:	2b04      	cmp	r3, #4
 80115b2:	d826      	bhi.n	8011602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80115b4:	a201      	add	r2, pc, #4	; (adr r2, 80115bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80115b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ba:	bf00      	nop
 80115bc:	080115d1 	.word	0x080115d1
 80115c0:	080115df 	.word	0x080115df
 80115c4:	080115f1 	.word	0x080115f1
 80115c8:	08011609 	.word	0x08011609
 80115cc:	08011609 	.word	0x08011609
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80115d0:	4b81      	ldr	r3, [pc, #516]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80115d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d4:	4a80      	ldr	r2, [pc, #512]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80115d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80115da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80115dc:	e015      	b.n	801160a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	3304      	adds	r3, #4
 80115e2:	2100      	movs	r1, #0
 80115e4:	4618      	mov	r0, r3
 80115e6:	f001 f991 	bl	801290c <RCCEx_PLL2_Config>
 80115ea:	4603      	mov	r3, r0
 80115ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80115ee:	e00c      	b.n	801160a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	3324      	adds	r3, #36	; 0x24
 80115f4:	2100      	movs	r1, #0
 80115f6:	4618      	mov	r0, r3
 80115f8:	f001 fa3a 	bl	8012a70 <RCCEx_PLL3_Config>
 80115fc:	4603      	mov	r3, r0
 80115fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011600:	e003      	b.n	801160a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011602:	2301      	movs	r3, #1
 8011604:	75fb      	strb	r3, [r7, #23]
      break;
 8011606:	e000      	b.n	801160a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8011608:	bf00      	nop
    }

    if(ret == HAL_OK)
 801160a:	7dfb      	ldrb	r3, [r7, #23]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d109      	bne.n	8011624 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011610:	4b71      	ldr	r3, [pc, #452]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011614:	f023 0207 	bic.w	r2, r3, #7
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801161c:	496e      	ldr	r1, [pc, #440]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801161e:	4313      	orrs	r3, r2
 8011620:	650b      	str	r3, [r1, #80]	; 0x50
 8011622:	e001      	b.n	8011628 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011624:	7dfb      	ldrb	r3, [r7, #23]
 8011626:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011630:	2b00      	cmp	r3, #0
 8011632:	d042      	beq.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801163c:	d02b      	beq.n	8011696 <HAL_RCCEx_PeriphCLKConfig+0x192>
 801163e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011642:	d825      	bhi.n	8011690 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011644:	2bc0      	cmp	r3, #192	; 0xc0
 8011646:	d028      	beq.n	801169a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8011648:	2bc0      	cmp	r3, #192	; 0xc0
 801164a:	d821      	bhi.n	8011690 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801164c:	2b80      	cmp	r3, #128	; 0x80
 801164e:	d016      	beq.n	801167e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8011650:	2b80      	cmp	r3, #128	; 0x80
 8011652:	d81d      	bhi.n	8011690 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011654:	2b00      	cmp	r3, #0
 8011656:	d002      	beq.n	801165e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8011658:	2b40      	cmp	r3, #64	; 0x40
 801165a:	d007      	beq.n	801166c <HAL_RCCEx_PeriphCLKConfig+0x168>
 801165c:	e018      	b.n	8011690 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801165e:	4b5e      	ldr	r3, [pc, #376]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011662:	4a5d      	ldr	r2, [pc, #372]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011668:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801166a:	e017      	b.n	801169c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	3304      	adds	r3, #4
 8011670:	2100      	movs	r1, #0
 8011672:	4618      	mov	r0, r3
 8011674:	f001 f94a 	bl	801290c <RCCEx_PLL2_Config>
 8011678:	4603      	mov	r3, r0
 801167a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801167c:	e00e      	b.n	801169c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	3324      	adds	r3, #36	; 0x24
 8011682:	2100      	movs	r1, #0
 8011684:	4618      	mov	r0, r3
 8011686:	f001 f9f3 	bl	8012a70 <RCCEx_PLL3_Config>
 801168a:	4603      	mov	r3, r0
 801168c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801168e:	e005      	b.n	801169c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011690:	2301      	movs	r3, #1
 8011692:	75fb      	strb	r3, [r7, #23]
      break;
 8011694:	e002      	b.n	801169c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8011696:	bf00      	nop
 8011698:	e000      	b.n	801169c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801169a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801169c:	7dfb      	ldrb	r3, [r7, #23]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d109      	bne.n	80116b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80116a2:	4b4d      	ldr	r3, [pc, #308]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80116a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116ae:	494a      	ldr	r1, [pc, #296]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80116b0:	4313      	orrs	r3, r2
 80116b2:	650b      	str	r3, [r1, #80]	; 0x50
 80116b4:	e001      	b.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80116b6:	7dfb      	ldrb	r3, [r7, #23]
 80116b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d049      	beq.n	801175a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80116cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80116d0:	d030      	beq.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80116d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80116d6:	d82a      	bhi.n	801172e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80116d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80116dc:	d02c      	beq.n	8011738 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80116de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80116e2:	d824      	bhi.n	801172e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80116e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80116e8:	d018      	beq.n	801171c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80116ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80116ee:	d81e      	bhi.n	801172e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d003      	beq.n	80116fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80116f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80116f8:	d007      	beq.n	801170a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80116fa:	e018      	b.n	801172e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80116fc:	4b36      	ldr	r3, [pc, #216]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80116fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011700:	4a35      	ldr	r2, [pc, #212]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011708:	e017      	b.n	801173a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	3304      	adds	r3, #4
 801170e:	2100      	movs	r1, #0
 8011710:	4618      	mov	r0, r3
 8011712:	f001 f8fb 	bl	801290c <RCCEx_PLL2_Config>
 8011716:	4603      	mov	r3, r0
 8011718:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801171a:	e00e      	b.n	801173a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	3324      	adds	r3, #36	; 0x24
 8011720:	2100      	movs	r1, #0
 8011722:	4618      	mov	r0, r3
 8011724:	f001 f9a4 	bl	8012a70 <RCCEx_PLL3_Config>
 8011728:	4603      	mov	r3, r0
 801172a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801172c:	e005      	b.n	801173a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801172e:	2301      	movs	r3, #1
 8011730:	75fb      	strb	r3, [r7, #23]
      break;
 8011732:	e002      	b.n	801173a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011734:	bf00      	nop
 8011736:	e000      	b.n	801173a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011738:	bf00      	nop
    }

    if(ret == HAL_OK)
 801173a:	7dfb      	ldrb	r3, [r7, #23]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d10a      	bne.n	8011756 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011740:	4b25      	ldr	r3, [pc, #148]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011744:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801174e:	4922      	ldr	r1, [pc, #136]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011750:	4313      	orrs	r3, r2
 8011752:	658b      	str	r3, [r1, #88]	; 0x58
 8011754:	e001      	b.n	801175a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011756:	7dfb      	ldrb	r3, [r7, #23]
 8011758:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011762:	2b00      	cmp	r3, #0
 8011764:	d04b      	beq.n	80117fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801176c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011770:	d030      	beq.n	80117d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8011772:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011776:	d82a      	bhi.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801177c:	d02e      	beq.n	80117dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 801177e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011782:	d824      	bhi.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011788:	d018      	beq.n	80117bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 801178a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801178e:	d81e      	bhi.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011790:	2b00      	cmp	r3, #0
 8011792:	d003      	beq.n	801179c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011798:	d007      	beq.n	80117aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801179a:	e018      	b.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801179c:	4b0e      	ldr	r3, [pc, #56]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117a0:	4a0d      	ldr	r2, [pc, #52]	; (80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80117a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80117a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80117a8:	e019      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	3304      	adds	r3, #4
 80117ae:	2100      	movs	r1, #0
 80117b0:	4618      	mov	r0, r3
 80117b2:	f001 f8ab 	bl	801290c <RCCEx_PLL2_Config>
 80117b6:	4603      	mov	r3, r0
 80117b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80117ba:	e010      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	3324      	adds	r3, #36	; 0x24
 80117c0:	2100      	movs	r1, #0
 80117c2:	4618      	mov	r0, r3
 80117c4:	f001 f954 	bl	8012a70 <RCCEx_PLL3_Config>
 80117c8:	4603      	mov	r3, r0
 80117ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80117cc:	e007      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80117ce:	2301      	movs	r3, #1
 80117d0:	75fb      	strb	r3, [r7, #23]
      break;
 80117d2:	e004      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80117d4:	bf00      	nop
 80117d6:	e002      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80117d8:	58024400 	.word	0x58024400
      break;
 80117dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80117de:	7dfb      	ldrb	r3, [r7, #23]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d10a      	bne.n	80117fa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80117e4:	4b99      	ldr	r3, [pc, #612]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80117e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80117f2:	4996      	ldr	r1, [pc, #600]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80117f4:	4313      	orrs	r3, r2
 80117f6:	658b      	str	r3, [r1, #88]	; 0x58
 80117f8:	e001      	b.n	80117fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117fa:	7dfb      	ldrb	r3, [r7, #23]
 80117fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011806:	2b00      	cmp	r3, #0
 8011808:	d032      	beq.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801180e:	2b30      	cmp	r3, #48	; 0x30
 8011810:	d01c      	beq.n	801184c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8011812:	2b30      	cmp	r3, #48	; 0x30
 8011814:	d817      	bhi.n	8011846 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8011816:	2b20      	cmp	r3, #32
 8011818:	d00c      	beq.n	8011834 <HAL_RCCEx_PeriphCLKConfig+0x330>
 801181a:	2b20      	cmp	r3, #32
 801181c:	d813      	bhi.n	8011846 <HAL_RCCEx_PeriphCLKConfig+0x342>
 801181e:	2b00      	cmp	r3, #0
 8011820:	d016      	beq.n	8011850 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8011822:	2b10      	cmp	r3, #16
 8011824:	d10f      	bne.n	8011846 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011826:	4b89      	ldr	r3, [pc, #548]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801182a:	4a88      	ldr	r2, [pc, #544]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011830:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011832:	e00e      	b.n	8011852 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	3304      	adds	r3, #4
 8011838:	2102      	movs	r1, #2
 801183a:	4618      	mov	r0, r3
 801183c:	f001 f866 	bl	801290c <RCCEx_PLL2_Config>
 8011840:	4603      	mov	r3, r0
 8011842:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011844:	e005      	b.n	8011852 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011846:	2301      	movs	r3, #1
 8011848:	75fb      	strb	r3, [r7, #23]
      break;
 801184a:	e002      	b.n	8011852 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 801184c:	bf00      	nop
 801184e:	e000      	b.n	8011852 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8011850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011852:	7dfb      	ldrb	r3, [r7, #23]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d109      	bne.n	801186c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8011858:	4b7c      	ldr	r3, [pc, #496]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801185c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011864:	4979      	ldr	r1, [pc, #484]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011866:	4313      	orrs	r3, r2
 8011868:	64cb      	str	r3, [r1, #76]	; 0x4c
 801186a:	e001      	b.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801186c:	7dfb      	ldrb	r3, [r7, #23]
 801186e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011878:	2b00      	cmp	r3, #0
 801187a:	d047      	beq.n	801190c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011884:	d030      	beq.n	80118e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8011886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801188a:	d82a      	bhi.n	80118e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 801188c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011890:	d02c      	beq.n	80118ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8011892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011896:	d824      	bhi.n	80118e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801189c:	d018      	beq.n	80118d0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 801189e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80118a2:	d81e      	bhi.n	80118e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d003      	beq.n	80118b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80118a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118ac:	d007      	beq.n	80118be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80118ae:	e018      	b.n	80118e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80118b0:	4b66      	ldr	r3, [pc, #408]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80118b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b4:	4a65      	ldr	r2, [pc, #404]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80118b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80118ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80118bc:	e017      	b.n	80118ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	3304      	adds	r3, #4
 80118c2:	2100      	movs	r1, #0
 80118c4:	4618      	mov	r0, r3
 80118c6:	f001 f821 	bl	801290c <RCCEx_PLL2_Config>
 80118ca:	4603      	mov	r3, r0
 80118cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80118ce:	e00e      	b.n	80118ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	3324      	adds	r3, #36	; 0x24
 80118d4:	2100      	movs	r1, #0
 80118d6:	4618      	mov	r0, r3
 80118d8:	f001 f8ca 	bl	8012a70 <RCCEx_PLL3_Config>
 80118dc:	4603      	mov	r3, r0
 80118de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80118e0:	e005      	b.n	80118ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80118e2:	2301      	movs	r3, #1
 80118e4:	75fb      	strb	r3, [r7, #23]
      break;
 80118e6:	e002      	b.n	80118ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80118e8:	bf00      	nop
 80118ea:	e000      	b.n	80118ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80118ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80118ee:	7dfb      	ldrb	r3, [r7, #23]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d109      	bne.n	8011908 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80118f4:	4b55      	ldr	r3, [pc, #340]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80118f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011900:	4952      	ldr	r1, [pc, #328]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011902:	4313      	orrs	r3, r2
 8011904:	650b      	str	r3, [r1, #80]	; 0x50
 8011906:	e001      	b.n	801190c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011908:	7dfb      	ldrb	r3, [r7, #23]
 801190a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011914:	2b00      	cmp	r3, #0
 8011916:	d049      	beq.n	80119ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011920:	d02e      	beq.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8011922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011926:	d828      	bhi.n	801197a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801192c:	d02a      	beq.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0x480>
 801192e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011932:	d822      	bhi.n	801197a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011934:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011938:	d026      	beq.n	8011988 <HAL_RCCEx_PeriphCLKConfig+0x484>
 801193a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801193e:	d81c      	bhi.n	801197a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011944:	d010      	beq.n	8011968 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8011946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801194a:	d816      	bhi.n	801197a <HAL_RCCEx_PeriphCLKConfig+0x476>
 801194c:	2b00      	cmp	r3, #0
 801194e:	d01d      	beq.n	801198c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8011950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011954:	d111      	bne.n	801197a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	3304      	adds	r3, #4
 801195a:	2101      	movs	r1, #1
 801195c:	4618      	mov	r0, r3
 801195e:	f000 ffd5 	bl	801290c <RCCEx_PLL2_Config>
 8011962:	4603      	mov	r3, r0
 8011964:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011966:	e012      	b.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	3324      	adds	r3, #36	; 0x24
 801196c:	2101      	movs	r1, #1
 801196e:	4618      	mov	r0, r3
 8011970:	f001 f87e 	bl	8012a70 <RCCEx_PLL3_Config>
 8011974:	4603      	mov	r3, r0
 8011976:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011978:	e009      	b.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801197a:	2301      	movs	r3, #1
 801197c:	75fb      	strb	r3, [r7, #23]
      break;
 801197e:	e006      	b.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011980:	bf00      	nop
 8011982:	e004      	b.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011984:	bf00      	nop
 8011986:	e002      	b.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011988:	bf00      	nop
 801198a:	e000      	b.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801198c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801198e:	7dfb      	ldrb	r3, [r7, #23]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d109      	bne.n	80119a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011994:	4b2d      	ldr	r3, [pc, #180]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011998:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80119a0:	492a      	ldr	r1, [pc, #168]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80119a2:	4313      	orrs	r3, r2
 80119a4:	650b      	str	r3, [r1, #80]	; 0x50
 80119a6:	e001      	b.n	80119ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119a8:	7dfb      	ldrb	r3, [r7, #23]
 80119aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d04d      	beq.n	8011a54 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80119be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80119c2:	d02e      	beq.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80119c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80119c8:	d828      	bhi.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80119ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119ce:	d02a      	beq.n	8011a26 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80119d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119d4:	d822      	bhi.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80119d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80119da:	d026      	beq.n	8011a2a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80119dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80119e0:	d81c      	bhi.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80119e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80119e6:	d010      	beq.n	8011a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80119e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80119ec:	d816      	bhi.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d01d      	beq.n	8011a2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80119f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80119f6:	d111      	bne.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	3304      	adds	r3, #4
 80119fc:	2101      	movs	r1, #1
 80119fe:	4618      	mov	r0, r3
 8011a00:	f000 ff84 	bl	801290c <RCCEx_PLL2_Config>
 8011a04:	4603      	mov	r3, r0
 8011a06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011a08:	e012      	b.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	3324      	adds	r3, #36	; 0x24
 8011a0e:	2101      	movs	r1, #1
 8011a10:	4618      	mov	r0, r3
 8011a12:	f001 f82d 	bl	8012a70 <RCCEx_PLL3_Config>
 8011a16:	4603      	mov	r3, r0
 8011a18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011a1a:	e009      	b.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8011a20:	e006      	b.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011a22:	bf00      	nop
 8011a24:	e004      	b.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011a26:	bf00      	nop
 8011a28:	e002      	b.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011a2a:	bf00      	nop
 8011a2c:	e000      	b.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a30:	7dfb      	ldrb	r3, [r7, #23]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d10c      	bne.n	8011a50 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011a36:	4b05      	ldr	r3, [pc, #20]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011a44:	4901      	ldr	r1, [pc, #4]	; (8011a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011a46:	4313      	orrs	r3, r2
 8011a48:	658b      	str	r3, [r1, #88]	; 0x58
 8011a4a:	e003      	b.n	8011a54 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8011a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a50:	7dfb      	ldrb	r3, [r7, #23]
 8011a52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d02f      	beq.n	8011ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a68:	d00e      	beq.n	8011a88 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8011a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a6e:	d814      	bhi.n	8011a9a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d015      	beq.n	8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8011a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011a78:	d10f      	bne.n	8011a9a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a7a:	4baf      	ldr	r3, [pc, #700]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7e:	4aae      	ldr	r2, [pc, #696]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011a86:	e00c      	b.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	3304      	adds	r3, #4
 8011a8c:	2101      	movs	r1, #1
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f000 ff3c 	bl	801290c <RCCEx_PLL2_Config>
 8011a94:	4603      	mov	r3, r0
 8011a96:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011a98:	e003      	b.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8011a9e:	e000      	b.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8011aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011aa2:	7dfb      	ldrb	r3, [r7, #23]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d109      	bne.n	8011abc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011aa8:	4ba3      	ldr	r3, [pc, #652]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab4:	49a0      	ldr	r1, [pc, #640]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	650b      	str	r3, [r1, #80]	; 0x50
 8011aba:	e001      	b.n	8011ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011abc:	7dfb      	ldrb	r3, [r7, #23]
 8011abe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d032      	beq.n	8011b32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ad0:	2b03      	cmp	r3, #3
 8011ad2:	d81b      	bhi.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8011ad4:	a201      	add	r2, pc, #4	; (adr r2, 8011adc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8011ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ada:	bf00      	nop
 8011adc:	08011b13 	.word	0x08011b13
 8011ae0:	08011aed 	.word	0x08011aed
 8011ae4:	08011afb 	.word	0x08011afb
 8011ae8:	08011b13 	.word	0x08011b13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011aec:	4b92      	ldr	r3, [pc, #584]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af0:	4a91      	ldr	r2, [pc, #580]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011af8:	e00c      	b.n	8011b14 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	3304      	adds	r3, #4
 8011afe:	2102      	movs	r1, #2
 8011b00:	4618      	mov	r0, r3
 8011b02:	f000 ff03 	bl	801290c <RCCEx_PLL2_Config>
 8011b06:	4603      	mov	r3, r0
 8011b08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011b0a:	e003      	b.n	8011b14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8011b10:	e000      	b.n	8011b14 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8011b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b14:	7dfb      	ldrb	r3, [r7, #23]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d109      	bne.n	8011b2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011b1a:	4b87      	ldr	r3, [pc, #540]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b1e:	f023 0203 	bic.w	r2, r3, #3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b26:	4984      	ldr	r1, [pc, #528]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011b2c:	e001      	b.n	8011b32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b2e:	7dfb      	ldrb	r3, [r7, #23]
 8011b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	f000 8086 	beq.w	8011c4c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011b40:	4b7e      	ldr	r3, [pc, #504]	; (8011d3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4a7d      	ldr	r2, [pc, #500]	; (8011d3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011b4c:	f7f9 fbf0 	bl	800b330 <HAL_GetTick>
 8011b50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011b52:	e009      	b.n	8011b68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011b54:	f7f9 fbec 	bl	800b330 <HAL_GetTick>
 8011b58:	4602      	mov	r2, r0
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	2b64      	cmp	r3, #100	; 0x64
 8011b60:	d902      	bls.n	8011b68 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8011b62:	2303      	movs	r3, #3
 8011b64:	75fb      	strb	r3, [r7, #23]
        break;
 8011b66:	e005      	b.n	8011b74 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011b68:	4b74      	ldr	r3, [pc, #464]	; (8011d3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d0ef      	beq.n	8011b54 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8011b74:	7dfb      	ldrb	r3, [r7, #23]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d166      	bne.n	8011c48 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011b7a:	4b6f      	ldr	r3, [pc, #444]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011b7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011b84:	4053      	eors	r3, r2
 8011b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d013      	beq.n	8011bb6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011b8e:	4b6a      	ldr	r3, [pc, #424]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011b98:	4b67      	ldr	r3, [pc, #412]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b9c:	4a66      	ldr	r2, [pc, #408]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ba2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011ba4:	4b64      	ldr	r3, [pc, #400]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ba8:	4a63      	ldr	r2, [pc, #396]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011bae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011bb0:	4a61      	ldr	r2, [pc, #388]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bc0:	d115      	bne.n	8011bee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011bc2:	f7f9 fbb5 	bl	800b330 <HAL_GetTick>
 8011bc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011bc8:	e00b      	b.n	8011be2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011bca:	f7f9 fbb1 	bl	800b330 <HAL_GetTick>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d902      	bls.n	8011be2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8011bdc:	2303      	movs	r3, #3
 8011bde:	75fb      	strb	r3, [r7, #23]
            break;
 8011be0:	e005      	b.n	8011bee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011be2:	4b55      	ldr	r3, [pc, #340]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011be6:	f003 0302 	and.w	r3, r3, #2
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d0ed      	beq.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8011bee:	7dfb      	ldrb	r3, [r7, #23]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d126      	bne.n	8011c42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011c02:	d10d      	bne.n	8011c20 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8011c04:	4b4c      	ldr	r3, [pc, #304]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011c06:	691b      	ldr	r3, [r3, #16]
 8011c08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011c12:	0919      	lsrs	r1, r3, #4
 8011c14:	4b4a      	ldr	r3, [pc, #296]	; (8011d40 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8011c16:	400b      	ands	r3, r1
 8011c18:	4947      	ldr	r1, [pc, #284]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	610b      	str	r3, [r1, #16]
 8011c1e:	e005      	b.n	8011c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8011c20:	4b45      	ldr	r3, [pc, #276]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011c22:	691b      	ldr	r3, [r3, #16]
 8011c24:	4a44      	ldr	r2, [pc, #272]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011c26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c2a:	6113      	str	r3, [r2, #16]
 8011c2c:	4b42      	ldr	r3, [pc, #264]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011c3a:	493f      	ldr	r1, [pc, #252]	; (8011d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011c3c:	4313      	orrs	r3, r2
 8011c3e:	670b      	str	r3, [r1, #112]	; 0x70
 8011c40:	e004      	b.n	8011c4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011c42:	7dfb      	ldrb	r3, [r7, #23]
 8011c44:	75bb      	strb	r3, [r7, #22]
 8011c46:	e001      	b.n	8011c4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c48:	7dfb      	ldrb	r3, [r7, #23]
 8011c4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f003 0301 	and.w	r3, r3, #1
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f000 8085 	beq.w	8011d64 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c5e:	2b28      	cmp	r3, #40	; 0x28
 8011c60:	d866      	bhi.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8011c62:	a201      	add	r2, pc, #4	; (adr r2, 8011c68 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8011c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c68:	08011d45 	.word	0x08011d45
 8011c6c:	08011d31 	.word	0x08011d31
 8011c70:	08011d31 	.word	0x08011d31
 8011c74:	08011d31 	.word	0x08011d31
 8011c78:	08011d31 	.word	0x08011d31
 8011c7c:	08011d31 	.word	0x08011d31
 8011c80:	08011d31 	.word	0x08011d31
 8011c84:	08011d31 	.word	0x08011d31
 8011c88:	08011d0d 	.word	0x08011d0d
 8011c8c:	08011d31 	.word	0x08011d31
 8011c90:	08011d31 	.word	0x08011d31
 8011c94:	08011d31 	.word	0x08011d31
 8011c98:	08011d31 	.word	0x08011d31
 8011c9c:	08011d31 	.word	0x08011d31
 8011ca0:	08011d31 	.word	0x08011d31
 8011ca4:	08011d31 	.word	0x08011d31
 8011ca8:	08011d1f 	.word	0x08011d1f
 8011cac:	08011d31 	.word	0x08011d31
 8011cb0:	08011d31 	.word	0x08011d31
 8011cb4:	08011d31 	.word	0x08011d31
 8011cb8:	08011d31 	.word	0x08011d31
 8011cbc:	08011d31 	.word	0x08011d31
 8011cc0:	08011d31 	.word	0x08011d31
 8011cc4:	08011d31 	.word	0x08011d31
 8011cc8:	08011d45 	.word	0x08011d45
 8011ccc:	08011d31 	.word	0x08011d31
 8011cd0:	08011d31 	.word	0x08011d31
 8011cd4:	08011d31 	.word	0x08011d31
 8011cd8:	08011d31 	.word	0x08011d31
 8011cdc:	08011d31 	.word	0x08011d31
 8011ce0:	08011d31 	.word	0x08011d31
 8011ce4:	08011d31 	.word	0x08011d31
 8011ce8:	08011d45 	.word	0x08011d45
 8011cec:	08011d31 	.word	0x08011d31
 8011cf0:	08011d31 	.word	0x08011d31
 8011cf4:	08011d31 	.word	0x08011d31
 8011cf8:	08011d31 	.word	0x08011d31
 8011cfc:	08011d31 	.word	0x08011d31
 8011d00:	08011d31 	.word	0x08011d31
 8011d04:	08011d31 	.word	0x08011d31
 8011d08:	08011d45 	.word	0x08011d45
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	3304      	adds	r3, #4
 8011d10:	2101      	movs	r1, #1
 8011d12:	4618      	mov	r0, r3
 8011d14:	f000 fdfa 	bl	801290c <RCCEx_PLL2_Config>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011d1c:	e013      	b.n	8011d46 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	3324      	adds	r3, #36	; 0x24
 8011d22:	2101      	movs	r1, #1
 8011d24:	4618      	mov	r0, r3
 8011d26:	f000 fea3 	bl	8012a70 <RCCEx_PLL3_Config>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011d2e:	e00a      	b.n	8011d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011d30:	2301      	movs	r3, #1
 8011d32:	75fb      	strb	r3, [r7, #23]
      break;
 8011d34:	e007      	b.n	8011d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8011d36:	bf00      	nop
 8011d38:	58024400 	.word	0x58024400
 8011d3c:	58024800 	.word	0x58024800
 8011d40:	00ffffcf 	.word	0x00ffffcf
      break;
 8011d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011d46:	7dfb      	ldrb	r3, [r7, #23]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d109      	bne.n	8011d60 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011d4c:	4b96      	ldr	r3, [pc, #600]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d50:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d58:	4993      	ldr	r1, [pc, #588]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011d5a:	4313      	orrs	r3, r2
 8011d5c:	654b      	str	r3, [r1, #84]	; 0x54
 8011d5e:	e001      	b.n	8011d64 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d60:	7dfb      	ldrb	r3, [r7, #23]
 8011d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f003 0302 	and.w	r3, r3, #2
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d038      	beq.n	8011de2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d74:	2b05      	cmp	r3, #5
 8011d76:	d821      	bhi.n	8011dbc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8011d78:	a201      	add	r2, pc, #4	; (adr r2, 8011d80 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8011d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d7e:	bf00      	nop
 8011d80:	08011dc3 	.word	0x08011dc3
 8011d84:	08011d99 	.word	0x08011d99
 8011d88:	08011dab 	.word	0x08011dab
 8011d8c:	08011dc3 	.word	0x08011dc3
 8011d90:	08011dc3 	.word	0x08011dc3
 8011d94:	08011dc3 	.word	0x08011dc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	3304      	adds	r3, #4
 8011d9c:	2101      	movs	r1, #1
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f000 fdb4 	bl	801290c <RCCEx_PLL2_Config>
 8011da4:	4603      	mov	r3, r0
 8011da6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011da8:	e00c      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	3324      	adds	r3, #36	; 0x24
 8011dae:	2101      	movs	r1, #1
 8011db0:	4618      	mov	r0, r3
 8011db2:	f000 fe5d 	bl	8012a70 <RCCEx_PLL3_Config>
 8011db6:	4603      	mov	r3, r0
 8011db8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011dba:	e003      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8011dc0:	e000      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8011dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011dc4:	7dfb      	ldrb	r3, [r7, #23]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d109      	bne.n	8011dde <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011dca:	4b77      	ldr	r3, [pc, #476]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dce:	f023 0207 	bic.w	r2, r3, #7
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dd6:	4974      	ldr	r1, [pc, #464]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	654b      	str	r3, [r1, #84]	; 0x54
 8011ddc:	e001      	b.n	8011de2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011dde:	7dfb      	ldrb	r3, [r7, #23]
 8011de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f003 0304 	and.w	r3, r3, #4
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d03a      	beq.n	8011e64 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011df4:	2b05      	cmp	r3, #5
 8011df6:	d821      	bhi.n	8011e3c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8011df8:	a201      	add	r2, pc, #4	; (adr r2, 8011e00 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8011dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dfe:	bf00      	nop
 8011e00:	08011e43 	.word	0x08011e43
 8011e04:	08011e19 	.word	0x08011e19
 8011e08:	08011e2b 	.word	0x08011e2b
 8011e0c:	08011e43 	.word	0x08011e43
 8011e10:	08011e43 	.word	0x08011e43
 8011e14:	08011e43 	.word	0x08011e43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	3304      	adds	r3, #4
 8011e1c:	2101      	movs	r1, #1
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f000 fd74 	bl	801290c <RCCEx_PLL2_Config>
 8011e24:	4603      	mov	r3, r0
 8011e26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011e28:	e00c      	b.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	3324      	adds	r3, #36	; 0x24
 8011e2e:	2101      	movs	r1, #1
 8011e30:	4618      	mov	r0, r3
 8011e32:	f000 fe1d 	bl	8012a70 <RCCEx_PLL3_Config>
 8011e36:	4603      	mov	r3, r0
 8011e38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011e3a:	e003      	b.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8011e40:	e000      	b.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8011e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011e44:	7dfb      	ldrb	r3, [r7, #23]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10a      	bne.n	8011e60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011e4a:	4b57      	ldr	r3, [pc, #348]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e4e:	f023 0207 	bic.w	r2, r3, #7
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e58:	4953      	ldr	r1, [pc, #332]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8011e5e:	e001      	b.n	8011e64 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e60:	7dfb      	ldrb	r3, [r7, #23]
 8011e62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f003 0320 	and.w	r3, r3, #32
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d04b      	beq.n	8011f08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e7a:	d02e      	beq.n	8011eda <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8011e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e80:	d828      	bhi.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e86:	d02a      	beq.n	8011ede <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8011e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e8c:	d822      	bhi.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011e8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011e92:	d026      	beq.n	8011ee2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8011e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011e98:	d81c      	bhi.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e9e:	d010      	beq.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8011ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ea4:	d816      	bhi.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d01d      	beq.n	8011ee6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8011eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011eae:	d111      	bne.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	3304      	adds	r3, #4
 8011eb4:	2100      	movs	r1, #0
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 fd28 	bl	801290c <RCCEx_PLL2_Config>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011ec0:	e012      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	3324      	adds	r3, #36	; 0x24
 8011ec6:	2102      	movs	r1, #2
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f000 fdd1 	bl	8012a70 <RCCEx_PLL3_Config>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011ed2:	e009      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8011ed8:	e006      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8011eda:	bf00      	nop
 8011edc:	e004      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8011ede:	bf00      	nop
 8011ee0:	e002      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8011ee2:	bf00      	nop
 8011ee4:	e000      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8011ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011ee8:	7dfb      	ldrb	r3, [r7, #23]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d10a      	bne.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011eee:	4b2e      	ldr	r3, [pc, #184]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ef2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011efc:	492a      	ldr	r1, [pc, #168]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011efe:	4313      	orrs	r3, r2
 8011f00:	654b      	str	r3, [r1, #84]	; 0x54
 8011f02:	e001      	b.n	8011f08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f04:	7dfb      	ldrb	r3, [r7, #23]
 8011f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d04d      	beq.n	8011fb0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011f1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011f1e:	d02e      	beq.n	8011f7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8011f20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011f24:	d828      	bhi.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f2a:	d02a      	beq.n	8011f82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8011f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f30:	d822      	bhi.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011f36:	d026      	beq.n	8011f86 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8011f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011f3c:	d81c      	bhi.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f42:	d010      	beq.n	8011f66 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8011f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f48:	d816      	bhi.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d01d      	beq.n	8011f8a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8011f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f52:	d111      	bne.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	3304      	adds	r3, #4
 8011f58:	2100      	movs	r1, #0
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f000 fcd6 	bl	801290c <RCCEx_PLL2_Config>
 8011f60:	4603      	mov	r3, r0
 8011f62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8011f64:	e012      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3324      	adds	r3, #36	; 0x24
 8011f6a:	2102      	movs	r1, #2
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f000 fd7f 	bl	8012a70 <RCCEx_PLL3_Config>
 8011f72:	4603      	mov	r3, r0
 8011f74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8011f76:	e009      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8011f7c:	e006      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011f7e:	bf00      	nop
 8011f80:	e004      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011f82:	bf00      	nop
 8011f84:	e002      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011f86:	bf00      	nop
 8011f88:	e000      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011f8c:	7dfb      	ldrb	r3, [r7, #23]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10c      	bne.n	8011fac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011f92:	4b05      	ldr	r3, [pc, #20]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011fa0:	4901      	ldr	r1, [pc, #4]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	658b      	str	r3, [r1, #88]	; 0x58
 8011fa6:	e003      	b.n	8011fb0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8011fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011fac:	7dfb      	ldrb	r3, [r7, #23]
 8011fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d04b      	beq.n	8012054 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011fc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011fc6:	d02e      	beq.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8011fc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011fcc:	d828      	bhi.n	8012020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8011fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011fd2:	d02a      	beq.n	801202a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8011fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011fd8:	d822      	bhi.n	8012020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8011fda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011fde:	d026      	beq.n	801202e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8011fe0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011fe4:	d81c      	bhi.n	8012020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8011fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fea:	d010      	beq.n	801200e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8011fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ff0:	d816      	bhi.n	8012020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d01d      	beq.n	8012032 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8011ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ffa:	d111      	bne.n	8012020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	3304      	adds	r3, #4
 8012000:	2100      	movs	r1, #0
 8012002:	4618      	mov	r0, r3
 8012004:	f000 fc82 	bl	801290c <RCCEx_PLL2_Config>
 8012008:	4603      	mov	r3, r0
 801200a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801200c:	e012      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	3324      	adds	r3, #36	; 0x24
 8012012:	2102      	movs	r1, #2
 8012014:	4618      	mov	r0, r3
 8012016:	f000 fd2b 	bl	8012a70 <RCCEx_PLL3_Config>
 801201a:	4603      	mov	r3, r0
 801201c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801201e:	e009      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012020:	2301      	movs	r3, #1
 8012022:	75fb      	strb	r3, [r7, #23]
      break;
 8012024:	e006      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012026:	bf00      	nop
 8012028:	e004      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 801202a:	bf00      	nop
 801202c:	e002      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 801202e:	bf00      	nop
 8012030:	e000      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012034:	7dfb      	ldrb	r3, [r7, #23]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10a      	bne.n	8012050 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801203a:	4b9d      	ldr	r3, [pc, #628]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801203e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012048:	4999      	ldr	r1, [pc, #612]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801204a:	4313      	orrs	r3, r2
 801204c:	658b      	str	r3, [r1, #88]	; 0x58
 801204e:	e001      	b.n	8012054 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012050:	7dfb      	ldrb	r3, [r7, #23]
 8012052:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f003 0308 	and.w	r3, r3, #8
 801205c:	2b00      	cmp	r3, #0
 801205e:	d01a      	beq.n	8012096 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801206a:	d10a      	bne.n	8012082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	3324      	adds	r3, #36	; 0x24
 8012070:	2102      	movs	r1, #2
 8012072:	4618      	mov	r0, r3
 8012074:	f000 fcfc 	bl	8012a70 <RCCEx_PLL3_Config>
 8012078:	4603      	mov	r3, r0
 801207a:	2b00      	cmp	r3, #0
 801207c:	d001      	beq.n	8012082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 801207e:	2301      	movs	r3, #1
 8012080:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8012082:	4b8b      	ldr	r3, [pc, #556]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012086:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012090:	4987      	ldr	r1, [pc, #540]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012092:	4313      	orrs	r3, r2
 8012094:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f003 0310 	and.w	r3, r3, #16
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d01a      	beq.n	80120d8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80120a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120ac:	d10a      	bne.n	80120c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	3324      	adds	r3, #36	; 0x24
 80120b2:	2102      	movs	r1, #2
 80120b4:	4618      	mov	r0, r3
 80120b6:	f000 fcdb 	bl	8012a70 <RCCEx_PLL3_Config>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d001      	beq.n	80120c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80120c0:	2301      	movs	r3, #1
 80120c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80120c4:	4b7a      	ldr	r3, [pc, #488]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80120c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80120d2:	4977      	ldr	r1, [pc, #476]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80120d4:	4313      	orrs	r3, r2
 80120d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d034      	beq.n	801214e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80120ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80120ee:	d01d      	beq.n	801212c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80120f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80120f4:	d817      	bhi.n	8012126 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d003      	beq.n	8012102 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80120fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120fe:	d009      	beq.n	8012114 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8012100:	e011      	b.n	8012126 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	3304      	adds	r3, #4
 8012106:	2100      	movs	r1, #0
 8012108:	4618      	mov	r0, r3
 801210a:	f000 fbff 	bl	801290c <RCCEx_PLL2_Config>
 801210e:	4603      	mov	r3, r0
 8012110:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8012112:	e00c      	b.n	801212e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	3324      	adds	r3, #36	; 0x24
 8012118:	2102      	movs	r1, #2
 801211a:	4618      	mov	r0, r3
 801211c:	f000 fca8 	bl	8012a70 <RCCEx_PLL3_Config>
 8012120:	4603      	mov	r3, r0
 8012122:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8012124:	e003      	b.n	801212e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012126:	2301      	movs	r3, #1
 8012128:	75fb      	strb	r3, [r7, #23]
      break;
 801212a:	e000      	b.n	801212e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 801212c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801212e:	7dfb      	ldrb	r3, [r7, #23]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d10a      	bne.n	801214a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012134:	4b5e      	ldr	r3, [pc, #376]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012142:	495b      	ldr	r1, [pc, #364]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012144:	4313      	orrs	r3, r2
 8012146:	658b      	str	r3, [r1, #88]	; 0x58
 8012148:	e001      	b.n	801214e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801214a:	7dfb      	ldrb	r3, [r7, #23]
 801214c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012156:	2b00      	cmp	r3, #0
 8012158:	d033      	beq.n	80121c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012164:	d01c      	beq.n	80121a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8012166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801216a:	d816      	bhi.n	801219a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 801216c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012170:	d003      	beq.n	801217a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8012172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012176:	d007      	beq.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8012178:	e00f      	b.n	801219a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801217a:	4b4d      	ldr	r3, [pc, #308]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801217e:	4a4c      	ldr	r2, [pc, #304]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8012186:	e00c      	b.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	3324      	adds	r3, #36	; 0x24
 801218c:	2101      	movs	r1, #1
 801218e:	4618      	mov	r0, r3
 8012190:	f000 fc6e 	bl	8012a70 <RCCEx_PLL3_Config>
 8012194:	4603      	mov	r3, r0
 8012196:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8012198:	e003      	b.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801219a:	2301      	movs	r3, #1
 801219c:	75fb      	strb	r3, [r7, #23]
      break;
 801219e:	e000      	b.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80121a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d10a      	bne.n	80121be <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80121a8:	4b41      	ldr	r3, [pc, #260]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80121aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121b6:	493e      	ldr	r1, [pc, #248]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80121b8:	4313      	orrs	r3, r2
 80121ba:	654b      	str	r3, [r1, #84]	; 0x54
 80121bc:	e001      	b.n	80121c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80121be:	7dfb      	ldrb	r3, [r7, #23]
 80121c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d029      	beq.n	8012222 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d003      	beq.n	80121de <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80121d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121da:	d007      	beq.n	80121ec <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80121dc:	e00f      	b.n	80121fe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121de:	4b34      	ldr	r3, [pc, #208]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80121e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121e2:	4a33      	ldr	r2, [pc, #204]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80121e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80121e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80121ea:	e00b      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	3304      	adds	r3, #4
 80121f0:	2102      	movs	r1, #2
 80121f2:	4618      	mov	r0, r3
 80121f4:	f000 fb8a 	bl	801290c <RCCEx_PLL2_Config>
 80121f8:	4603      	mov	r3, r0
 80121fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80121fc:	e002      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80121fe:	2301      	movs	r3, #1
 8012200:	75fb      	strb	r3, [r7, #23]
      break;
 8012202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012204:	7dfb      	ldrb	r3, [r7, #23]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d109      	bne.n	801221e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801220a:	4b29      	ldr	r3, [pc, #164]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801220e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012216:	4926      	ldr	r1, [pc, #152]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012218:	4313      	orrs	r3, r2
 801221a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801221c:	e001      	b.n	8012222 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801221e:	7dfb      	ldrb	r3, [r7, #23]
 8012220:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00a      	beq.n	8012244 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	3324      	adds	r3, #36	; 0x24
 8012232:	2102      	movs	r1, #2
 8012234:	4618      	mov	r0, r3
 8012236:	f000 fc1b 	bl	8012a70 <RCCEx_PLL3_Config>
 801223a:	4603      	mov	r3, r0
 801223c:	2b00      	cmp	r3, #0
 801223e:	d001      	beq.n	8012244 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8012240:	2301      	movs	r3, #1
 8012242:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801224c:	2b00      	cmp	r3, #0
 801224e:	d033      	beq.n	80122b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012258:	d017      	beq.n	801228a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 801225a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801225e:	d811      	bhi.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8012260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012264:	d013      	beq.n	801228e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8012266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801226a:	d80b      	bhi.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 801226c:	2b00      	cmp	r3, #0
 801226e:	d010      	beq.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8012270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012274:	d106      	bne.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012276:	4b0e      	ldr	r3, [pc, #56]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227a:	4a0d      	ldr	r2, [pc, #52]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8012282:	e007      	b.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012284:	2301      	movs	r3, #1
 8012286:	75fb      	strb	r3, [r7, #23]
      break;
 8012288:	e004      	b.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 801228a:	bf00      	nop
 801228c:	e002      	b.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 801228e:	bf00      	nop
 8012290:	e000      	b.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8012292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012294:	7dfb      	ldrb	r3, [r7, #23]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d10c      	bne.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801229a:	4b05      	ldr	r3, [pc, #20]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801229e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122a6:	4902      	ldr	r1, [pc, #8]	; (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80122a8:	4313      	orrs	r3, r2
 80122aa:	654b      	str	r3, [r1, #84]	; 0x54
 80122ac:	e004      	b.n	80122b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80122ae:	bf00      	nop
 80122b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122b4:	7dfb      	ldrb	r3, [r7, #23]
 80122b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d008      	beq.n	80122d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80122c4:	4b31      	ldr	r3, [pc, #196]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80122c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122d0:	492e      	ldr	r1, [pc, #184]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80122d2:	4313      	orrs	r3, r2
 80122d4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d009      	beq.n	80122f6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80122e2:	4b2a      	ldr	r3, [pc, #168]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80122e4:	691b      	ldr	r3, [r3, #16]
 80122e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80122f0:	4926      	ldr	r1, [pc, #152]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80122f2:	4313      	orrs	r3, r2
 80122f4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d008      	beq.n	8012314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012302:	4b22      	ldr	r3, [pc, #136]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012306:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801230e:	491f      	ldr	r1, [pc, #124]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012310:	4313      	orrs	r3, r2
 8012312:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801231c:	2b00      	cmp	r3, #0
 801231e:	d00d      	beq.n	801233c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012320:	4b1a      	ldr	r3, [pc, #104]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012322:	691b      	ldr	r3, [r3, #16]
 8012324:	4a19      	ldr	r2, [pc, #100]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801232a:	6113      	str	r3, [r2, #16]
 801232c:	4b17      	ldr	r3, [pc, #92]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801232e:	691a      	ldr	r2, [r3, #16]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012336:	4915      	ldr	r1, [pc, #84]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012338:	4313      	orrs	r3, r2
 801233a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	da08      	bge.n	8012356 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012344:	4b11      	ldr	r3, [pc, #68]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012348:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012350:	490e      	ldr	r1, [pc, #56]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012352:	4313      	orrs	r3, r2
 8012354:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801235e:	2b00      	cmp	r3, #0
 8012360:	d009      	beq.n	8012376 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012362:	4b0a      	ldr	r3, [pc, #40]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012366:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012370:	4906      	ldr	r1, [pc, #24]	; (801238c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012372:	4313      	orrs	r3, r2
 8012374:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8012376:	7dbb      	ldrb	r3, [r7, #22]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d101      	bne.n	8012380 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 801237c:	2300      	movs	r3, #0
 801237e:	e000      	b.n	8012382 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8012380:	2301      	movs	r3, #1
}
 8012382:	4618      	mov	r0, r3
 8012384:	3718      	adds	r7, #24
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	58024400 	.word	0x58024400

08012390 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8012394:	f7ff f818 	bl	80113c8 <HAL_RCC_GetHCLKFreq>
 8012398:	4602      	mov	r2, r0
 801239a:	4b06      	ldr	r3, [pc, #24]	; (80123b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801239c:	6a1b      	ldr	r3, [r3, #32]
 801239e:	091b      	lsrs	r3, r3, #4
 80123a0:	f003 0307 	and.w	r3, r3, #7
 80123a4:	4904      	ldr	r1, [pc, #16]	; (80123b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80123a6:	5ccb      	ldrb	r3, [r1, r3]
 80123a8:	f003 031f 	and.w	r3, r3, #31
 80123ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	58024400 	.word	0x58024400
 80123b8:	240084a8 	.word	0x240084a8

080123bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80123bc:	b480      	push	{r7}
 80123be:	b089      	sub	sp, #36	; 0x24
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80123c4:	4ba1      	ldr	r3, [pc, #644]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80123c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123c8:	f003 0303 	and.w	r3, r3, #3
 80123cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80123ce:	4b9f      	ldr	r3, [pc, #636]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80123d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123d2:	0b1b      	lsrs	r3, r3, #12
 80123d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80123da:	4b9c      	ldr	r3, [pc, #624]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80123dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123de:	091b      	lsrs	r3, r3, #4
 80123e0:	f003 0301 	and.w	r3, r3, #1
 80123e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80123e6:	4b99      	ldr	r3, [pc, #612]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80123e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123ea:	08db      	lsrs	r3, r3, #3
 80123ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123f0:	693a      	ldr	r2, [r7, #16]
 80123f2:	fb02 f303 	mul.w	r3, r2, r3
 80123f6:	ee07 3a90 	vmov	s15, r3
 80123fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	2b00      	cmp	r3, #0
 8012406:	f000 8111 	beq.w	801262c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	2b02      	cmp	r3, #2
 801240e:	f000 8083 	beq.w	8012518 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8012412:	69bb      	ldr	r3, [r7, #24]
 8012414:	2b02      	cmp	r3, #2
 8012416:	f200 80a1 	bhi.w	801255c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801241a:	69bb      	ldr	r3, [r7, #24]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d003      	beq.n	8012428 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	2b01      	cmp	r3, #1
 8012424:	d056      	beq.n	80124d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8012426:	e099      	b.n	801255c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012428:	4b88      	ldr	r3, [pc, #544]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	f003 0320 	and.w	r3, r3, #32
 8012430:	2b00      	cmp	r3, #0
 8012432:	d02d      	beq.n	8012490 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012434:	4b85      	ldr	r3, [pc, #532]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	08db      	lsrs	r3, r3, #3
 801243a:	f003 0303 	and.w	r3, r3, #3
 801243e:	4a84      	ldr	r2, [pc, #528]	; (8012650 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8012440:	fa22 f303 	lsr.w	r3, r2, r3
 8012444:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	ee07 3a90 	vmov	s15, r3
 801244c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	ee07 3a90 	vmov	s15, r3
 8012456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801245a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801245e:	4b7b      	ldr	r3, [pc, #492]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012466:	ee07 3a90 	vmov	s15, r3
 801246a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801246e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012472:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801247a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801247e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801248a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801248e:	e087      	b.n	80125a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	ee07 3a90 	vmov	s15, r3
 8012496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801249a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012658 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80124a2:	4b6a      	ldr	r3, [pc, #424]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80124a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124aa:	ee07 3a90 	vmov	s15, r3
 80124ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80124b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80124ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80124be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80124c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80124c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80124ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80124d2:	e065      	b.n	80125a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	ee07 3a90 	vmov	s15, r3
 80124da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801265c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80124e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80124e6:	4b59      	ldr	r3, [pc, #356]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80124e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124ee:	ee07 3a90 	vmov	s15, r3
 80124f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80124fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80124fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012516:	e043      	b.n	80125a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	ee07 3a90 	vmov	s15, r3
 801251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012522:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8012526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801252a:	4b48      	ldr	r3, [pc, #288]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012532:	ee07 3a90 	vmov	s15, r3
 8012536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801253a:	ed97 6a03 	vldr	s12, [r7, #12]
 801253e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801254a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801254e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801255a:	e021      	b.n	80125a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	ee07 3a90 	vmov	s15, r3
 8012562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012566:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801265c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801256a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801256e:	4b37      	ldr	r3, [pc, #220]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012576:	ee07 3a90 	vmov	s15, r3
 801257a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801257e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012582:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801258a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801258e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012596:	ee67 7a27 	vmul.f32	s15, s14, s15
 801259a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801259e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80125a0:	4b2a      	ldr	r3, [pc, #168]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125a4:	0a5b      	lsrs	r3, r3, #9
 80125a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125aa:	ee07 3a90 	vmov	s15, r3
 80125ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80125b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80125ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80125be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80125c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80125c6:	ee17 2a90 	vmov	r2, s15
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80125ce:	4b1f      	ldr	r3, [pc, #124]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125d2:	0c1b      	lsrs	r3, r3, #16
 80125d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125d8:	ee07 3a90 	vmov	s15, r3
 80125dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80125e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80125e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80125ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80125f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80125f4:	ee17 2a90 	vmov	r2, s15
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80125fc:	4b13      	ldr	r3, [pc, #76]	; (801264c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012600:	0e1b      	lsrs	r3, r3, #24
 8012602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012606:	ee07 3a90 	vmov	s15, r3
 801260a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801260e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012616:	edd7 6a07 	vldr	s13, [r7, #28]
 801261a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801261e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012622:	ee17 2a90 	vmov	r2, s15
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801262a:	e008      	b.n	801263e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2200      	movs	r2, #0
 8012630:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2200      	movs	r2, #0
 8012636:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2200      	movs	r2, #0
 801263c:	609a      	str	r2, [r3, #8]
}
 801263e:	bf00      	nop
 8012640:	3724      	adds	r7, #36	; 0x24
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	58024400 	.word	0x58024400
 8012650:	03d09000 	.word	0x03d09000
 8012654:	46000000 	.word	0x46000000
 8012658:	4c742400 	.word	0x4c742400
 801265c:	4a742400 	.word	0x4a742400
 8012660:	4af42400 	.word	0x4af42400

08012664 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8012664:	b480      	push	{r7}
 8012666:	b089      	sub	sp, #36	; 0x24
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801266c:	4ba1      	ldr	r3, [pc, #644]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012670:	f003 0303 	and.w	r3, r3, #3
 8012674:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8012676:	4b9f      	ldr	r3, [pc, #636]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801267a:	0d1b      	lsrs	r3, r3, #20
 801267c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012680:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8012682:	4b9c      	ldr	r3, [pc, #624]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012686:	0a1b      	lsrs	r3, r3, #8
 8012688:	f003 0301 	and.w	r3, r3, #1
 801268c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 801268e:	4b99      	ldr	r3, [pc, #612]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012692:	08db      	lsrs	r3, r3, #3
 8012694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012698:	693a      	ldr	r2, [r7, #16]
 801269a:	fb02 f303 	mul.w	r3, r2, r3
 801269e:	ee07 3a90 	vmov	s15, r3
 80126a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	f000 8111 	beq.w	80128d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80126b2:	69bb      	ldr	r3, [r7, #24]
 80126b4:	2b02      	cmp	r3, #2
 80126b6:	f000 8083 	beq.w	80127c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	2b02      	cmp	r3, #2
 80126be:	f200 80a1 	bhi.w	8012804 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80126c2:	69bb      	ldr	r3, [r7, #24]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d003      	beq.n	80126d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d056      	beq.n	801277c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80126ce:	e099      	b.n	8012804 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80126d0:	4b88      	ldr	r3, [pc, #544]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f003 0320 	and.w	r3, r3, #32
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d02d      	beq.n	8012738 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80126dc:	4b85      	ldr	r3, [pc, #532]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	08db      	lsrs	r3, r3, #3
 80126e2:	f003 0303 	and.w	r3, r3, #3
 80126e6:	4a84      	ldr	r2, [pc, #528]	; (80128f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80126e8:	fa22 f303 	lsr.w	r3, r2, r3
 80126ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	ee07 3a90 	vmov	s15, r3
 80126f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	ee07 3a90 	vmov	s15, r3
 80126fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012706:	4b7b      	ldr	r3, [pc, #492]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801270a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801270e:	ee07 3a90 	vmov	s15, r3
 8012712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012716:	ed97 6a03 	vldr	s12, [r7, #12]
 801271a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80128fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801271e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801272a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012732:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012736:	e087      	b.n	8012848 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	ee07 3a90 	vmov	s15, r3
 801273e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012742:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012900 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801274a:	4b6a      	ldr	r3, [pc, #424]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801274e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012752:	ee07 3a90 	vmov	s15, r3
 8012756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801275a:	ed97 6a03 	vldr	s12, [r7, #12]
 801275e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80128fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801276a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801276e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801277a:	e065      	b.n	8012848 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	ee07 3a90 	vmov	s15, r3
 8012782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012786:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012904 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801278a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801278e:	4b59      	ldr	r3, [pc, #356]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012796:	ee07 3a90 	vmov	s15, r3
 801279a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801279e:	ed97 6a03 	vldr	s12, [r7, #12]
 80127a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80128fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80127a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80127ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80127b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80127be:	e043      	b.n	8012848 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	ee07 3a90 	vmov	s15, r3
 80127c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80127ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127d2:	4b48      	ldr	r3, [pc, #288]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80127d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127da:	ee07 3a90 	vmov	s15, r3
 80127de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80127e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80127e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80128fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80127ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80127f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80127f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012802:	e021      	b.n	8012848 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	ee07 3a90 	vmov	s15, r3
 801280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801280e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012904 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012816:	4b37      	ldr	r3, [pc, #220]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801281a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801281e:	ee07 3a90 	vmov	s15, r3
 8012822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012826:	ed97 6a03 	vldr	s12, [r7, #12]
 801282a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80128fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801282e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801283a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012846:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8012848:	4b2a      	ldr	r3, [pc, #168]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801284c:	0a5b      	lsrs	r3, r3, #9
 801284e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012852:	ee07 3a90 	vmov	s15, r3
 8012856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801285a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801285e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012862:	edd7 6a07 	vldr	s13, [r7, #28]
 8012866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801286a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801286e:	ee17 2a90 	vmov	r2, s15
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8012876:	4b1f      	ldr	r3, [pc, #124]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801287a:	0c1b      	lsrs	r3, r3, #16
 801287c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012880:	ee07 3a90 	vmov	s15, r3
 8012884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801288c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012890:	edd7 6a07 	vldr	s13, [r7, #28]
 8012894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801289c:	ee17 2a90 	vmov	r2, s15
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80128a4:	4b13      	ldr	r3, [pc, #76]	; (80128f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80128a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128a8:	0e1b      	lsrs	r3, r3, #24
 80128aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128ae:	ee07 3a90 	vmov	s15, r3
 80128b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80128ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80128be:	edd7 6a07 	vldr	s13, [r7, #28]
 80128c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80128c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80128ca:	ee17 2a90 	vmov	r2, s15
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80128d2:	e008      	b.n	80128e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2200      	movs	r2, #0
 80128d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	609a      	str	r2, [r3, #8]
}
 80128e6:	bf00      	nop
 80128e8:	3724      	adds	r7, #36	; 0x24
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop
 80128f4:	58024400 	.word	0x58024400
 80128f8:	03d09000 	.word	0x03d09000
 80128fc:	46000000 	.word	0x46000000
 8012900:	4c742400 	.word	0x4c742400
 8012904:	4a742400 	.word	0x4a742400
 8012908:	4af42400 	.word	0x4af42400

0801290c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012916:	2300      	movs	r3, #0
 8012918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801291a:	4b53      	ldr	r3, [pc, #332]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 801291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801291e:	f003 0303 	and.w	r3, r3, #3
 8012922:	2b03      	cmp	r3, #3
 8012924:	d101      	bne.n	801292a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012926:	2301      	movs	r3, #1
 8012928:	e099      	b.n	8012a5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801292a:	4b4f      	ldr	r3, [pc, #316]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	4a4e      	ldr	r2, [pc, #312]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012930:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012936:	f7f8 fcfb 	bl	800b330 <HAL_GetTick>
 801293a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801293c:	e008      	b.n	8012950 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801293e:	f7f8 fcf7 	bl	800b330 <HAL_GetTick>
 8012942:	4602      	mov	r2, r0
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	1ad3      	subs	r3, r2, r3
 8012948:	2b02      	cmp	r3, #2
 801294a:	d901      	bls.n	8012950 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801294c:	2303      	movs	r3, #3
 801294e:	e086      	b.n	8012a5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012950:	4b45      	ldr	r3, [pc, #276]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012958:	2b00      	cmp	r3, #0
 801295a:	d1f0      	bne.n	801293e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801295c:	4b42      	ldr	r3, [pc, #264]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 801295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012960:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	031b      	lsls	r3, r3, #12
 801296a:	493f      	ldr	r1, [pc, #252]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 801296c:	4313      	orrs	r3, r2
 801296e:	628b      	str	r3, [r1, #40]	; 0x28
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	3b01      	subs	r3, #1
 8012976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	689b      	ldr	r3, [r3, #8]
 801297e:	3b01      	subs	r3, #1
 8012980:	025b      	lsls	r3, r3, #9
 8012982:	b29b      	uxth	r3, r3
 8012984:	431a      	orrs	r2, r3
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	3b01      	subs	r3, #1
 801298c:	041b      	lsls	r3, r3, #16
 801298e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012992:	431a      	orrs	r2, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	691b      	ldr	r3, [r3, #16]
 8012998:	3b01      	subs	r3, #1
 801299a:	061b      	lsls	r3, r3, #24
 801299c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80129a0:	4931      	ldr	r1, [pc, #196]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129a2:	4313      	orrs	r3, r2
 80129a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80129a6:	4b30      	ldr	r3, [pc, #192]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	695b      	ldr	r3, [r3, #20]
 80129b2:	492d      	ldr	r1, [pc, #180]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129b4:	4313      	orrs	r3, r2
 80129b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80129b8:	4b2b      	ldr	r3, [pc, #172]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129bc:	f023 0220 	bic.w	r2, r3, #32
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	699b      	ldr	r3, [r3, #24]
 80129c4:	4928      	ldr	r1, [pc, #160]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129c6:	4313      	orrs	r3, r2
 80129c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80129ca:	4b27      	ldr	r3, [pc, #156]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129ce:	4a26      	ldr	r2, [pc, #152]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129d0:	f023 0310 	bic.w	r3, r3, #16
 80129d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80129d6:	4b24      	ldr	r3, [pc, #144]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80129da:	4b24      	ldr	r3, [pc, #144]	; (8012a6c <RCCEx_PLL2_Config+0x160>)
 80129dc:	4013      	ands	r3, r2
 80129de:	687a      	ldr	r2, [r7, #4]
 80129e0:	69d2      	ldr	r2, [r2, #28]
 80129e2:	00d2      	lsls	r2, r2, #3
 80129e4:	4920      	ldr	r1, [pc, #128]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129e6:	4313      	orrs	r3, r2
 80129e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80129ea:	4b1f      	ldr	r3, [pc, #124]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129ee:	4a1e      	ldr	r2, [pc, #120]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129f0:	f043 0310 	orr.w	r3, r3, #16
 80129f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d106      	bne.n	8012a0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80129fc:	4b1a      	ldr	r3, [pc, #104]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 80129fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a00:	4a19      	ldr	r2, [pc, #100]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012a02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012a08:	e00f      	b.n	8012a2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d106      	bne.n	8012a1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012a10:	4b15      	ldr	r3, [pc, #84]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a14:	4a14      	ldr	r2, [pc, #80]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012a1c:	e005      	b.n	8012a2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012a1e:	4b12      	ldr	r3, [pc, #72]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a22:	4a11      	ldr	r2, [pc, #68]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012a28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012a2a:	4b0f      	ldr	r3, [pc, #60]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4a0e      	ldr	r2, [pc, #56]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012a30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a36:	f7f8 fc7b 	bl	800b330 <HAL_GetTick>
 8012a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012a3c:	e008      	b.n	8012a50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012a3e:	f7f8 fc77 	bl	800b330 <HAL_GetTick>
 8012a42:	4602      	mov	r2, r0
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	1ad3      	subs	r3, r2, r3
 8012a48:	2b02      	cmp	r3, #2
 8012a4a:	d901      	bls.n	8012a50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012a4c:	2303      	movs	r3, #3
 8012a4e:	e006      	b.n	8012a5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012a50:	4b05      	ldr	r3, [pc, #20]	; (8012a68 <RCCEx_PLL2_Config+0x15c>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d0f0      	beq.n	8012a3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3710      	adds	r7, #16
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	58024400 	.word	0x58024400
 8012a6c:	ffff0007 	.word	0xffff0007

08012a70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012a7e:	4b53      	ldr	r3, [pc, #332]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a82:	f003 0303 	and.w	r3, r3, #3
 8012a86:	2b03      	cmp	r3, #3
 8012a88:	d101      	bne.n	8012a8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	e099      	b.n	8012bc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012a8e:	4b4f      	ldr	r3, [pc, #316]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	4a4e      	ldr	r2, [pc, #312]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a9a:	f7f8 fc49 	bl	800b330 <HAL_GetTick>
 8012a9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012aa0:	e008      	b.n	8012ab4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012aa2:	f7f8 fc45 	bl	800b330 <HAL_GetTick>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	2b02      	cmp	r3, #2
 8012aae:	d901      	bls.n	8012ab4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012ab0:	2303      	movs	r3, #3
 8012ab2:	e086      	b.n	8012bc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012ab4:	4b45      	ldr	r3, [pc, #276]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d1f0      	bne.n	8012aa2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012ac0:	4b42      	ldr	r3, [pc, #264]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ac4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	051b      	lsls	r3, r3, #20
 8012ace:	493f      	ldr	r1, [pc, #252]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012ad0:	4313      	orrs	r3, r2
 8012ad2:	628b      	str	r3, [r1, #40]	; 0x28
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	3b01      	subs	r3, #1
 8012ada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	3b01      	subs	r3, #1
 8012ae4:	025b      	lsls	r3, r3, #9
 8012ae6:	b29b      	uxth	r3, r3
 8012ae8:	431a      	orrs	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	3b01      	subs	r3, #1
 8012af0:	041b      	lsls	r3, r3, #16
 8012af2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012af6:	431a      	orrs	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	691b      	ldr	r3, [r3, #16]
 8012afc:	3b01      	subs	r3, #1
 8012afe:	061b      	lsls	r3, r3, #24
 8012b00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012b04:	4931      	ldr	r1, [pc, #196]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b06:	4313      	orrs	r3, r2
 8012b08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012b0a:	4b30      	ldr	r3, [pc, #192]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	695b      	ldr	r3, [r3, #20]
 8012b16:	492d      	ldr	r1, [pc, #180]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012b1c:	4b2b      	ldr	r3, [pc, #172]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	699b      	ldr	r3, [r3, #24]
 8012b28:	4928      	ldr	r1, [pc, #160]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012b2e:	4b27      	ldr	r3, [pc, #156]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b32:	4a26      	ldr	r2, [pc, #152]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012b3a:	4b24      	ldr	r3, [pc, #144]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b3e:	4b24      	ldr	r3, [pc, #144]	; (8012bd0 <RCCEx_PLL3_Config+0x160>)
 8012b40:	4013      	ands	r3, r2
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	69d2      	ldr	r2, [r2, #28]
 8012b46:	00d2      	lsls	r2, r2, #3
 8012b48:	4920      	ldr	r1, [pc, #128]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b4a:	4313      	orrs	r3, r2
 8012b4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012b4e:	4b1f      	ldr	r3, [pc, #124]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b52:	4a1e      	ldr	r2, [pc, #120]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012b58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d106      	bne.n	8012b6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012b60:	4b1a      	ldr	r3, [pc, #104]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b64:	4a19      	ldr	r2, [pc, #100]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012b6c:	e00f      	b.n	8012b8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	2b01      	cmp	r3, #1
 8012b72:	d106      	bne.n	8012b82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012b74:	4b15      	ldr	r3, [pc, #84]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b78:	4a14      	ldr	r2, [pc, #80]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012b80:	e005      	b.n	8012b8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012b82:	4b12      	ldr	r3, [pc, #72]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b86:	4a11      	ldr	r2, [pc, #68]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012b8e:	4b0f      	ldr	r3, [pc, #60]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	4a0e      	ldr	r2, [pc, #56]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012b9a:	f7f8 fbc9 	bl	800b330 <HAL_GetTick>
 8012b9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012ba0:	e008      	b.n	8012bb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012ba2:	f7f8 fbc5 	bl	800b330 <HAL_GetTick>
 8012ba6:	4602      	mov	r2, r0
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	1ad3      	subs	r3, r2, r3
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	d901      	bls.n	8012bb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012bb0:	2303      	movs	r3, #3
 8012bb2:	e006      	b.n	8012bc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012bb4:	4b05      	ldr	r3, [pc, #20]	; (8012bcc <RCCEx_PLL3_Config+0x15c>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d0f0      	beq.n	8012ba2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3710      	adds	r7, #16
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	58024400 	.word	0x58024400
 8012bd0:	ffff0007 	.word	0xffff0007

08012bd4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d101      	bne.n	8012be6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e04d      	b.n	8012c82 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	7a5b      	ldrb	r3, [r3, #9]
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d105      	bne.n	8012bfc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f7f8 f896 	bl	800ad28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2202      	movs	r2, #2
 8012c00:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	f023 0120 	bic.w	r1, r3, #32
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	685a      	ldr	r2, [r3, #4]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	430a      	orrs	r2, r1
 8012c16:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	681a      	ldr	r2, [r3, #0]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	f042 0204 	orr.w	r2, r2, #4
 8012c26:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c32:	2b40      	cmp	r3, #64	; 0x40
 8012c34:	d104      	bne.n	8012c40 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2204      	movs	r2, #4
 8012c3a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e020      	b.n	8012c82 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8012c40:	f7f8 fb76 	bl	800b330 <HAL_GetTick>
 8012c44:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8012c46:	e00e      	b.n	8012c66 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8012c48:	f7f8 fb72 	bl	800b330 <HAL_GetTick>
 8012c4c:	4602      	mov	r2, r0
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	1ad3      	subs	r3, r2, r3
 8012c52:	2b02      	cmp	r3, #2
 8012c54:	d907      	bls.n	8012c66 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2204      	movs	r2, #4
 8012c5a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2202      	movs	r2, #2
 8012c60:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8012c62:	2301      	movs	r3, #1
 8012c64:	e00d      	b.n	8012c82 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	f003 0304 	and.w	r3, r3, #4
 8012c70:	2b04      	cmp	r3, #4
 8012c72:	d0e9      	beq.n	8012c48 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2201      	movs	r2, #1
 8012c78:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3710      	adds	r7, #16
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b084      	sub	sp, #16
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8012c92:	2300      	movs	r3, #0
 8012c94:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	f003 0320 	and.w	r3, r3, #32
 8012ca0:	2b20      	cmp	r3, #32
 8012ca2:	d105      	bne.n	8012cb0 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2210      	movs	r2, #16
 8012ca8:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8012caa:	2301      	movs	r3, #1
 8012cac:	60fb      	str	r3, [r7, #12]
 8012cae:	e023      	b.n	8012cf8 <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cba:	2b40      	cmp	r3, #64	; 0x40
 8012cbc:	d11c      	bne.n	8012cf8 <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	f003 0304 	and.w	r3, r3, #4
 8012cc8:	2b04      	cmp	r3, #4
 8012cca:	d008      	beq.n	8012cde <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	685a      	ldr	r2, [r3, #4]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012cda:	605a      	str	r2, [r3, #4]
 8012cdc:	e00c      	b.n	8012cf8 <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	2208      	movs	r2, #8
 8012ce2:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f022 0208 	bic.w	r2, r2, #8
 8012cf6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d10b      	bne.n	8012d16 <HAL_RNG_IRQHandler+0x8c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2204      	movs	r2, #4
 8012d02:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 f839 	bl	8012d7c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8012d12:	605a      	str	r2, [r3, #4]

    return;
 8012d14:	e024      	b.n	8012d60 <HAL_RNG_IRQHandler+0xd6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	f003 0301 	and.w	r3, r3, #1
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d11d      	bne.n	8012d60 <HAL_RNG_IRQHandler+0xd6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	f022 0208 	bic.w	r2, r2, #8
 8012d32:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	689a      	ldr	r2, [r3, #8]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	7a5b      	ldrb	r3, [r3, #9]
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	2b04      	cmp	r3, #4
 8012d46:	d00b      	beq.n	8012d60 <HAL_RNG_IRQHandler+0xd6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2200      	movs	r2, #0
 8012d52:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	691b      	ldr	r3, [r3, #16]
 8012d58:	4619      	mov	r1, r3
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f000 f803 	bl	8012d66 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8012d60:	3710      	adds	r7, #16
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8012d66:	b480      	push	{r7}
 8012d68:	b083      	sub	sp, #12
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]
 8012d6e:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8012d70:	bf00      	nop
 8012d72:	370c      	adds	r7, #12
 8012d74:	46bd      	mov	sp, r7
 8012d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7a:	4770      	bx	lr

08012d7c <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b083      	sub	sp, #12
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8012d84:	bf00      	nop
 8012d86:	370c      	adds	r7, #12
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr

08012d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d101      	bne.n	8012da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	e049      	b.n	8012e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012da8:	b2db      	uxtb	r3, r3
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d106      	bne.n	8012dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2200      	movs	r2, #0
 8012db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 f841 	bl	8012e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2202      	movs	r2, #2
 8012dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	3304      	adds	r3, #4
 8012dcc:	4619      	mov	r1, r3
 8012dce:	4610      	mov	r0, r2
 8012dd0:	f000 f9f8 	bl	80131c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2201      	movs	r2, #1
 8012de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2201      	movs	r2, #1
 8012de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2201      	movs	r2, #1
 8012df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2201      	movs	r2, #1
 8012df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2201      	movs	r2, #1
 8012e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2201      	movs	r2, #1
 8012e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2201      	movs	r2, #1
 8012e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2201      	movs	r2, #1
 8012e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2201      	movs	r2, #1
 8012e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012e34:	2300      	movs	r3, #0
}
 8012e36:	4618      	mov	r0, r3
 8012e38:	3708      	adds	r7, #8
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}

08012e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8012e3e:	b480      	push	{r7}
 8012e40:	b083      	sub	sp, #12
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012e46:	bf00      	nop
 8012e48:	370c      	adds	r7, #12
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr
	...

08012e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012e54:	b480      	push	{r7}
 8012e56:	b085      	sub	sp, #20
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d001      	beq.n	8012e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012e68:	2301      	movs	r3, #1
 8012e6a:	e04f      	b.n	8012f0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2202      	movs	r2, #2
 8012e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68da      	ldr	r2, [r3, #12]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f042 0201 	orr.w	r2, r2, #1
 8012e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	4a23      	ldr	r2, [pc, #140]	; (8012f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d01d      	beq.n	8012eca <HAL_TIM_Base_Start_IT+0x76>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012e96:	d018      	beq.n	8012eca <HAL_TIM_Base_Start_IT+0x76>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	4a1f      	ldr	r2, [pc, #124]	; (8012f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d013      	beq.n	8012eca <HAL_TIM_Base_Start_IT+0x76>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4a1e      	ldr	r2, [pc, #120]	; (8012f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d00e      	beq.n	8012eca <HAL_TIM_Base_Start_IT+0x76>
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4a1c      	ldr	r2, [pc, #112]	; (8012f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d009      	beq.n	8012eca <HAL_TIM_Base_Start_IT+0x76>
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	4a1b      	ldr	r2, [pc, #108]	; (8012f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	d004      	beq.n	8012eca <HAL_TIM_Base_Start_IT+0x76>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	4a19      	ldr	r2, [pc, #100]	; (8012f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	d115      	bne.n	8012ef6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	689a      	ldr	r2, [r3, #8]
 8012ed0:	4b17      	ldr	r3, [pc, #92]	; (8012f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8012ed2:	4013      	ands	r3, r2
 8012ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	2b06      	cmp	r3, #6
 8012eda:	d015      	beq.n	8012f08 <HAL_TIM_Base_Start_IT+0xb4>
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ee2:	d011      	beq.n	8012f08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f042 0201 	orr.w	r2, r2, #1
 8012ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ef4:	e008      	b.n	8012f08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f042 0201 	orr.w	r2, r2, #1
 8012f04:	601a      	str	r2, [r3, #0]
 8012f06:	e000      	b.n	8012f0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012f0a:	2300      	movs	r3, #0
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3714      	adds	r7, #20
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr
 8012f18:	40010000 	.word	0x40010000
 8012f1c:	40000400 	.word	0x40000400
 8012f20:	40000800 	.word	0x40000800
 8012f24:	40000c00 	.word	0x40000c00
 8012f28:	40010400 	.word	0x40010400
 8012f2c:	40001800 	.word	0x40001800
 8012f30:	00010007 	.word	0x00010007

08012f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	691b      	ldr	r3, [r3, #16]
 8012f42:	f003 0302 	and.w	r3, r3, #2
 8012f46:	2b02      	cmp	r3, #2
 8012f48:	d122      	bne.n	8012f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	68db      	ldr	r3, [r3, #12]
 8012f50:	f003 0302 	and.w	r3, r3, #2
 8012f54:	2b02      	cmp	r3, #2
 8012f56:	d11b      	bne.n	8012f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	f06f 0202 	mvn.w	r2, #2
 8012f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2201      	movs	r2, #1
 8012f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	699b      	ldr	r3, [r3, #24]
 8012f6e:	f003 0303 	and.w	r3, r3, #3
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d003      	beq.n	8012f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f000 f905 	bl	8013186 <HAL_TIM_IC_CaptureCallback>
 8012f7c:	e005      	b.n	8012f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f000 f8f7 	bl	8013172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f000 f908 	bl	801319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	691b      	ldr	r3, [r3, #16]
 8012f96:	f003 0304 	and.w	r3, r3, #4
 8012f9a:	2b04      	cmp	r3, #4
 8012f9c:	d122      	bne.n	8012fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	f003 0304 	and.w	r3, r3, #4
 8012fa8:	2b04      	cmp	r3, #4
 8012faa:	d11b      	bne.n	8012fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f06f 0204 	mvn.w	r2, #4
 8012fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2202      	movs	r2, #2
 8012fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	699b      	ldr	r3, [r3, #24]
 8012fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d003      	beq.n	8012fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f000 f8db 	bl	8013186 <HAL_TIM_IC_CaptureCallback>
 8012fd0:	e005      	b.n	8012fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f000 f8cd 	bl	8013172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	f000 f8de 	bl	801319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	691b      	ldr	r3, [r3, #16]
 8012fea:	f003 0308 	and.w	r3, r3, #8
 8012fee:	2b08      	cmp	r3, #8
 8012ff0:	d122      	bne.n	8013038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	f003 0308 	and.w	r3, r3, #8
 8012ffc:	2b08      	cmp	r3, #8
 8012ffe:	d11b      	bne.n	8013038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	f06f 0208 	mvn.w	r2, #8
 8013008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2204      	movs	r2, #4
 801300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	69db      	ldr	r3, [r3, #28]
 8013016:	f003 0303 	and.w	r3, r3, #3
 801301a:	2b00      	cmp	r3, #0
 801301c:	d003      	beq.n	8013026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 f8b1 	bl	8013186 <HAL_TIM_IC_CaptureCallback>
 8013024:	e005      	b.n	8013032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f000 f8a3 	bl	8013172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f000 f8b4 	bl	801319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	691b      	ldr	r3, [r3, #16]
 801303e:	f003 0310 	and.w	r3, r3, #16
 8013042:	2b10      	cmp	r3, #16
 8013044:	d122      	bne.n	801308c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	68db      	ldr	r3, [r3, #12]
 801304c:	f003 0310 	and.w	r3, r3, #16
 8013050:	2b10      	cmp	r3, #16
 8013052:	d11b      	bne.n	801308c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	f06f 0210 	mvn.w	r2, #16
 801305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2208      	movs	r2, #8
 8013062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	69db      	ldr	r3, [r3, #28]
 801306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801306e:	2b00      	cmp	r3, #0
 8013070:	d003      	beq.n	801307a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f000 f887 	bl	8013186 <HAL_TIM_IC_CaptureCallback>
 8013078:	e005      	b.n	8013086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f000 f879 	bl	8013172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f000 f88a 	bl	801319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2200      	movs	r2, #0
 801308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	f003 0301 	and.w	r3, r3, #1
 8013096:	2b01      	cmp	r3, #1
 8013098:	d10e      	bne.n	80130b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	f003 0301 	and.w	r3, r3, #1
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	d107      	bne.n	80130b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f06f 0201 	mvn.w	r2, #1
 80130b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f7f7 fde4 	bl	800ac80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	691b      	ldr	r3, [r3, #16]
 80130be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130c2:	2b80      	cmp	r3, #128	; 0x80
 80130c4:	d10e      	bne.n	80130e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130d0:	2b80      	cmp	r3, #128	; 0x80
 80130d2:	d107      	bne.n	80130e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80130dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f000 f914 	bl	801330c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	691b      	ldr	r3, [r3, #16]
 80130ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130f2:	d10e      	bne.n	8013112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	68db      	ldr	r3, [r3, #12]
 80130fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130fe:	2b80      	cmp	r3, #128	; 0x80
 8013100:	d107      	bne.n	8013112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801310a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f000 f907 	bl	8013320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	691b      	ldr	r3, [r3, #16]
 8013118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801311c:	2b40      	cmp	r3, #64	; 0x40
 801311e:	d10e      	bne.n	801313e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	68db      	ldr	r3, [r3, #12]
 8013126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801312a:	2b40      	cmp	r3, #64	; 0x40
 801312c:	d107      	bne.n	801313e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 f838 	bl	80131ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	691b      	ldr	r3, [r3, #16]
 8013144:	f003 0320 	and.w	r3, r3, #32
 8013148:	2b20      	cmp	r3, #32
 801314a:	d10e      	bne.n	801316a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	f003 0320 	and.w	r3, r3, #32
 8013156:	2b20      	cmp	r3, #32
 8013158:	d107      	bne.n	801316a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f06f 0220 	mvn.w	r2, #32
 8013162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f000 f8c7 	bl	80132f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801316a:	bf00      	nop
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013172:	b480      	push	{r7}
 8013174:	b083      	sub	sp, #12
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801317a:	bf00      	nop
 801317c:	370c      	adds	r7, #12
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr

08013186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013186:	b480      	push	{r7}
 8013188:	b083      	sub	sp, #12
 801318a:	af00      	add	r7, sp, #0
 801318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801318e:	bf00      	nop
 8013190:	370c      	adds	r7, #12
 8013192:	46bd      	mov	sp, r7
 8013194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013198:	4770      	bx	lr

0801319a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801319a:	b480      	push	{r7}
 801319c:	b083      	sub	sp, #12
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80131a2:	bf00      	nop
 80131a4:	370c      	adds	r7, #12
 80131a6:	46bd      	mov	sp, r7
 80131a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ac:	4770      	bx	lr

080131ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80131ae:	b480      	push	{r7}
 80131b0:	b083      	sub	sp, #12
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80131b6:	bf00      	nop
 80131b8:	370c      	adds	r7, #12
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr
	...

080131c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b085      	sub	sp, #20
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	4a40      	ldr	r2, [pc, #256]	; (80132d8 <TIM_Base_SetConfig+0x114>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	d013      	beq.n	8013204 <TIM_Base_SetConfig+0x40>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80131e2:	d00f      	beq.n	8013204 <TIM_Base_SetConfig+0x40>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	4a3d      	ldr	r2, [pc, #244]	; (80132dc <TIM_Base_SetConfig+0x118>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d00b      	beq.n	8013204 <TIM_Base_SetConfig+0x40>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	4a3c      	ldr	r2, [pc, #240]	; (80132e0 <TIM_Base_SetConfig+0x11c>)
 80131f0:	4293      	cmp	r3, r2
 80131f2:	d007      	beq.n	8013204 <TIM_Base_SetConfig+0x40>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	4a3b      	ldr	r2, [pc, #236]	; (80132e4 <TIM_Base_SetConfig+0x120>)
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d003      	beq.n	8013204 <TIM_Base_SetConfig+0x40>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	4a3a      	ldr	r2, [pc, #232]	; (80132e8 <TIM_Base_SetConfig+0x124>)
 8013200:	4293      	cmp	r3, r2
 8013202:	d108      	bne.n	8013216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	68fa      	ldr	r2, [r7, #12]
 8013212:	4313      	orrs	r3, r2
 8013214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	4a2f      	ldr	r2, [pc, #188]	; (80132d8 <TIM_Base_SetConfig+0x114>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d01f      	beq.n	801325e <TIM_Base_SetConfig+0x9a>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013224:	d01b      	beq.n	801325e <TIM_Base_SetConfig+0x9a>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	4a2c      	ldr	r2, [pc, #176]	; (80132dc <TIM_Base_SetConfig+0x118>)
 801322a:	4293      	cmp	r3, r2
 801322c:	d017      	beq.n	801325e <TIM_Base_SetConfig+0x9a>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	4a2b      	ldr	r2, [pc, #172]	; (80132e0 <TIM_Base_SetConfig+0x11c>)
 8013232:	4293      	cmp	r3, r2
 8013234:	d013      	beq.n	801325e <TIM_Base_SetConfig+0x9a>
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	4a2a      	ldr	r2, [pc, #168]	; (80132e4 <TIM_Base_SetConfig+0x120>)
 801323a:	4293      	cmp	r3, r2
 801323c:	d00f      	beq.n	801325e <TIM_Base_SetConfig+0x9a>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4a29      	ldr	r2, [pc, #164]	; (80132e8 <TIM_Base_SetConfig+0x124>)
 8013242:	4293      	cmp	r3, r2
 8013244:	d00b      	beq.n	801325e <TIM_Base_SetConfig+0x9a>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	4a28      	ldr	r2, [pc, #160]	; (80132ec <TIM_Base_SetConfig+0x128>)
 801324a:	4293      	cmp	r3, r2
 801324c:	d007      	beq.n	801325e <TIM_Base_SetConfig+0x9a>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	4a27      	ldr	r2, [pc, #156]	; (80132f0 <TIM_Base_SetConfig+0x12c>)
 8013252:	4293      	cmp	r3, r2
 8013254:	d003      	beq.n	801325e <TIM_Base_SetConfig+0x9a>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4a26      	ldr	r2, [pc, #152]	; (80132f4 <TIM_Base_SetConfig+0x130>)
 801325a:	4293      	cmp	r3, r2
 801325c:	d108      	bne.n	8013270 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	68db      	ldr	r3, [r3, #12]
 801326a:	68fa      	ldr	r2, [r7, #12]
 801326c:	4313      	orrs	r3, r2
 801326e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	695b      	ldr	r3, [r3, #20]
 801327a:	4313      	orrs	r3, r2
 801327c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	68fa      	ldr	r2, [r7, #12]
 8013282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	689a      	ldr	r2, [r3, #8]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	681a      	ldr	r2, [r3, #0]
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	4a10      	ldr	r2, [pc, #64]	; (80132d8 <TIM_Base_SetConfig+0x114>)
 8013298:	4293      	cmp	r3, r2
 801329a:	d00f      	beq.n	80132bc <TIM_Base_SetConfig+0xf8>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	4a12      	ldr	r2, [pc, #72]	; (80132e8 <TIM_Base_SetConfig+0x124>)
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d00b      	beq.n	80132bc <TIM_Base_SetConfig+0xf8>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4a11      	ldr	r2, [pc, #68]	; (80132ec <TIM_Base_SetConfig+0x128>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d007      	beq.n	80132bc <TIM_Base_SetConfig+0xf8>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	4a10      	ldr	r2, [pc, #64]	; (80132f0 <TIM_Base_SetConfig+0x12c>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d003      	beq.n	80132bc <TIM_Base_SetConfig+0xf8>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4a0f      	ldr	r2, [pc, #60]	; (80132f4 <TIM_Base_SetConfig+0x130>)
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d103      	bne.n	80132c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	691a      	ldr	r2, [r3, #16]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2201      	movs	r2, #1
 80132c8:	615a      	str	r2, [r3, #20]
}
 80132ca:	bf00      	nop
 80132cc:	3714      	adds	r7, #20
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	40010000 	.word	0x40010000
 80132dc:	40000400 	.word	0x40000400
 80132e0:	40000800 	.word	0x40000800
 80132e4:	40000c00 	.word	0x40000c00
 80132e8:	40010400 	.word	0x40010400
 80132ec:	40014000 	.word	0x40014000
 80132f0:	40014400 	.word	0x40014400
 80132f4:	40014800 	.word	0x40014800

080132f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80132f8:	b480      	push	{r7}
 80132fa:	b083      	sub	sp, #12
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013300:	bf00      	nop
 8013302:	370c      	adds	r7, #12
 8013304:	46bd      	mov	sp, r7
 8013306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330a:	4770      	bx	lr

0801330c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013314:	bf00      	nop
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr

08013320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013320:	b480      	push	{r7}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013328:	bf00      	nop
 801332a:	370c      	adds	r7, #12
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr

08013334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d101      	bne.n	8013346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013342:	2301      	movs	r3, #1
 8013344:	e042      	b.n	80133cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801334c:	2b00      	cmp	r3, #0
 801334e:	d106      	bne.n	801335e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2200      	movs	r2, #0
 8013354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7f7 fd25 	bl	800ada8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2224      	movs	r2, #36	; 0x24
 8013362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f022 0201 	bic.w	r2, r2, #1
 8013374:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f000 fcba 	bl	8013cf0 <UART_SetConfig>
 801337c:	4603      	mov	r3, r0
 801337e:	2b01      	cmp	r3, #1
 8013380:	d101      	bne.n	8013386 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8013382:	2301      	movs	r3, #1
 8013384:	e022      	b.n	80133cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801338a:	2b00      	cmp	r3, #0
 801338c:	d002      	beq.n	8013394 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f001 fa18 	bl	80147c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	685a      	ldr	r2, [r3, #4]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80133a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	689a      	ldr	r2, [r3, #8]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80133b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	681a      	ldr	r2, [r3, #0]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f042 0201 	orr.w	r2, r2, #1
 80133c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f001 fa9f 	bl	8014908 <UART_CheckIdleState>
 80133ca:	4603      	mov	r3, r0
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3708      	adds	r7, #8
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}

080133d4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d101      	bne.n	80133e6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80133e2:	2301      	movs	r3, #1
 80133e4:	e02e      	b.n	8013444 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2224      	movs	r2, #36	; 0x24
 80133ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	681a      	ldr	r2, [r3, #0]
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	f022 0201 	bic.w	r2, r2, #1
 80133fc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	2200      	movs	r2, #0
 8013404:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	2200      	movs	r2, #0
 801340c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	2200      	movs	r2, #0
 8013414:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	f7f7 fd98 	bl	800af4c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2200      	movs	r2, #0
 8013420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2200      	movs	r2, #0
 8013428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2200      	movs	r2, #0
 8013430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2200      	movs	r2, #0
 8013438:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2200      	movs	r2, #0
 801343e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013442:	2300      	movs	r3, #0
}
 8013444:	4618      	mov	r0, r3
 8013446:	3708      	adds	r7, #8
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b08a      	sub	sp, #40	; 0x28
 8013450:	af02      	add	r7, sp, #8
 8013452:	60f8      	str	r0, [r7, #12]
 8013454:	60b9      	str	r1, [r7, #8]
 8013456:	603b      	str	r3, [r7, #0]
 8013458:	4613      	mov	r3, r2
 801345a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013462:	2b20      	cmp	r3, #32
 8013464:	f040 8083 	bne.w	801356e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d002      	beq.n	8013474 <HAL_UART_Transmit+0x28>
 801346e:	88fb      	ldrh	r3, [r7, #6]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d101      	bne.n	8013478 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8013474:	2301      	movs	r3, #1
 8013476:	e07b      	b.n	8013570 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801347e:	2b01      	cmp	r3, #1
 8013480:	d101      	bne.n	8013486 <HAL_UART_Transmit+0x3a>
 8013482:	2302      	movs	r3, #2
 8013484:	e074      	b.n	8013570 <HAL_UART_Transmit+0x124>
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2201      	movs	r2, #1
 801348a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2200      	movs	r2, #0
 8013492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2221      	movs	r2, #33	; 0x21
 801349a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801349e:	f7f7 ff47 	bl	800b330 <HAL_GetTick>
 80134a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	88fa      	ldrh	r2, [r7, #6]
 80134a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	88fa      	ldrh	r2, [r7, #6]
 80134b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80134bc:	d108      	bne.n	80134d0 <HAL_UART_Transmit+0x84>
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	691b      	ldr	r3, [r3, #16]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d104      	bne.n	80134d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80134c6:	2300      	movs	r3, #0
 80134c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	61bb      	str	r3, [r7, #24]
 80134ce:	e003      	b.n	80134d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80134d4:	2300      	movs	r3, #0
 80134d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2200      	movs	r2, #0
 80134dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80134e0:	e02c      	b.n	801353c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	9300      	str	r3, [sp, #0]
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	2200      	movs	r2, #0
 80134ea:	2180      	movs	r1, #128	; 0x80
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f001 fa56 	bl	801499e <UART_WaitOnFlagUntilTimeout>
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d001      	beq.n	80134fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80134f8:	2303      	movs	r3, #3
 80134fa:	e039      	b.n	8013570 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d10b      	bne.n	801351a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	881b      	ldrh	r3, [r3, #0]
 8013506:	461a      	mov	r2, r3
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013510:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013512:	69bb      	ldr	r3, [r7, #24]
 8013514:	3302      	adds	r3, #2
 8013516:	61bb      	str	r3, [r7, #24]
 8013518:	e007      	b.n	801352a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	781a      	ldrb	r2, [r3, #0]
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013524:	69fb      	ldr	r3, [r7, #28]
 8013526:	3301      	adds	r3, #1
 8013528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013530:	b29b      	uxth	r3, r3
 8013532:	3b01      	subs	r3, #1
 8013534:	b29a      	uxth	r2, r3
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013542:	b29b      	uxth	r3, r3
 8013544:	2b00      	cmp	r3, #0
 8013546:	d1cc      	bne.n	80134e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	9300      	str	r3, [sp, #0]
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	2200      	movs	r2, #0
 8013550:	2140      	movs	r1, #64	; 0x40
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f001 fa23 	bl	801499e <UART_WaitOnFlagUntilTimeout>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d001      	beq.n	8013562 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801355e:	2303      	movs	r3, #3
 8013560:	e006      	b.n	8013570 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2220      	movs	r2, #32
 8013566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801356a:	2300      	movs	r3, #0
 801356c:	e000      	b.n	8013570 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801356e:	2302      	movs	r3, #2
  }
}
 8013570:	4618      	mov	r0, r3
 8013572:	3720      	adds	r7, #32
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	4613      	mov	r3, r2
 8013584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801358c:	2b20      	cmp	r3, #32
 801358e:	d131      	bne.n	80135f4 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d002      	beq.n	801359c <HAL_UART_Receive_IT+0x24>
 8013596:	88fb      	ldrh	r3, [r7, #6]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d101      	bne.n	80135a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801359c:	2301      	movs	r3, #1
 801359e:	e02a      	b.n	80135f6 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d101      	bne.n	80135ae <HAL_UART_Receive_IT+0x36>
 80135aa:	2302      	movs	r3, #2
 80135ac:	e023      	b.n	80135f6 <HAL_UART_Receive_IT+0x7e>
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2201      	movs	r2, #1
 80135b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	2200      	movs	r2, #0
 80135ba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	4a0f      	ldr	r2, [pc, #60]	; (8013600 <HAL_UART_Receive_IT+0x88>)
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d00e      	beq.n	80135e4 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	685b      	ldr	r3, [r3, #4]
 80135cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d007      	beq.n	80135e4 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80135e2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80135e4:	88fb      	ldrh	r3, [r7, #6]
 80135e6:	461a      	mov	r2, r3
 80135e8:	68b9      	ldr	r1, [r7, #8]
 80135ea:	68f8      	ldr	r0, [r7, #12]
 80135ec:	f001 fa58 	bl	8014aa0 <UART_Start_Receive_IT>
 80135f0:	4603      	mov	r3, r0
 80135f2:	e000      	b.n	80135f6 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80135f4:	2302      	movs	r3, #2
  }
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	58000c00 	.word	0x58000c00

08013604 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b082      	sub	sp, #8
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 801361a:	601a      	str	r2, [r3, #0]
                                   USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	6899      	ldr	r1, [r3, #8]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	4b4f      	ldr	r3, [pc, #316]	; (8013764 <HAL_UART_Abort+0x160>)
 8013628:	400b      	ands	r3, r1
 801362a:	6093      	str	r3, [r2, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013630:	2b01      	cmp	r3, #1
 8013632:	d107      	bne.n	8013644 <HAL_UART_Abort+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f022 0210 	bic.w	r2, r2, #16
 8013642:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	689b      	ldr	r3, [r3, #8]
 801364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801364e:	2b80      	cmp	r3, #128	; 0x80
 8013650:	d125      	bne.n	801369e <HAL_UART_Abort+0x9a>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	689a      	ldr	r2, [r3, #8]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013660:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013666:	2b00      	cmp	r3, #0
 8013668:	d019      	beq.n	801369e <HAL_UART_Abort+0x9a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801366e:	2200      	movs	r2, #0
 8013670:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013676:	4618      	mov	r0, r3
 8013678:	f7f9 f99e 	bl	800c9b8 <HAL_DMA_Abort>
 801367c:	4603      	mov	r3, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00d      	beq.n	801369e <HAL_UART_Abort+0x9a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013686:	4618      	mov	r0, r3
 8013688:	f7fa fe24 	bl	800e2d4 <HAL_DMA_GetError>
 801368c:	4603      	mov	r3, r0
 801368e:	2b20      	cmp	r3, #32
 8013690:	d105      	bne.n	801369e <HAL_UART_Abort+0x9a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	2210      	movs	r2, #16
 8013696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 801369a:	2303      	movs	r3, #3
 801369c:	e05d      	b.n	801375a <HAL_UART_Abort+0x156>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	689b      	ldr	r3, [r3, #8]
 80136a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136a8:	2b40      	cmp	r3, #64	; 0x40
 80136aa:	d125      	bne.n	80136f8 <HAL_UART_Abort+0xf4>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	689a      	ldr	r2, [r3, #8]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80136ba:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d019      	beq.n	80136f8 <HAL_UART_Abort+0xf4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136c8:	2200      	movs	r2, #0
 80136ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7f9 f971 	bl	800c9b8 <HAL_DMA_Abort>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d00d      	beq.n	80136f8 <HAL_UART_Abort+0xf4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7fa fdf7 	bl	800e2d4 <HAL_DMA_GetError>
 80136e6:	4603      	mov	r3, r0
 80136e8:	2b20      	cmp	r3, #32
 80136ea:	d105      	bne.n	80136f8 <HAL_UART_Abort+0xf4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2210      	movs	r2, #16
 80136f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80136f4:	2303      	movs	r3, #3
 80136f6:	e030      	b.n	801375a <HAL_UART_Abort+0x156>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2200      	movs	r2, #0
 80136fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2200      	movs	r2, #0
 8013704:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	220f      	movs	r2, #15
 801370e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013718:	d107      	bne.n	801372a <HAL_UART_Abort+0x126>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	699a      	ldr	r2, [r3, #24]
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	f042 0210 	orr.w	r2, r2, #16
 8013728:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	699a      	ldr	r2, [r3, #24]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	f042 0208 	orr.w	r2, r2, #8
 8013738:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2220      	movs	r2, #32
 801373e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2220      	movs	r2, #32
 8013746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2200      	movs	r2, #0
 801374e:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2200      	movs	r2, #0
 8013754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8013758:	2300      	movs	r3, #0
}
 801375a:	4618      	mov	r0, r3
 801375c:	3708      	adds	r7, #8
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
 8013762:	bf00      	nop
 8013764:	ef7ffffe 	.word	0xef7ffffe

08013768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b088      	sub	sp, #32
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	69db      	ldr	r3, [r3, #28]
 8013776:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	689b      	ldr	r3, [r3, #8]
 8013786:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013788:	69fa      	ldr	r2, [r7, #28]
 801378a:	f640 030f 	movw	r3, #2063	; 0x80f
 801378e:	4013      	ands	r3, r2
 8013790:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d118      	bne.n	80137ca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	f003 0320 	and.w	r3, r3, #32
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d013      	beq.n	80137ca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	f003 0320 	and.w	r3, r3, #32
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d104      	bne.n	80137b6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d009      	beq.n	80137ca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	f000 8282 	beq.w	8013cc4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	4798      	blx	r3
      }
      return;
 80137c8:	e27c      	b.n	8013cc4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80137ca:	693b      	ldr	r3, [r7, #16]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	f000 80ef 	beq.w	80139b0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80137d2:	697a      	ldr	r2, [r7, #20]
 80137d4:	4b73      	ldr	r3, [pc, #460]	; (80139a4 <HAL_UART_IRQHandler+0x23c>)
 80137d6:	4013      	ands	r3, r2
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d105      	bne.n	80137e8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80137dc:	69ba      	ldr	r2, [r7, #24]
 80137de:	4b72      	ldr	r3, [pc, #456]	; (80139a8 <HAL_UART_IRQHandler+0x240>)
 80137e0:	4013      	ands	r3, r2
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	f000 80e4 	beq.w	80139b0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	f003 0301 	and.w	r3, r3, #1
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d010      	beq.n	8013814 <HAL_UART_IRQHandler+0xac>
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d00b      	beq.n	8013814 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	2201      	movs	r2, #1
 8013802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801380a:	f043 0201 	orr.w	r2, r3, #1
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013814:	69fb      	ldr	r3, [r7, #28]
 8013816:	f003 0302 	and.w	r3, r3, #2
 801381a:	2b00      	cmp	r3, #0
 801381c:	d010      	beq.n	8013840 <HAL_UART_IRQHandler+0xd8>
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	f003 0301 	and.w	r3, r3, #1
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00b      	beq.n	8013840 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2202      	movs	r2, #2
 801382e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013836:	f043 0204 	orr.w	r2, r3, #4
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	f003 0304 	and.w	r3, r3, #4
 8013846:	2b00      	cmp	r3, #0
 8013848:	d010      	beq.n	801386c <HAL_UART_IRQHandler+0x104>
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	f003 0301 	and.w	r3, r3, #1
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00b      	beq.n	801386c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	2204      	movs	r2, #4
 801385a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013862:	f043 0202 	orr.w	r2, r3, #2
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	f003 0308 	and.w	r3, r3, #8
 8013872:	2b00      	cmp	r3, #0
 8013874:	d015      	beq.n	80138a2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013876:	69bb      	ldr	r3, [r7, #24]
 8013878:	f003 0320 	and.w	r3, r3, #32
 801387c:	2b00      	cmp	r3, #0
 801387e:	d104      	bne.n	801388a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013880:	697a      	ldr	r2, [r7, #20]
 8013882:	4b48      	ldr	r3, [pc, #288]	; (80139a4 <HAL_UART_IRQHandler+0x23c>)
 8013884:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013886:	2b00      	cmp	r3, #0
 8013888:	d00b      	beq.n	80138a2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2208      	movs	r2, #8
 8013890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013898:	f043 0208 	orr.w	r2, r3, #8
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80138a2:	69fb      	ldr	r3, [r7, #28]
 80138a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d011      	beq.n	80138d0 <HAL_UART_IRQHandler+0x168>
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00c      	beq.n	80138d0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80138be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138c6:	f043 0220 	orr.w	r2, r3, #32
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f000 81f6 	beq.w	8013cc8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	f003 0320 	and.w	r3, r3, #32
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d011      	beq.n	801390a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	f003 0320 	and.w	r3, r3, #32
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d104      	bne.n	80138fa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d007      	beq.n	801390a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d003      	beq.n	801390a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013910:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	689b      	ldr	r3, [r3, #8]
 8013918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801391c:	2b40      	cmp	r3, #64	; 0x40
 801391e:	d004      	beq.n	801392a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013926:	2b00      	cmp	r3, #0
 8013928:	d031      	beq.n	801398e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f001 fa02 	bl	8014d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	689b      	ldr	r3, [r3, #8]
 8013936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801393a:	2b40      	cmp	r3, #64	; 0x40
 801393c:	d123      	bne.n	8013986 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	689a      	ldr	r2, [r3, #8]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801394c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013952:	2b00      	cmp	r3, #0
 8013954:	d013      	beq.n	801397e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801395a:	4a14      	ldr	r2, [pc, #80]	; (80139ac <HAL_UART_IRQHandler+0x244>)
 801395c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013962:	4618      	mov	r0, r3
 8013964:	f7f9 fb46 	bl	800cff4 <HAL_DMA_Abort_IT>
 8013968:	4603      	mov	r3, r0
 801396a:	2b00      	cmp	r3, #0
 801396c:	d017      	beq.n	801399e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8013978:	4610      	mov	r0, r2
 801397a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801397c:	e00f      	b.n	801399e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f006 f9ca 	bl	8019d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013984:	e00b      	b.n	801399e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f006 f9c6 	bl	8019d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801398c:	e007      	b.n	801399e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	f006 f9c2 	bl	8019d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2200      	movs	r2, #0
 8013998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 801399c:	e194      	b.n	8013cc8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801399e:	bf00      	nop
    return;
 80139a0:	e192      	b.n	8013cc8 <HAL_UART_IRQHandler+0x560>
 80139a2:	bf00      	nop
 80139a4:	10000001 	.word	0x10000001
 80139a8:	04000120 	.word	0x04000120
 80139ac:	08014ee7 	.word	0x08014ee7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	f040 810f 	bne.w	8013bd8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	f003 0310 	and.w	r3, r3, #16
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f000 8109 	beq.w	8013bd8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80139c6:	69bb      	ldr	r3, [r7, #24]
 80139c8:	f003 0310 	and.w	r3, r3, #16
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	f000 8103 	beq.w	8013bd8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2210      	movs	r2, #16
 80139d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	689b      	ldr	r3, [r3, #8]
 80139e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139e4:	2b40      	cmp	r3, #64	; 0x40
 80139e6:	f040 80bb 	bne.w	8013b60 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	4a8f      	ldr	r2, [pc, #572]	; (8013c30 <HAL_UART_IRQHandler+0x4c8>)
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d059      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4a8d      	ldr	r2, [pc, #564]	; (8013c34 <HAL_UART_IRQHandler+0x4cc>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d053      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	4a8b      	ldr	r2, [pc, #556]	; (8013c38 <HAL_UART_IRQHandler+0x4d0>)
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	d04d      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	4a89      	ldr	r2, [pc, #548]	; (8013c3c <HAL_UART_IRQHandler+0x4d4>)
 8013a16:	4293      	cmp	r3, r2
 8013a18:	d047      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	4a87      	ldr	r2, [pc, #540]	; (8013c40 <HAL_UART_IRQHandler+0x4d8>)
 8013a22:	4293      	cmp	r3, r2
 8013a24:	d041      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	4a85      	ldr	r2, [pc, #532]	; (8013c44 <HAL_UART_IRQHandler+0x4dc>)
 8013a2e:	4293      	cmp	r3, r2
 8013a30:	d03b      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4a83      	ldr	r2, [pc, #524]	; (8013c48 <HAL_UART_IRQHandler+0x4e0>)
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d035      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	4a81      	ldr	r2, [pc, #516]	; (8013c4c <HAL_UART_IRQHandler+0x4e4>)
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d02f      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	4a7f      	ldr	r2, [pc, #508]	; (8013c50 <HAL_UART_IRQHandler+0x4e8>)
 8013a52:	4293      	cmp	r3, r2
 8013a54:	d029      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	4a7d      	ldr	r2, [pc, #500]	; (8013c54 <HAL_UART_IRQHandler+0x4ec>)
 8013a5e:	4293      	cmp	r3, r2
 8013a60:	d023      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	4a7b      	ldr	r2, [pc, #492]	; (8013c58 <HAL_UART_IRQHandler+0x4f0>)
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d01d      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	4a79      	ldr	r2, [pc, #484]	; (8013c5c <HAL_UART_IRQHandler+0x4f4>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d017      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4a77      	ldr	r2, [pc, #476]	; (8013c60 <HAL_UART_IRQHandler+0x4f8>)
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d011      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	4a75      	ldr	r2, [pc, #468]	; (8013c64 <HAL_UART_IRQHandler+0x4fc>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d00b      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	4a73      	ldr	r2, [pc, #460]	; (8013c68 <HAL_UART_IRQHandler+0x500>)
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	d005      	beq.n	8013aaa <HAL_UART_IRQHandler+0x342>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	4a71      	ldr	r2, [pc, #452]	; (8013c6c <HAL_UART_IRQHandler+0x504>)
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d105      	bne.n	8013ab6 <HAL_UART_IRQHandler+0x34e>
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	e004      	b.n	8013ac0 <HAL_UART_IRQHandler+0x358>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	b29b      	uxth	r3, r3
 8013ac0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8013ac2:	893b      	ldrh	r3, [r7, #8]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	f000 8101 	beq.w	8013ccc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013ad0:	893a      	ldrh	r2, [r7, #8]
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	f080 80fa 	bcs.w	8013ccc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	893a      	ldrh	r2, [r7, #8]
 8013adc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ae4:	69db      	ldr	r3, [r3, #28]
 8013ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013aea:	d02b      	beq.n	8013b44 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	681a      	ldr	r2, [r3, #0]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013afa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	689a      	ldr	r2, [r3, #8]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	f022 0201 	bic.w	r2, r2, #1
 8013b0a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	689a      	ldr	r2, [r3, #8]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b1a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2220      	movs	r2, #32
 8013b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2200      	movs	r2, #0
 8013b28:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f022 0210 	bic.w	r2, r2, #16
 8013b38:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7f8 ff3a 	bl	800c9b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	1ad3      	subs	r3, r2, r3
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	4619      	mov	r1, r3
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f006 f9f3 	bl	8019f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013b5e:	e0b5      	b.n	8013ccc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	1ad3      	subs	r3, r2, r3
 8013b70:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f000 80a8 	beq.w	8013cd0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8013b80:	897b      	ldrh	r3, [r7, #10]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	f000 80a4 	beq.w	8013cd0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	681a      	ldr	r2, [r3, #0]
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013b96:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	6899      	ldr	r1, [r3, #8]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	4b33      	ldr	r3, [pc, #204]	; (8013c70 <HAL_UART_IRQHandler+0x508>)
 8013ba4:	400b      	ands	r3, r1
 8013ba6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2220      	movs	r2, #32
 8013bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f022 0210 	bic.w	r2, r2, #16
 8013bca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013bcc:	897b      	ldrh	r3, [r7, #10]
 8013bce:	4619      	mov	r1, r3
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f006 f9b7 	bl	8019f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013bd6:	e07b      	b.n	8013cd0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013bd8:	69fb      	ldr	r3, [r7, #28]
 8013bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d00d      	beq.n	8013bfe <HAL_UART_IRQHandler+0x496>
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d008      	beq.n	8013bfe <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f001 fc82 	bl	8015500 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013bfc:	e06b      	b.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013bfe:	69fb      	ldr	r3, [r7, #28]
 8013c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d035      	beq.n	8013c74 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d104      	bne.n	8013c1c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d02b      	beq.n	8013c74 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d057      	beq.n	8013cd4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	4798      	blx	r3
    }
    return;
 8013c2c:	e052      	b.n	8013cd4 <HAL_UART_IRQHandler+0x56c>
 8013c2e:	bf00      	nop
 8013c30:	40020010 	.word	0x40020010
 8013c34:	40020028 	.word	0x40020028
 8013c38:	40020040 	.word	0x40020040
 8013c3c:	40020058 	.word	0x40020058
 8013c40:	40020070 	.word	0x40020070
 8013c44:	40020088 	.word	0x40020088
 8013c48:	400200a0 	.word	0x400200a0
 8013c4c:	400200b8 	.word	0x400200b8
 8013c50:	40020410 	.word	0x40020410
 8013c54:	40020428 	.word	0x40020428
 8013c58:	40020440 	.word	0x40020440
 8013c5c:	40020458 	.word	0x40020458
 8013c60:	40020470 	.word	0x40020470
 8013c64:	40020488 	.word	0x40020488
 8013c68:	400204a0 	.word	0x400204a0
 8013c6c:	400204b8 	.word	0x400204b8
 8013c70:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d008      	beq.n	8013c90 <HAL_UART_IRQHandler+0x528>
 8013c7e:	69bb      	ldr	r3, [r7, #24]
 8013c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d003      	beq.n	8013c90 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f001 f942 	bl	8014f12 <UART_EndTransmit_IT>
    return;
 8013c8e:	e022      	b.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d008      	beq.n	8013cac <HAL_UART_IRQHandler+0x544>
 8013c9a:	69bb      	ldr	r3, [r7, #24]
 8013c9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d003      	beq.n	8013cac <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f001 fc3f 	bl	8015528 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013caa:	e014      	b.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d00f      	beq.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
 8013cb6:	69bb      	ldr	r3, [r7, #24]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	da0c      	bge.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f001 fc29 	bl	8015514 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013cc2:	e008      	b.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
      return;
 8013cc4:	bf00      	nop
 8013cc6:	e006      	b.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
    return;
 8013cc8:	bf00      	nop
 8013cca:	e004      	b.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
      return;
 8013ccc:	bf00      	nop
 8013cce:	e002      	b.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
      return;
 8013cd0:	bf00      	nop
 8013cd2:	e000      	b.n	8013cd6 <HAL_UART_IRQHandler+0x56e>
    return;
 8013cd4:	bf00      	nop
  }
}
 8013cd6:	3720      	adds	r7, #32
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8013ce4:	bf00      	nop
 8013ce6:	370c      	adds	r7, #12
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr

08013cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013cf4:	b092      	sub	sp, #72	; 0x48
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	689a      	ldr	r2, [r3, #8]
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	691b      	ldr	r3, [r3, #16]
 8013d08:	431a      	orrs	r2, r3
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	695b      	ldr	r3, [r3, #20]
 8013d0e:	431a      	orrs	r2, r3
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	69db      	ldr	r3, [r3, #28]
 8013d14:	4313      	orrs	r3, r2
 8013d16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	4bbe      	ldr	r3, [pc, #760]	; (8014018 <UART_SetConfig+0x328>)
 8013d20:	4013      	ands	r3, r2
 8013d22:	697a      	ldr	r2, [r7, #20]
 8013d24:	6812      	ldr	r2, [r2, #0]
 8013d26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d28:	430b      	orrs	r3, r1
 8013d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	68da      	ldr	r2, [r3, #12]
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	430a      	orrs	r2, r1
 8013d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	699b      	ldr	r3, [r3, #24]
 8013d46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	4ab3      	ldr	r2, [pc, #716]	; (801401c <UART_SetConfig+0x32c>)
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	d004      	beq.n	8013d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013d52:	697b      	ldr	r3, [r7, #20]
 8013d54:	6a1b      	ldr	r3, [r3, #32]
 8013d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d58:	4313      	orrs	r3, r2
 8013d5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	689a      	ldr	r2, [r3, #8]
 8013d62:	4baf      	ldr	r3, [pc, #700]	; (8014020 <UART_SetConfig+0x330>)
 8013d64:	4013      	ands	r3, r2
 8013d66:	697a      	ldr	r2, [r7, #20]
 8013d68:	6812      	ldr	r2, [r2, #0]
 8013d6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d6c:	430b      	orrs	r3, r1
 8013d6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d76:	f023 010f 	bic.w	r1, r3, #15
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	430a      	orrs	r2, r1
 8013d84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4aa6      	ldr	r2, [pc, #664]	; (8014024 <UART_SetConfig+0x334>)
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d177      	bne.n	8013e80 <UART_SetConfig+0x190>
 8013d90:	4ba5      	ldr	r3, [pc, #660]	; (8014028 <UART_SetConfig+0x338>)
 8013d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013d98:	2b28      	cmp	r3, #40	; 0x28
 8013d9a:	d86d      	bhi.n	8013e78 <UART_SetConfig+0x188>
 8013d9c:	a201      	add	r2, pc, #4	; (adr r2, 8013da4 <UART_SetConfig+0xb4>)
 8013d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013da2:	bf00      	nop
 8013da4:	08013e49 	.word	0x08013e49
 8013da8:	08013e79 	.word	0x08013e79
 8013dac:	08013e79 	.word	0x08013e79
 8013db0:	08013e79 	.word	0x08013e79
 8013db4:	08013e79 	.word	0x08013e79
 8013db8:	08013e79 	.word	0x08013e79
 8013dbc:	08013e79 	.word	0x08013e79
 8013dc0:	08013e79 	.word	0x08013e79
 8013dc4:	08013e51 	.word	0x08013e51
 8013dc8:	08013e79 	.word	0x08013e79
 8013dcc:	08013e79 	.word	0x08013e79
 8013dd0:	08013e79 	.word	0x08013e79
 8013dd4:	08013e79 	.word	0x08013e79
 8013dd8:	08013e79 	.word	0x08013e79
 8013ddc:	08013e79 	.word	0x08013e79
 8013de0:	08013e79 	.word	0x08013e79
 8013de4:	08013e59 	.word	0x08013e59
 8013de8:	08013e79 	.word	0x08013e79
 8013dec:	08013e79 	.word	0x08013e79
 8013df0:	08013e79 	.word	0x08013e79
 8013df4:	08013e79 	.word	0x08013e79
 8013df8:	08013e79 	.word	0x08013e79
 8013dfc:	08013e79 	.word	0x08013e79
 8013e00:	08013e79 	.word	0x08013e79
 8013e04:	08013e61 	.word	0x08013e61
 8013e08:	08013e79 	.word	0x08013e79
 8013e0c:	08013e79 	.word	0x08013e79
 8013e10:	08013e79 	.word	0x08013e79
 8013e14:	08013e79 	.word	0x08013e79
 8013e18:	08013e79 	.word	0x08013e79
 8013e1c:	08013e79 	.word	0x08013e79
 8013e20:	08013e79 	.word	0x08013e79
 8013e24:	08013e69 	.word	0x08013e69
 8013e28:	08013e79 	.word	0x08013e79
 8013e2c:	08013e79 	.word	0x08013e79
 8013e30:	08013e79 	.word	0x08013e79
 8013e34:	08013e79 	.word	0x08013e79
 8013e38:	08013e79 	.word	0x08013e79
 8013e3c:	08013e79 	.word	0x08013e79
 8013e40:	08013e79 	.word	0x08013e79
 8013e44:	08013e71 	.word	0x08013e71
 8013e48:	2301      	movs	r3, #1
 8013e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e4e:	e222      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013e50:	2304      	movs	r3, #4
 8013e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e56:	e21e      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013e58:	2308      	movs	r3, #8
 8013e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e5e:	e21a      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013e60:	2310      	movs	r3, #16
 8013e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e66:	e216      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013e68:	2320      	movs	r3, #32
 8013e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e6e:	e212      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013e70:	2340      	movs	r3, #64	; 0x40
 8013e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e76:	e20e      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013e78:	2380      	movs	r3, #128	; 0x80
 8013e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e7e:	e20a      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	4a69      	ldr	r2, [pc, #420]	; (801402c <UART_SetConfig+0x33c>)
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d130      	bne.n	8013eec <UART_SetConfig+0x1fc>
 8013e8a:	4b67      	ldr	r3, [pc, #412]	; (8014028 <UART_SetConfig+0x338>)
 8013e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e8e:	f003 0307 	and.w	r3, r3, #7
 8013e92:	2b05      	cmp	r3, #5
 8013e94:	d826      	bhi.n	8013ee4 <UART_SetConfig+0x1f4>
 8013e96:	a201      	add	r2, pc, #4	; (adr r2, 8013e9c <UART_SetConfig+0x1ac>)
 8013e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e9c:	08013eb5 	.word	0x08013eb5
 8013ea0:	08013ebd 	.word	0x08013ebd
 8013ea4:	08013ec5 	.word	0x08013ec5
 8013ea8:	08013ecd 	.word	0x08013ecd
 8013eac:	08013ed5 	.word	0x08013ed5
 8013eb0:	08013edd 	.word	0x08013edd
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eba:	e1ec      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013ebc:	2304      	movs	r3, #4
 8013ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ec2:	e1e8      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013ec4:	2308      	movs	r3, #8
 8013ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eca:	e1e4      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013ecc:	2310      	movs	r3, #16
 8013ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ed2:	e1e0      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013ed4:	2320      	movs	r3, #32
 8013ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eda:	e1dc      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013edc:	2340      	movs	r3, #64	; 0x40
 8013ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ee2:	e1d8      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013ee4:	2380      	movs	r3, #128	; 0x80
 8013ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eea:	e1d4      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4a4f      	ldr	r2, [pc, #316]	; (8014030 <UART_SetConfig+0x340>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d130      	bne.n	8013f58 <UART_SetConfig+0x268>
 8013ef6:	4b4c      	ldr	r3, [pc, #304]	; (8014028 <UART_SetConfig+0x338>)
 8013ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013efa:	f003 0307 	and.w	r3, r3, #7
 8013efe:	2b05      	cmp	r3, #5
 8013f00:	d826      	bhi.n	8013f50 <UART_SetConfig+0x260>
 8013f02:	a201      	add	r2, pc, #4	; (adr r2, 8013f08 <UART_SetConfig+0x218>)
 8013f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f08:	08013f21 	.word	0x08013f21
 8013f0c:	08013f29 	.word	0x08013f29
 8013f10:	08013f31 	.word	0x08013f31
 8013f14:	08013f39 	.word	0x08013f39
 8013f18:	08013f41 	.word	0x08013f41
 8013f1c:	08013f49 	.word	0x08013f49
 8013f20:	2300      	movs	r3, #0
 8013f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f26:	e1b6      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f28:	2304      	movs	r3, #4
 8013f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f2e:	e1b2      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f30:	2308      	movs	r3, #8
 8013f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f36:	e1ae      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f38:	2310      	movs	r3, #16
 8013f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f3e:	e1aa      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f40:	2320      	movs	r3, #32
 8013f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f46:	e1a6      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f48:	2340      	movs	r3, #64	; 0x40
 8013f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f4e:	e1a2      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f50:	2380      	movs	r3, #128	; 0x80
 8013f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f56:	e19e      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	4a35      	ldr	r2, [pc, #212]	; (8014034 <UART_SetConfig+0x344>)
 8013f5e:	4293      	cmp	r3, r2
 8013f60:	d130      	bne.n	8013fc4 <UART_SetConfig+0x2d4>
 8013f62:	4b31      	ldr	r3, [pc, #196]	; (8014028 <UART_SetConfig+0x338>)
 8013f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f66:	f003 0307 	and.w	r3, r3, #7
 8013f6a:	2b05      	cmp	r3, #5
 8013f6c:	d826      	bhi.n	8013fbc <UART_SetConfig+0x2cc>
 8013f6e:	a201      	add	r2, pc, #4	; (adr r2, 8013f74 <UART_SetConfig+0x284>)
 8013f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f74:	08013f8d 	.word	0x08013f8d
 8013f78:	08013f95 	.word	0x08013f95
 8013f7c:	08013f9d 	.word	0x08013f9d
 8013f80:	08013fa5 	.word	0x08013fa5
 8013f84:	08013fad 	.word	0x08013fad
 8013f88:	08013fb5 	.word	0x08013fb5
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f92:	e180      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f94:	2304      	movs	r3, #4
 8013f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f9a:	e17c      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013f9c:	2308      	movs	r3, #8
 8013f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fa2:	e178      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013fa4:	2310      	movs	r3, #16
 8013fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013faa:	e174      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013fac:	2320      	movs	r3, #32
 8013fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fb2:	e170      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013fb4:	2340      	movs	r3, #64	; 0x40
 8013fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fba:	e16c      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013fbc:	2380      	movs	r3, #128	; 0x80
 8013fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fc2:	e168      	b.n	8014296 <UART_SetConfig+0x5a6>
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4a1b      	ldr	r2, [pc, #108]	; (8014038 <UART_SetConfig+0x348>)
 8013fca:	4293      	cmp	r3, r2
 8013fcc:	d142      	bne.n	8014054 <UART_SetConfig+0x364>
 8013fce:	4b16      	ldr	r3, [pc, #88]	; (8014028 <UART_SetConfig+0x338>)
 8013fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fd2:	f003 0307 	and.w	r3, r3, #7
 8013fd6:	2b05      	cmp	r3, #5
 8013fd8:	d838      	bhi.n	801404c <UART_SetConfig+0x35c>
 8013fda:	a201      	add	r2, pc, #4	; (adr r2, 8013fe0 <UART_SetConfig+0x2f0>)
 8013fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fe0:	08013ff9 	.word	0x08013ff9
 8013fe4:	08014001 	.word	0x08014001
 8013fe8:	08014009 	.word	0x08014009
 8013fec:	08014011 	.word	0x08014011
 8013ff0:	0801403d 	.word	0x0801403d
 8013ff4:	08014045 	.word	0x08014045
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ffe:	e14a      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014000:	2304      	movs	r3, #4
 8014002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014006:	e146      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014008:	2308      	movs	r3, #8
 801400a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801400e:	e142      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014010:	2310      	movs	r3, #16
 8014012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014016:	e13e      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014018:	cfff69f3 	.word	0xcfff69f3
 801401c:	58000c00 	.word	0x58000c00
 8014020:	11fff4ff 	.word	0x11fff4ff
 8014024:	40011000 	.word	0x40011000
 8014028:	58024400 	.word	0x58024400
 801402c:	40004400 	.word	0x40004400
 8014030:	40004800 	.word	0x40004800
 8014034:	40004c00 	.word	0x40004c00
 8014038:	40005000 	.word	0x40005000
 801403c:	2320      	movs	r3, #32
 801403e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014042:	e128      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014044:	2340      	movs	r3, #64	; 0x40
 8014046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801404a:	e124      	b.n	8014296 <UART_SetConfig+0x5a6>
 801404c:	2380      	movs	r3, #128	; 0x80
 801404e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014052:	e120      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	4acb      	ldr	r2, [pc, #812]	; (8014388 <UART_SetConfig+0x698>)
 801405a:	4293      	cmp	r3, r2
 801405c:	d176      	bne.n	801414c <UART_SetConfig+0x45c>
 801405e:	4bcb      	ldr	r3, [pc, #812]	; (801438c <UART_SetConfig+0x69c>)
 8014060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014066:	2b28      	cmp	r3, #40	; 0x28
 8014068:	d86c      	bhi.n	8014144 <UART_SetConfig+0x454>
 801406a:	a201      	add	r2, pc, #4	; (adr r2, 8014070 <UART_SetConfig+0x380>)
 801406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014070:	08014115 	.word	0x08014115
 8014074:	08014145 	.word	0x08014145
 8014078:	08014145 	.word	0x08014145
 801407c:	08014145 	.word	0x08014145
 8014080:	08014145 	.word	0x08014145
 8014084:	08014145 	.word	0x08014145
 8014088:	08014145 	.word	0x08014145
 801408c:	08014145 	.word	0x08014145
 8014090:	0801411d 	.word	0x0801411d
 8014094:	08014145 	.word	0x08014145
 8014098:	08014145 	.word	0x08014145
 801409c:	08014145 	.word	0x08014145
 80140a0:	08014145 	.word	0x08014145
 80140a4:	08014145 	.word	0x08014145
 80140a8:	08014145 	.word	0x08014145
 80140ac:	08014145 	.word	0x08014145
 80140b0:	08014125 	.word	0x08014125
 80140b4:	08014145 	.word	0x08014145
 80140b8:	08014145 	.word	0x08014145
 80140bc:	08014145 	.word	0x08014145
 80140c0:	08014145 	.word	0x08014145
 80140c4:	08014145 	.word	0x08014145
 80140c8:	08014145 	.word	0x08014145
 80140cc:	08014145 	.word	0x08014145
 80140d0:	0801412d 	.word	0x0801412d
 80140d4:	08014145 	.word	0x08014145
 80140d8:	08014145 	.word	0x08014145
 80140dc:	08014145 	.word	0x08014145
 80140e0:	08014145 	.word	0x08014145
 80140e4:	08014145 	.word	0x08014145
 80140e8:	08014145 	.word	0x08014145
 80140ec:	08014145 	.word	0x08014145
 80140f0:	08014135 	.word	0x08014135
 80140f4:	08014145 	.word	0x08014145
 80140f8:	08014145 	.word	0x08014145
 80140fc:	08014145 	.word	0x08014145
 8014100:	08014145 	.word	0x08014145
 8014104:	08014145 	.word	0x08014145
 8014108:	08014145 	.word	0x08014145
 801410c:	08014145 	.word	0x08014145
 8014110:	0801413d 	.word	0x0801413d
 8014114:	2301      	movs	r3, #1
 8014116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801411a:	e0bc      	b.n	8014296 <UART_SetConfig+0x5a6>
 801411c:	2304      	movs	r3, #4
 801411e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014122:	e0b8      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014124:	2308      	movs	r3, #8
 8014126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801412a:	e0b4      	b.n	8014296 <UART_SetConfig+0x5a6>
 801412c:	2310      	movs	r3, #16
 801412e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014132:	e0b0      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014134:	2320      	movs	r3, #32
 8014136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801413a:	e0ac      	b.n	8014296 <UART_SetConfig+0x5a6>
 801413c:	2340      	movs	r3, #64	; 0x40
 801413e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014142:	e0a8      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014144:	2380      	movs	r3, #128	; 0x80
 8014146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801414a:	e0a4      	b.n	8014296 <UART_SetConfig+0x5a6>
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	4a8f      	ldr	r2, [pc, #572]	; (8014390 <UART_SetConfig+0x6a0>)
 8014152:	4293      	cmp	r3, r2
 8014154:	d130      	bne.n	80141b8 <UART_SetConfig+0x4c8>
 8014156:	4b8d      	ldr	r3, [pc, #564]	; (801438c <UART_SetConfig+0x69c>)
 8014158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801415a:	f003 0307 	and.w	r3, r3, #7
 801415e:	2b05      	cmp	r3, #5
 8014160:	d826      	bhi.n	80141b0 <UART_SetConfig+0x4c0>
 8014162:	a201      	add	r2, pc, #4	; (adr r2, 8014168 <UART_SetConfig+0x478>)
 8014164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014168:	08014181 	.word	0x08014181
 801416c:	08014189 	.word	0x08014189
 8014170:	08014191 	.word	0x08014191
 8014174:	08014199 	.word	0x08014199
 8014178:	080141a1 	.word	0x080141a1
 801417c:	080141a9 	.word	0x080141a9
 8014180:	2300      	movs	r3, #0
 8014182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014186:	e086      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014188:	2304      	movs	r3, #4
 801418a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801418e:	e082      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014190:	2308      	movs	r3, #8
 8014192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014196:	e07e      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014198:	2310      	movs	r3, #16
 801419a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801419e:	e07a      	b.n	8014296 <UART_SetConfig+0x5a6>
 80141a0:	2320      	movs	r3, #32
 80141a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141a6:	e076      	b.n	8014296 <UART_SetConfig+0x5a6>
 80141a8:	2340      	movs	r3, #64	; 0x40
 80141aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141ae:	e072      	b.n	8014296 <UART_SetConfig+0x5a6>
 80141b0:	2380      	movs	r3, #128	; 0x80
 80141b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141b6:	e06e      	b.n	8014296 <UART_SetConfig+0x5a6>
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	4a75      	ldr	r2, [pc, #468]	; (8014394 <UART_SetConfig+0x6a4>)
 80141be:	4293      	cmp	r3, r2
 80141c0:	d130      	bne.n	8014224 <UART_SetConfig+0x534>
 80141c2:	4b72      	ldr	r3, [pc, #456]	; (801438c <UART_SetConfig+0x69c>)
 80141c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141c6:	f003 0307 	and.w	r3, r3, #7
 80141ca:	2b05      	cmp	r3, #5
 80141cc:	d826      	bhi.n	801421c <UART_SetConfig+0x52c>
 80141ce:	a201      	add	r2, pc, #4	; (adr r2, 80141d4 <UART_SetConfig+0x4e4>)
 80141d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141d4:	080141ed 	.word	0x080141ed
 80141d8:	080141f5 	.word	0x080141f5
 80141dc:	080141fd 	.word	0x080141fd
 80141e0:	08014205 	.word	0x08014205
 80141e4:	0801420d 	.word	0x0801420d
 80141e8:	08014215 	.word	0x08014215
 80141ec:	2300      	movs	r3, #0
 80141ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141f2:	e050      	b.n	8014296 <UART_SetConfig+0x5a6>
 80141f4:	2304      	movs	r3, #4
 80141f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141fa:	e04c      	b.n	8014296 <UART_SetConfig+0x5a6>
 80141fc:	2308      	movs	r3, #8
 80141fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014202:	e048      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014204:	2310      	movs	r3, #16
 8014206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801420a:	e044      	b.n	8014296 <UART_SetConfig+0x5a6>
 801420c:	2320      	movs	r3, #32
 801420e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014212:	e040      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014214:	2340      	movs	r3, #64	; 0x40
 8014216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801421a:	e03c      	b.n	8014296 <UART_SetConfig+0x5a6>
 801421c:	2380      	movs	r3, #128	; 0x80
 801421e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014222:	e038      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4a5b      	ldr	r2, [pc, #364]	; (8014398 <UART_SetConfig+0x6a8>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d130      	bne.n	8014290 <UART_SetConfig+0x5a0>
 801422e:	4b57      	ldr	r3, [pc, #348]	; (801438c <UART_SetConfig+0x69c>)
 8014230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014232:	f003 0307 	and.w	r3, r3, #7
 8014236:	2b05      	cmp	r3, #5
 8014238:	d826      	bhi.n	8014288 <UART_SetConfig+0x598>
 801423a:	a201      	add	r2, pc, #4	; (adr r2, 8014240 <UART_SetConfig+0x550>)
 801423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014240:	08014259 	.word	0x08014259
 8014244:	08014261 	.word	0x08014261
 8014248:	08014269 	.word	0x08014269
 801424c:	08014271 	.word	0x08014271
 8014250:	08014279 	.word	0x08014279
 8014254:	08014281 	.word	0x08014281
 8014258:	2302      	movs	r3, #2
 801425a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801425e:	e01a      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014260:	2304      	movs	r3, #4
 8014262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014266:	e016      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014268:	2308      	movs	r3, #8
 801426a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801426e:	e012      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014270:	2310      	movs	r3, #16
 8014272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014276:	e00e      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014278:	2320      	movs	r3, #32
 801427a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801427e:	e00a      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014280:	2340      	movs	r3, #64	; 0x40
 8014282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014286:	e006      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014288:	2380      	movs	r3, #128	; 0x80
 801428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801428e:	e002      	b.n	8014296 <UART_SetConfig+0x5a6>
 8014290:	2380      	movs	r3, #128	; 0x80
 8014292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	4a3f      	ldr	r2, [pc, #252]	; (8014398 <UART_SetConfig+0x6a8>)
 801429c:	4293      	cmp	r3, r2
 801429e:	f040 80f8 	bne.w	8014492 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80142a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80142a6:	2b20      	cmp	r3, #32
 80142a8:	dc46      	bgt.n	8014338 <UART_SetConfig+0x648>
 80142aa:	2b02      	cmp	r3, #2
 80142ac:	f2c0 8082 	blt.w	80143b4 <UART_SetConfig+0x6c4>
 80142b0:	3b02      	subs	r3, #2
 80142b2:	2b1e      	cmp	r3, #30
 80142b4:	d87e      	bhi.n	80143b4 <UART_SetConfig+0x6c4>
 80142b6:	a201      	add	r2, pc, #4	; (adr r2, 80142bc <UART_SetConfig+0x5cc>)
 80142b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142bc:	0801433f 	.word	0x0801433f
 80142c0:	080143b5 	.word	0x080143b5
 80142c4:	08014347 	.word	0x08014347
 80142c8:	080143b5 	.word	0x080143b5
 80142cc:	080143b5 	.word	0x080143b5
 80142d0:	080143b5 	.word	0x080143b5
 80142d4:	08014357 	.word	0x08014357
 80142d8:	080143b5 	.word	0x080143b5
 80142dc:	080143b5 	.word	0x080143b5
 80142e0:	080143b5 	.word	0x080143b5
 80142e4:	080143b5 	.word	0x080143b5
 80142e8:	080143b5 	.word	0x080143b5
 80142ec:	080143b5 	.word	0x080143b5
 80142f0:	080143b5 	.word	0x080143b5
 80142f4:	08014367 	.word	0x08014367
 80142f8:	080143b5 	.word	0x080143b5
 80142fc:	080143b5 	.word	0x080143b5
 8014300:	080143b5 	.word	0x080143b5
 8014304:	080143b5 	.word	0x080143b5
 8014308:	080143b5 	.word	0x080143b5
 801430c:	080143b5 	.word	0x080143b5
 8014310:	080143b5 	.word	0x080143b5
 8014314:	080143b5 	.word	0x080143b5
 8014318:	080143b5 	.word	0x080143b5
 801431c:	080143b5 	.word	0x080143b5
 8014320:	080143b5 	.word	0x080143b5
 8014324:	080143b5 	.word	0x080143b5
 8014328:	080143b5 	.word	0x080143b5
 801432c:	080143b5 	.word	0x080143b5
 8014330:	080143b5 	.word	0x080143b5
 8014334:	080143a7 	.word	0x080143a7
 8014338:	2b40      	cmp	r3, #64	; 0x40
 801433a:	d037      	beq.n	80143ac <UART_SetConfig+0x6bc>
 801433c:	e03a      	b.n	80143b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801433e:	f7fe f827 	bl	8012390 <HAL_RCCEx_GetD3PCLK1Freq>
 8014342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014344:	e03c      	b.n	80143c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801434a:	4618      	mov	r0, r3
 801434c:	f7fe f836 	bl	80123bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014354:	e034      	b.n	80143c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014356:	f107 0318 	add.w	r3, r7, #24
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe f982 	bl	8012664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014364:	e02c      	b.n	80143c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014366:	4b09      	ldr	r3, [pc, #36]	; (801438c <UART_SetConfig+0x69c>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	f003 0320 	and.w	r3, r3, #32
 801436e:	2b00      	cmp	r3, #0
 8014370:	d016      	beq.n	80143a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014372:	4b06      	ldr	r3, [pc, #24]	; (801438c <UART_SetConfig+0x69c>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	08db      	lsrs	r3, r3, #3
 8014378:	f003 0303 	and.w	r3, r3, #3
 801437c:	4a07      	ldr	r2, [pc, #28]	; (801439c <UART_SetConfig+0x6ac>)
 801437e:	fa22 f303 	lsr.w	r3, r2, r3
 8014382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014384:	e01c      	b.n	80143c0 <UART_SetConfig+0x6d0>
 8014386:	bf00      	nop
 8014388:	40011400 	.word	0x40011400
 801438c:	58024400 	.word	0x58024400
 8014390:	40007800 	.word	0x40007800
 8014394:	40007c00 	.word	0x40007c00
 8014398:	58000c00 	.word	0x58000c00
 801439c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80143a0:	4b9e      	ldr	r3, [pc, #632]	; (801461c <UART_SetConfig+0x92c>)
 80143a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80143a4:	e00c      	b.n	80143c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80143a6:	4b9e      	ldr	r3, [pc, #632]	; (8014620 <UART_SetConfig+0x930>)
 80143a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80143aa:	e009      	b.n	80143c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80143ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80143b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80143b2:	e005      	b.n	80143c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80143b4:	2300      	movs	r3, #0
 80143b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80143b8:	2301      	movs	r3, #1
 80143ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80143be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80143c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	f000 81e0 	beq.w	8014788 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143cc:	4a95      	ldr	r2, [pc, #596]	; (8014624 <UART_SetConfig+0x934>)
 80143ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143d2:	461a      	mov	r2, r3
 80143d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80143da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	685a      	ldr	r2, [r3, #4]
 80143e0:	4613      	mov	r3, r2
 80143e2:	005b      	lsls	r3, r3, #1
 80143e4:	4413      	add	r3, r2
 80143e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d305      	bcc.n	80143f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80143f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d903      	bls.n	8014400 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80143f8:	2301      	movs	r3, #1
 80143fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80143fe:	e1c3      	b.n	8014788 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014402:	2200      	movs	r2, #0
 8014404:	60bb      	str	r3, [r7, #8]
 8014406:	60fa      	str	r2, [r7, #12]
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801440c:	4a85      	ldr	r2, [pc, #532]	; (8014624 <UART_SetConfig+0x934>)
 801440e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014412:	b29b      	uxth	r3, r3
 8014414:	2200      	movs	r2, #0
 8014416:	603b      	str	r3, [r7, #0]
 8014418:	607a      	str	r2, [r7, #4]
 801441a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801441e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014422:	f7f4 fd7d 	bl	8008f20 <__aeabi_uldivmod>
 8014426:	4602      	mov	r2, r0
 8014428:	460b      	mov	r3, r1
 801442a:	4610      	mov	r0, r2
 801442c:	4619      	mov	r1, r3
 801442e:	f04f 0200 	mov.w	r2, #0
 8014432:	f04f 0300 	mov.w	r3, #0
 8014436:	020b      	lsls	r3, r1, #8
 8014438:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801443c:	0202      	lsls	r2, r0, #8
 801443e:	6979      	ldr	r1, [r7, #20]
 8014440:	6849      	ldr	r1, [r1, #4]
 8014442:	0849      	lsrs	r1, r1, #1
 8014444:	2000      	movs	r0, #0
 8014446:	460c      	mov	r4, r1
 8014448:	4605      	mov	r5, r0
 801444a:	eb12 0804 	adds.w	r8, r2, r4
 801444e:	eb43 0905 	adc.w	r9, r3, r5
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	685b      	ldr	r3, [r3, #4]
 8014456:	2200      	movs	r2, #0
 8014458:	469a      	mov	sl, r3
 801445a:	4693      	mov	fp, r2
 801445c:	4652      	mov	r2, sl
 801445e:	465b      	mov	r3, fp
 8014460:	4640      	mov	r0, r8
 8014462:	4649      	mov	r1, r9
 8014464:	f7f4 fd5c 	bl	8008f20 <__aeabi_uldivmod>
 8014468:	4602      	mov	r2, r0
 801446a:	460b      	mov	r3, r1
 801446c:	4613      	mov	r3, r2
 801446e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014476:	d308      	bcc.n	801448a <UART_SetConfig+0x79a>
 8014478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801447a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801447e:	d204      	bcs.n	801448a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014486:	60da      	str	r2, [r3, #12]
 8014488:	e17e      	b.n	8014788 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 801448a:	2301      	movs	r3, #1
 801448c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014490:	e17a      	b.n	8014788 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	69db      	ldr	r3, [r3, #28]
 8014496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801449a:	f040 80c7 	bne.w	801462c <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 801449e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80144a2:	2b20      	cmp	r3, #32
 80144a4:	dc48      	bgt.n	8014538 <UART_SetConfig+0x848>
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	db7b      	blt.n	80145a2 <UART_SetConfig+0x8b2>
 80144aa:	2b20      	cmp	r3, #32
 80144ac:	d879      	bhi.n	80145a2 <UART_SetConfig+0x8b2>
 80144ae:	a201      	add	r2, pc, #4	; (adr r2, 80144b4 <UART_SetConfig+0x7c4>)
 80144b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144b4:	0801453f 	.word	0x0801453f
 80144b8:	08014547 	.word	0x08014547
 80144bc:	080145a3 	.word	0x080145a3
 80144c0:	080145a3 	.word	0x080145a3
 80144c4:	0801454f 	.word	0x0801454f
 80144c8:	080145a3 	.word	0x080145a3
 80144cc:	080145a3 	.word	0x080145a3
 80144d0:	080145a3 	.word	0x080145a3
 80144d4:	0801455f 	.word	0x0801455f
 80144d8:	080145a3 	.word	0x080145a3
 80144dc:	080145a3 	.word	0x080145a3
 80144e0:	080145a3 	.word	0x080145a3
 80144e4:	080145a3 	.word	0x080145a3
 80144e8:	080145a3 	.word	0x080145a3
 80144ec:	080145a3 	.word	0x080145a3
 80144f0:	080145a3 	.word	0x080145a3
 80144f4:	0801456f 	.word	0x0801456f
 80144f8:	080145a3 	.word	0x080145a3
 80144fc:	080145a3 	.word	0x080145a3
 8014500:	080145a3 	.word	0x080145a3
 8014504:	080145a3 	.word	0x080145a3
 8014508:	080145a3 	.word	0x080145a3
 801450c:	080145a3 	.word	0x080145a3
 8014510:	080145a3 	.word	0x080145a3
 8014514:	080145a3 	.word	0x080145a3
 8014518:	080145a3 	.word	0x080145a3
 801451c:	080145a3 	.word	0x080145a3
 8014520:	080145a3 	.word	0x080145a3
 8014524:	080145a3 	.word	0x080145a3
 8014528:	080145a3 	.word	0x080145a3
 801452c:	080145a3 	.word	0x080145a3
 8014530:	080145a3 	.word	0x080145a3
 8014534:	08014595 	.word	0x08014595
 8014538:	2b40      	cmp	r3, #64	; 0x40
 801453a:	d02e      	beq.n	801459a <UART_SetConfig+0x8aa>
 801453c:	e031      	b.n	80145a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801453e:	f7fc ff73 	bl	8011428 <HAL_RCC_GetPCLK1Freq>
 8014542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014544:	e033      	b.n	80145ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014546:	f7fc ff85 	bl	8011454 <HAL_RCC_GetPCLK2Freq>
 801454a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801454c:	e02f      	b.n	80145ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801454e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014552:	4618      	mov	r0, r3
 8014554:	f7fd ff32 	bl	80123bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801455a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801455c:	e027      	b.n	80145ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801455e:	f107 0318 	add.w	r3, r7, #24
 8014562:	4618      	mov	r0, r3
 8014564:	f7fe f87e 	bl	8012664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014568:	69fb      	ldr	r3, [r7, #28]
 801456a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801456c:	e01f      	b.n	80145ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801456e:	4b2e      	ldr	r3, [pc, #184]	; (8014628 <UART_SetConfig+0x938>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	f003 0320 	and.w	r3, r3, #32
 8014576:	2b00      	cmp	r3, #0
 8014578:	d009      	beq.n	801458e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801457a:	4b2b      	ldr	r3, [pc, #172]	; (8014628 <UART_SetConfig+0x938>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	08db      	lsrs	r3, r3, #3
 8014580:	f003 0303 	and.w	r3, r3, #3
 8014584:	4a25      	ldr	r2, [pc, #148]	; (801461c <UART_SetConfig+0x92c>)
 8014586:	fa22 f303 	lsr.w	r3, r2, r3
 801458a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801458c:	e00f      	b.n	80145ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801458e:	4b23      	ldr	r3, [pc, #140]	; (801461c <UART_SetConfig+0x92c>)
 8014590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014592:	e00c      	b.n	80145ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014594:	4b22      	ldr	r3, [pc, #136]	; (8014620 <UART_SetConfig+0x930>)
 8014596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014598:	e009      	b.n	80145ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801459a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801459e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80145a0:	e005      	b.n	80145ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80145a2:	2300      	movs	r3, #0
 80145a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80145a6:	2301      	movs	r3, #1
 80145a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80145ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80145ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	f000 80e9 	beq.w	8014788 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ba:	4a1a      	ldr	r2, [pc, #104]	; (8014624 <UART_SetConfig+0x934>)
 80145bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145c0:	461a      	mov	r2, r3
 80145c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80145c8:	005a      	lsls	r2, r3, #1
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	085b      	lsrs	r3, r3, #1
 80145d0:	441a      	add	r2, r3
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80145da:	b29b      	uxth	r3, r3
 80145dc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80145de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e0:	2b0f      	cmp	r3, #15
 80145e2:	d916      	bls.n	8014612 <UART_SetConfig+0x922>
 80145e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145ea:	d212      	bcs.n	8014612 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80145ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	f023 030f 	bic.w	r3, r3, #15
 80145f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80145f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f8:	085b      	lsrs	r3, r3, #1
 80145fa:	b29b      	uxth	r3, r3
 80145fc:	f003 0307 	and.w	r3, r3, #7
 8014600:	b29a      	uxth	r2, r3
 8014602:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014604:	4313      	orrs	r3, r2
 8014606:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801460e:	60da      	str	r2, [r3, #12]
 8014610:	e0ba      	b.n	8014788 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8014612:	2301      	movs	r3, #1
 8014614:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014618:	e0b6      	b.n	8014788 <UART_SetConfig+0xa98>
 801461a:	bf00      	nop
 801461c:	03d09000 	.word	0x03d09000
 8014620:	003d0900 	.word	0x003d0900
 8014624:	240084c0 	.word	0x240084c0
 8014628:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801462c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014630:	2b20      	cmp	r3, #32
 8014632:	dc49      	bgt.n	80146c8 <UART_SetConfig+0x9d8>
 8014634:	2b00      	cmp	r3, #0
 8014636:	db7c      	blt.n	8014732 <UART_SetConfig+0xa42>
 8014638:	2b20      	cmp	r3, #32
 801463a:	d87a      	bhi.n	8014732 <UART_SetConfig+0xa42>
 801463c:	a201      	add	r2, pc, #4	; (adr r2, 8014644 <UART_SetConfig+0x954>)
 801463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014642:	bf00      	nop
 8014644:	080146cf 	.word	0x080146cf
 8014648:	080146d7 	.word	0x080146d7
 801464c:	08014733 	.word	0x08014733
 8014650:	08014733 	.word	0x08014733
 8014654:	080146df 	.word	0x080146df
 8014658:	08014733 	.word	0x08014733
 801465c:	08014733 	.word	0x08014733
 8014660:	08014733 	.word	0x08014733
 8014664:	080146ef 	.word	0x080146ef
 8014668:	08014733 	.word	0x08014733
 801466c:	08014733 	.word	0x08014733
 8014670:	08014733 	.word	0x08014733
 8014674:	08014733 	.word	0x08014733
 8014678:	08014733 	.word	0x08014733
 801467c:	08014733 	.word	0x08014733
 8014680:	08014733 	.word	0x08014733
 8014684:	080146ff 	.word	0x080146ff
 8014688:	08014733 	.word	0x08014733
 801468c:	08014733 	.word	0x08014733
 8014690:	08014733 	.word	0x08014733
 8014694:	08014733 	.word	0x08014733
 8014698:	08014733 	.word	0x08014733
 801469c:	08014733 	.word	0x08014733
 80146a0:	08014733 	.word	0x08014733
 80146a4:	08014733 	.word	0x08014733
 80146a8:	08014733 	.word	0x08014733
 80146ac:	08014733 	.word	0x08014733
 80146b0:	08014733 	.word	0x08014733
 80146b4:	08014733 	.word	0x08014733
 80146b8:	08014733 	.word	0x08014733
 80146bc:	08014733 	.word	0x08014733
 80146c0:	08014733 	.word	0x08014733
 80146c4:	08014725 	.word	0x08014725
 80146c8:	2b40      	cmp	r3, #64	; 0x40
 80146ca:	d02e      	beq.n	801472a <UART_SetConfig+0xa3a>
 80146cc:	e031      	b.n	8014732 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80146ce:	f7fc feab 	bl	8011428 <HAL_RCC_GetPCLK1Freq>
 80146d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80146d4:	e033      	b.n	801473e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80146d6:	f7fc febd 	bl	8011454 <HAL_RCC_GetPCLK2Freq>
 80146da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80146dc:	e02f      	b.n	801473e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80146de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7fd fe6a 	bl	80123bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80146e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80146ec:	e027      	b.n	801473e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80146ee:	f107 0318 	add.w	r3, r7, #24
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7fd ffb6 	bl	8012664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80146fc:	e01f      	b.n	801473e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80146fe:	4b2d      	ldr	r3, [pc, #180]	; (80147b4 <UART_SetConfig+0xac4>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	f003 0320 	and.w	r3, r3, #32
 8014706:	2b00      	cmp	r3, #0
 8014708:	d009      	beq.n	801471e <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801470a:	4b2a      	ldr	r3, [pc, #168]	; (80147b4 <UART_SetConfig+0xac4>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	08db      	lsrs	r3, r3, #3
 8014710:	f003 0303 	and.w	r3, r3, #3
 8014714:	4a28      	ldr	r2, [pc, #160]	; (80147b8 <UART_SetConfig+0xac8>)
 8014716:	fa22 f303 	lsr.w	r3, r2, r3
 801471a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801471c:	e00f      	b.n	801473e <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 801471e:	4b26      	ldr	r3, [pc, #152]	; (80147b8 <UART_SetConfig+0xac8>)
 8014720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014722:	e00c      	b.n	801473e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014724:	4b25      	ldr	r3, [pc, #148]	; (80147bc <UART_SetConfig+0xacc>)
 8014726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014728:	e009      	b.n	801473e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801472e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014730:	e005      	b.n	801473e <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 8014732:	2300      	movs	r3, #0
 8014734:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014736:	2301      	movs	r3, #1
 8014738:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801473c:	bf00      	nop
    }

    if (pclk != 0U)
 801473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014740:	2b00      	cmp	r3, #0
 8014742:	d021      	beq.n	8014788 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014748:	4a1d      	ldr	r2, [pc, #116]	; (80147c0 <UART_SetConfig+0xad0>)
 801474a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801474e:	461a      	mov	r2, r3
 8014750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014752:	fbb3 f2f2 	udiv	r2, r3, r2
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	085b      	lsrs	r3, r3, #1
 801475c:	441a      	add	r2, r3
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	fbb2 f3f3 	udiv	r3, r2, r3
 8014766:	b29b      	uxth	r3, r3
 8014768:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476c:	2b0f      	cmp	r3, #15
 801476e:	d908      	bls.n	8014782 <UART_SetConfig+0xa92>
 8014770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014776:	d204      	bcs.n	8014782 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801477e:	60da      	str	r2, [r3, #12]
 8014780:	e002      	b.n	8014788 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8014782:	2301      	movs	r3, #1
 8014784:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	2201      	movs	r2, #1
 801478c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	2201      	movs	r2, #1
 8014794:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	2200      	movs	r2, #0
 801479c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	2200      	movs	r2, #0
 80147a2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80147a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3748      	adds	r7, #72	; 0x48
 80147ac:	46bd      	mov	sp, r7
 80147ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80147b2:	bf00      	nop
 80147b4:	58024400 	.word	0x58024400
 80147b8:	03d09000 	.word	0x03d09000
 80147bc:	003d0900 	.word	0x003d0900
 80147c0:	240084c0 	.word	0x240084c0

080147c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80147c4:	b480      	push	{r7}
 80147c6:	b083      	sub	sp, #12
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147d0:	f003 0301 	and.w	r3, r3, #1
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d00a      	beq.n	80147ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	430a      	orrs	r2, r1
 80147ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147f2:	f003 0302 	and.w	r3, r3, #2
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d00a      	beq.n	8014810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	430a      	orrs	r2, r1
 801480e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014814:	f003 0304 	and.w	r3, r3, #4
 8014818:	2b00      	cmp	r3, #0
 801481a:	d00a      	beq.n	8014832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	685b      	ldr	r3, [r3, #4]
 8014822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	430a      	orrs	r2, r1
 8014830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014836:	f003 0308 	and.w	r3, r3, #8
 801483a:	2b00      	cmp	r3, #0
 801483c:	d00a      	beq.n	8014854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	685b      	ldr	r3, [r3, #4]
 8014844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	430a      	orrs	r2, r1
 8014852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014858:	f003 0310 	and.w	r3, r3, #16
 801485c:	2b00      	cmp	r3, #0
 801485e:	d00a      	beq.n	8014876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	689b      	ldr	r3, [r3, #8]
 8014866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	430a      	orrs	r2, r1
 8014874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801487a:	f003 0320 	and.w	r3, r3, #32
 801487e:	2b00      	cmp	r3, #0
 8014880:	d00a      	beq.n	8014898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	689b      	ldr	r3, [r3, #8]
 8014888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	430a      	orrs	r2, r1
 8014896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d01a      	beq.n	80148da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	430a      	orrs	r2, r1
 80148b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80148c2:	d10a      	bne.n	80148da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	430a      	orrs	r2, r1
 80148d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d00a      	beq.n	80148fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	685b      	ldr	r3, [r3, #4]
 80148ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	430a      	orrs	r2, r1
 80148fa:	605a      	str	r2, [r3, #4]
  }
}
 80148fc:	bf00      	nop
 80148fe:	370c      	adds	r7, #12
 8014900:	46bd      	mov	sp, r7
 8014902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014906:	4770      	bx	lr

08014908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b086      	sub	sp, #24
 801490c:	af02      	add	r7, sp, #8
 801490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2200      	movs	r2, #0
 8014914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014918:	f7f6 fd0a 	bl	800b330 <HAL_GetTick>
 801491c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f003 0308 	and.w	r3, r3, #8
 8014928:	2b08      	cmp	r3, #8
 801492a:	d10e      	bne.n	801494a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801492c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014930:	9300      	str	r3, [sp, #0]
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	2200      	movs	r2, #0
 8014936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 f82f 	bl	801499e <UART_WaitOnFlagUntilTimeout>
 8014940:	4603      	mov	r3, r0
 8014942:	2b00      	cmp	r3, #0
 8014944:	d001      	beq.n	801494a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014946:	2303      	movs	r3, #3
 8014948:	e025      	b.n	8014996 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	f003 0304 	and.w	r3, r3, #4
 8014954:	2b04      	cmp	r3, #4
 8014956:	d10e      	bne.n	8014976 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801495c:	9300      	str	r3, [sp, #0]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2200      	movs	r2, #0
 8014962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f000 f819 	bl	801499e <UART_WaitOnFlagUntilTimeout>
 801496c:	4603      	mov	r3, r0
 801496e:	2b00      	cmp	r3, #0
 8014970:	d001      	beq.n	8014976 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014972:	2303      	movs	r3, #3
 8014974:	e00f      	b.n	8014996 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2220      	movs	r2, #32
 801497a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2220      	movs	r2, #32
 8014982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2200      	movs	r2, #0
 801498a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2200      	movs	r2, #0
 8014990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014994:	2300      	movs	r3, #0
}
 8014996:	4618      	mov	r0, r3
 8014998:	3710      	adds	r7, #16
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801499e:	b580      	push	{r7, lr}
 80149a0:	b084      	sub	sp, #16
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	60f8      	str	r0, [r7, #12]
 80149a6:	60b9      	str	r1, [r7, #8]
 80149a8:	603b      	str	r3, [r7, #0]
 80149aa:	4613      	mov	r3, r2
 80149ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80149ae:	e062      	b.n	8014a76 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149b6:	d05e      	beq.n	8014a76 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80149b8:	f7f6 fcba 	bl	800b330 <HAL_GetTick>
 80149bc:	4602      	mov	r2, r0
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	1ad3      	subs	r3, r2, r3
 80149c2:	69ba      	ldr	r2, [r7, #24]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d302      	bcc.n	80149ce <UART_WaitOnFlagUntilTimeout+0x30>
 80149c8:	69bb      	ldr	r3, [r7, #24]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d11d      	bne.n	8014a0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80149dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	689a      	ldr	r2, [r3, #8]
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	f022 0201 	bic.w	r2, r2, #1
 80149ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	2220      	movs	r2, #32
 80149f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	2220      	movs	r2, #32
 80149fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8014a06:	2303      	movs	r3, #3
 8014a08:	e045      	b.n	8014a96 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	f003 0304 	and.w	r3, r3, #4
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d02e      	beq.n	8014a76 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	69db      	ldr	r3, [r3, #28]
 8014a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a26:	d126      	bne.n	8014a76 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	681a      	ldr	r2, [r3, #0]
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014a40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	689a      	ldr	r2, [r3, #8]
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	f022 0201 	bic.w	r2, r2, #1
 8014a50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2220      	movs	r2, #32
 8014a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	2220      	movs	r2, #32
 8014a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	2220      	movs	r2, #32
 8014a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8014a72:	2303      	movs	r3, #3
 8014a74:	e00f      	b.n	8014a96 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	69da      	ldr	r2, [r3, #28]
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	4013      	ands	r3, r2
 8014a80:	68ba      	ldr	r2, [r7, #8]
 8014a82:	429a      	cmp	r2, r3
 8014a84:	bf0c      	ite	eq
 8014a86:	2301      	moveq	r3, #1
 8014a88:	2300      	movne	r3, #0
 8014a8a:	b2db      	uxtb	r3, r3
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	79fb      	ldrb	r3, [r7, #7]
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d08d      	beq.n	80149b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014a94:	2300      	movs	r3, #0
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3710      	adds	r7, #16
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
	...

08014aa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014aa0:	b480      	push	{r7}
 8014aa2:	b085      	sub	sp, #20
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	60f8      	str	r0, [r7, #12]
 8014aa8:	60b9      	str	r1, [r7, #8]
 8014aaa:	4613      	mov	r3, r2
 8014aac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	68ba      	ldr	r2, [r7, #8]
 8014ab2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	88fa      	ldrh	r2, [r7, #6]
 8014ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	88fa      	ldrh	r2, [r7, #6]
 8014ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ad2:	d10e      	bne.n	8014af2 <UART_Start_Receive_IT+0x52>
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	691b      	ldr	r3, [r3, #16]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d105      	bne.n	8014ae8 <UART_Start_Receive_IT+0x48>
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014ae2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014ae6:	e02d      	b.n	8014b44 <UART_Start_Receive_IT+0xa4>
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	22ff      	movs	r2, #255	; 0xff
 8014aec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014af0:	e028      	b.n	8014b44 <UART_Start_Receive_IT+0xa4>
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	689b      	ldr	r3, [r3, #8]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d10d      	bne.n	8014b16 <UART_Start_Receive_IT+0x76>
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	691b      	ldr	r3, [r3, #16]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d104      	bne.n	8014b0c <UART_Start_Receive_IT+0x6c>
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	22ff      	movs	r2, #255	; 0xff
 8014b06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014b0a:	e01b      	b.n	8014b44 <UART_Start_Receive_IT+0xa4>
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	227f      	movs	r2, #127	; 0x7f
 8014b10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014b14:	e016      	b.n	8014b44 <UART_Start_Receive_IT+0xa4>
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	689b      	ldr	r3, [r3, #8]
 8014b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014b1e:	d10d      	bne.n	8014b3c <UART_Start_Receive_IT+0x9c>
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	691b      	ldr	r3, [r3, #16]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d104      	bne.n	8014b32 <UART_Start_Receive_IT+0x92>
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	227f      	movs	r2, #127	; 0x7f
 8014b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014b30:	e008      	b.n	8014b44 <UART_Start_Receive_IT+0xa4>
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	223f      	movs	r2, #63	; 0x3f
 8014b36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014b3a:	e003      	b.n	8014b44 <UART_Start_Receive_IT+0xa4>
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2200      	movs	r2, #0
 8014b48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2222      	movs	r2, #34	; 0x22
 8014b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	689a      	ldr	r2, [r3, #8]
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	f042 0201 	orr.w	r2, r2, #1
 8014b62:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014b6c:	d12a      	bne.n	8014bc4 <UART_Start_Receive_IT+0x124>
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014b74:	88fa      	ldrh	r2, [r7, #6]
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d324      	bcc.n	8014bc4 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	689b      	ldr	r3, [r3, #8]
 8014b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014b82:	d107      	bne.n	8014b94 <UART_Start_Receive_IT+0xf4>
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	691b      	ldr	r3, [r3, #16]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d103      	bne.n	8014b94 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	4a1f      	ldr	r2, [pc, #124]	; (8014c0c <UART_Start_Receive_IT+0x16c>)
 8014b90:	671a      	str	r2, [r3, #112]	; 0x70
 8014b92:	e002      	b.n	8014b9a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	4a1e      	ldr	r2, [pc, #120]	; (8014c10 <UART_Start_Receive_IT+0x170>)
 8014b98:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014bb0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	689a      	ldr	r2, [r3, #8]
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8014bc0:	609a      	str	r2, [r3, #8]
 8014bc2:	e01b      	b.n	8014bfc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	689b      	ldr	r3, [r3, #8]
 8014bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014bcc:	d107      	bne.n	8014bde <UART_Start_Receive_IT+0x13e>
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	691b      	ldr	r3, [r3, #16]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d103      	bne.n	8014bde <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	4a0e      	ldr	r2, [pc, #56]	; (8014c14 <UART_Start_Receive_IT+0x174>)
 8014bda:	671a      	str	r2, [r3, #112]	; 0x70
 8014bdc:	e002      	b.n	8014be4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	4a0d      	ldr	r2, [pc, #52]	; (8014c18 <UART_Start_Receive_IT+0x178>)
 8014be2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	2200      	movs	r2, #0
 8014be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	681a      	ldr	r2, [r3, #0]
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8014bfa:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8014bfc:	2300      	movs	r3, #0
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3714      	adds	r7, #20
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	080152fd 	.word	0x080152fd
 8014c10:	080150f9 	.word	0x080150f9
 8014c14:	0801501f 	.word	0x0801501f
 8014c18:	08014f47 	.word	0x08014f47

08014c1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b084      	sub	sp, #16
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	60b9      	str	r1, [r7, #8]
 8014c26:	4613      	mov	r3, r2
 8014c28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	68ba      	ldr	r2, [r7, #8]
 8014c2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	88fa      	ldrh	r2, [r7, #6]
 8014c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2222      	movs	r2, #34	; 0x22
 8014c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d02c      	beq.n	8014caa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c54:	4a25      	ldr	r2, [pc, #148]	; (8014cec <UART_Start_Receive_DMA+0xd0>)
 8014c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c5c:	4a24      	ldr	r2, [pc, #144]	; (8014cf0 <UART_Start_Receive_DMA+0xd4>)
 8014c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c64:	4a23      	ldr	r2, [pc, #140]	; (8014cf4 <UART_Start_Receive_DMA+0xd8>)
 8014c66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	3324      	adds	r3, #36	; 0x24
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c80:	461a      	mov	r2, r3
 8014c82:	88fb      	ldrh	r3, [r7, #6]
 8014c84:	f7f7 fc2e 	bl	800c4e4 <HAL_DMA_Start_IT>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d00d      	beq.n	8014caa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	2210      	movs	r2, #16
 8014c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2220      	movs	r2, #32
 8014ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8014ca6:	2301      	movs	r3, #1
 8014ca8:	e01c      	b.n	8014ce4 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	2200      	movs	r2, #0
 8014cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	681a      	ldr	r2, [r3, #0]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014cc0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	689a      	ldr	r2, [r3, #8]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	f042 0201 	orr.w	r2, r2, #1
 8014cd0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	689a      	ldr	r2, [r3, #8]
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ce0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8014ce2:	2300      	movs	r3, #0
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3710      	adds	r7, #16
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}
 8014cec:	08014d99 	.word	0x08014d99
 8014cf0:	08014e2f 	.word	0x08014e2f
 8014cf4:	08014e67 	.word	0x08014e67

08014cf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014cf8:	b480      	push	{r7}
 8014cfa:	b083      	sub	sp, #12
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	681a      	ldr	r2, [r3, #0]
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8014d0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	689a      	ldr	r2, [r3, #8]
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8014d1e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2220      	movs	r2, #32
 8014d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8014d28:	bf00      	nop
 8014d2a:	370c      	adds	r7, #12
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr

08014d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014d34:	b480      	push	{r7}
 8014d36:	b083      	sub	sp, #12
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8014d4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	6899      	ldr	r1, [r3, #8]
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681a      	ldr	r2, [r3, #0]
 8014d56:	4b0f      	ldr	r3, [pc, #60]	; (8014d94 <UART_EndRxTransfer+0x60>)
 8014d58:	400b      	ands	r3, r1
 8014d5a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d107      	bne.n	8014d74 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	f022 0210 	bic.w	r2, r2, #16
 8014d72:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2220      	movs	r2, #32
 8014d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2200      	movs	r2, #0
 8014d86:	671a      	str	r2, [r3, #112]	; 0x70
}
 8014d88:	bf00      	nop
 8014d8a:	370c      	adds	r7, #12
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr
 8014d94:	effffffe 	.word	0xeffffffe

08014d98 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b084      	sub	sp, #16
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014da4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	69db      	ldr	r3, [r3, #28]
 8014daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014dae:	d02b      	beq.n	8014e08 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2200      	movs	r2, #0
 8014db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	681a      	ldr	r2, [r3, #0]
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8014dc6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	689a      	ldr	r2, [r3, #8]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f022 0201 	bic.w	r2, r2, #1
 8014dd6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	689a      	ldr	r2, [r3, #8]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014de6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2220      	movs	r2, #32
 8014dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014df4:	2b01      	cmp	r3, #1
 8014df6:	d107      	bne.n	8014e08 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	681a      	ldr	r2, [r3, #0]
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f022 0210 	bic.w	r2, r2, #16
 8014e06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e0c:	2b01      	cmp	r3, #1
 8014e0e:	d107      	bne.n	8014e20 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014e16:	4619      	mov	r1, r3
 8014e18:	68f8      	ldr	r0, [r7, #12]
 8014e1a:	f005 f893 	bl	8019f44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014e1e:	e002      	b.n	8014e26 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8014e20:	68f8      	ldr	r0, [r7, #12]
 8014e22:	f004 ffd9 	bl	8019dd8 <HAL_UART_RxCpltCallback>
}
 8014e26:	bf00      	nop
 8014e28:	3710      	adds	r7, #16
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}

08014e2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014e2e:	b580      	push	{r7, lr}
 8014e30:	b084      	sub	sp, #16
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e3a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e40:	2b01      	cmp	r3, #1
 8014e42:	d109      	bne.n	8014e58 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014e4a:	085b      	lsrs	r3, r3, #1
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	4619      	mov	r1, r3
 8014e50:	68f8      	ldr	r0, [r7, #12]
 8014e52:	f005 f877 	bl	8019f44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014e56:	e002      	b.n	8014e5e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f7fe ff3f 	bl	8013cdc <HAL_UART_RxHalfCpltCallback>
}
 8014e5e:	bf00      	nop
 8014e60:	3710      	adds	r7, #16
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b086      	sub	sp, #24
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	689b      	ldr	r3, [r3, #8]
 8014e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e8e:	2b80      	cmp	r3, #128	; 0x80
 8014e90:	d109      	bne.n	8014ea6 <UART_DMAError+0x40>
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	2b21      	cmp	r3, #33	; 0x21
 8014e96:	d106      	bne.n	8014ea6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8014ea0:	6978      	ldr	r0, [r7, #20]
 8014ea2:	f7ff ff29 	bl	8014cf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	689b      	ldr	r3, [r3, #8]
 8014eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014eb0:	2b40      	cmp	r3, #64	; 0x40
 8014eb2:	d109      	bne.n	8014ec8 <UART_DMAError+0x62>
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2b22      	cmp	r3, #34	; 0x22
 8014eb8:	d106      	bne.n	8014ec8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014eba:	697b      	ldr	r3, [r7, #20]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8014ec2:	6978      	ldr	r0, [r7, #20]
 8014ec4:	f7ff ff36 	bl	8014d34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ece:	f043 0210 	orr.w	r2, r3, #16
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014ed8:	6978      	ldr	r0, [r7, #20]
 8014eda:	f004 ff1d 	bl	8019d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014ede:	bf00      	nop
 8014ee0:	3718      	adds	r7, #24
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}

08014ee6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014ee6:	b580      	push	{r7, lr}
 8014ee8:	b084      	sub	sp, #16
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	2200      	movs	r2, #0
 8014f00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f004 ff07 	bl	8019d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014f0a:	bf00      	nop
 8014f0c:	3710      	adds	r7, #16
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014f12:	b580      	push	{r7, lr}
 8014f14:	b082      	sub	sp, #8
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f28:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	2220      	movs	r2, #32
 8014f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2200      	movs	r2, #0
 8014f36:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f004 fed3 	bl	8019ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014f3e:	bf00      	nop
 8014f40:	3708      	adds	r7, #8
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}

08014f46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014f46:	b580      	push	{r7, lr}
 8014f48:	b084      	sub	sp, #16
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f54:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014f5c:	2b22      	cmp	r3, #34	; 0x22
 8014f5e:	d152      	bne.n	8015006 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f66:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014f68:	89bb      	ldrh	r3, [r7, #12]
 8014f6a:	b2d9      	uxtb	r1, r3
 8014f6c:	89fb      	ldrh	r3, [r7, #14]
 8014f6e:	b2da      	uxtb	r2, r3
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f74:	400a      	ands	r2, r1
 8014f76:	b2d2      	uxtb	r2, r2
 8014f78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f7e:	1c5a      	adds	r2, r3, #1
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014f8a:	b29b      	uxth	r3, r3
 8014f8c:	3b01      	subs	r3, #1
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d139      	bne.n	8015016 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	681a      	ldr	r2, [r3, #0]
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8014fb0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	689a      	ldr	r2, [r3, #8]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	f022 0201 	bic.w	r2, r2, #1
 8014fc0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2220      	movs	r2, #32
 8014fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fd4:	2b01      	cmp	r3, #1
 8014fd6:	d10f      	bne.n	8014ff8 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	f022 0210 	bic.w	r2, r2, #16
 8014fe6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014fee:	4619      	mov	r1, r3
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f004 ffa7 	bl	8019f44 <HAL_UARTEx_RxEventCallback>
 8014ff6:	e002      	b.n	8014ffe <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f004 feed 	bl	8019dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	2200      	movs	r2, #0
 8015002:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015004:	e007      	b.n	8015016 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	699a      	ldr	r2, [r3, #24]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	f042 0208 	orr.w	r2, r2, #8
 8015014:	619a      	str	r2, [r3, #24]
}
 8015016:	bf00      	nop
 8015018:	3710      	adds	r7, #16
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}

0801501e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801501e:	b580      	push	{r7, lr}
 8015020:	b084      	sub	sp, #16
 8015022:	af00      	add	r7, sp, #0
 8015024:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801502c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015034:	2b22      	cmp	r3, #34	; 0x22
 8015036:	d152      	bne.n	80150de <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801503e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015044:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8015046:	89ba      	ldrh	r2, [r7, #12]
 8015048:	89fb      	ldrh	r3, [r7, #14]
 801504a:	4013      	ands	r3, r2
 801504c:	b29a      	uxth	r2, r3
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015056:	1c9a      	adds	r2, r3, #2
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015062:	b29b      	uxth	r3, r3
 8015064:	3b01      	subs	r3, #1
 8015066:	b29a      	uxth	r2, r3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015074:	b29b      	uxth	r3, r3
 8015076:	2b00      	cmp	r3, #0
 8015078:	d139      	bne.n	80150ee <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8015088:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	689a      	ldr	r2, [r3, #8]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f022 0201 	bic.w	r2, r2, #1
 8015098:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2220      	movs	r2, #32
 801509e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2200      	movs	r2, #0
 80150a6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150ac:	2b01      	cmp	r3, #1
 80150ae:	d10f      	bne.n	80150d0 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	f022 0210 	bic.w	r2, r2, #16
 80150be:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80150c6:	4619      	mov	r1, r3
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f004 ff3b 	bl	8019f44 <HAL_UARTEx_RxEventCallback>
 80150ce:	e002      	b.n	80150d6 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80150d0:	6878      	ldr	r0, [r7, #4]
 80150d2:	f004 fe81 	bl	8019dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2200      	movs	r2, #0
 80150da:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80150dc:	e007      	b.n	80150ee <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	699a      	ldr	r2, [r3, #24]
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	f042 0208 	orr.w	r2, r2, #8
 80150ec:	619a      	str	r2, [r3, #24]
}
 80150ee:	bf00      	nop
 80150f0:	3710      	adds	r7, #16
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}
	...

080150f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b088      	sub	sp, #32
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015106:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	69db      	ldr	r3, [r3, #28]
 801510e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	689b      	ldr	r3, [r3, #8]
 801511e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015126:	2b22      	cmp	r3, #34	; 0x22
 8015128:	f040 80d8 	bne.w	80152dc <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015132:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015134:	e0a8      	b.n	8015288 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801513c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801513e:	89bb      	ldrh	r3, [r7, #12]
 8015140:	b2d9      	uxtb	r1, r3
 8015142:	8b7b      	ldrh	r3, [r7, #26]
 8015144:	b2da      	uxtb	r2, r3
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801514a:	400a      	ands	r2, r1
 801514c:	b2d2      	uxtb	r2, r2
 801514e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015154:	1c5a      	adds	r2, r3, #1
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015160:	b29b      	uxth	r3, r3
 8015162:	3b01      	subs	r3, #1
 8015164:	b29a      	uxth	r2, r3
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	69db      	ldr	r3, [r3, #28]
 8015172:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015174:	69fb      	ldr	r3, [r7, #28]
 8015176:	f003 0307 	and.w	r3, r3, #7
 801517a:	2b00      	cmp	r3, #0
 801517c:	d04d      	beq.n	801521a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801517e:	69fb      	ldr	r3, [r7, #28]
 8015180:	f003 0301 	and.w	r3, r3, #1
 8015184:	2b00      	cmp	r3, #0
 8015186:	d010      	beq.n	80151aa <UART_RxISR_8BIT_FIFOEN+0xb2>
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801518e:	2b00      	cmp	r3, #0
 8015190:	d00b      	beq.n	80151aa <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2201      	movs	r2, #1
 8015198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151a0:	f043 0201 	orr.w	r2, r3, #1
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80151aa:	69fb      	ldr	r3, [r7, #28]
 80151ac:	f003 0302 	and.w	r3, r3, #2
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d010      	beq.n	80151d6 <UART_RxISR_8BIT_FIFOEN+0xde>
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	f003 0301 	and.w	r3, r3, #1
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d00b      	beq.n	80151d6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2202      	movs	r2, #2
 80151c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151cc:	f043 0204 	orr.w	r2, r3, #4
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	f003 0304 	and.w	r3, r3, #4
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d010      	beq.n	8015202 <UART_RxISR_8BIT_FIFOEN+0x10a>
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	f003 0301 	and.w	r3, r3, #1
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d00b      	beq.n	8015202 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2204      	movs	r2, #4
 80151f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151f8:	f043 0202 	orr.w	r2, r3, #2
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015208:	2b00      	cmp	r3, #0
 801520a:	d006      	beq.n	801521a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f004 fd83 	bl	8019d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2200      	movs	r2, #0
 8015216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015220:	b29b      	uxth	r3, r3
 8015222:	2b00      	cmp	r3, #0
 8015224:	d130      	bne.n	8015288 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	681a      	ldr	r2, [r3, #0]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015234:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	6899      	ldr	r1, [r3, #8]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	681a      	ldr	r2, [r3, #0]
 8015240:	4b2c      	ldr	r3, [pc, #176]	; (80152f4 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 8015242:	400b      	ands	r3, r1
 8015244:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2220      	movs	r2, #32
 801524a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	2200      	movs	r2, #0
 8015252:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015258:	2b01      	cmp	r3, #1
 801525a:	d10f      	bne.n	801527c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	681a      	ldr	r2, [r3, #0]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	f022 0210 	bic.w	r2, r2, #16
 801526a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015272:	4619      	mov	r1, r3
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f004 fe65 	bl	8019f44 <HAL_UARTEx_RxEventCallback>
 801527a:	e002      	b.n	8015282 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f004 fdab 	bl	8019dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2200      	movs	r2, #0
 8015286:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015288:	89fb      	ldrh	r3, [r7, #14]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d005      	beq.n	801529a <UART_RxISR_8BIT_FIFOEN+0x1a2>
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	f003 0320 	and.w	r3, r3, #32
 8015294:	2b00      	cmp	r3, #0
 8015296:	f47f af4e 	bne.w	8015136 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80152a0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80152a2:	897b      	ldrh	r3, [r7, #10]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d021      	beq.n	80152ec <UART_RxISR_8BIT_FIFOEN+0x1f4>
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80152ae:	897a      	ldrh	r2, [r7, #10]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d21b      	bcs.n	80152ec <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	689a      	ldr	r2, [r3, #8]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80152c2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	4a0c      	ldr	r2, [pc, #48]	; (80152f8 <UART_RxISR_8BIT_FIFOEN+0x200>)
 80152c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f042 0220 	orr.w	r2, r2, #32
 80152d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80152da:	e007      	b.n	80152ec <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	699a      	ldr	r2, [r3, #24]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	f042 0208 	orr.w	r2, r2, #8
 80152ea:	619a      	str	r2, [r3, #24]
}
 80152ec:	bf00      	nop
 80152ee:	3720      	adds	r7, #32
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	effffffe 	.word	0xeffffffe
 80152f8:	08014f47 	.word	0x08014f47

080152fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b08a      	sub	sp, #40	; 0x28
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801530a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	69db      	ldr	r3, [r3, #28]
 8015312:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	689b      	ldr	r3, [r3, #8]
 8015322:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801532a:	2b22      	cmp	r3, #34	; 0x22
 801532c:	f040 80d8 	bne.w	80154e0 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015336:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015338:	e0a8      	b.n	801548c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015340:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015346:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8015348:	8aba      	ldrh	r2, [r7, #20]
 801534a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801534c:	4013      	ands	r3, r2
 801534e:	b29a      	uxth	r2, r3
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015358:	1c9a      	adds	r2, r3, #2
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015364:	b29b      	uxth	r3, r3
 8015366:	3b01      	subs	r3, #1
 8015368:	b29a      	uxth	r2, r3
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	69db      	ldr	r3, [r3, #28]
 8015376:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801537a:	f003 0307 	and.w	r3, r3, #7
 801537e:	2b00      	cmp	r3, #0
 8015380:	d04d      	beq.n	801541e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015384:	f003 0301 	and.w	r3, r3, #1
 8015388:	2b00      	cmp	r3, #0
 801538a:	d010      	beq.n	80153ae <UART_RxISR_16BIT_FIFOEN+0xb2>
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015392:	2b00      	cmp	r3, #0
 8015394:	d00b      	beq.n	80153ae <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	2201      	movs	r2, #1
 801539c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153a4:	f043 0201 	orr.w	r2, r3, #1
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80153ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b0:	f003 0302 	and.w	r3, r3, #2
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d010      	beq.n	80153da <UART_RxISR_16BIT_FIFOEN+0xde>
 80153b8:	69bb      	ldr	r3, [r7, #24]
 80153ba:	f003 0301 	and.w	r3, r3, #1
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00b      	beq.n	80153da <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	2202      	movs	r2, #2
 80153c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153d0:	f043 0204 	orr.w	r2, r3, #4
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80153da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153dc:	f003 0304 	and.w	r3, r3, #4
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d010      	beq.n	8015406 <UART_RxISR_16BIT_FIFOEN+0x10a>
 80153e4:	69bb      	ldr	r3, [r7, #24]
 80153e6:	f003 0301 	and.w	r3, r3, #1
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d00b      	beq.n	8015406 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	2204      	movs	r2, #4
 80153f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153fc:	f043 0202 	orr.w	r2, r3, #2
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801540c:	2b00      	cmp	r3, #0
 801540e:	d006      	beq.n	801541e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f004 fc81 	bl	8019d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015424:	b29b      	uxth	r3, r3
 8015426:	2b00      	cmp	r3, #0
 8015428:	d130      	bne.n	801548c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015438:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	6899      	ldr	r1, [r3, #8]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681a      	ldr	r2, [r3, #0]
 8015444:	4b2c      	ldr	r3, [pc, #176]	; (80154f8 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 8015446:	400b      	ands	r3, r1
 8015448:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2220      	movs	r2, #32
 801544e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2200      	movs	r2, #0
 8015456:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801545c:	2b01      	cmp	r3, #1
 801545e:	d10f      	bne.n	8015480 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	681a      	ldr	r2, [r3, #0]
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	f022 0210 	bic.w	r2, r2, #16
 801546e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015476:	4619      	mov	r1, r3
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f004 fd63 	bl	8019f44 <HAL_UARTEx_RxEventCallback>
 801547e:	e002      	b.n	8015486 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f004 fca9 	bl	8019dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2200      	movs	r2, #0
 801548a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801548c:	8afb      	ldrh	r3, [r7, #22]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d005      	beq.n	801549e <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8015492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015494:	f003 0320 	and.w	r3, r3, #32
 8015498:	2b00      	cmp	r3, #0
 801549a:	f47f af4e 	bne.w	801533a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80154a4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80154a6:	89fb      	ldrh	r3, [r7, #14]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d021      	beq.n	80154f0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80154b2:	89fa      	ldrh	r2, [r7, #14]
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d21b      	bcs.n	80154f0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	689a      	ldr	r2, [r3, #8]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80154c6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	4a0c      	ldr	r2, [pc, #48]	; (80154fc <UART_RxISR_16BIT_FIFOEN+0x200>)
 80154cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	f042 0220 	orr.w	r2, r2, #32
 80154dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80154de:	e007      	b.n	80154f0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	699a      	ldr	r2, [r3, #24]
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	f042 0208 	orr.w	r2, r2, #8
 80154ee:	619a      	str	r2, [r3, #24]
}
 80154f0:	bf00      	nop
 80154f2:	3728      	adds	r7, #40	; 0x28
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	effffffe 	.word	0xeffffffe
 80154fc:	0801501f 	.word	0x0801501f

08015500 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015508:	bf00      	nop
 801550a:	370c      	adds	r7, #12
 801550c:	46bd      	mov	sp, r7
 801550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015512:	4770      	bx	lr

08015514 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015514:	b480      	push	{r7}
 8015516:	b083      	sub	sp, #12
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801551c:	bf00      	nop
 801551e:	370c      	adds	r7, #12
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr

08015528 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015528:	b480      	push	{r7}
 801552a:	b083      	sub	sp, #12
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015530:	bf00      	nop
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr

0801553c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801553c:	b480      	push	{r7}
 801553e:	b085      	sub	sp, #20
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801554a:	2b01      	cmp	r3, #1
 801554c:	d101      	bne.n	8015552 <HAL_UARTEx_DisableFifoMode+0x16>
 801554e:	2302      	movs	r3, #2
 8015550:	e027      	b.n	80155a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	2201      	movs	r2, #1
 8015556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2224      	movs	r2, #36	; 0x24
 801555e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	681a      	ldr	r2, [r3, #0]
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	f022 0201 	bic.w	r2, r2, #1
 8015578:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015580:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2200      	movs	r2, #0
 8015586:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	68fa      	ldr	r2, [r7, #12]
 801558e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	2220      	movs	r2, #32
 8015594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	2200      	movs	r2, #0
 801559c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80155a0:	2300      	movs	r3, #0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3714      	adds	r7, #20
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr

080155ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b084      	sub	sp, #16
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
 80155b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d101      	bne.n	80155c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80155c2:	2302      	movs	r3, #2
 80155c4:	e02d      	b.n	8015622 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	2201      	movs	r2, #1
 80155ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	2224      	movs	r2, #36	; 0x24
 80155d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	681a      	ldr	r2, [r3, #0]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f022 0201 	bic.w	r2, r2, #1
 80155ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	689b      	ldr	r3, [r3, #8]
 80155f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	683a      	ldr	r2, [r7, #0]
 80155fe:	430a      	orrs	r2, r1
 8015600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015602:	6878      	ldr	r0, [r7, #4]
 8015604:	f000 f896 	bl	8015734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	68fa      	ldr	r2, [r7, #12]
 801560e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	2220      	movs	r2, #32
 8015614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2200      	movs	r2, #0
 801561c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015620:	2300      	movs	r3, #0
}
 8015622:	4618      	mov	r0, r3
 8015624:	3710      	adds	r7, #16
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b084      	sub	sp, #16
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801563a:	2b01      	cmp	r3, #1
 801563c:	d101      	bne.n	8015642 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801563e:	2302      	movs	r3, #2
 8015640:	e02d      	b.n	801569e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2201      	movs	r2, #1
 8015646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2224      	movs	r2, #36	; 0x24
 801564e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	f022 0201 	bic.w	r2, r2, #1
 8015668:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	689b      	ldr	r3, [r3, #8]
 8015670:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	683a      	ldr	r2, [r7, #0]
 801567a:	430a      	orrs	r2, r1
 801567c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801567e:	6878      	ldr	r0, [r7, #4]
 8015680:	f000 f858 	bl	8015734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	68fa      	ldr	r2, [r7, #12]
 801568a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2220      	movs	r2, #32
 8015690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	2200      	movs	r2, #0
 8015698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801569c:	2300      	movs	r3, #0
}
 801569e:	4618      	mov	r0, r3
 80156a0:	3710      	adds	r7, #16
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}

080156a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80156a6:	b580      	push	{r7, lr}
 80156a8:	b086      	sub	sp, #24
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	60f8      	str	r0, [r7, #12]
 80156ae:	60b9      	str	r1, [r7, #8]
 80156b0:	4613      	mov	r3, r2
 80156b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156ba:	2b20      	cmp	r3, #32
 80156bc:	d135      	bne.n	801572a <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
  {
    if ((pData == NULL) || (Size == 0U))
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d002      	beq.n	80156ca <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80156c4:	88fb      	ldrh	r3, [r7, #6]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d101      	bne.n	80156ce <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80156ca:	2301      	movs	r3, #1
 80156cc:	e02e      	b.n	801572c <HAL_UARTEx_ReceiveToIdle_DMA+0x86>
    }

    __HAL_LOCK(huart);
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	d101      	bne.n	80156dc <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80156d8:	2302      	movs	r3, #2
 80156da:	e027      	b.n	801572c <HAL_UARTEx_ReceiveToIdle_DMA+0x86>
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	2201      	movs	r2, #1
 80156e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	2201      	movs	r2, #1
 80156e8:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80156ea:	88fb      	ldrh	r3, [r7, #6]
 80156ec:	461a      	mov	r2, r3
 80156ee:	68b9      	ldr	r1, [r7, #8]
 80156f0:	68f8      	ldr	r0, [r7, #12]
 80156f2:	f7ff fa93 	bl	8014c1c <UART_Start_Receive_DMA>
 80156f6:	4603      	mov	r3, r0
 80156f8:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80156fa:	7dfb      	ldrb	r3, [r7, #23]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d112      	bne.n	8015726 <HAL_UARTEx_ReceiveToIdle_DMA+0x80>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015704:	2b01      	cmp	r3, #1
 8015706:	d10c      	bne.n	8015722 <HAL_UARTEx_ReceiveToIdle_DMA+0x7c>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	2210      	movs	r2, #16
 801570e:	621a      	str	r2, [r3, #32]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	681a      	ldr	r2, [r3, #0]
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	f042 0210 	orr.w	r2, r2, #16
 801571e:	601a      	str	r2, [r3, #0]
 8015720:	e001      	b.n	8015726 <HAL_UARTEx_ReceiveToIdle_DMA+0x80>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015722:	2301      	movs	r3, #1
 8015724:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8015726:	7dfb      	ldrb	r3, [r7, #23]
 8015728:	e000      	b.n	801572c <HAL_UARTEx_ReceiveToIdle_DMA+0x86>
  }
  else
  {
    return HAL_BUSY;
 801572a:	2302      	movs	r3, #2
  }
}
 801572c:	4618      	mov	r0, r3
 801572e:	3718      	adds	r7, #24
 8015730:	46bd      	mov	sp, r7
 8015732:	bd80      	pop	{r7, pc}

08015734 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015734:	b480      	push	{r7}
 8015736:	b085      	sub	sp, #20
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015740:	2b00      	cmp	r3, #0
 8015742:	d108      	bne.n	8015756 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2201      	movs	r2, #1
 8015748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2201      	movs	r2, #1
 8015750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015754:	e031      	b.n	80157ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015756:	2310      	movs	r3, #16
 8015758:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801575a:	2310      	movs	r3, #16
 801575c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	689b      	ldr	r3, [r3, #8]
 8015764:	0e5b      	lsrs	r3, r3, #25
 8015766:	b2db      	uxtb	r3, r3
 8015768:	f003 0307 	and.w	r3, r3, #7
 801576c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	689b      	ldr	r3, [r3, #8]
 8015774:	0f5b      	lsrs	r3, r3, #29
 8015776:	b2db      	uxtb	r3, r3
 8015778:	f003 0307 	and.w	r3, r3, #7
 801577c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801577e:	7bbb      	ldrb	r3, [r7, #14]
 8015780:	7b3a      	ldrb	r2, [r7, #12]
 8015782:	4911      	ldr	r1, [pc, #68]	; (80157c8 <UARTEx_SetNbDataToProcess+0x94>)
 8015784:	5c8a      	ldrb	r2, [r1, r2]
 8015786:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801578a:	7b3a      	ldrb	r2, [r7, #12]
 801578c:	490f      	ldr	r1, [pc, #60]	; (80157cc <UARTEx_SetNbDataToProcess+0x98>)
 801578e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015790:	fb93 f3f2 	sdiv	r3, r3, r2
 8015794:	b29a      	uxth	r2, r3
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801579c:	7bfb      	ldrb	r3, [r7, #15]
 801579e:	7b7a      	ldrb	r2, [r7, #13]
 80157a0:	4909      	ldr	r1, [pc, #36]	; (80157c8 <UARTEx_SetNbDataToProcess+0x94>)
 80157a2:	5c8a      	ldrb	r2, [r1, r2]
 80157a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80157a8:	7b7a      	ldrb	r2, [r7, #13]
 80157aa:	4908      	ldr	r1, [pc, #32]	; (80157cc <UARTEx_SetNbDataToProcess+0x98>)
 80157ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80157ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80157b2:	b29a      	uxth	r2, r3
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80157ba:	bf00      	nop
 80157bc:	3714      	adds	r7, #20
 80157be:	46bd      	mov	sp, r7
 80157c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c4:	4770      	bx	lr
 80157c6:	bf00      	nop
 80157c8:	240084d8 	.word	0x240084d8
 80157cc:	240084e0 	.word	0x240084e0

080157d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80157d0:	b084      	sub	sp, #16
 80157d2:	b580      	push	{r7, lr}
 80157d4:	b084      	sub	sp, #16
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	6078      	str	r0, [r7, #4]
 80157da:	f107 001c 	add.w	r0, r7, #28
 80157de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80157e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	d120      	bne.n	801582a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	68da      	ldr	r2, [r3, #12]
 80157f8:	4b2a      	ldr	r3, [pc, #168]	; (80158a4 <USB_CoreInit+0xd4>)
 80157fa:	4013      	ands	r3, r2
 80157fc:	687a      	ldr	r2, [r7, #4]
 80157fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801580c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801580e:	2b01      	cmp	r3, #1
 8015810:	d105      	bne.n	801581e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f001 fb14 	bl	8016e4c <USB_CoreReset>
 8015824:	4603      	mov	r3, r0
 8015826:	73fb      	strb	r3, [r7, #15]
 8015828:	e01a      	b.n	8015860 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	68db      	ldr	r3, [r3, #12]
 801582e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f001 fb08 	bl	8016e4c <USB_CoreReset>
 801583c:	4603      	mov	r3, r0
 801583e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8015840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015842:	2b00      	cmp	r3, #0
 8015844:	d106      	bne.n	8015854 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801584a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	639a      	str	r2, [r3, #56]	; 0x38
 8015852:	e005      	b.n	8015860 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015858:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8015860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015862:	2b01      	cmp	r3, #1
 8015864:	d116      	bne.n	8015894 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801586a:	b29a      	uxth	r2, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015874:	4b0c      	ldr	r3, [pc, #48]	; (80158a8 <USB_CoreInit+0xd8>)
 8015876:	4313      	orrs	r3, r2
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	689b      	ldr	r3, [r3, #8]
 8015880:	f043 0206 	orr.w	r2, r3, #6
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	689b      	ldr	r3, [r3, #8]
 801588c:	f043 0220 	orr.w	r2, r3, #32
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8015894:	7bfb      	ldrb	r3, [r7, #15]
}
 8015896:	4618      	mov	r0, r3
 8015898:	3710      	adds	r7, #16
 801589a:	46bd      	mov	sp, r7
 801589c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80158a0:	b004      	add	sp, #16
 80158a2:	4770      	bx	lr
 80158a4:	ffbdffbf 	.word	0xffbdffbf
 80158a8:	03ee0000 	.word	0x03ee0000

080158ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80158ac:	b480      	push	{r7}
 80158ae:	b087      	sub	sp, #28
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	4613      	mov	r3, r2
 80158b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80158ba:	79fb      	ldrb	r3, [r7, #7]
 80158bc:	2b02      	cmp	r3, #2
 80158be:	d165      	bne.n	801598c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	4a41      	ldr	r2, [pc, #260]	; (80159c8 <USB_SetTurnaroundTime+0x11c>)
 80158c4:	4293      	cmp	r3, r2
 80158c6:	d906      	bls.n	80158d6 <USB_SetTurnaroundTime+0x2a>
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	4a40      	ldr	r2, [pc, #256]	; (80159cc <USB_SetTurnaroundTime+0x120>)
 80158cc:	4293      	cmp	r3, r2
 80158ce:	d202      	bcs.n	80158d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80158d0:	230f      	movs	r3, #15
 80158d2:	617b      	str	r3, [r7, #20]
 80158d4:	e062      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	4a3c      	ldr	r2, [pc, #240]	; (80159cc <USB_SetTurnaroundTime+0x120>)
 80158da:	4293      	cmp	r3, r2
 80158dc:	d306      	bcc.n	80158ec <USB_SetTurnaroundTime+0x40>
 80158de:	68bb      	ldr	r3, [r7, #8]
 80158e0:	4a3b      	ldr	r2, [pc, #236]	; (80159d0 <USB_SetTurnaroundTime+0x124>)
 80158e2:	4293      	cmp	r3, r2
 80158e4:	d202      	bcs.n	80158ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80158e6:	230e      	movs	r3, #14
 80158e8:	617b      	str	r3, [r7, #20]
 80158ea:	e057      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80158ec:	68bb      	ldr	r3, [r7, #8]
 80158ee:	4a38      	ldr	r2, [pc, #224]	; (80159d0 <USB_SetTurnaroundTime+0x124>)
 80158f0:	4293      	cmp	r3, r2
 80158f2:	d306      	bcc.n	8015902 <USB_SetTurnaroundTime+0x56>
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	4a37      	ldr	r2, [pc, #220]	; (80159d4 <USB_SetTurnaroundTime+0x128>)
 80158f8:	4293      	cmp	r3, r2
 80158fa:	d202      	bcs.n	8015902 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80158fc:	230d      	movs	r3, #13
 80158fe:	617b      	str	r3, [r7, #20]
 8015900:	e04c      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	4a33      	ldr	r2, [pc, #204]	; (80159d4 <USB_SetTurnaroundTime+0x128>)
 8015906:	4293      	cmp	r3, r2
 8015908:	d306      	bcc.n	8015918 <USB_SetTurnaroundTime+0x6c>
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	4a32      	ldr	r2, [pc, #200]	; (80159d8 <USB_SetTurnaroundTime+0x12c>)
 801590e:	4293      	cmp	r3, r2
 8015910:	d802      	bhi.n	8015918 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8015912:	230c      	movs	r3, #12
 8015914:	617b      	str	r3, [r7, #20]
 8015916:	e041      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	4a2f      	ldr	r2, [pc, #188]	; (80159d8 <USB_SetTurnaroundTime+0x12c>)
 801591c:	4293      	cmp	r3, r2
 801591e:	d906      	bls.n	801592e <USB_SetTurnaroundTime+0x82>
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	4a2e      	ldr	r2, [pc, #184]	; (80159dc <USB_SetTurnaroundTime+0x130>)
 8015924:	4293      	cmp	r3, r2
 8015926:	d802      	bhi.n	801592e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8015928:	230b      	movs	r3, #11
 801592a:	617b      	str	r3, [r7, #20]
 801592c:	e036      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	4a2a      	ldr	r2, [pc, #168]	; (80159dc <USB_SetTurnaroundTime+0x130>)
 8015932:	4293      	cmp	r3, r2
 8015934:	d906      	bls.n	8015944 <USB_SetTurnaroundTime+0x98>
 8015936:	68bb      	ldr	r3, [r7, #8]
 8015938:	4a29      	ldr	r2, [pc, #164]	; (80159e0 <USB_SetTurnaroundTime+0x134>)
 801593a:	4293      	cmp	r3, r2
 801593c:	d802      	bhi.n	8015944 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801593e:	230a      	movs	r3, #10
 8015940:	617b      	str	r3, [r7, #20]
 8015942:	e02b      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	4a26      	ldr	r2, [pc, #152]	; (80159e0 <USB_SetTurnaroundTime+0x134>)
 8015948:	4293      	cmp	r3, r2
 801594a:	d906      	bls.n	801595a <USB_SetTurnaroundTime+0xae>
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	4a25      	ldr	r2, [pc, #148]	; (80159e4 <USB_SetTurnaroundTime+0x138>)
 8015950:	4293      	cmp	r3, r2
 8015952:	d202      	bcs.n	801595a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8015954:	2309      	movs	r3, #9
 8015956:	617b      	str	r3, [r7, #20]
 8015958:	e020      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	4a21      	ldr	r2, [pc, #132]	; (80159e4 <USB_SetTurnaroundTime+0x138>)
 801595e:	4293      	cmp	r3, r2
 8015960:	d306      	bcc.n	8015970 <USB_SetTurnaroundTime+0xc4>
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	4a20      	ldr	r2, [pc, #128]	; (80159e8 <USB_SetTurnaroundTime+0x13c>)
 8015966:	4293      	cmp	r3, r2
 8015968:	d802      	bhi.n	8015970 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801596a:	2308      	movs	r3, #8
 801596c:	617b      	str	r3, [r7, #20]
 801596e:	e015      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	4a1d      	ldr	r2, [pc, #116]	; (80159e8 <USB_SetTurnaroundTime+0x13c>)
 8015974:	4293      	cmp	r3, r2
 8015976:	d906      	bls.n	8015986 <USB_SetTurnaroundTime+0xda>
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	4a1c      	ldr	r2, [pc, #112]	; (80159ec <USB_SetTurnaroundTime+0x140>)
 801597c:	4293      	cmp	r3, r2
 801597e:	d202      	bcs.n	8015986 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8015980:	2307      	movs	r3, #7
 8015982:	617b      	str	r3, [r7, #20]
 8015984:	e00a      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015986:	2306      	movs	r3, #6
 8015988:	617b      	str	r3, [r7, #20]
 801598a:	e007      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801598c:	79fb      	ldrb	r3, [r7, #7]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d102      	bne.n	8015998 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8015992:	2309      	movs	r3, #9
 8015994:	617b      	str	r3, [r7, #20]
 8015996:	e001      	b.n	801599c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015998:	2309      	movs	r3, #9
 801599a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	68db      	ldr	r3, [r3, #12]
 80159a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	68da      	ldr	r2, [r3, #12]
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	029b      	lsls	r3, r3, #10
 80159b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80159b4:	431a      	orrs	r2, r3
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80159ba:	2300      	movs	r3, #0
}
 80159bc:	4618      	mov	r0, r3
 80159be:	371c      	adds	r7, #28
 80159c0:	46bd      	mov	sp, r7
 80159c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c6:	4770      	bx	lr
 80159c8:	00d8acbf 	.word	0x00d8acbf
 80159cc:	00e4e1c0 	.word	0x00e4e1c0
 80159d0:	00f42400 	.word	0x00f42400
 80159d4:	01067380 	.word	0x01067380
 80159d8:	011a499f 	.word	0x011a499f
 80159dc:	01312cff 	.word	0x01312cff
 80159e0:	014ca43f 	.word	0x014ca43f
 80159e4:	016e3600 	.word	0x016e3600
 80159e8:	01a6ab1f 	.word	0x01a6ab1f
 80159ec:	01e84800 	.word	0x01e84800

080159f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80159f0:	b480      	push	{r7}
 80159f2:	b083      	sub	sp, #12
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	689b      	ldr	r3, [r3, #8]
 80159fc:	f043 0201 	orr.w	r2, r3, #1
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015a04:	2300      	movs	r3, #0
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	370c      	adds	r7, #12
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr

08015a12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015a12:	b480      	push	{r7}
 8015a14:	b083      	sub	sp, #12
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	689b      	ldr	r3, [r3, #8]
 8015a1e:	f023 0201 	bic.w	r2, r3, #1
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015a26:	2300      	movs	r3, #0
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	370c      	adds	r7, #12
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a32:	4770      	bx	lr

08015a34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b082      	sub	sp, #8
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
 8015a3c:	460b      	mov	r3, r1
 8015a3e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	68db      	ldr	r3, [r3, #12]
 8015a44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8015a4c:	78fb      	ldrb	r3, [r7, #3]
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	d106      	bne.n	8015a60 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	68db      	ldr	r3, [r3, #12]
 8015a56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	60da      	str	r2, [r3, #12]
 8015a5e:	e00b      	b.n	8015a78 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8015a60:	78fb      	ldrb	r3, [r7, #3]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d106      	bne.n	8015a74 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	68db      	ldr	r3, [r3, #12]
 8015a6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	60da      	str	r2, [r3, #12]
 8015a72:	e001      	b.n	8015a78 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8015a74:	2301      	movs	r3, #1
 8015a76:	e003      	b.n	8015a80 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8015a78:	2032      	movs	r0, #50	; 0x32
 8015a7a:	f7f5 fc65 	bl	800b348 <HAL_Delay>

  return HAL_OK;
 8015a7e:	2300      	movs	r3, #0
}
 8015a80:	4618      	mov	r0, r3
 8015a82:	3708      	adds	r7, #8
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015a88:	b084      	sub	sp, #16
 8015a8a:	b580      	push	{r7, lr}
 8015a8c:	b086      	sub	sp, #24
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	6078      	str	r0, [r7, #4]
 8015a92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	613b      	str	r3, [r7, #16]
 8015aa6:	e009      	b.n	8015abc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	3340      	adds	r3, #64	; 0x40
 8015aae:	009b      	lsls	r3, r3, #2
 8015ab0:	4413      	add	r3, r2
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	3301      	adds	r3, #1
 8015aba:	613b      	str	r3, [r7, #16]
 8015abc:	693b      	ldr	r3, [r7, #16]
 8015abe:	2b0e      	cmp	r3, #14
 8015ac0:	d9f2      	bls.n	8015aa8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d11c      	bne.n	8015b02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	68fa      	ldr	r2, [r7, #12]
 8015ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015ad6:	f043 0302 	orr.w	r3, r3, #2
 8015ada:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ae0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	601a      	str	r2, [r3, #0]
 8015b00:	e005      	b.n	8015b0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015b14:	461a      	mov	r2, r3
 8015b16:	2300      	movs	r3, #0
 8015b18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b20:	4619      	mov	r1, r3
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b28:	461a      	mov	r2, r3
 8015b2a:	680b      	ldr	r3, [r1, #0]
 8015b2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b30:	2b01      	cmp	r3, #1
 8015b32:	d10c      	bne.n	8015b4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d104      	bne.n	8015b44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	6878      	ldr	r0, [r7, #4]
 8015b3e:	f000 f949 	bl	8015dd4 <USB_SetDevSpeed>
 8015b42:	e008      	b.n	8015b56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015b44:	2101      	movs	r1, #1
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f000 f944 	bl	8015dd4 <USB_SetDevSpeed>
 8015b4c:	e003      	b.n	8015b56 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015b4e:	2103      	movs	r1, #3
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f000 f93f 	bl	8015dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015b56:	2110      	movs	r1, #16
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f000 f8f3 	bl	8015d44 <USB_FlushTxFifo>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d001      	beq.n	8015b68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8015b64:	2301      	movs	r3, #1
 8015b66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f000 f911 	bl	8015d90 <USB_FlushRxFifo>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d001      	beq.n	8015b78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8015b74:	2301      	movs	r3, #1
 8015b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b7e:	461a      	mov	r2, r3
 8015b80:	2300      	movs	r3, #0
 8015b82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b96:	461a      	mov	r2, r3
 8015b98:	2300      	movs	r3, #0
 8015b9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	613b      	str	r3, [r7, #16]
 8015ba0:	e043      	b.n	8015c2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	015a      	lsls	r2, r3, #5
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	4413      	add	r3, r2
 8015baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015bb8:	d118      	bne.n	8015bec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d10a      	bne.n	8015bd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	015a      	lsls	r2, r3, #5
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bcc:	461a      	mov	r2, r3
 8015bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015bd2:	6013      	str	r3, [r2, #0]
 8015bd4:	e013      	b.n	8015bfe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8015bd6:	693b      	ldr	r3, [r7, #16]
 8015bd8:	015a      	lsls	r2, r3, #5
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	4413      	add	r3, r2
 8015bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015be2:	461a      	mov	r2, r3
 8015be4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015be8:	6013      	str	r3, [r2, #0]
 8015bea:	e008      	b.n	8015bfe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	015a      	lsls	r2, r3, #5
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	4413      	add	r3, r2
 8015bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bf8:	461a      	mov	r2, r3
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	015a      	lsls	r2, r3, #5
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	4413      	add	r3, r2
 8015c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	015a      	lsls	r2, r3, #5
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	4413      	add	r3, r2
 8015c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c1c:	461a      	mov	r2, r3
 8015c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	3301      	adds	r3, #1
 8015c28:	613b      	str	r3, [r7, #16]
 8015c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2c:	693a      	ldr	r2, [r7, #16]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d3b7      	bcc.n	8015ba2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015c32:	2300      	movs	r3, #0
 8015c34:	613b      	str	r3, [r7, #16]
 8015c36:	e043      	b.n	8015cc0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	015a      	lsls	r2, r3, #5
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	4413      	add	r3, r2
 8015c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015c4e:	d118      	bne.n	8015c82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d10a      	bne.n	8015c6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	015a      	lsls	r2, r3, #5
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c62:	461a      	mov	r2, r3
 8015c64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015c68:	6013      	str	r3, [r2, #0]
 8015c6a:	e013      	b.n	8015c94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	015a      	lsls	r2, r3, #5
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	4413      	add	r3, r2
 8015c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c78:	461a      	mov	r2, r3
 8015c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015c7e:	6013      	str	r3, [r2, #0]
 8015c80:	e008      	b.n	8015c94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	015a      	lsls	r2, r3, #5
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	4413      	add	r3, r2
 8015c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c8e:	461a      	mov	r2, r3
 8015c90:	2300      	movs	r3, #0
 8015c92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	015a      	lsls	r2, r3, #5
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	4413      	add	r3, r2
 8015c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	015a      	lsls	r2, r3, #5
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	4413      	add	r3, r2
 8015cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cb2:	461a      	mov	r2, r3
 8015cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	613b      	str	r3, [r7, #16]
 8015cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc2:	693a      	ldr	r2, [r7, #16]
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d3b7      	bcc.n	8015c38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015cce:	691b      	ldr	r3, [r3, #16]
 8015cd0:	68fa      	ldr	r2, [r7, #12]
 8015cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015cda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015ce8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d105      	bne.n	8015cfc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	699b      	ldr	r3, [r3, #24]
 8015cf4:	f043 0210 	orr.w	r2, r3, #16
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	699a      	ldr	r2, [r3, #24]
 8015d00:	4b0e      	ldr	r3, [pc, #56]	; (8015d3c <USB_DevInit+0x2b4>)
 8015d02:	4313      	orrs	r3, r2
 8015d04:	687a      	ldr	r2, [r7, #4]
 8015d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d005      	beq.n	8015d1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	699b      	ldr	r3, [r3, #24]
 8015d12:	f043 0208 	orr.w	r2, r3, #8
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d1c:	2b01      	cmp	r3, #1
 8015d1e:	d105      	bne.n	8015d2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	699a      	ldr	r2, [r3, #24]
 8015d24:	4b06      	ldr	r3, [pc, #24]	; (8015d40 <USB_DevInit+0x2b8>)
 8015d26:	4313      	orrs	r3, r2
 8015d28:	687a      	ldr	r2, [r7, #4]
 8015d2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3718      	adds	r7, #24
 8015d32:	46bd      	mov	sp, r7
 8015d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015d38:	b004      	add	sp, #16
 8015d3a:	4770      	bx	lr
 8015d3c:	803c3800 	.word	0x803c3800
 8015d40:	40000004 	.word	0x40000004

08015d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015d44:	b480      	push	{r7}
 8015d46:	b085      	sub	sp, #20
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	019b      	lsls	r3, r3, #6
 8015d56:	f043 0220 	orr.w	r2, r3, #32
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	3301      	adds	r3, #1
 8015d62:	60fb      	str	r3, [r7, #12]
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	4a09      	ldr	r2, [pc, #36]	; (8015d8c <USB_FlushTxFifo+0x48>)
 8015d68:	4293      	cmp	r3, r2
 8015d6a:	d901      	bls.n	8015d70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8015d6c:	2303      	movs	r3, #3
 8015d6e:	e006      	b.n	8015d7e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	691b      	ldr	r3, [r3, #16]
 8015d74:	f003 0320 	and.w	r3, r3, #32
 8015d78:	2b20      	cmp	r3, #32
 8015d7a:	d0f0      	beq.n	8015d5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8015d7c:	2300      	movs	r3, #0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3714      	adds	r7, #20
 8015d82:	46bd      	mov	sp, r7
 8015d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d88:	4770      	bx	lr
 8015d8a:	bf00      	nop
 8015d8c:	00030d40 	.word	0x00030d40

08015d90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015d90:	b480      	push	{r7}
 8015d92:	b085      	sub	sp, #20
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2210      	movs	r2, #16
 8015da0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	3301      	adds	r3, #1
 8015da6:	60fb      	str	r3, [r7, #12]
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	4a09      	ldr	r2, [pc, #36]	; (8015dd0 <USB_FlushRxFifo+0x40>)
 8015dac:	4293      	cmp	r3, r2
 8015dae:	d901      	bls.n	8015db4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8015db0:	2303      	movs	r3, #3
 8015db2:	e006      	b.n	8015dc2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	691b      	ldr	r3, [r3, #16]
 8015db8:	f003 0310 	and.w	r3, r3, #16
 8015dbc:	2b10      	cmp	r3, #16
 8015dbe:	d0f0      	beq.n	8015da2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8015dc0:	2300      	movs	r3, #0
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3714      	adds	r7, #20
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dcc:	4770      	bx	lr
 8015dce:	bf00      	nop
 8015dd0:	00030d40 	.word	0x00030d40

08015dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b085      	sub	sp, #20
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	460b      	mov	r3, r1
 8015dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	78fb      	ldrb	r3, [r7, #3]
 8015dee:	68f9      	ldr	r1, [r7, #12]
 8015df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015df4:	4313      	orrs	r3, r2
 8015df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8015df8:	2300      	movs	r3, #0
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3714      	adds	r7, #20
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e04:	4770      	bx	lr

08015e06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8015e06:	b480      	push	{r7}
 8015e08:	b087      	sub	sp, #28
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e18:	689b      	ldr	r3, [r3, #8]
 8015e1a:	f003 0306 	and.w	r3, r3, #6
 8015e1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d102      	bne.n	8015e2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8015e26:	2300      	movs	r3, #0
 8015e28:	75fb      	strb	r3, [r7, #23]
 8015e2a:	e00a      	b.n	8015e42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2b02      	cmp	r3, #2
 8015e30:	d002      	beq.n	8015e38 <USB_GetDevSpeed+0x32>
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	2b06      	cmp	r3, #6
 8015e36:	d102      	bne.n	8015e3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015e38:	2302      	movs	r3, #2
 8015e3a:	75fb      	strb	r3, [r7, #23]
 8015e3c:	e001      	b.n	8015e42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8015e3e:	230f      	movs	r3, #15
 8015e40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8015e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e44:	4618      	mov	r0, r3
 8015e46:	371c      	adds	r7, #28
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4e:	4770      	bx	lr

08015e50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015e50:	b480      	push	{r7}
 8015e52:	b085      	sub	sp, #20
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	781b      	ldrb	r3, [r3, #0]
 8015e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	785b      	ldrb	r3, [r3, #1]
 8015e68:	2b01      	cmp	r3, #1
 8015e6a:	d139      	bne.n	8015ee0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e72:	69da      	ldr	r2, [r3, #28]
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	781b      	ldrb	r3, [r3, #0]
 8015e78:	f003 030f 	and.w	r3, r3, #15
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	68f9      	ldr	r1, [r7, #12]
 8015e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015e8a:	4313      	orrs	r3, r2
 8015e8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	015a      	lsls	r2, r3, #5
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	4413      	add	r3, r2
 8015e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d153      	bne.n	8015f4c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	015a      	lsls	r2, r3, #5
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	4413      	add	r3, r2
 8015eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015eb0:	681a      	ldr	r2, [r3, #0]
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	689b      	ldr	r3, [r3, #8]
 8015eb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	78db      	ldrb	r3, [r3, #3]
 8015ebe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015ec0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	059b      	lsls	r3, r3, #22
 8015ec6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015ec8:	431a      	orrs	r2, r3
 8015eca:	68bb      	ldr	r3, [r7, #8]
 8015ecc:	0159      	lsls	r1, r3, #5
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	440b      	add	r3, r1
 8015ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	4b20      	ldr	r3, [pc, #128]	; (8015f5c <USB_ActivateEndpoint+0x10c>)
 8015eda:	4313      	orrs	r3, r2
 8015edc:	600b      	str	r3, [r1, #0]
 8015ede:	e035      	b.n	8015f4c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ee6:	69da      	ldr	r2, [r3, #28]
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	f003 030f 	and.w	r3, r3, #15
 8015ef0:	2101      	movs	r1, #1
 8015ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8015ef6:	041b      	lsls	r3, r3, #16
 8015ef8:	68f9      	ldr	r1, [r7, #12]
 8015efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015efe:	4313      	orrs	r3, r2
 8015f00:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	015a      	lsls	r2, r3, #5
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	4413      	add	r3, r2
 8015f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d119      	bne.n	8015f4c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	015a      	lsls	r2, r3, #5
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	4413      	add	r3, r2
 8015f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f24:	681a      	ldr	r2, [r3, #0]
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	689b      	ldr	r3, [r3, #8]
 8015f2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	78db      	ldrb	r3, [r3, #3]
 8015f32:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015f34:	430b      	orrs	r3, r1
 8015f36:	431a      	orrs	r2, r3
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	0159      	lsls	r1, r3, #5
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	440b      	add	r3, r1
 8015f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f44:	4619      	mov	r1, r3
 8015f46:	4b05      	ldr	r3, [pc, #20]	; (8015f5c <USB_ActivateEndpoint+0x10c>)
 8015f48:	4313      	orrs	r3, r2
 8015f4a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015f4c:	2300      	movs	r3, #0
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3714      	adds	r7, #20
 8015f52:	46bd      	mov	sp, r7
 8015f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop
 8015f5c:	10008000 	.word	0x10008000

08015f60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015f60:	b480      	push	{r7}
 8015f62:	b085      	sub	sp, #20
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	785b      	ldrb	r3, [r3, #1]
 8015f78:	2b01      	cmp	r3, #1
 8015f7a:	d161      	bne.n	8016040 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	015a      	lsls	r2, r3, #5
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	4413      	add	r3, r2
 8015f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015f92:	d11f      	bne.n	8015fd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	015a      	lsls	r2, r3, #5
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	4413      	add	r3, r2
 8015f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	68ba      	ldr	r2, [r7, #8]
 8015fa4:	0151      	lsls	r1, r2, #5
 8015fa6:	68fa      	ldr	r2, [r7, #12]
 8015fa8:	440a      	add	r2, r1
 8015faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015fb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	015a      	lsls	r2, r3, #5
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	4413      	add	r3, r2
 8015fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	68ba      	ldr	r2, [r7, #8]
 8015fc4:	0151      	lsls	r1, r2, #5
 8015fc6:	68fa      	ldr	r2, [r7, #12]
 8015fc8:	440a      	add	r2, r1
 8015fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	f003 030f 	and.w	r3, r3, #15
 8015fe4:	2101      	movs	r1, #1
 8015fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	43db      	mvns	r3, r3
 8015fee:	68f9      	ldr	r1, [r7, #12]
 8015ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015ff4:	4013      	ands	r3, r2
 8015ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ffe:	69da      	ldr	r2, [r3, #28]
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	f003 030f 	and.w	r3, r3, #15
 8016008:	2101      	movs	r1, #1
 801600a:	fa01 f303 	lsl.w	r3, r1, r3
 801600e:	b29b      	uxth	r3, r3
 8016010:	43db      	mvns	r3, r3
 8016012:	68f9      	ldr	r1, [r7, #12]
 8016014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016018:	4013      	ands	r3, r2
 801601a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	015a      	lsls	r2, r3, #5
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	4413      	add	r3, r2
 8016024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	0159      	lsls	r1, r3, #5
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	440b      	add	r3, r1
 8016032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016036:	4619      	mov	r1, r3
 8016038:	4b35      	ldr	r3, [pc, #212]	; (8016110 <USB_DeactivateEndpoint+0x1b0>)
 801603a:	4013      	ands	r3, r2
 801603c:	600b      	str	r3, [r1, #0]
 801603e:	e060      	b.n	8016102 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	015a      	lsls	r2, r3, #5
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	4413      	add	r3, r2
 8016048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016056:	d11f      	bne.n	8016098 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	015a      	lsls	r2, r3, #5
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	4413      	add	r3, r2
 8016060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	68ba      	ldr	r2, [r7, #8]
 8016068:	0151      	lsls	r1, r2, #5
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	440a      	add	r2, r1
 801606e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016076:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	015a      	lsls	r2, r3, #5
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	4413      	add	r3, r2
 8016080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	68ba      	ldr	r2, [r7, #8]
 8016088:	0151      	lsls	r1, r2, #5
 801608a:	68fa      	ldr	r2, [r7, #12]
 801608c:	440a      	add	r2, r1
 801608e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801609e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	f003 030f 	and.w	r3, r3, #15
 80160a8:	2101      	movs	r1, #1
 80160aa:	fa01 f303 	lsl.w	r3, r1, r3
 80160ae:	041b      	lsls	r3, r3, #16
 80160b0:	43db      	mvns	r3, r3
 80160b2:	68f9      	ldr	r1, [r7, #12]
 80160b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80160b8:	4013      	ands	r3, r2
 80160ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80160c2:	69da      	ldr	r2, [r3, #28]
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	f003 030f 	and.w	r3, r3, #15
 80160cc:	2101      	movs	r1, #1
 80160ce:	fa01 f303 	lsl.w	r3, r1, r3
 80160d2:	041b      	lsls	r3, r3, #16
 80160d4:	43db      	mvns	r3, r3
 80160d6:	68f9      	ldr	r1, [r7, #12]
 80160d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80160dc:	4013      	ands	r3, r2
 80160de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	015a      	lsls	r2, r3, #5
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	4413      	add	r3, r2
 80160e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	0159      	lsls	r1, r3, #5
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	440b      	add	r3, r1
 80160f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160fa:	4619      	mov	r1, r3
 80160fc:	4b05      	ldr	r3, [pc, #20]	; (8016114 <USB_DeactivateEndpoint+0x1b4>)
 80160fe:	4013      	ands	r3, r2
 8016100:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8016102:	2300      	movs	r3, #0
}
 8016104:	4618      	mov	r0, r3
 8016106:	3714      	adds	r7, #20
 8016108:	46bd      	mov	sp, r7
 801610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610e:	4770      	bx	lr
 8016110:	ec337800 	.word	0xec337800
 8016114:	eff37800 	.word	0xeff37800

08016118 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b08a      	sub	sp, #40	; 0x28
 801611c:	af02      	add	r7, sp, #8
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	4613      	mov	r3, r2
 8016124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801612a:	68bb      	ldr	r3, [r7, #8]
 801612c:	781b      	ldrb	r3, [r3, #0]
 801612e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	785b      	ldrb	r3, [r3, #1]
 8016134:	2b01      	cmp	r3, #1
 8016136:	f040 8163 	bne.w	8016400 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801613a:	68bb      	ldr	r3, [r7, #8]
 801613c:	695b      	ldr	r3, [r3, #20]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d132      	bne.n	80161a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016142:	69bb      	ldr	r3, [r7, #24]
 8016144:	015a      	lsls	r2, r3, #5
 8016146:	69fb      	ldr	r3, [r7, #28]
 8016148:	4413      	add	r3, r2
 801614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801614e:	691a      	ldr	r2, [r3, #16]
 8016150:	69bb      	ldr	r3, [r7, #24]
 8016152:	0159      	lsls	r1, r3, #5
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	440b      	add	r3, r1
 8016158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801615c:	4619      	mov	r1, r3
 801615e:	4ba5      	ldr	r3, [pc, #660]	; (80163f4 <USB_EPStartXfer+0x2dc>)
 8016160:	4013      	ands	r3, r2
 8016162:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016164:	69bb      	ldr	r3, [r7, #24]
 8016166:	015a      	lsls	r2, r3, #5
 8016168:	69fb      	ldr	r3, [r7, #28]
 801616a:	4413      	add	r3, r2
 801616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016170:	691b      	ldr	r3, [r3, #16]
 8016172:	69ba      	ldr	r2, [r7, #24]
 8016174:	0151      	lsls	r1, r2, #5
 8016176:	69fa      	ldr	r2, [r7, #28]
 8016178:	440a      	add	r2, r1
 801617a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801617e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016184:	69bb      	ldr	r3, [r7, #24]
 8016186:	015a      	lsls	r2, r3, #5
 8016188:	69fb      	ldr	r3, [r7, #28]
 801618a:	4413      	add	r3, r2
 801618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016190:	691a      	ldr	r2, [r3, #16]
 8016192:	69bb      	ldr	r3, [r7, #24]
 8016194:	0159      	lsls	r1, r3, #5
 8016196:	69fb      	ldr	r3, [r7, #28]
 8016198:	440b      	add	r3, r1
 801619a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801619e:	4619      	mov	r1, r3
 80161a0:	4b95      	ldr	r3, [pc, #596]	; (80163f8 <USB_EPStartXfer+0x2e0>)
 80161a2:	4013      	ands	r3, r2
 80161a4:	610b      	str	r3, [r1, #16]
 80161a6:	e074      	b.n	8016292 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80161a8:	69bb      	ldr	r3, [r7, #24]
 80161aa:	015a      	lsls	r2, r3, #5
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	4413      	add	r3, r2
 80161b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161b4:	691a      	ldr	r2, [r3, #16]
 80161b6:	69bb      	ldr	r3, [r7, #24]
 80161b8:	0159      	lsls	r1, r3, #5
 80161ba:	69fb      	ldr	r3, [r7, #28]
 80161bc:	440b      	add	r3, r1
 80161be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161c2:	4619      	mov	r1, r3
 80161c4:	4b8c      	ldr	r3, [pc, #560]	; (80163f8 <USB_EPStartXfer+0x2e0>)
 80161c6:	4013      	ands	r3, r2
 80161c8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80161ca:	69bb      	ldr	r3, [r7, #24]
 80161cc:	015a      	lsls	r2, r3, #5
 80161ce:	69fb      	ldr	r3, [r7, #28]
 80161d0:	4413      	add	r3, r2
 80161d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161d6:	691a      	ldr	r2, [r3, #16]
 80161d8:	69bb      	ldr	r3, [r7, #24]
 80161da:	0159      	lsls	r1, r3, #5
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	440b      	add	r3, r1
 80161e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161e4:	4619      	mov	r1, r3
 80161e6:	4b83      	ldr	r3, [pc, #524]	; (80163f4 <USB_EPStartXfer+0x2dc>)
 80161e8:	4013      	ands	r3, r2
 80161ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80161ec:	69bb      	ldr	r3, [r7, #24]
 80161ee:	015a      	lsls	r2, r3, #5
 80161f0:	69fb      	ldr	r3, [r7, #28]
 80161f2:	4413      	add	r3, r2
 80161f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161f8:	691a      	ldr	r2, [r3, #16]
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	6959      	ldr	r1, [r3, #20]
 80161fe:	68bb      	ldr	r3, [r7, #8]
 8016200:	689b      	ldr	r3, [r3, #8]
 8016202:	440b      	add	r3, r1
 8016204:	1e59      	subs	r1, r3, #1
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	689b      	ldr	r3, [r3, #8]
 801620a:	fbb1 f3f3 	udiv	r3, r1, r3
 801620e:	04d9      	lsls	r1, r3, #19
 8016210:	4b7a      	ldr	r3, [pc, #488]	; (80163fc <USB_EPStartXfer+0x2e4>)
 8016212:	400b      	ands	r3, r1
 8016214:	69b9      	ldr	r1, [r7, #24]
 8016216:	0148      	lsls	r0, r1, #5
 8016218:	69f9      	ldr	r1, [r7, #28]
 801621a:	4401      	add	r1, r0
 801621c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016220:	4313      	orrs	r3, r2
 8016222:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016224:	69bb      	ldr	r3, [r7, #24]
 8016226:	015a      	lsls	r2, r3, #5
 8016228:	69fb      	ldr	r3, [r7, #28]
 801622a:	4413      	add	r3, r2
 801622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016230:	691a      	ldr	r2, [r3, #16]
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	695b      	ldr	r3, [r3, #20]
 8016236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801623a:	69b9      	ldr	r1, [r7, #24]
 801623c:	0148      	lsls	r0, r1, #5
 801623e:	69f9      	ldr	r1, [r7, #28]
 8016240:	4401      	add	r1, r0
 8016242:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016246:	4313      	orrs	r3, r2
 8016248:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	78db      	ldrb	r3, [r3, #3]
 801624e:	2b01      	cmp	r3, #1
 8016250:	d11f      	bne.n	8016292 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	015a      	lsls	r2, r3, #5
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	4413      	add	r3, r2
 801625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801625e:	691b      	ldr	r3, [r3, #16]
 8016260:	69ba      	ldr	r2, [r7, #24]
 8016262:	0151      	lsls	r1, r2, #5
 8016264:	69fa      	ldr	r2, [r7, #28]
 8016266:	440a      	add	r2, r1
 8016268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801626c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8016270:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8016272:	69bb      	ldr	r3, [r7, #24]
 8016274:	015a      	lsls	r2, r3, #5
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	4413      	add	r3, r2
 801627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801627e:	691b      	ldr	r3, [r3, #16]
 8016280:	69ba      	ldr	r2, [r7, #24]
 8016282:	0151      	lsls	r1, r2, #5
 8016284:	69fa      	ldr	r2, [r7, #28]
 8016286:	440a      	add	r2, r1
 8016288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801628c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016290:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8016292:	79fb      	ldrb	r3, [r7, #7]
 8016294:	2b01      	cmp	r3, #1
 8016296:	d14b      	bne.n	8016330 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	691b      	ldr	r3, [r3, #16]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d009      	beq.n	80162b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80162a0:	69bb      	ldr	r3, [r7, #24]
 80162a2:	015a      	lsls	r2, r3, #5
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	4413      	add	r3, r2
 80162a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80162ac:	461a      	mov	r2, r3
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	691b      	ldr	r3, [r3, #16]
 80162b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	78db      	ldrb	r3, [r3, #3]
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	d128      	bne.n	801630e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80162bc:	69fb      	ldr	r3, [r7, #28]
 80162be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162c2:	689b      	ldr	r3, [r3, #8]
 80162c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d110      	bne.n	80162ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80162cc:	69bb      	ldr	r3, [r7, #24]
 80162ce:	015a      	lsls	r2, r3, #5
 80162d0:	69fb      	ldr	r3, [r7, #28]
 80162d2:	4413      	add	r3, r2
 80162d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	69ba      	ldr	r2, [r7, #24]
 80162dc:	0151      	lsls	r1, r2, #5
 80162de:	69fa      	ldr	r2, [r7, #28]
 80162e0:	440a      	add	r2, r1
 80162e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80162e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80162ea:	6013      	str	r3, [r2, #0]
 80162ec:	e00f      	b.n	801630e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80162ee:	69bb      	ldr	r3, [r7, #24]
 80162f0:	015a      	lsls	r2, r3, #5
 80162f2:	69fb      	ldr	r3, [r7, #28]
 80162f4:	4413      	add	r3, r2
 80162f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	69ba      	ldr	r2, [r7, #24]
 80162fe:	0151      	lsls	r1, r2, #5
 8016300:	69fa      	ldr	r2, [r7, #28]
 8016302:	440a      	add	r2, r1
 8016304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801630c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801630e:	69bb      	ldr	r3, [r7, #24]
 8016310:	015a      	lsls	r2, r3, #5
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	4413      	add	r3, r2
 8016316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	69ba      	ldr	r2, [r7, #24]
 801631e:	0151      	lsls	r1, r2, #5
 8016320:	69fa      	ldr	r2, [r7, #28]
 8016322:	440a      	add	r2, r1
 8016324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016328:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801632c:	6013      	str	r3, [r2, #0]
 801632e:	e133      	b.n	8016598 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016330:	69bb      	ldr	r3, [r7, #24]
 8016332:	015a      	lsls	r2, r3, #5
 8016334:	69fb      	ldr	r3, [r7, #28]
 8016336:	4413      	add	r3, r2
 8016338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	69ba      	ldr	r2, [r7, #24]
 8016340:	0151      	lsls	r1, r2, #5
 8016342:	69fa      	ldr	r2, [r7, #28]
 8016344:	440a      	add	r2, r1
 8016346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801634a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801634e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	78db      	ldrb	r3, [r3, #3]
 8016354:	2b01      	cmp	r3, #1
 8016356:	d015      	beq.n	8016384 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	695b      	ldr	r3, [r3, #20]
 801635c:	2b00      	cmp	r3, #0
 801635e:	f000 811b 	beq.w	8016598 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016362:	69fb      	ldr	r3, [r7, #28]
 8016364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	781b      	ldrb	r3, [r3, #0]
 801636e:	f003 030f 	and.w	r3, r3, #15
 8016372:	2101      	movs	r1, #1
 8016374:	fa01 f303 	lsl.w	r3, r1, r3
 8016378:	69f9      	ldr	r1, [r7, #28]
 801637a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801637e:	4313      	orrs	r3, r2
 8016380:	634b      	str	r3, [r1, #52]	; 0x34
 8016382:	e109      	b.n	8016598 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016384:	69fb      	ldr	r3, [r7, #28]
 8016386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801638a:	689b      	ldr	r3, [r3, #8]
 801638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016390:	2b00      	cmp	r3, #0
 8016392:	d110      	bne.n	80163b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	015a      	lsls	r2, r3, #5
 8016398:	69fb      	ldr	r3, [r7, #28]
 801639a:	4413      	add	r3, r2
 801639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	69ba      	ldr	r2, [r7, #24]
 80163a4:	0151      	lsls	r1, r2, #5
 80163a6:	69fa      	ldr	r2, [r7, #28]
 80163a8:	440a      	add	r2, r1
 80163aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80163ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80163b2:	6013      	str	r3, [r2, #0]
 80163b4:	e00f      	b.n	80163d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80163b6:	69bb      	ldr	r3, [r7, #24]
 80163b8:	015a      	lsls	r2, r3, #5
 80163ba:	69fb      	ldr	r3, [r7, #28]
 80163bc:	4413      	add	r3, r2
 80163be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	69ba      	ldr	r2, [r7, #24]
 80163c6:	0151      	lsls	r1, r2, #5
 80163c8:	69fa      	ldr	r2, [r7, #28]
 80163ca:	440a      	add	r2, r1
 80163cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80163d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80163d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	68d9      	ldr	r1, [r3, #12]
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	781a      	ldrb	r2, [r3, #0]
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	695b      	ldr	r3, [r3, #20]
 80163e2:	b298      	uxth	r0, r3
 80163e4:	79fb      	ldrb	r3, [r7, #7]
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	4603      	mov	r3, r0
 80163ea:	68f8      	ldr	r0, [r7, #12]
 80163ec:	f000 fa38 	bl	8016860 <USB_WritePacket>
 80163f0:	e0d2      	b.n	8016598 <USB_EPStartXfer+0x480>
 80163f2:	bf00      	nop
 80163f4:	e007ffff 	.word	0xe007ffff
 80163f8:	fff80000 	.word	0xfff80000
 80163fc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8016400:	69bb      	ldr	r3, [r7, #24]
 8016402:	015a      	lsls	r2, r3, #5
 8016404:	69fb      	ldr	r3, [r7, #28]
 8016406:	4413      	add	r3, r2
 8016408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801640c:	691a      	ldr	r2, [r3, #16]
 801640e:	69bb      	ldr	r3, [r7, #24]
 8016410:	0159      	lsls	r1, r3, #5
 8016412:	69fb      	ldr	r3, [r7, #28]
 8016414:	440b      	add	r3, r1
 8016416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801641a:	4619      	mov	r1, r3
 801641c:	4b61      	ldr	r3, [pc, #388]	; (80165a4 <USB_EPStartXfer+0x48c>)
 801641e:	4013      	ands	r3, r2
 8016420:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8016422:	69bb      	ldr	r3, [r7, #24]
 8016424:	015a      	lsls	r2, r3, #5
 8016426:	69fb      	ldr	r3, [r7, #28]
 8016428:	4413      	add	r3, r2
 801642a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801642e:	691a      	ldr	r2, [r3, #16]
 8016430:	69bb      	ldr	r3, [r7, #24]
 8016432:	0159      	lsls	r1, r3, #5
 8016434:	69fb      	ldr	r3, [r7, #28]
 8016436:	440b      	add	r3, r1
 8016438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801643c:	4619      	mov	r1, r3
 801643e:	4b5a      	ldr	r3, [pc, #360]	; (80165a8 <USB_EPStartXfer+0x490>)
 8016440:	4013      	ands	r3, r2
 8016442:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	695b      	ldr	r3, [r3, #20]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d123      	bne.n	8016494 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801644c:	69bb      	ldr	r3, [r7, #24]
 801644e:	015a      	lsls	r2, r3, #5
 8016450:	69fb      	ldr	r3, [r7, #28]
 8016452:	4413      	add	r3, r2
 8016454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016458:	691a      	ldr	r2, [r3, #16]
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	689b      	ldr	r3, [r3, #8]
 801645e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016462:	69b9      	ldr	r1, [r7, #24]
 8016464:	0148      	lsls	r0, r1, #5
 8016466:	69f9      	ldr	r1, [r7, #28]
 8016468:	4401      	add	r1, r0
 801646a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801646e:	4313      	orrs	r3, r2
 8016470:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016472:	69bb      	ldr	r3, [r7, #24]
 8016474:	015a      	lsls	r2, r3, #5
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	4413      	add	r3, r2
 801647a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801647e:	691b      	ldr	r3, [r3, #16]
 8016480:	69ba      	ldr	r2, [r7, #24]
 8016482:	0151      	lsls	r1, r2, #5
 8016484:	69fa      	ldr	r2, [r7, #28]
 8016486:	440a      	add	r2, r1
 8016488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801648c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016490:	6113      	str	r3, [r2, #16]
 8016492:	e033      	b.n	80164fc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	695a      	ldr	r2, [r3, #20]
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	689b      	ldr	r3, [r3, #8]
 801649c:	4413      	add	r3, r2
 801649e:	1e5a      	subs	r2, r3, #1
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	689b      	ldr	r3, [r3, #8]
 80164a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80164a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80164aa:	69bb      	ldr	r3, [r7, #24]
 80164ac:	015a      	lsls	r2, r3, #5
 80164ae:	69fb      	ldr	r3, [r7, #28]
 80164b0:	4413      	add	r3, r2
 80164b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164b6:	691a      	ldr	r2, [r3, #16]
 80164b8:	8afb      	ldrh	r3, [r7, #22]
 80164ba:	04d9      	lsls	r1, r3, #19
 80164bc:	4b3b      	ldr	r3, [pc, #236]	; (80165ac <USB_EPStartXfer+0x494>)
 80164be:	400b      	ands	r3, r1
 80164c0:	69b9      	ldr	r1, [r7, #24]
 80164c2:	0148      	lsls	r0, r1, #5
 80164c4:	69f9      	ldr	r1, [r7, #28]
 80164c6:	4401      	add	r1, r0
 80164c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80164cc:	4313      	orrs	r3, r2
 80164ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80164d0:	69bb      	ldr	r3, [r7, #24]
 80164d2:	015a      	lsls	r2, r3, #5
 80164d4:	69fb      	ldr	r3, [r7, #28]
 80164d6:	4413      	add	r3, r2
 80164d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164dc:	691a      	ldr	r2, [r3, #16]
 80164de:	68bb      	ldr	r3, [r7, #8]
 80164e0:	689b      	ldr	r3, [r3, #8]
 80164e2:	8af9      	ldrh	r1, [r7, #22]
 80164e4:	fb01 f303 	mul.w	r3, r1, r3
 80164e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80164ec:	69b9      	ldr	r1, [r7, #24]
 80164ee:	0148      	lsls	r0, r1, #5
 80164f0:	69f9      	ldr	r1, [r7, #28]
 80164f2:	4401      	add	r1, r0
 80164f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80164f8:	4313      	orrs	r3, r2
 80164fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80164fc:	79fb      	ldrb	r3, [r7, #7]
 80164fe:	2b01      	cmp	r3, #1
 8016500:	d10d      	bne.n	801651e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	68db      	ldr	r3, [r3, #12]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d009      	beq.n	801651e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	68d9      	ldr	r1, [r3, #12]
 801650e:	69bb      	ldr	r3, [r7, #24]
 8016510:	015a      	lsls	r2, r3, #5
 8016512:	69fb      	ldr	r3, [r7, #28]
 8016514:	4413      	add	r3, r2
 8016516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801651a:	460a      	mov	r2, r1
 801651c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	78db      	ldrb	r3, [r3, #3]
 8016522:	2b01      	cmp	r3, #1
 8016524:	d128      	bne.n	8016578 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016526:	69fb      	ldr	r3, [r7, #28]
 8016528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801652c:	689b      	ldr	r3, [r3, #8]
 801652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016532:	2b00      	cmp	r3, #0
 8016534:	d110      	bne.n	8016558 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8016536:	69bb      	ldr	r3, [r7, #24]
 8016538:	015a      	lsls	r2, r3, #5
 801653a:	69fb      	ldr	r3, [r7, #28]
 801653c:	4413      	add	r3, r2
 801653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	69ba      	ldr	r2, [r7, #24]
 8016546:	0151      	lsls	r1, r2, #5
 8016548:	69fa      	ldr	r2, [r7, #28]
 801654a:	440a      	add	r2, r1
 801654c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016554:	6013      	str	r3, [r2, #0]
 8016556:	e00f      	b.n	8016578 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8016558:	69bb      	ldr	r3, [r7, #24]
 801655a:	015a      	lsls	r2, r3, #5
 801655c:	69fb      	ldr	r3, [r7, #28]
 801655e:	4413      	add	r3, r2
 8016560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	69ba      	ldr	r2, [r7, #24]
 8016568:	0151      	lsls	r1, r2, #5
 801656a:	69fa      	ldr	r2, [r7, #28]
 801656c:	440a      	add	r2, r1
 801656e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016576:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8016578:	69bb      	ldr	r3, [r7, #24]
 801657a:	015a      	lsls	r2, r3, #5
 801657c:	69fb      	ldr	r3, [r7, #28]
 801657e:	4413      	add	r3, r2
 8016580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	69ba      	ldr	r2, [r7, #24]
 8016588:	0151      	lsls	r1, r2, #5
 801658a:	69fa      	ldr	r2, [r7, #28]
 801658c:	440a      	add	r2, r1
 801658e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016598:	2300      	movs	r3, #0
}
 801659a:	4618      	mov	r0, r3
 801659c:	3720      	adds	r7, #32
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	fff80000 	.word	0xfff80000
 80165a8:	e007ffff 	.word	0xe007ffff
 80165ac:	1ff80000 	.word	0x1ff80000

080165b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80165b0:	b480      	push	{r7}
 80165b2:	b087      	sub	sp, #28
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	4613      	mov	r3, r2
 80165bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	785b      	ldrb	r3, [r3, #1]
 80165cc:	2b01      	cmp	r3, #1
 80165ce:	f040 80cd 	bne.w	801676c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80165d2:	68bb      	ldr	r3, [r7, #8]
 80165d4:	695b      	ldr	r3, [r3, #20]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d132      	bne.n	8016640 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	015a      	lsls	r2, r3, #5
 80165de:	697b      	ldr	r3, [r7, #20]
 80165e0:	4413      	add	r3, r2
 80165e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165e6:	691a      	ldr	r2, [r3, #16]
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	0159      	lsls	r1, r3, #5
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	440b      	add	r3, r1
 80165f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165f4:	4619      	mov	r1, r3
 80165f6:	4b98      	ldr	r3, [pc, #608]	; (8016858 <USB_EP0StartXfer+0x2a8>)
 80165f8:	4013      	ands	r3, r2
 80165fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80165fc:	693b      	ldr	r3, [r7, #16]
 80165fe:	015a      	lsls	r2, r3, #5
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	4413      	add	r3, r2
 8016604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016608:	691b      	ldr	r3, [r3, #16]
 801660a:	693a      	ldr	r2, [r7, #16]
 801660c:	0151      	lsls	r1, r2, #5
 801660e:	697a      	ldr	r2, [r7, #20]
 8016610:	440a      	add	r2, r1
 8016612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801661a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	015a      	lsls	r2, r3, #5
 8016620:	697b      	ldr	r3, [r7, #20]
 8016622:	4413      	add	r3, r2
 8016624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016628:	691a      	ldr	r2, [r3, #16]
 801662a:	693b      	ldr	r3, [r7, #16]
 801662c:	0159      	lsls	r1, r3, #5
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	440b      	add	r3, r1
 8016632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016636:	4619      	mov	r1, r3
 8016638:	4b88      	ldr	r3, [pc, #544]	; (801685c <USB_EP0StartXfer+0x2ac>)
 801663a:	4013      	ands	r3, r2
 801663c:	610b      	str	r3, [r1, #16]
 801663e:	e04e      	b.n	80166de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	015a      	lsls	r2, r3, #5
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	4413      	add	r3, r2
 8016648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801664c:	691a      	ldr	r2, [r3, #16]
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	0159      	lsls	r1, r3, #5
 8016652:	697b      	ldr	r3, [r7, #20]
 8016654:	440b      	add	r3, r1
 8016656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801665a:	4619      	mov	r1, r3
 801665c:	4b7f      	ldr	r3, [pc, #508]	; (801685c <USB_EP0StartXfer+0x2ac>)
 801665e:	4013      	ands	r3, r2
 8016660:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	015a      	lsls	r2, r3, #5
 8016666:	697b      	ldr	r3, [r7, #20]
 8016668:	4413      	add	r3, r2
 801666a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801666e:	691a      	ldr	r2, [r3, #16]
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	0159      	lsls	r1, r3, #5
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	440b      	add	r3, r1
 8016678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801667c:	4619      	mov	r1, r3
 801667e:	4b76      	ldr	r3, [pc, #472]	; (8016858 <USB_EP0StartXfer+0x2a8>)
 8016680:	4013      	ands	r3, r2
 8016682:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	695a      	ldr	r2, [r3, #20]
 8016688:	68bb      	ldr	r3, [r7, #8]
 801668a:	689b      	ldr	r3, [r3, #8]
 801668c:	429a      	cmp	r2, r3
 801668e:	d903      	bls.n	8016698 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	689a      	ldr	r2, [r3, #8]
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	015a      	lsls	r2, r3, #5
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	4413      	add	r3, r2
 80166a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166a4:	691b      	ldr	r3, [r3, #16]
 80166a6:	693a      	ldr	r2, [r7, #16]
 80166a8:	0151      	lsls	r1, r2, #5
 80166aa:	697a      	ldr	r2, [r7, #20]
 80166ac:	440a      	add	r2, r1
 80166ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80166b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80166b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80166b8:	693b      	ldr	r3, [r7, #16]
 80166ba:	015a      	lsls	r2, r3, #5
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	4413      	add	r3, r2
 80166c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166c4:	691a      	ldr	r2, [r3, #16]
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	695b      	ldr	r3, [r3, #20]
 80166ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80166ce:	6939      	ldr	r1, [r7, #16]
 80166d0:	0148      	lsls	r0, r1, #5
 80166d2:	6979      	ldr	r1, [r7, #20]
 80166d4:	4401      	add	r1, r0
 80166d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80166da:	4313      	orrs	r3, r2
 80166dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80166de:	79fb      	ldrb	r3, [r7, #7]
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	d11e      	bne.n	8016722 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80166e4:	68bb      	ldr	r3, [r7, #8]
 80166e6:	691b      	ldr	r3, [r3, #16]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d009      	beq.n	8016700 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	015a      	lsls	r2, r3, #5
 80166f0:	697b      	ldr	r3, [r7, #20]
 80166f2:	4413      	add	r3, r2
 80166f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166f8:	461a      	mov	r2, r3
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	691b      	ldr	r3, [r3, #16]
 80166fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	015a      	lsls	r2, r3, #5
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	4413      	add	r3, r2
 8016708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	693a      	ldr	r2, [r7, #16]
 8016710:	0151      	lsls	r1, r2, #5
 8016712:	697a      	ldr	r2, [r7, #20]
 8016714:	440a      	add	r2, r1
 8016716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801671a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801671e:	6013      	str	r3, [r2, #0]
 8016720:	e092      	b.n	8016848 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	015a      	lsls	r2, r3, #5
 8016726:	697b      	ldr	r3, [r7, #20]
 8016728:	4413      	add	r3, r2
 801672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	693a      	ldr	r2, [r7, #16]
 8016732:	0151      	lsls	r1, r2, #5
 8016734:	697a      	ldr	r2, [r7, #20]
 8016736:	440a      	add	r2, r1
 8016738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801673c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016740:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	695b      	ldr	r3, [r3, #20]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d07e      	beq.n	8016848 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016752:	68bb      	ldr	r3, [r7, #8]
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	f003 030f 	and.w	r3, r3, #15
 801675a:	2101      	movs	r1, #1
 801675c:	fa01 f303 	lsl.w	r3, r1, r3
 8016760:	6979      	ldr	r1, [r7, #20]
 8016762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016766:	4313      	orrs	r3, r2
 8016768:	634b      	str	r3, [r1, #52]	; 0x34
 801676a:	e06d      	b.n	8016848 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801676c:	693b      	ldr	r3, [r7, #16]
 801676e:	015a      	lsls	r2, r3, #5
 8016770:	697b      	ldr	r3, [r7, #20]
 8016772:	4413      	add	r3, r2
 8016774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016778:	691a      	ldr	r2, [r3, #16]
 801677a:	693b      	ldr	r3, [r7, #16]
 801677c:	0159      	lsls	r1, r3, #5
 801677e:	697b      	ldr	r3, [r7, #20]
 8016780:	440b      	add	r3, r1
 8016782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016786:	4619      	mov	r1, r3
 8016788:	4b34      	ldr	r3, [pc, #208]	; (801685c <USB_EP0StartXfer+0x2ac>)
 801678a:	4013      	ands	r3, r2
 801678c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	015a      	lsls	r2, r3, #5
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	4413      	add	r3, r2
 8016796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801679a:	691a      	ldr	r2, [r3, #16]
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	0159      	lsls	r1, r3, #5
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	440b      	add	r3, r1
 80167a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80167a8:	4619      	mov	r1, r3
 80167aa:	4b2b      	ldr	r3, [pc, #172]	; (8016858 <USB_EP0StartXfer+0x2a8>)
 80167ac:	4013      	ands	r3, r2
 80167ae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	695b      	ldr	r3, [r3, #20]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d003      	beq.n	80167c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	689a      	ldr	r2, [r3, #8]
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	015a      	lsls	r2, r3, #5
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	4413      	add	r3, r2
 80167c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80167cc:	691b      	ldr	r3, [r3, #16]
 80167ce:	693a      	ldr	r2, [r7, #16]
 80167d0:	0151      	lsls	r1, r2, #5
 80167d2:	697a      	ldr	r2, [r7, #20]
 80167d4:	440a      	add	r2, r1
 80167d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80167da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80167de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	015a      	lsls	r2, r3, #5
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	4413      	add	r3, r2
 80167e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80167ec:	691a      	ldr	r2, [r3, #16]
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	689b      	ldr	r3, [r3, #8]
 80167f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80167f6:	6939      	ldr	r1, [r7, #16]
 80167f8:	0148      	lsls	r0, r1, #5
 80167fa:	6979      	ldr	r1, [r7, #20]
 80167fc:	4401      	add	r1, r0
 80167fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016802:	4313      	orrs	r3, r2
 8016804:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8016806:	79fb      	ldrb	r3, [r7, #7]
 8016808:	2b01      	cmp	r3, #1
 801680a:	d10d      	bne.n	8016828 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	68db      	ldr	r3, [r3, #12]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d009      	beq.n	8016828 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	68d9      	ldr	r1, [r3, #12]
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	015a      	lsls	r2, r3, #5
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	4413      	add	r3, r2
 8016820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016824:	460a      	mov	r2, r1
 8016826:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	015a      	lsls	r2, r3, #5
 801682c:	697b      	ldr	r3, [r7, #20]
 801682e:	4413      	add	r3, r2
 8016830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	693a      	ldr	r2, [r7, #16]
 8016838:	0151      	lsls	r1, r2, #5
 801683a:	697a      	ldr	r2, [r7, #20]
 801683c:	440a      	add	r2, r1
 801683e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016842:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016846:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016848:	2300      	movs	r3, #0
}
 801684a:	4618      	mov	r0, r3
 801684c:	371c      	adds	r7, #28
 801684e:	46bd      	mov	sp, r7
 8016850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	e007ffff 	.word	0xe007ffff
 801685c:	fff80000 	.word	0xfff80000

08016860 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8016860:	b480      	push	{r7}
 8016862:	b089      	sub	sp, #36	; 0x24
 8016864:	af00      	add	r7, sp, #0
 8016866:	60f8      	str	r0, [r7, #12]
 8016868:	60b9      	str	r1, [r7, #8]
 801686a:	4611      	mov	r1, r2
 801686c:	461a      	mov	r2, r3
 801686e:	460b      	mov	r3, r1
 8016870:	71fb      	strb	r3, [r7, #7]
 8016872:	4613      	mov	r3, r2
 8016874:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801687e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016882:	2b00      	cmp	r3, #0
 8016884:	d123      	bne.n	80168ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8016886:	88bb      	ldrh	r3, [r7, #4]
 8016888:	3303      	adds	r3, #3
 801688a:	089b      	lsrs	r3, r3, #2
 801688c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801688e:	2300      	movs	r3, #0
 8016890:	61bb      	str	r3, [r7, #24]
 8016892:	e018      	b.n	80168c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8016894:	79fb      	ldrb	r3, [r7, #7]
 8016896:	031a      	lsls	r2, r3, #12
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	4413      	add	r3, r2
 801689c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80168a0:	461a      	mov	r2, r3
 80168a2:	69fb      	ldr	r3, [r7, #28]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80168a8:	69fb      	ldr	r3, [r7, #28]
 80168aa:	3301      	adds	r3, #1
 80168ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80168ae:	69fb      	ldr	r3, [r7, #28]
 80168b0:	3301      	adds	r3, #1
 80168b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80168b4:	69fb      	ldr	r3, [r7, #28]
 80168b6:	3301      	adds	r3, #1
 80168b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80168ba:	69fb      	ldr	r3, [r7, #28]
 80168bc:	3301      	adds	r3, #1
 80168be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80168c0:	69bb      	ldr	r3, [r7, #24]
 80168c2:	3301      	adds	r3, #1
 80168c4:	61bb      	str	r3, [r7, #24]
 80168c6:	69ba      	ldr	r2, [r7, #24]
 80168c8:	693b      	ldr	r3, [r7, #16]
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d3e2      	bcc.n	8016894 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80168ce:	2300      	movs	r3, #0
}
 80168d0:	4618      	mov	r0, r3
 80168d2:	3724      	adds	r7, #36	; 0x24
 80168d4:	46bd      	mov	sp, r7
 80168d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168da:	4770      	bx	lr

080168dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80168dc:	b480      	push	{r7}
 80168de:	b08b      	sub	sp, #44	; 0x2c
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	60f8      	str	r0, [r7, #12]
 80168e4:	60b9      	str	r1, [r7, #8]
 80168e6:	4613      	mov	r3, r2
 80168e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80168ee:	68bb      	ldr	r3, [r7, #8]
 80168f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80168f2:	88fb      	ldrh	r3, [r7, #6]
 80168f4:	089b      	lsrs	r3, r3, #2
 80168f6:	b29b      	uxth	r3, r3
 80168f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80168fa:	88fb      	ldrh	r3, [r7, #6]
 80168fc:	f003 0303 	and.w	r3, r3, #3
 8016900:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8016902:	2300      	movs	r3, #0
 8016904:	623b      	str	r3, [r7, #32]
 8016906:	e014      	b.n	8016932 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016908:	69bb      	ldr	r3, [r7, #24]
 801690a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801690e:	681a      	ldr	r2, [r3, #0]
 8016910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016912:	601a      	str	r2, [r3, #0]
    pDest++;
 8016914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016916:	3301      	adds	r3, #1
 8016918:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801691c:	3301      	adds	r3, #1
 801691e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016922:	3301      	adds	r3, #1
 8016924:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016928:	3301      	adds	r3, #1
 801692a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801692c:	6a3b      	ldr	r3, [r7, #32]
 801692e:	3301      	adds	r3, #1
 8016930:	623b      	str	r3, [r7, #32]
 8016932:	6a3a      	ldr	r2, [r7, #32]
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	429a      	cmp	r2, r3
 8016938:	d3e6      	bcc.n	8016908 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801693a:	8bfb      	ldrh	r3, [r7, #30]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d01e      	beq.n	801697e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016940:	2300      	movs	r3, #0
 8016942:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016944:	69bb      	ldr	r3, [r7, #24]
 8016946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801694a:	461a      	mov	r2, r3
 801694c:	f107 0310 	add.w	r3, r7, #16
 8016950:	6812      	ldr	r2, [r2, #0]
 8016952:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8016954:	693a      	ldr	r2, [r7, #16]
 8016956:	6a3b      	ldr	r3, [r7, #32]
 8016958:	b2db      	uxtb	r3, r3
 801695a:	00db      	lsls	r3, r3, #3
 801695c:	fa22 f303 	lsr.w	r3, r2, r3
 8016960:	b2da      	uxtb	r2, r3
 8016962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016964:	701a      	strb	r2, [r3, #0]
      i++;
 8016966:	6a3b      	ldr	r3, [r7, #32]
 8016968:	3301      	adds	r3, #1
 801696a:	623b      	str	r3, [r7, #32]
      pDest++;
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	3301      	adds	r3, #1
 8016970:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8016972:	8bfb      	ldrh	r3, [r7, #30]
 8016974:	3b01      	subs	r3, #1
 8016976:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8016978:	8bfb      	ldrh	r3, [r7, #30]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d1ea      	bne.n	8016954 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016980:	4618      	mov	r0, r3
 8016982:	372c      	adds	r7, #44	; 0x2c
 8016984:	46bd      	mov	sp, r7
 8016986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698a:	4770      	bx	lr

0801698c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801698c:	b480      	push	{r7}
 801698e:	b085      	sub	sp, #20
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	781b      	ldrb	r3, [r3, #0]
 801699e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	785b      	ldrb	r3, [r3, #1]
 80169a4:	2b01      	cmp	r3, #1
 80169a6:	d12c      	bne.n	8016a02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	015a      	lsls	r2, r3, #5
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	4413      	add	r3, r2
 80169b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	db12      	blt.n	80169e0 <USB_EPSetStall+0x54>
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d00f      	beq.n	80169e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	015a      	lsls	r2, r3, #5
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	4413      	add	r3, r2
 80169c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	68ba      	ldr	r2, [r7, #8]
 80169d0:	0151      	lsls	r1, r2, #5
 80169d2:	68fa      	ldr	r2, [r7, #12]
 80169d4:	440a      	add	r2, r1
 80169d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80169da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80169de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80169e0:	68bb      	ldr	r3, [r7, #8]
 80169e2:	015a      	lsls	r2, r3, #5
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	4413      	add	r3, r2
 80169e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	68ba      	ldr	r2, [r7, #8]
 80169f0:	0151      	lsls	r1, r2, #5
 80169f2:	68fa      	ldr	r2, [r7, #12]
 80169f4:	440a      	add	r2, r1
 80169f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80169fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80169fe:	6013      	str	r3, [r2, #0]
 8016a00:	e02b      	b.n	8016a5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016a02:	68bb      	ldr	r3, [r7, #8]
 8016a04:	015a      	lsls	r2, r3, #5
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	4413      	add	r3, r2
 8016a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	db12      	blt.n	8016a3a <USB_EPSetStall+0xae>
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d00f      	beq.n	8016a3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	015a      	lsls	r2, r3, #5
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	4413      	add	r3, r2
 8016a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	68ba      	ldr	r2, [r7, #8]
 8016a2a:	0151      	lsls	r1, r2, #5
 8016a2c:	68fa      	ldr	r2, [r7, #12]
 8016a2e:	440a      	add	r2, r1
 8016a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016a34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016a38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	015a      	lsls	r2, r3, #5
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	4413      	add	r3, r2
 8016a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	68ba      	ldr	r2, [r7, #8]
 8016a4a:	0151      	lsls	r1, r2, #5
 8016a4c:	68fa      	ldr	r2, [r7, #12]
 8016a4e:	440a      	add	r2, r1
 8016a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016a58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016a5a:	2300      	movs	r3, #0
}
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3714      	adds	r7, #20
 8016a60:	46bd      	mov	sp, r7
 8016a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a66:	4770      	bx	lr

08016a68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016a68:	b480      	push	{r7}
 8016a6a:	b085      	sub	sp, #20
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
 8016a70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	785b      	ldrb	r3, [r3, #1]
 8016a80:	2b01      	cmp	r3, #1
 8016a82:	d128      	bne.n	8016ad6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	015a      	lsls	r2, r3, #5
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	68ba      	ldr	r2, [r7, #8]
 8016a94:	0151      	lsls	r1, r2, #5
 8016a96:	68fa      	ldr	r2, [r7, #12]
 8016a98:	440a      	add	r2, r1
 8016a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016aa2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	78db      	ldrb	r3, [r3, #3]
 8016aa8:	2b03      	cmp	r3, #3
 8016aaa:	d003      	beq.n	8016ab4 <USB_EPClearStall+0x4c>
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	78db      	ldrb	r3, [r3, #3]
 8016ab0:	2b02      	cmp	r3, #2
 8016ab2:	d138      	bne.n	8016b26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	015a      	lsls	r2, r3, #5
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	4413      	add	r3, r2
 8016abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	68ba      	ldr	r2, [r7, #8]
 8016ac4:	0151      	lsls	r1, r2, #5
 8016ac6:	68fa      	ldr	r2, [r7, #12]
 8016ac8:	440a      	add	r2, r1
 8016aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016ad2:	6013      	str	r3, [r2, #0]
 8016ad4:	e027      	b.n	8016b26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	015a      	lsls	r2, r3, #5
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	4413      	add	r3, r2
 8016ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	68ba      	ldr	r2, [r7, #8]
 8016ae6:	0151      	lsls	r1, r2, #5
 8016ae8:	68fa      	ldr	r2, [r7, #12]
 8016aea:	440a      	add	r2, r1
 8016aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016af0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016af4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	78db      	ldrb	r3, [r3, #3]
 8016afa:	2b03      	cmp	r3, #3
 8016afc:	d003      	beq.n	8016b06 <USB_EPClearStall+0x9e>
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	78db      	ldrb	r3, [r3, #3]
 8016b02:	2b02      	cmp	r3, #2
 8016b04:	d10f      	bne.n	8016b26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	015a      	lsls	r2, r3, #5
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	4413      	add	r3, r2
 8016b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	68ba      	ldr	r2, [r7, #8]
 8016b16:	0151      	lsls	r1, r2, #5
 8016b18:	68fa      	ldr	r2, [r7, #12]
 8016b1a:	440a      	add	r2, r1
 8016b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016b24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016b26:	2300      	movs	r3, #0
}
 8016b28:	4618      	mov	r0, r3
 8016b2a:	3714      	adds	r7, #20
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b32:	4770      	bx	lr

08016b34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016b34:	b480      	push	{r7}
 8016b36:	b085      	sub	sp, #20
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
 8016b3c:	460b      	mov	r3, r1
 8016b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	68fa      	ldr	r2, [r7, #12]
 8016b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016b52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8016b56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b5e:	681a      	ldr	r2, [r3, #0]
 8016b60:	78fb      	ldrb	r3, [r7, #3]
 8016b62:	011b      	lsls	r3, r3, #4
 8016b64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8016b68:	68f9      	ldr	r1, [r7, #12]
 8016b6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016b6e:	4313      	orrs	r3, r2
 8016b70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016b72:	2300      	movs	r3, #0
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	3714      	adds	r7, #20
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7e:	4770      	bx	lr

08016b80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016b80:	b480      	push	{r7}
 8016b82:	b085      	sub	sp, #20
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	68fa      	ldr	r2, [r7, #12]
 8016b96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b9a:	f023 0303 	bic.w	r3, r3, #3
 8016b9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	68fa      	ldr	r2, [r7, #12]
 8016baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016bae:	f023 0302 	bic.w	r3, r3, #2
 8016bb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016bb4:	2300      	movs	r3, #0
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3714      	adds	r7, #20
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc0:	4770      	bx	lr

08016bc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016bc2:	b480      	push	{r7}
 8016bc4:	b085      	sub	sp, #20
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	68fa      	ldr	r2, [r7, #12]
 8016bd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016bdc:	f023 0303 	bic.w	r3, r3, #3
 8016be0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016be8:	685b      	ldr	r3, [r3, #4]
 8016bea:	68fa      	ldr	r2, [r7, #12]
 8016bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016bf0:	f043 0302 	orr.w	r3, r3, #2
 8016bf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016bf6:	2300      	movs	r3, #0
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3714      	adds	r7, #20
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c02:	4770      	bx	lr

08016c04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8016c04:	b480      	push	{r7}
 8016c06:	b085      	sub	sp, #20
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	695b      	ldr	r3, [r3, #20]
 8016c10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	699b      	ldr	r3, [r3, #24]
 8016c16:	68fa      	ldr	r2, [r7, #12]
 8016c18:	4013      	ands	r3, r2
 8016c1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016c1c:	68fb      	ldr	r3, [r7, #12]
}
 8016c1e:	4618      	mov	r0, r3
 8016c20:	3714      	adds	r7, #20
 8016c22:	46bd      	mov	sp, r7
 8016c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c28:	4770      	bx	lr

08016c2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016c2a:	b480      	push	{r7}
 8016c2c:	b085      	sub	sp, #20
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c3c:	699b      	ldr	r3, [r3, #24]
 8016c3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c46:	69db      	ldr	r3, [r3, #28]
 8016c48:	68ba      	ldr	r2, [r7, #8]
 8016c4a:	4013      	ands	r3, r2
 8016c4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016c4e:	68bb      	ldr	r3, [r7, #8]
 8016c50:	0c1b      	lsrs	r3, r3, #16
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3714      	adds	r7, #20
 8016c56:	46bd      	mov	sp, r7
 8016c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5c:	4770      	bx	lr

08016c5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016c5e:	b480      	push	{r7}
 8016c60:	b085      	sub	sp, #20
 8016c62:	af00      	add	r7, sp, #0
 8016c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c70:	699b      	ldr	r3, [r3, #24]
 8016c72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c7a:	69db      	ldr	r3, [r3, #28]
 8016c7c:	68ba      	ldr	r2, [r7, #8]
 8016c7e:	4013      	ands	r3, r2
 8016c80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	b29b      	uxth	r3, r3
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3714      	adds	r7, #20
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c90:	4770      	bx	lr

08016c92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016c92:	b480      	push	{r7}
 8016c94:	b085      	sub	sp, #20
 8016c96:	af00      	add	r7, sp, #0
 8016c98:	6078      	str	r0, [r7, #4]
 8016c9a:	460b      	mov	r3, r1
 8016c9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016ca2:	78fb      	ldrb	r3, [r7, #3]
 8016ca4:	015a      	lsls	r2, r3, #5
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	4413      	add	r3, r2
 8016caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016cae:	689b      	ldr	r3, [r3, #8]
 8016cb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016cb8:	695b      	ldr	r3, [r3, #20]
 8016cba:	68ba      	ldr	r2, [r7, #8]
 8016cbc:	4013      	ands	r3, r2
 8016cbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016cc0:	68bb      	ldr	r3, [r7, #8]
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3714      	adds	r7, #20
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ccc:	4770      	bx	lr

08016cce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016cce:	b480      	push	{r7}
 8016cd0:	b087      	sub	sp, #28
 8016cd2:	af00      	add	r7, sp, #0
 8016cd4:	6078      	str	r0, [r7, #4]
 8016cd6:	460b      	mov	r3, r1
 8016cd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ce4:	691b      	ldr	r3, [r3, #16]
 8016ce6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cf0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016cf2:	78fb      	ldrb	r3, [r7, #3]
 8016cf4:	f003 030f 	and.w	r3, r3, #15
 8016cf8:	68fa      	ldr	r2, [r7, #12]
 8016cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8016cfe:	01db      	lsls	r3, r3, #7
 8016d00:	b2db      	uxtb	r3, r3
 8016d02:	693a      	ldr	r2, [r7, #16]
 8016d04:	4313      	orrs	r3, r2
 8016d06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016d08:	78fb      	ldrb	r3, [r7, #3]
 8016d0a:	015a      	lsls	r2, r3, #5
 8016d0c:	697b      	ldr	r3, [r7, #20]
 8016d0e:	4413      	add	r3, r2
 8016d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d14:	689b      	ldr	r3, [r3, #8]
 8016d16:	693a      	ldr	r2, [r7, #16]
 8016d18:	4013      	ands	r3, r2
 8016d1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016d1c:	68bb      	ldr	r3, [r7, #8]
}
 8016d1e:	4618      	mov	r0, r3
 8016d20:	371c      	adds	r7, #28
 8016d22:	46bd      	mov	sp, r7
 8016d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d28:	4770      	bx	lr

08016d2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8016d2a:	b480      	push	{r7}
 8016d2c:	b083      	sub	sp, #12
 8016d2e:	af00      	add	r7, sp, #0
 8016d30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	695b      	ldr	r3, [r3, #20]
 8016d36:	f003 0301 	and.w	r3, r3, #1
}
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	370c      	adds	r7, #12
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d44:	4770      	bx	lr
	...

08016d48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8016d48:	b480      	push	{r7}
 8016d4a:	b085      	sub	sp, #20
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d5a:	681a      	ldr	r2, [r3, #0]
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d62:	4619      	mov	r1, r3
 8016d64:	4b09      	ldr	r3, [pc, #36]	; (8016d8c <USB_ActivateSetup+0x44>)
 8016d66:	4013      	ands	r3, r2
 8016d68:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d70:	685b      	ldr	r3, [r3, #4]
 8016d72:	68fa      	ldr	r2, [r7, #12]
 8016d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016d7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016d7e:	2300      	movs	r3, #0
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3714      	adds	r7, #20
 8016d84:	46bd      	mov	sp, r7
 8016d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8a:	4770      	bx	lr
 8016d8c:	fffff800 	.word	0xfffff800

08016d90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8016d90:	b480      	push	{r7}
 8016d92:	b087      	sub	sp, #28
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	460b      	mov	r3, r1
 8016d9a:	607a      	str	r2, [r7, #4]
 8016d9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	333c      	adds	r3, #60	; 0x3c
 8016da6:	3304      	adds	r3, #4
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016dac:	693b      	ldr	r3, [r7, #16]
 8016dae:	4a26      	ldr	r2, [pc, #152]	; (8016e48 <USB_EP0_OutStart+0xb8>)
 8016db0:	4293      	cmp	r3, r2
 8016db2:	d90a      	bls.n	8016dca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016dc4:	d101      	bne.n	8016dca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	e037      	b.n	8016e3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016dca:	697b      	ldr	r3, [r7, #20]
 8016dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016dd6:	697b      	ldr	r3, [r7, #20]
 8016dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ddc:	691b      	ldr	r3, [r3, #16]
 8016dde:	697a      	ldr	r2, [r7, #20]
 8016de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016df0:	691b      	ldr	r3, [r3, #16]
 8016df2:	697a      	ldr	r2, [r7, #20]
 8016df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016df8:	f043 0318 	orr.w	r3, r3, #24
 8016dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e04:	691b      	ldr	r3, [r3, #16]
 8016e06:	697a      	ldr	r2, [r7, #20]
 8016e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016e0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8016e10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8016e12:	7afb      	ldrb	r3, [r7, #11]
 8016e14:	2b01      	cmp	r3, #1
 8016e16:	d10f      	bne.n	8016e38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016e18:	697b      	ldr	r3, [r7, #20]
 8016e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e1e:	461a      	mov	r2, r3
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016e24:	697b      	ldr	r3, [r7, #20]
 8016e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	697a      	ldr	r2, [r7, #20]
 8016e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016e32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8016e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016e38:	2300      	movs	r3, #0
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	371c      	adds	r7, #28
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e44:	4770      	bx	lr
 8016e46:	bf00      	nop
 8016e48:	4f54300a 	.word	0x4f54300a

08016e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016e4c:	b480      	push	{r7}
 8016e4e:	b085      	sub	sp, #20
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8016e54:	2300      	movs	r3, #0
 8016e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	60fb      	str	r3, [r7, #12]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	4a13      	ldr	r2, [pc, #76]	; (8016eb0 <USB_CoreReset+0x64>)
 8016e62:	4293      	cmp	r3, r2
 8016e64:	d901      	bls.n	8016e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8016e66:	2303      	movs	r3, #3
 8016e68:	e01b      	b.n	8016ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	691b      	ldr	r3, [r3, #16]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	daf2      	bge.n	8016e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016e72:	2300      	movs	r3, #0
 8016e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	691b      	ldr	r3, [r3, #16]
 8016e7a:	f043 0201 	orr.w	r2, r3, #1
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	3301      	adds	r3, #1
 8016e86:	60fb      	str	r3, [r7, #12]
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	4a09      	ldr	r2, [pc, #36]	; (8016eb0 <USB_CoreReset+0x64>)
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	d901      	bls.n	8016e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016e90:	2303      	movs	r3, #3
 8016e92:	e006      	b.n	8016ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	691b      	ldr	r3, [r3, #16]
 8016e98:	f003 0301 	and.w	r3, r3, #1
 8016e9c:	2b01      	cmp	r3, #1
 8016e9e:	d0f0      	beq.n	8016e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3714      	adds	r7, #20
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr
 8016eae:	bf00      	nop
 8016eb0:	00030d40 	.word	0x00030d40

08016eb4 <word>:

 ;


 uint16_t word(uint8_t H, uint8_t L)
 {
 8016eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb8:	b09a      	sub	sp, #104	; 0x68
 8016eba:	af00      	add	r7, sp, #0
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	460a      	mov	r2, r1
 8016ec0:	71fb      	strb	r3, [r7, #7]
 8016ec2:	4613      	mov	r3, r2
 8016ec4:	71bb      	strb	r3, [r7, #6]
 8016ec6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016eca:	f023 031f 	bic.w	r3, r3, #31
 8016ece:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 8016ed2:	46a0      	mov	r8, r4
 8016ed4:	4b1f      	ldr	r3, [pc, #124]	; (8016f54 <word+0xa0>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d005      	beq.n	8016ee8 <word+0x34>
 8016edc:	2040      	movs	r0, #64	; 0x40
 8016ede:	f7f2 fafd 	bl	80094dc <__asan_stack_malloc_0>
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	d000      	beq.n	8016ee8 <word+0x34>
 8016ee6:	4604      	mov	r4, r0
 8016ee8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8016eec:	461e      	mov	r6, r3
 8016eee:	4b1a      	ldr	r3, [pc, #104]	; (8016f58 <word+0xa4>)
 8016ef0:	6023      	str	r3, [r4, #0]
 8016ef2:	4b1a      	ldr	r3, [pc, #104]	; (8016f5c <word+0xa8>)
 8016ef4:	6063      	str	r3, [r4, #4]
 8016ef6:	4b1a      	ldr	r3, [pc, #104]	; (8016f60 <word+0xac>)
 8016ef8:	60a3      	str	r3, [r4, #8]
 8016efa:	08e5      	lsrs	r5, r4, #3
 8016efc:	f105 53dc 	add.w	r3, r5, #461373440	; 0x1b800000
 8016f00:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8016f04:	601a      	str	r2, [r3, #0]
 8016f06:	4a17      	ldr	r2, [pc, #92]	; (8016f64 <word+0xb0>)
 8016f08:	605a      	str	r2, [r3, #4]
 	bytesFields W;
 	W.u8[0] = L;
 8016f0a:	f7f2 ffab 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8016f0e:	79bb      	ldrb	r3, [r7, #6]
 8016f10:	f806 3c20 	strb.w	r3, [r6, #-32]
 	W.u8[1] = H;
 8016f14:	79fb      	ldrb	r3, [r7, #7]
 8016f16:	f806 3c1f 	strb.w	r3, [r6, #-31]

 	return W.u16[0];
 8016f1a:	f836 6c20 	ldrh.w	r6, [r6, #-32]
 8016f1e:	f7f2 ffa1 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8016f22:	4631      	mov	r1, r6
 {
 8016f24:	45a0      	cmp	r8, r4
 8016f26:	d009      	beq.n	8016f3c <word+0x88>
 8016f28:	4b0f      	ldr	r3, [pc, #60]	; (8016f68 <word+0xb4>)
 8016f2a:	6023      	str	r3, [r4, #0]
 8016f2c:	f105 53dc 	add.w	r3, r5, #461373440	; 0x1b800000
 8016f30:	461a      	mov	r2, r3
 8016f32:	f04f 33f5 	mov.w	r3, #4126537205	; 0xf5f5f5f5
 8016f36:	6013      	str	r3, [r2, #0]
 8016f38:	6053      	str	r3, [r2, #4]
 8016f3a:	e005      	b.n	8016f48 <word+0x94>
 8016f3c:	f105 53dc 	add.w	r3, r5, #461373440	; 0x1b800000
 8016f40:	461a      	mov	r2, r3
 8016f42:	2300      	movs	r3, #0
 8016f44:	6013      	str	r3, [r2, #0]
 8016f46:	6053      	str	r3, [r2, #4]
 }
 8016f48:	4608      	mov	r0, r1
 8016f4a:	3768      	adds	r7, #104	; 0x68
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f52:	bf00      	nop
 8016f54:	24037400 	.word	0x24037400
 8016f58:	41b58ab3 	.word	0x41b58ab3
 8016f5c:	240082bc 	.word	0x240082bc
 8016f60:	08016eb4 	.word	0x08016eb4
 8016f64:	f3f3f304 	.word	0xf3f3f304
 8016f68:	45e0360e 	.word	0x45e0360e

08016f6c <sendTxBuffer>:



 void sendTxBuffer()
 {
 8016f6c:	b5b0      	push	{r4, r5, r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0

	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 8016f72:	f7f2 ff77 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8016f76:	4ba3      	ldr	r3, [pc, #652]	; (8017204 <sendTxBuffer+0x298>)
 8016f78:	607b      	str	r3, [r7, #4]
     // append CRC to message
     uint16_t u16crc = calcCRC( ModbusH->u8BufferSize );
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	33c6      	adds	r3, #198	; 0xc6
 8016f7e:	08da      	lsrs	r2, r3, #3
 8016f80:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8016f84:	f992 2000 	ldrsb.w	r2, [r2]
 8016f88:	2a00      	cmp	r2, #0
 8016f8a:	bf14      	ite	ne
 8016f8c:	2101      	movne	r1, #1
 8016f8e:	2100      	moveq	r1, #0
 8016f90:	b2c9      	uxtb	r1, r1
 8016f92:	f003 0007 	and.w	r0, r3, #7
 8016f96:	b240      	sxtb	r0, r0
 8016f98:	4290      	cmp	r0, r2
 8016f9a:	bfac      	ite	ge
 8016f9c:	2201      	movge	r2, #1
 8016f9e:	2200      	movlt	r2, #0
 8016fa0:	b2d2      	uxtb	r2, r2
 8016fa2:	400a      	ands	r2, r1
 8016fa4:	b2d2      	uxtb	r2, r2
 8016fa6:	2a00      	cmp	r2, #0
 8016fa8:	d002      	beq.n	8016fb0 <sendTxBuffer+0x44>
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7f2 fa5e 	bl	800946c <__asan_report_load1>
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8016fb6:	b2db      	uxtb	r3, r3
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f000 fb8b 	bl	80176d4 <calcCRC>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	807b      	strh	r3, [r7, #2]
     ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = u16crc >> 8;
 8016fc2:	887b      	ldrh	r3, [r7, #2]
 8016fc4:	0a1b      	lsrs	r3, r3, #8
 8016fc6:	b29c      	uxth	r4, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	33c6      	adds	r3, #198	; 0xc6
 8016fcc:	08da      	lsrs	r2, r3, #3
 8016fce:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8016fd2:	f992 2000 	ldrsb.w	r2, [r2]
 8016fd6:	2a00      	cmp	r2, #0
 8016fd8:	bf14      	ite	ne
 8016fda:	2101      	movne	r1, #1
 8016fdc:	2100      	moveq	r1, #0
 8016fde:	b2c9      	uxtb	r1, r1
 8016fe0:	f003 0007 	and.w	r0, r3, #7
 8016fe4:	b240      	sxtb	r0, r0
 8016fe6:	4290      	cmp	r0, r2
 8016fe8:	bfac      	ite	ge
 8016fea:	2201      	movge	r2, #1
 8016fec:	2200      	movlt	r2, #0
 8016fee:	b2d2      	uxtb	r2, r2
 8016ff0:	400a      	ands	r2, r1
 8016ff2:	b2d2      	uxtb	r2, r2
 8016ff4:	2a00      	cmp	r2, #0
 8016ff6:	d002      	beq.n	8016ffe <sendTxBuffer+0x92>
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7f2 fa37 	bl	800946c <__asan_report_load1>
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8017004:	b2db      	uxtb	r3, r3
 8017006:	4619      	mov	r1, r3
 8017008:	b2e5      	uxtb	r5, r4
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	440b      	add	r3, r1
 801700e:	3305      	adds	r3, #5
 8017010:	08da      	lsrs	r2, r3, #3
 8017012:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017016:	f992 2000 	ldrsb.w	r2, [r2]
 801701a:	2a00      	cmp	r2, #0
 801701c:	bf14      	ite	ne
 801701e:	2001      	movne	r0, #1
 8017020:	2000      	moveq	r0, #0
 8017022:	b2c0      	uxtb	r0, r0
 8017024:	f003 0407 	and.w	r4, r3, #7
 8017028:	b264      	sxtb	r4, r4
 801702a:	4294      	cmp	r4, r2
 801702c:	bfac      	ite	ge
 801702e:	2201      	movge	r2, #1
 8017030:	2200      	movlt	r2, #0
 8017032:	b2d2      	uxtb	r2, r2
 8017034:	4002      	ands	r2, r0
 8017036:	b2d2      	uxtb	r2, r2
 8017038:	2a00      	cmp	r2, #0
 801703a:	d002      	beq.n	8017042 <sendTxBuffer+0xd6>
 801703c:	4618      	mov	r0, r3
 801703e:	f7f2 f9fd 	bl	800943c <__asan_report_store1>
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	440b      	add	r3, r1
 8017046:	462a      	mov	r2, r5
 8017048:	715a      	strb	r2, [r3, #5]
     ModbusH->u8BufferSize++;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	33c6      	adds	r3, #198	; 0xc6
 801704e:	08da      	lsrs	r2, r3, #3
 8017050:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017054:	f992 2000 	ldrsb.w	r2, [r2]
 8017058:	2a00      	cmp	r2, #0
 801705a:	bf14      	ite	ne
 801705c:	2101      	movne	r1, #1
 801705e:	2100      	moveq	r1, #0
 8017060:	b2c9      	uxtb	r1, r1
 8017062:	f003 0007 	and.w	r0, r3, #7
 8017066:	b240      	sxtb	r0, r0
 8017068:	4290      	cmp	r0, r2
 801706a:	bfac      	ite	ge
 801706c:	2201      	movge	r2, #1
 801706e:	2200      	movlt	r2, #0
 8017070:	b2d2      	uxtb	r2, r2
 8017072:	400a      	ands	r2, r1
 8017074:	b2d2      	uxtb	r2, r2
 8017076:	2a00      	cmp	r2, #0
 8017078:	d002      	beq.n	8017080 <sendTxBuffer+0x114>
 801707a:	4618      	mov	r0, r3
 801707c:	f7f2 f9f6 	bl	800946c <__asan_report_load1>
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8017086:	b2db      	uxtb	r3, r3
 8017088:	3301      	adds	r3, #1
 801708a:	b2dc      	uxtb	r4, r3
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	33c6      	adds	r3, #198	; 0xc6
 8017090:	08da      	lsrs	r2, r3, #3
 8017092:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017096:	f992 2000 	ldrsb.w	r2, [r2]
 801709a:	2a00      	cmp	r2, #0
 801709c:	bf14      	ite	ne
 801709e:	2101      	movne	r1, #1
 80170a0:	2100      	moveq	r1, #0
 80170a2:	b2c9      	uxtb	r1, r1
 80170a4:	f003 0007 	and.w	r0, r3, #7
 80170a8:	b240      	sxtb	r0, r0
 80170aa:	4290      	cmp	r0, r2
 80170ac:	bfac      	ite	ge
 80170ae:	2201      	movge	r2, #1
 80170b0:	2200      	movlt	r2, #0
 80170b2:	b2d2      	uxtb	r2, r2
 80170b4:	400a      	ands	r2, r1
 80170b6:	b2d2      	uxtb	r2, r2
 80170b8:	2a00      	cmp	r2, #0
 80170ba:	d002      	beq.n	80170c2 <sendTxBuffer+0x156>
 80170bc:	4618      	mov	r0, r3
 80170be:	f7f2 f9bd 	bl	800943c <__asan_report_store1>
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	4622      	mov	r2, r4
 80170c6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = u16crc & 0x00ff;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	33c6      	adds	r3, #198	; 0xc6
 80170ce:	08da      	lsrs	r2, r3, #3
 80170d0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80170d4:	f992 2000 	ldrsb.w	r2, [r2]
 80170d8:	2a00      	cmp	r2, #0
 80170da:	bf14      	ite	ne
 80170dc:	2101      	movne	r1, #1
 80170de:	2100      	moveq	r1, #0
 80170e0:	b2c9      	uxtb	r1, r1
 80170e2:	f003 0007 	and.w	r0, r3, #7
 80170e6:	b240      	sxtb	r0, r0
 80170e8:	4290      	cmp	r0, r2
 80170ea:	bfac      	ite	ge
 80170ec:	2201      	movge	r2, #1
 80170ee:	2200      	movlt	r2, #0
 80170f0:	b2d2      	uxtb	r2, r2
 80170f2:	400a      	ands	r2, r1
 80170f4:	b2d2      	uxtb	r2, r2
 80170f6:	2a00      	cmp	r2, #0
 80170f8:	d002      	beq.n	8017100 <sendTxBuffer+0x194>
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7f2 f9b6 	bl	800946c <__asan_report_load1>
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8017106:	b2db      	uxtb	r3, r3
 8017108:	4619      	mov	r1, r3
 801710a:	887b      	ldrh	r3, [r7, #2]
 801710c:	b2dd      	uxtb	r5, r3
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	440b      	add	r3, r1
 8017112:	3305      	adds	r3, #5
 8017114:	08da      	lsrs	r2, r3, #3
 8017116:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801711a:	f992 2000 	ldrsb.w	r2, [r2]
 801711e:	2a00      	cmp	r2, #0
 8017120:	bf14      	ite	ne
 8017122:	2001      	movne	r0, #1
 8017124:	2000      	moveq	r0, #0
 8017126:	b2c0      	uxtb	r0, r0
 8017128:	f003 0407 	and.w	r4, r3, #7
 801712c:	b264      	sxtb	r4, r4
 801712e:	4294      	cmp	r4, r2
 8017130:	bfac      	ite	ge
 8017132:	2201      	movge	r2, #1
 8017134:	2200      	movlt	r2, #0
 8017136:	b2d2      	uxtb	r2, r2
 8017138:	4002      	ands	r2, r0
 801713a:	b2d2      	uxtb	r2, r2
 801713c:	2a00      	cmp	r2, #0
 801713e:	d002      	beq.n	8017146 <sendTxBuffer+0x1da>
 8017140:	4618      	mov	r0, r3
 8017142:	f7f2 f97b 	bl	800943c <__asan_report_store1>
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	440b      	add	r3, r1
 801714a:	462a      	mov	r2, r5
 801714c:	715a      	strb	r2, [r3, #5]
     ModbusH->u8BufferSize++;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	33c6      	adds	r3, #198	; 0xc6
 8017152:	08da      	lsrs	r2, r3, #3
 8017154:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017158:	f992 2000 	ldrsb.w	r2, [r2]
 801715c:	2a00      	cmp	r2, #0
 801715e:	bf14      	ite	ne
 8017160:	2101      	movne	r1, #1
 8017162:	2100      	moveq	r1, #0
 8017164:	b2c9      	uxtb	r1, r1
 8017166:	f003 0007 	and.w	r0, r3, #7
 801716a:	b240      	sxtb	r0, r0
 801716c:	4290      	cmp	r0, r2
 801716e:	bfac      	ite	ge
 8017170:	2201      	movge	r2, #1
 8017172:	2200      	movlt	r2, #0
 8017174:	b2d2      	uxtb	r2, r2
 8017176:	400a      	ands	r2, r1
 8017178:	b2d2      	uxtb	r2, r2
 801717a:	2a00      	cmp	r2, #0
 801717c:	d002      	beq.n	8017184 <sendTxBuffer+0x218>
 801717e:	4618      	mov	r0, r3
 8017180:	f7f2 f974 	bl	800946c <__asan_report_load1>
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 801718a:	b2db      	uxtb	r3, r3
 801718c:	3301      	adds	r3, #1
 801718e:	b2dc      	uxtb	r4, r3
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	33c6      	adds	r3, #198	; 0xc6
 8017194:	08da      	lsrs	r2, r3, #3
 8017196:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801719a:	f992 2000 	ldrsb.w	r2, [r2]
 801719e:	2a00      	cmp	r2, #0
 80171a0:	bf14      	ite	ne
 80171a2:	2101      	movne	r1, #1
 80171a4:	2100      	moveq	r1, #0
 80171a6:	b2c9      	uxtb	r1, r1
 80171a8:	f003 0007 	and.w	r0, r3, #7
 80171ac:	b240      	sxtb	r0, r0
 80171ae:	4290      	cmp	r0, r2
 80171b0:	bfac      	ite	ge
 80171b2:	2201      	movge	r2, #1
 80171b4:	2200      	movlt	r2, #0
 80171b6:	b2d2      	uxtb	r2, r2
 80171b8:	400a      	ands	r2, r1
 80171ba:	b2d2      	uxtb	r2, r2
 80171bc:	2a00      	cmp	r2, #0
 80171be:	d002      	beq.n	80171c6 <sendTxBuffer+0x25a>
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7f2 f93b 	bl	800943c <__asan_report_store1>
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	4622      	mov	r2, r4
 80171ca:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6


     //port->write( au8Buffer, u8BufferSize );
     //HAL_UART_Transmit(&huart3, ModbusH->au8Buffer, ModbusH->u8BufferSize, 100);

     ModbusH->u8BufferSize = 0;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	33c6      	adds	r3, #198	; 0xc6
 80171d2:	08da      	lsrs	r2, r3, #3
 80171d4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80171d8:	f992 2000 	ldrsb.w	r2, [r2]
 80171dc:	2a00      	cmp	r2, #0
 80171de:	bf14      	ite	ne
 80171e0:	2101      	movne	r1, #1
 80171e2:	2100      	moveq	r1, #0
 80171e4:	b2c9      	uxtb	r1, r1
 80171e6:	f003 0007 	and.w	r0, r3, #7
 80171ea:	b240      	sxtb	r0, r0
 80171ec:	4290      	cmp	r0, r2
 80171ee:	bfac      	ite	ge
 80171f0:	2201      	movge	r2, #1
 80171f2:	2200      	movlt	r2, #0
 80171f4:	b2d2      	uxtb	r2, r2
 80171f6:	400a      	ands	r2, r1
 80171f8:	b2d2      	uxtb	r2, r2
 80171fa:	2a00      	cmp	r2, #0
 80171fc:	d004      	beq.n	8017208 <sendTxBuffer+0x29c>
 80171fe:	4618      	mov	r0, r3
 8017200:	f7f2 f91c 	bl	800943c <__asan_report_store1>
 8017204:	24011900 	.word	0x24011900
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2200      	movs	r2, #0
 801720c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

     // set time-out for master
     //u32timeOut = millis() + (unsigned long) u16timeOut;

     // increase message counter
     ModbusH->u16OutCnt++;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	33ce      	adds	r3, #206	; 0xce
 8017214:	08da      	lsrs	r2, r3, #3
 8017216:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801721a:	f992 2000 	ldrsb.w	r2, [r2]
 801721e:	2a00      	cmp	r2, #0
 8017220:	bf14      	ite	ne
 8017222:	2101      	movne	r1, #1
 8017224:	2100      	moveq	r1, #0
 8017226:	b2c9      	uxtb	r1, r1
 8017228:	f003 0007 	and.w	r0, r3, #7
 801722c:	b240      	sxtb	r0, r0
 801722e:	3001      	adds	r0, #1
 8017230:	b240      	sxtb	r0, r0
 8017232:	4290      	cmp	r0, r2
 8017234:	bfac      	ite	ge
 8017236:	2201      	movge	r2, #1
 8017238:	2200      	movlt	r2, #0
 801723a:	b2d2      	uxtb	r2, r2
 801723c:	400a      	ands	r2, r1
 801723e:	b2d2      	uxtb	r2, r2
 8017240:	2a00      	cmp	r2, #0
 8017242:	d002      	beq.n	801724a <sendTxBuffer+0x2de>
 8017244:	4618      	mov	r0, r3
 8017246:	f7f2 f91d 	bl	8009484 <__asan_report_load2>
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8017250:	3301      	adds	r3, #1
 8017252:	b29a      	uxth	r2, r3
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 }
 801725a:	bf00      	nop
 801725c:	3708      	adds	r7, #8
 801725e:	46bd      	mov	sp, r7
 8017260:	bdb0      	pop	{r4, r5, r7, pc}
 8017262:	bf00      	nop

08017264 <getRxBuffer>:




 int8_t getRxBuffer(uint8_t *au8BufferIn, uint8_t bufferlen )
 {
 8017264:	b5b0      	push	{r4, r5, r7, lr}
 8017266:	b084      	sub	sp, #16
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	460b      	mov	r3, r1
 801726e:	70fb      	strb	r3, [r7, #3]

	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 8017270:	f7f2 fdf8 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017274:	4ba9      	ldr	r3, [pc, #676]	; (801751c <getRxBuffer+0x2b8>)
 8017276:	60fb      	str	r3, [r7, #12]
     if (bufferlen >= MAX_BUFFER)
 8017278:	78fb      	ldrb	r3, [r7, #3]
 801727a:	2b3f      	cmp	r3, #63	; 0x3f
 801727c:	d929      	bls.n	80172d2 <getRxBuffer+0x6e>
     {

    	 ModbusH->u16errCnt++;
 801727e:	f7f2 fdf1 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	33d0      	adds	r3, #208	; 0xd0
 8017286:	08da      	lsrs	r2, r3, #3
 8017288:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801728c:	f992 2000 	ldrsb.w	r2, [r2]
 8017290:	2a00      	cmp	r2, #0
 8017292:	bf14      	ite	ne
 8017294:	2101      	movne	r1, #1
 8017296:	2100      	moveq	r1, #0
 8017298:	b2c9      	uxtb	r1, r1
 801729a:	f003 0007 	and.w	r0, r3, #7
 801729e:	b240      	sxtb	r0, r0
 80172a0:	3001      	adds	r0, #1
 80172a2:	b240      	sxtb	r0, r0
 80172a4:	4290      	cmp	r0, r2
 80172a6:	bfac      	ite	ge
 80172a8:	2201      	movge	r2, #1
 80172aa:	2200      	movlt	r2, #0
 80172ac:	b2d2      	uxtb	r2, r2
 80172ae:	400a      	ands	r2, r1
 80172b0:	b2d2      	uxtb	r2, r2
 80172b2:	2a00      	cmp	r2, #0
 80172b4:	d002      	beq.n	80172bc <getRxBuffer+0x58>
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7f2 f8e4 	bl	8009484 <__asan_report_load2>
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80172c2:	3301      	adds	r3, #1
 80172c4:	b29a      	uxth	r2, r3
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
         return ERR_BUFF_OVERFLOW;
 80172cc:	f06f 0402 	mvn.w	r4, #2
 80172d0:	e14e      	b.n	8017570 <getRxBuffer+0x30c>
     }



     for (ModbusH->u8BufferSize = 0; ModbusH->u8BufferSize < bufferlen; ModbusH->u8BufferSize++)
 80172d2:	f7f2 fdc7 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	33c6      	adds	r3, #198	; 0xc6
 80172da:	08da      	lsrs	r2, r3, #3
 80172dc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80172e0:	f992 2000 	ldrsb.w	r2, [r2]
 80172e4:	2a00      	cmp	r2, #0
 80172e6:	bf14      	ite	ne
 80172e8:	2101      	movne	r1, #1
 80172ea:	2100      	moveq	r1, #0
 80172ec:	b2c9      	uxtb	r1, r1
 80172ee:	f003 0007 	and.w	r0, r3, #7
 80172f2:	b240      	sxtb	r0, r0
 80172f4:	4290      	cmp	r0, r2
 80172f6:	bfac      	ite	ge
 80172f8:	2201      	movge	r2, #1
 80172fa:	2200      	movlt	r2, #0
 80172fc:	b2d2      	uxtb	r2, r2
 80172fe:	400a      	ands	r2, r1
 8017300:	b2d2      	uxtb	r2, r2
 8017302:	2a00      	cmp	r2, #0
 8017304:	d002      	beq.n	801730c <getRxBuffer+0xa8>
 8017306:	4618      	mov	r0, r3
 8017308:	f7f2 f898 	bl	800943c <__asan_report_store1>
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	2200      	movs	r2, #0
 8017310:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8017314:	e0be      	b.n	8017494 <getRxBuffer+0x230>
     {
    	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = au8BufferIn[ModbusH->u8BufferSize];
 8017316:	f7f2 fda5 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	33c6      	adds	r3, #198	; 0xc6
 801731e:	08da      	lsrs	r2, r3, #3
 8017320:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017324:	f992 2000 	ldrsb.w	r2, [r2]
 8017328:	2a00      	cmp	r2, #0
 801732a:	bf14      	ite	ne
 801732c:	2101      	movne	r1, #1
 801732e:	2100      	moveq	r1, #0
 8017330:	b2c9      	uxtb	r1, r1
 8017332:	f003 0007 	and.w	r0, r3, #7
 8017336:	b240      	sxtb	r0, r0
 8017338:	4290      	cmp	r0, r2
 801733a:	bfac      	ite	ge
 801733c:	2201      	movge	r2, #1
 801733e:	2200      	movlt	r2, #0
 8017340:	b2d2      	uxtb	r2, r2
 8017342:	400a      	ands	r2, r1
 8017344:	b2d2      	uxtb	r2, r2
 8017346:	2a00      	cmp	r2, #0
 8017348:	d002      	beq.n	8017350 <getRxBuffer+0xec>
 801734a:	4618      	mov	r0, r3
 801734c:	f7f2 f88e 	bl	800946c <__asan_report_load1>
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8017356:	b2db      	uxtb	r3, r3
 8017358:	461a      	mov	r2, r3
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	1898      	adds	r0, r3, r2
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	33c6      	adds	r3, #198	; 0xc6
 8017362:	08da      	lsrs	r2, r3, #3
 8017364:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017368:	f992 2000 	ldrsb.w	r2, [r2]
 801736c:	2a00      	cmp	r2, #0
 801736e:	bf14      	ite	ne
 8017370:	2101      	movne	r1, #1
 8017372:	2100      	moveq	r1, #0
 8017374:	b2c9      	uxtb	r1, r1
 8017376:	f003 0407 	and.w	r4, r3, #7
 801737a:	b264      	sxtb	r4, r4
 801737c:	4294      	cmp	r4, r2
 801737e:	bfac      	ite	ge
 8017380:	2201      	movge	r2, #1
 8017382:	2200      	movlt	r2, #0
 8017384:	b2d2      	uxtb	r2, r2
 8017386:	400a      	ands	r2, r1
 8017388:	b2d2      	uxtb	r2, r2
 801738a:	2a00      	cmp	r2, #0
 801738c:	d002      	beq.n	8017394 <getRxBuffer+0x130>
 801738e:	4618      	mov	r0, r3
 8017390:	f7f2 f86c 	bl	800946c <__asan_report_load1>
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 801739a:	b2db      	uxtb	r3, r3
 801739c:	4619      	mov	r1, r3
 801739e:	4603      	mov	r3, r0
 80173a0:	08da      	lsrs	r2, r3, #3
 80173a2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80173a6:	f992 2000 	ldrsb.w	r2, [r2]
 80173aa:	2a00      	cmp	r2, #0
 80173ac:	bf14      	ite	ne
 80173ae:	2401      	movne	r4, #1
 80173b0:	2400      	moveq	r4, #0
 80173b2:	b2e4      	uxtb	r4, r4
 80173b4:	f003 0507 	and.w	r5, r3, #7
 80173b8:	b26d      	sxtb	r5, r5
 80173ba:	4295      	cmp	r5, r2
 80173bc:	bfac      	ite	ge
 80173be:	2201      	movge	r2, #1
 80173c0:	2200      	movlt	r2, #0
 80173c2:	b2d2      	uxtb	r2, r2
 80173c4:	4022      	ands	r2, r4
 80173c6:	b2d2      	uxtb	r2, r2
 80173c8:	2a00      	cmp	r2, #0
 80173ca:	d002      	beq.n	80173d2 <getRxBuffer+0x16e>
 80173cc:	4618      	mov	r0, r3
 80173ce:	f7f2 f84d 	bl	800946c <__asan_report_load1>
 80173d2:	7805      	ldrb	r5, [r0, #0]
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	440b      	add	r3, r1
 80173d8:	3305      	adds	r3, #5
 80173da:	08da      	lsrs	r2, r3, #3
 80173dc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80173e0:	f992 2000 	ldrsb.w	r2, [r2]
 80173e4:	2a00      	cmp	r2, #0
 80173e6:	bf14      	ite	ne
 80173e8:	2001      	movne	r0, #1
 80173ea:	2000      	moveq	r0, #0
 80173ec:	b2c0      	uxtb	r0, r0
 80173ee:	f003 0407 	and.w	r4, r3, #7
 80173f2:	b264      	sxtb	r4, r4
 80173f4:	4294      	cmp	r4, r2
 80173f6:	bfac      	ite	ge
 80173f8:	2201      	movge	r2, #1
 80173fa:	2200      	movlt	r2, #0
 80173fc:	b2d2      	uxtb	r2, r2
 80173fe:	4002      	ands	r2, r0
 8017400:	b2d2      	uxtb	r2, r2
 8017402:	2a00      	cmp	r2, #0
 8017404:	d002      	beq.n	801740c <getRxBuffer+0x1a8>
 8017406:	4618      	mov	r0, r3
 8017408:	f7f2 f818 	bl	800943c <__asan_report_store1>
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	440b      	add	r3, r1
 8017410:	462a      	mov	r2, r5
 8017412:	715a      	strb	r2, [r3, #5]
     for (ModbusH->u8BufferSize = 0; ModbusH->u8BufferSize < bufferlen; ModbusH->u8BufferSize++)
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	33c6      	adds	r3, #198	; 0xc6
 8017418:	08da      	lsrs	r2, r3, #3
 801741a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801741e:	f992 2000 	ldrsb.w	r2, [r2]
 8017422:	2a00      	cmp	r2, #0
 8017424:	bf14      	ite	ne
 8017426:	2101      	movne	r1, #1
 8017428:	2100      	moveq	r1, #0
 801742a:	b2c9      	uxtb	r1, r1
 801742c:	f003 0007 	and.w	r0, r3, #7
 8017430:	b240      	sxtb	r0, r0
 8017432:	4290      	cmp	r0, r2
 8017434:	bfac      	ite	ge
 8017436:	2201      	movge	r2, #1
 8017438:	2200      	movlt	r2, #0
 801743a:	b2d2      	uxtb	r2, r2
 801743c:	400a      	ands	r2, r1
 801743e:	b2d2      	uxtb	r2, r2
 8017440:	2a00      	cmp	r2, #0
 8017442:	d002      	beq.n	801744a <getRxBuffer+0x1e6>
 8017444:	4618      	mov	r0, r3
 8017446:	f7f2 f811 	bl	800946c <__asan_report_load1>
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8017450:	b2db      	uxtb	r3, r3
 8017452:	3301      	adds	r3, #1
 8017454:	b2dc      	uxtb	r4, r3
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	33c6      	adds	r3, #198	; 0xc6
 801745a:	08da      	lsrs	r2, r3, #3
 801745c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017460:	f992 2000 	ldrsb.w	r2, [r2]
 8017464:	2a00      	cmp	r2, #0
 8017466:	bf14      	ite	ne
 8017468:	2101      	movne	r1, #1
 801746a:	2100      	moveq	r1, #0
 801746c:	b2c9      	uxtb	r1, r1
 801746e:	f003 0007 	and.w	r0, r3, #7
 8017472:	b240      	sxtb	r0, r0
 8017474:	4290      	cmp	r0, r2
 8017476:	bfac      	ite	ge
 8017478:	2201      	movge	r2, #1
 801747a:	2200      	movlt	r2, #0
 801747c:	b2d2      	uxtb	r2, r2
 801747e:	400a      	ands	r2, r1
 8017480:	b2d2      	uxtb	r2, r2
 8017482:	2a00      	cmp	r2, #0
 8017484:	d002      	beq.n	801748c <getRxBuffer+0x228>
 8017486:	4618      	mov	r0, r3
 8017488:	f7f1 ffd8 	bl	800943c <__asan_report_store1>
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	4622      	mov	r2, r4
 8017490:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8017494:	f7f2 fce6 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	33c6      	adds	r3, #198	; 0xc6
 801749c:	08da      	lsrs	r2, r3, #3
 801749e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80174a2:	f992 2000 	ldrsb.w	r2, [r2]
 80174a6:	2a00      	cmp	r2, #0
 80174a8:	bf14      	ite	ne
 80174aa:	2101      	movne	r1, #1
 80174ac:	2100      	moveq	r1, #0
 80174ae:	b2c9      	uxtb	r1, r1
 80174b0:	f003 0007 	and.w	r0, r3, #7
 80174b4:	b240      	sxtb	r0, r0
 80174b6:	4290      	cmp	r0, r2
 80174b8:	bfac      	ite	ge
 80174ba:	2201      	movge	r2, #1
 80174bc:	2200      	movlt	r2, #0
 80174be:	b2d2      	uxtb	r2, r2
 80174c0:	400a      	ands	r2, r1
 80174c2:	b2d2      	uxtb	r2, r2
 80174c4:	2a00      	cmp	r2, #0
 80174c6:	d002      	beq.n	80174ce <getRxBuffer+0x26a>
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7f1 ffcf 	bl	800946c <__asan_report_load1>
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	78fa      	ldrb	r2, [r7, #3]
 80174d8:	429a      	cmp	r2, r3
 80174da:	f63f af1c 	bhi.w	8017316 <getRxBuffer+0xb2>

     }

     ModbusH->u16InCnt++;
 80174de:	f7f2 fcc1 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	33cc      	adds	r3, #204	; 0xcc
 80174e6:	08da      	lsrs	r2, r3, #3
 80174e8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80174ec:	f992 2000 	ldrsb.w	r2, [r2]
 80174f0:	2a00      	cmp	r2, #0
 80174f2:	bf14      	ite	ne
 80174f4:	2101      	movne	r1, #1
 80174f6:	2100      	moveq	r1, #0
 80174f8:	b2c9      	uxtb	r1, r1
 80174fa:	f003 0007 	and.w	r0, r3, #7
 80174fe:	b240      	sxtb	r0, r0
 8017500:	3001      	adds	r0, #1
 8017502:	b240      	sxtb	r0, r0
 8017504:	4290      	cmp	r0, r2
 8017506:	bfac      	ite	ge
 8017508:	2201      	movge	r2, #1
 801750a:	2200      	movlt	r2, #0
 801750c:	b2d2      	uxtb	r2, r2
 801750e:	400a      	ands	r2, r1
 8017510:	b2d2      	uxtb	r2, r2
 8017512:	2a00      	cmp	r2, #0
 8017514:	d004      	beq.n	8017520 <getRxBuffer+0x2bc>
 8017516:	4618      	mov	r0, r3
 8017518:	f7f1 ffb4 	bl	8009484 <__asan_report_load2>
 801751c:	24011900 	.word	0x24011900
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8017526:	3301      	adds	r3, #1
 8017528:	b29a      	uxth	r2, r3
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc


     return ModbusH->u8BufferSize;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	33c6      	adds	r3, #198	; 0xc6
 8017534:	08da      	lsrs	r2, r3, #3
 8017536:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801753a:	f992 2000 	ldrsb.w	r2, [r2]
 801753e:	2a00      	cmp	r2, #0
 8017540:	bf14      	ite	ne
 8017542:	2101      	movne	r1, #1
 8017544:	2100      	moveq	r1, #0
 8017546:	b2c9      	uxtb	r1, r1
 8017548:	f003 0007 	and.w	r0, r3, #7
 801754c:	b240      	sxtb	r0, r0
 801754e:	4290      	cmp	r0, r2
 8017550:	bfac      	ite	ge
 8017552:	2201      	movge	r2, #1
 8017554:	2200      	movlt	r2, #0
 8017556:	b2d2      	uxtb	r2, r2
 8017558:	400a      	ands	r2, r1
 801755a:	b2d2      	uxtb	r2, r2
 801755c:	2a00      	cmp	r2, #0
 801755e:	d002      	beq.n	8017566 <getRxBuffer+0x302>
 8017560:	4618      	mov	r0, r3
 8017562:	f7f1 ff83 	bl	800946c <__asan_report_load1>
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 801756c:	b2db      	uxtb	r3, r3
 801756e:	b25c      	sxtb	r4, r3
 8017570:	f7f2 fc78 	bl	8009e64 <__sanitizer_cov_trace_pc>
 }
 8017574:	4623      	mov	r3, r4
 8017576:	4618      	mov	r0, r3
 8017578:	3710      	adds	r7, #16
 801757a:	46bd      	mov	sp, r7
 801757c:	bdb0      	pop	{r4, r5, r7, pc}
 801757e:	bf00      	nop

08017580 <buildException>:


 void buildException( uint8_t u8exception )
 {
 8017580:	b590      	push	{r4, r7, lr}
 8017582:	b085      	sub	sp, #20
 8017584:	af00      	add	r7, sp, #0
 8017586:	4603      	mov	r3, r0
 8017588:	71fb      	strb	r3, [r7, #7]
	 modbusHandler_t* ModbusH = (modbusHandler_t *)ModbusH_Region;
 801758a:	f7f2 fc6b 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801758e:	4b50      	ldr	r3, [pc, #320]	; (80176d0 <buildException+0x150>)
 8017590:	60fb      	str	r3, [r7, #12]
     uint8_t u8func = ModbusH->au8Buffer[ FUNC ];  // get the original FUNC code
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	3306      	adds	r3, #6
 8017596:	08da      	lsrs	r2, r3, #3
 8017598:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801759c:	f992 2000 	ldrsb.w	r2, [r2]
 80175a0:	2a00      	cmp	r2, #0
 80175a2:	bf14      	ite	ne
 80175a4:	2101      	movne	r1, #1
 80175a6:	2100      	moveq	r1, #0
 80175a8:	b2c9      	uxtb	r1, r1
 80175aa:	f003 0007 	and.w	r0, r3, #7
 80175ae:	b240      	sxtb	r0, r0
 80175b0:	4290      	cmp	r0, r2
 80175b2:	bfac      	ite	ge
 80175b4:	2201      	movge	r2, #1
 80175b6:	2200      	movlt	r2, #0
 80175b8:	b2d2      	uxtb	r2, r2
 80175ba:	400a      	ands	r2, r1
 80175bc:	b2d2      	uxtb	r2, r2
 80175be:	2a00      	cmp	r2, #0
 80175c0:	d002      	beq.n	80175c8 <buildException+0x48>
 80175c2:	4618      	mov	r0, r3
 80175c4:	f7f1 ff52 	bl	800946c <__asan_report_load1>
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	799b      	ldrb	r3, [r3, #6]
 80175cc:	72fb      	strb	r3, [r7, #11]

     ModbusH->au8Buffer[ ID ]      = ModbusH->u8id;
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	08da      	lsrs	r2, r3, #3
 80175d2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80175d6:	f992 2000 	ldrsb.w	r2, [r2]
 80175da:	2a00      	cmp	r2, #0
 80175dc:	bf14      	ite	ne
 80175de:	2101      	movne	r1, #1
 80175e0:	2100      	moveq	r1, #0
 80175e2:	b2c9      	uxtb	r1, r1
 80175e4:	f003 0007 	and.w	r0, r3, #7
 80175e8:	b240      	sxtb	r0, r0
 80175ea:	4290      	cmp	r0, r2
 80175ec:	bfac      	ite	ge
 80175ee:	2201      	movge	r2, #1
 80175f0:	2200      	movlt	r2, #0
 80175f2:	b2d2      	uxtb	r2, r2
 80175f4:	400a      	ands	r2, r1
 80175f6:	b2d2      	uxtb	r2, r2
 80175f8:	2a00      	cmp	r2, #0
 80175fa:	d002      	beq.n	8017602 <buildException+0x82>
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7f1 ff35 	bl	800946c <__asan_report_load1>
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	781c      	ldrb	r4, [r3, #0]
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	3305      	adds	r3, #5
 801760a:	08da      	lsrs	r2, r3, #3
 801760c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017610:	f992 2000 	ldrsb.w	r2, [r2]
 8017614:	2a00      	cmp	r2, #0
 8017616:	bf14      	ite	ne
 8017618:	2101      	movne	r1, #1
 801761a:	2100      	moveq	r1, #0
 801761c:	b2c9      	uxtb	r1, r1
 801761e:	f003 0007 	and.w	r0, r3, #7
 8017622:	b240      	sxtb	r0, r0
 8017624:	4290      	cmp	r0, r2
 8017626:	bfac      	ite	ge
 8017628:	2201      	movge	r2, #1
 801762a:	2200      	movlt	r2, #0
 801762c:	b2d2      	uxtb	r2, r2
 801762e:	400a      	ands	r2, r1
 8017630:	b2d2      	uxtb	r2, r2
 8017632:	2a00      	cmp	r2, #0
 8017634:	d002      	beq.n	801763c <buildException+0xbc>
 8017636:	4618      	mov	r0, r3
 8017638:	f7f1 ff00 	bl	800943c <__asan_report_store1>
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	4622      	mov	r2, r4
 8017640:	715a      	strb	r2, [r3, #5]
     ModbusH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8017642:	7afb      	ldrb	r3, [r7, #11]
 8017644:	3b80      	subs	r3, #128	; 0x80
 8017646:	b2da      	uxtb	r2, r3
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	719a      	strb	r2, [r3, #6]
     ModbusH->au8Buffer[ 2 ]       = u8exception;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	3307      	adds	r3, #7
 8017650:	08da      	lsrs	r2, r3, #3
 8017652:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017656:	f992 2000 	ldrsb.w	r2, [r2]
 801765a:	2a00      	cmp	r2, #0
 801765c:	bf14      	ite	ne
 801765e:	2101      	movne	r1, #1
 8017660:	2100      	moveq	r1, #0
 8017662:	b2c9      	uxtb	r1, r1
 8017664:	f003 0007 	and.w	r0, r3, #7
 8017668:	b240      	sxtb	r0, r0
 801766a:	4290      	cmp	r0, r2
 801766c:	bfac      	ite	ge
 801766e:	2201      	movge	r2, #1
 8017670:	2200      	movlt	r2, #0
 8017672:	b2d2      	uxtb	r2, r2
 8017674:	400a      	ands	r2, r1
 8017676:	b2d2      	uxtb	r2, r2
 8017678:	2a00      	cmp	r2, #0
 801767a:	d002      	beq.n	8017682 <buildException+0x102>
 801767c:	4618      	mov	r0, r3
 801767e:	f7f1 fedd 	bl	800943c <__asan_report_store1>
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	79fa      	ldrb	r2, [r7, #7]
 8017686:	71da      	strb	r2, [r3, #7]
     ModbusH->u8BufferSize         = EXCEPTION_SIZE;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	33c6      	adds	r3, #198	; 0xc6
 801768c:	08da      	lsrs	r2, r3, #3
 801768e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017692:	f992 2000 	ldrsb.w	r2, [r2]
 8017696:	2a00      	cmp	r2, #0
 8017698:	bf14      	ite	ne
 801769a:	2101      	movne	r1, #1
 801769c:	2100      	moveq	r1, #0
 801769e:	b2c9      	uxtb	r1, r1
 80176a0:	f003 0007 	and.w	r0, r3, #7
 80176a4:	b240      	sxtb	r0, r0
 80176a6:	4290      	cmp	r0, r2
 80176a8:	bfac      	ite	ge
 80176aa:	2201      	movge	r2, #1
 80176ac:	2200      	movlt	r2, #0
 80176ae:	b2d2      	uxtb	r2, r2
 80176b0:	400a      	ands	r2, r1
 80176b2:	b2d2      	uxtb	r2, r2
 80176b4:	2a00      	cmp	r2, #0
 80176b6:	d002      	beq.n	80176be <buildException+0x13e>
 80176b8:	4618      	mov	r0, r3
 80176ba:	f7f1 febf 	bl	800943c <__asan_report_store1>
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	2203      	movs	r2, #3
 80176c2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 }
 80176c6:	bf00      	nop
 80176c8:	3714      	adds	r7, #20
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd90      	pop	{r4, r7, pc}
 80176ce:	bf00      	nop
 80176d0:	24011900 	.word	0x24011900

080176d4 <calcCRC>:


 uint16_t calcCRC(uint8_t u8length)
 {
 80176d4:	b590      	push	{r4, r7, lr}
 80176d6:	b089      	sub	sp, #36	; 0x24
 80176d8:	af00      	add	r7, sp, #0
 80176da:	4603      	mov	r3, r0
 80176dc:	71fb      	strb	r3, [r7, #7]
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 80176de:	f7f2 fbc1 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80176e2:	4b37      	ldr	r3, [pc, #220]	; (80177c0 <calcCRC+0xec>)
 80176e4:	617b      	str	r3, [r7, #20]
     unsigned int temp, temp2, flag;
     temp = 0xFFFF;
 80176e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176ea:	613b      	str	r3, [r7, #16]
     for (unsigned char i = 0; i < u8length; i++)
 80176ec:	2300      	movs	r3, #0
 80176ee:	73bb      	strb	r3, [r7, #14]
 80176f0:	e04a      	b.n	8017788 <calcCRC+0xb4>
     {
         temp = temp ^ ModbusH->au8Buffer[i];
 80176f2:	f7f2 fbb7 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80176f6:	7bba      	ldrb	r2, [r7, #14]
 80176f8:	697b      	ldr	r3, [r7, #20]
 80176fa:	4413      	add	r3, r2
 80176fc:	3305      	adds	r3, #5
 80176fe:	08d9      	lsrs	r1, r3, #3
 8017700:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8017704:	f991 1000 	ldrsb.w	r1, [r1]
 8017708:	2900      	cmp	r1, #0
 801770a:	bf14      	ite	ne
 801770c:	2001      	movne	r0, #1
 801770e:	2000      	moveq	r0, #0
 8017710:	b2c0      	uxtb	r0, r0
 8017712:	f003 0407 	and.w	r4, r3, #7
 8017716:	b264      	sxtb	r4, r4
 8017718:	428c      	cmp	r4, r1
 801771a:	bfac      	ite	ge
 801771c:	2101      	movge	r1, #1
 801771e:	2100      	movlt	r1, #0
 8017720:	b2c9      	uxtb	r1, r1
 8017722:	4001      	ands	r1, r0
 8017724:	b2c9      	uxtb	r1, r1
 8017726:	2900      	cmp	r1, #0
 8017728:	d002      	beq.n	8017730 <calcCRC+0x5c>
 801772a:	4618      	mov	r0, r3
 801772c:	f7f1 fe9e 	bl	800946c <__asan_report_load1>
 8017730:	697b      	ldr	r3, [r7, #20]
 8017732:	4413      	add	r3, r2
 8017734:	795b      	ldrb	r3, [r3, #5]
 8017736:	461a      	mov	r2, r3
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	4053      	eors	r3, r2
 801773c:	613b      	str	r3, [r7, #16]
         for (unsigned char j = 1; j <= 8; j++)
 801773e:	2301      	movs	r3, #1
 8017740:	73fb      	strb	r3, [r7, #15]
 8017742:	e017      	b.n	8017774 <calcCRC+0xa0>
         {
             flag = temp & 0x0001;
 8017744:	f7f2 fb8e 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	f003 0301 	and.w	r3, r3, #1
 801774e:	61fb      	str	r3, [r7, #28]
             temp >>=1;
 8017750:	693b      	ldr	r3, [r7, #16]
 8017752:	085b      	lsrs	r3, r3, #1
 8017754:	613b      	str	r3, [r7, #16]
             if (flag)
 8017756:	69fb      	ldr	r3, [r7, #28]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d006      	beq.n	801776a <calcCRC+0x96>
                 temp ^= 0xA001;
 801775c:	f7f2 fb82 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017760:	693a      	ldr	r2, [r7, #16]
 8017762:	f24a 0301 	movw	r3, #40961	; 0xa001
 8017766:	4053      	eors	r3, r2
 8017768:	613b      	str	r3, [r7, #16]
         for (unsigned char j = 1; j <= 8; j++)
 801776a:	f7f2 fb7b 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801776e:	7bfb      	ldrb	r3, [r7, #15]
 8017770:	3301      	adds	r3, #1
 8017772:	73fb      	strb	r3, [r7, #15]
 8017774:	f7f2 fb76 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017778:	7bfb      	ldrb	r3, [r7, #15]
 801777a:	2b08      	cmp	r3, #8
 801777c:	d9e2      	bls.n	8017744 <calcCRC+0x70>
     for (unsigned char i = 0; i < u8length; i++)
 801777e:	f7f2 fb71 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017782:	7bbb      	ldrb	r3, [r7, #14]
 8017784:	3301      	adds	r3, #1
 8017786:	73bb      	strb	r3, [r7, #14]
 8017788:	f7f2 fb6c 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801778c:	7bba      	ldrb	r2, [r7, #14]
 801778e:	79fb      	ldrb	r3, [r7, #7]
 8017790:	429a      	cmp	r2, r3
 8017792:	d3ae      	bcc.n	80176f2 <calcCRC+0x1e>
         }
     }
     // Reverse byte order.
     temp2 = temp >> 8;
 8017794:	f7f2 fb66 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017798:	693b      	ldr	r3, [r7, #16]
 801779a:	0a1b      	lsrs	r3, r3, #8
 801779c:	61bb      	str	r3, [r7, #24]
     temp = (temp << 8) | temp2;
 801779e:	693b      	ldr	r3, [r7, #16]
 80177a0:	021b      	lsls	r3, r3, #8
 80177a2:	69ba      	ldr	r2, [r7, #24]
 80177a4:	4313      	orrs	r3, r2
 80177a6:	613b      	str	r3, [r7, #16]
     temp &= 0xFFFF;
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	b29b      	uxth	r3, r3
 80177ac:	613b      	str	r3, [r7, #16]
     // the returned value is already swapped
     // crcLo byte is first & crcHi byte is last
     return temp;
 80177ae:	693b      	ldr	r3, [r7, #16]
 80177b0:	b29c      	uxth	r4, r3
 80177b2:	f7f2 fb57 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80177b6:	4623      	mov	r3, r4
 }
 80177b8:	4618      	mov	r0, r3
 80177ba:	3724      	adds	r7, #36	; 0x24
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd90      	pop	{r4, r7, pc}
 80177c0:	24011900 	.word	0x24011900

080177c4 <validateRequest>:


 uint8_t validateRequest()
 {
 80177c4:	b5b0      	push	{r4, r5, r7, lr}
 80177c6:	b084      	sub	sp, #16
 80177c8:	af00      	add	r7, sp, #0
     // check message crc vs calculated crc
     // The assumption that last 2 bytes in the frame are CRC doesn't hold during fuzzing
	 modbusHandler_t* ModbusH = (modbusHandler_t *)ModbusH_Region;
 80177ca:	f7f2 fb4b 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80177ce:	4bab      	ldr	r3, [pc, #684]	; (8017a7c <validateRequest+0x2b8>)
 80177d0:	60fb      	str	r3, [r7, #12]
     uint16_t u16MsgCRC =
         ((ModbusH->au8Buffer[ModbusH->u8BufferSize - 2] << 8)
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	33c6      	adds	r3, #198	; 0xc6
 80177d6:	08da      	lsrs	r2, r3, #3
 80177d8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80177dc:	f992 2000 	ldrsb.w	r2, [r2]
 80177e0:	2a00      	cmp	r2, #0
 80177e2:	bf14      	ite	ne
 80177e4:	2101      	movne	r1, #1
 80177e6:	2100      	moveq	r1, #0
 80177e8:	b2c9      	uxtb	r1, r1
 80177ea:	f003 0007 	and.w	r0, r3, #7
 80177ee:	b240      	sxtb	r0, r0
 80177f0:	4290      	cmp	r0, r2
 80177f2:	bfac      	ite	ge
 80177f4:	2201      	movge	r2, #1
 80177f6:	2200      	movlt	r2, #0
 80177f8:	b2d2      	uxtb	r2, r2
 80177fa:	400a      	ands	r2, r1
 80177fc:	b2d2      	uxtb	r2, r2
 80177fe:	2a00      	cmp	r2, #0
 8017800:	d002      	beq.n	8017808 <validateRequest+0x44>
 8017802:	4618      	mov	r0, r3
 8017804:	f7f1 fe32 	bl	800946c <__asan_report_load1>
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 801780e:	b2db      	uxtb	r3, r3
 8017810:	1e9a      	subs	r2, r3, #2
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	4413      	add	r3, r2
 8017816:	3305      	adds	r3, #5
 8017818:	08d9      	lsrs	r1, r3, #3
 801781a:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801781e:	f991 1000 	ldrsb.w	r1, [r1]
 8017822:	2900      	cmp	r1, #0
 8017824:	bf14      	ite	ne
 8017826:	2001      	movne	r0, #1
 8017828:	2000      	moveq	r0, #0
 801782a:	b2c0      	uxtb	r0, r0
 801782c:	f003 0407 	and.w	r4, r3, #7
 8017830:	b264      	sxtb	r4, r4
 8017832:	428c      	cmp	r4, r1
 8017834:	bfac      	ite	ge
 8017836:	2101      	movge	r1, #1
 8017838:	2100      	movlt	r1, #0
 801783a:	b2c9      	uxtb	r1, r1
 801783c:	4001      	ands	r1, r0
 801783e:	b2c9      	uxtb	r1, r1
 8017840:	2900      	cmp	r1, #0
 8017842:	d002      	beq.n	801784a <validateRequest+0x86>
 8017844:	4618      	mov	r0, r3
 8017846:	f7f1 fe11 	bl	800946c <__asan_report_load1>
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	4413      	add	r3, r2
 801784e:	795b      	ldrb	r3, [r3, #5]
 8017850:	021b      	lsls	r3, r3, #8
          | ModbusH->au8Buffer[ModbusH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8017852:	b218      	sxth	r0, r3
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	33c6      	adds	r3, #198	; 0xc6
 8017858:	08da      	lsrs	r2, r3, #3
 801785a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801785e:	f992 2000 	ldrsb.w	r2, [r2]
 8017862:	2a00      	cmp	r2, #0
 8017864:	bf14      	ite	ne
 8017866:	2101      	movne	r1, #1
 8017868:	2100      	moveq	r1, #0
 801786a:	b2c9      	uxtb	r1, r1
 801786c:	f003 0407 	and.w	r4, r3, #7
 8017870:	b264      	sxtb	r4, r4
 8017872:	4294      	cmp	r4, r2
 8017874:	bfac      	ite	ge
 8017876:	2201      	movge	r2, #1
 8017878:	2200      	movlt	r2, #0
 801787a:	b2d2      	uxtb	r2, r2
 801787c:	400a      	ands	r2, r1
 801787e:	b2d2      	uxtb	r2, r2
 8017880:	2a00      	cmp	r2, #0
 8017882:	d002      	beq.n	801788a <validateRequest+0xc6>
 8017884:	4618      	mov	r0, r3
 8017886:	f7f1 fdf1 	bl	800946c <__asan_report_load1>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8017890:	b2db      	uxtb	r3, r3
 8017892:	1e5a      	subs	r2, r3, #1
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	4413      	add	r3, r2
 8017898:	3305      	adds	r3, #5
 801789a:	08d9      	lsrs	r1, r3, #3
 801789c:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 80178a0:	f991 1000 	ldrsb.w	r1, [r1]
 80178a4:	2900      	cmp	r1, #0
 80178a6:	bf14      	ite	ne
 80178a8:	2401      	movne	r4, #1
 80178aa:	2400      	moveq	r4, #0
 80178ac:	b2e4      	uxtb	r4, r4
 80178ae:	f003 0507 	and.w	r5, r3, #7
 80178b2:	b26d      	sxtb	r5, r5
 80178b4:	428d      	cmp	r5, r1
 80178b6:	bfac      	ite	ge
 80178b8:	2101      	movge	r1, #1
 80178ba:	2100      	movlt	r1, #0
 80178bc:	b2c9      	uxtb	r1, r1
 80178be:	4021      	ands	r1, r4
 80178c0:	b2c9      	uxtb	r1, r1
 80178c2:	2900      	cmp	r1, #0
 80178c4:	d002      	beq.n	80178cc <validateRequest+0x108>
 80178c6:	4618      	mov	r0, r3
 80178c8:	f7f1 fdd0 	bl	800946c <__asan_report_load1>
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	4413      	add	r3, r2
 80178d0:	795b      	ldrb	r3, [r3, #5]
 80178d2:	b21b      	sxth	r3, r3
 80178d4:	4303      	orrs	r3, r0
 80178d6:	b21b      	sxth	r3, r3
     uint16_t u16MsgCRC =
 80178d8:	813b      	strh	r3, [r7, #8]
         //return NO_REPLY; // we dont't return even if CRC fails to help the fuzzer
     //}


     // check fct code
     bool isSupported = false;
 80178da:	2300      	movs	r3, #0
 80178dc:	717b      	strb	r3, [r7, #5]
     for (uint8_t i = 0; i< sizeof( ModbusH->fctsupported ); i++)
 80178de:	2300      	movs	r3, #0
 80178e0:	71bb      	strb	r3, [r7, #6]
 80178e2:	e04d      	b.n	8017980 <validateRequest+0x1bc>
     {
         if (ModbusH->fctsupported[i] == ModbusH->au8Buffer[FUNC])
 80178e4:	f7f2 fabe 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80178e8:	79ba      	ldrb	r2, [r7, #6]
 80178ea:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 80178ee:	68f9      	ldr	r1, [r7, #12]
 80178f0:	440b      	add	r3, r1
 80178f2:	3305      	adds	r3, #5
 80178f4:	08d9      	lsrs	r1, r3, #3
 80178f6:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 80178fa:	f991 1000 	ldrsb.w	r1, [r1]
 80178fe:	2900      	cmp	r1, #0
 8017900:	bf14      	ite	ne
 8017902:	2001      	movne	r0, #1
 8017904:	2000      	moveq	r0, #0
 8017906:	b2c0      	uxtb	r0, r0
 8017908:	f003 0407 	and.w	r4, r3, #7
 801790c:	b264      	sxtb	r4, r4
 801790e:	428c      	cmp	r4, r1
 8017910:	bfac      	ite	ge
 8017912:	2101      	movge	r1, #1
 8017914:	2100      	movlt	r1, #0
 8017916:	b2c9      	uxtb	r1, r1
 8017918:	4001      	ands	r1, r0
 801791a:	b2c9      	uxtb	r1, r1
 801791c:	2900      	cmp	r1, #0
 801791e:	d002      	beq.n	8017926 <validateRequest+0x162>
 8017920:	4618      	mov	r0, r3
 8017922:	f7f1 fda3 	bl	800946c <__asan_report_load1>
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	4413      	add	r3, r2
 801792a:	f893 10dd 	ldrb.w	r1, [r3, #221]	; 0xdd
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	3306      	adds	r3, #6
 8017932:	08da      	lsrs	r2, r3, #3
 8017934:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017938:	f992 2000 	ldrsb.w	r2, [r2]
 801793c:	2a00      	cmp	r2, #0
 801793e:	bf14      	ite	ne
 8017940:	2001      	movne	r0, #1
 8017942:	2000      	moveq	r0, #0
 8017944:	b2c0      	uxtb	r0, r0
 8017946:	f003 0407 	and.w	r4, r3, #7
 801794a:	b264      	sxtb	r4, r4
 801794c:	4294      	cmp	r4, r2
 801794e:	bfac      	ite	ge
 8017950:	2201      	movge	r2, #1
 8017952:	2200      	movlt	r2, #0
 8017954:	b2d2      	uxtb	r2, r2
 8017956:	4002      	ands	r2, r0
 8017958:	b2d2      	uxtb	r2, r2
 801795a:	2a00      	cmp	r2, #0
 801795c:	d002      	beq.n	8017964 <validateRequest+0x1a0>
 801795e:	4618      	mov	r0, r3
 8017960:	f7f1 fd84 	bl	800946c <__asan_report_load1>
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	799b      	ldrb	r3, [r3, #6]
 8017968:	4299      	cmp	r1, r3
 801796a:	d104      	bne.n	8017976 <validateRequest+0x1b2>
         {
             isSupported = 1;
 801796c:	f7f2 fa7a 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017970:	2301      	movs	r3, #1
 8017972:	717b      	strb	r3, [r7, #5]
             break;
 8017974:	e009      	b.n	801798a <validateRequest+0x1c6>
     for (uint8_t i = 0; i< sizeof( ModbusH->fctsupported ); i++)
 8017976:	f7f2 fa75 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801797a:	79bb      	ldrb	r3, [r7, #6]
 801797c:	3301      	adds	r3, #1
 801797e:	71bb      	strb	r3, [r7, #6]
 8017980:	f7f2 fa70 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017984:	79bb      	ldrb	r3, [r7, #6]
 8017986:	2b07      	cmp	r3, #7
 8017988:	d9ac      	bls.n	80178e4 <validateRequest+0x120>
         }
     }
     if (!isSupported)
 801798a:	f7f2 fa6b 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801798e:	797b      	ldrb	r3, [r7, #5]
 8017990:	f083 0301 	eor.w	r3, r3, #1
 8017994:	b2db      	uxtb	r3, r3
 8017996:	2b00      	cmp	r3, #0
 8017998:	d028      	beq.n	80179ec <validateRequest+0x228>
     {
    	 ModbusH->u16errCnt ++;
 801799a:	f7f2 fa63 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	33d0      	adds	r3, #208	; 0xd0
 80179a2:	08da      	lsrs	r2, r3, #3
 80179a4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80179a8:	f992 2000 	ldrsb.w	r2, [r2]
 80179ac:	2a00      	cmp	r2, #0
 80179ae:	bf14      	ite	ne
 80179b0:	2101      	movne	r1, #1
 80179b2:	2100      	moveq	r1, #0
 80179b4:	b2c9      	uxtb	r1, r1
 80179b6:	f003 0007 	and.w	r0, r3, #7
 80179ba:	b240      	sxtb	r0, r0
 80179bc:	3001      	adds	r0, #1
 80179be:	b240      	sxtb	r0, r0
 80179c0:	4290      	cmp	r0, r2
 80179c2:	bfac      	ite	ge
 80179c4:	2201      	movge	r2, #1
 80179c6:	2200      	movlt	r2, #0
 80179c8:	b2d2      	uxtb	r2, r2
 80179ca:	400a      	ands	r2, r1
 80179cc:	b2d2      	uxtb	r2, r2
 80179ce:	2a00      	cmp	r2, #0
 80179d0:	d002      	beq.n	80179d8 <validateRequest+0x214>
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7f1 fd56 	bl	8009484 <__asan_report_load2>
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80179de:	3301      	adds	r3, #1
 80179e0:	b29a      	uxth	r2, r3
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
         //printf("Wrong function Code!\n");
         return EXC_FUNC_CODE;
 80179e8:	2401      	movs	r4, #1
 80179ea:	e284      	b.n	8017ef6 <validateRequest+0x732>
     }

     // check start address & nb range
     uint16_t u16regs = 0;
 80179ec:	f7f2 fa3a 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80179f0:	2300      	movs	r3, #0
 80179f2:	817b      	strh	r3, [r7, #10]
     uint8_t u8regs;
     switch ( ModbusH->au8Buffer[ FUNC ] )
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	3306      	adds	r3, #6
 80179f8:	08da      	lsrs	r2, r3, #3
 80179fa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80179fe:	f992 2000 	ldrsb.w	r2, [r2]
 8017a02:	2a00      	cmp	r2, #0
 8017a04:	bf14      	ite	ne
 8017a06:	2101      	movne	r1, #1
 8017a08:	2100      	moveq	r1, #0
 8017a0a:	b2c9      	uxtb	r1, r1
 8017a0c:	f003 0007 	and.w	r0, r3, #7
 8017a10:	b240      	sxtb	r0, r0
 8017a12:	4290      	cmp	r0, r2
 8017a14:	bfac      	ite	ge
 8017a16:	2201      	movge	r2, #1
 8017a18:	2200      	movlt	r2, #0
 8017a1a:	b2d2      	uxtb	r2, r2
 8017a1c:	400a      	ands	r2, r1
 8017a1e:	b2d2      	uxtb	r2, r2
 8017a20:	2a00      	cmp	r2, #0
 8017a22:	d002      	beq.n	8017a2a <validateRequest+0x266>
 8017a24:	4618      	mov	r0, r3
 8017a26:	f7f1 fd21 	bl	800946c <__asan_report_load1>
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	799b      	ldrb	r3, [r3, #6]
 8017a2e:	3b01      	subs	r3, #1
 8017a30:	2b0f      	cmp	r3, #15
 8017a32:	f200 825d 	bhi.w	8017ef0 <validateRequest+0x72c>
 8017a36:	a201      	add	r2, pc, #4	; (adr r2, 8017a3c <validateRequest+0x278>)
 8017a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a3c:	08017a81 	.word	0x08017a81
 8017a40:	08017a81 	.word	0x08017a81
 8017a44:	08017d8b 	.word	0x08017d8b
 8017a48:	08017d8b 	.word	0x08017d8b
 8017a4c:	08017be1 	.word	0x08017be1
 8017a50:	08017cb7 	.word	0x08017cb7
 8017a54:	08017ef1 	.word	0x08017ef1
 8017a58:	08017ef1 	.word	0x08017ef1
 8017a5c:	08017ef1 	.word	0x08017ef1
 8017a60:	08017ef1 	.word	0x08017ef1
 8017a64:	08017ef1 	.word	0x08017ef1
 8017a68:	08017ef1 	.word	0x08017ef1
 8017a6c:	08017ef1 	.word	0x08017ef1
 8017a70:	08017ef1 	.word	0x08017ef1
 8017a74:	08017a81 	.word	0x08017a81
 8017a78:	08017d8b 	.word	0x08017d8b
 8017a7c:	24011900 	.word	0x24011900
     {
     case MB_FC_READ_COILS:
     case MB_FC_READ_DISCRETE_INPUT:
     case MB_FC_WRITE_MULTIPLE_COILS:
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]) / 16;
 8017a80:	f7f2 f9f0 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	3307      	adds	r3, #7
 8017a88:	08da      	lsrs	r2, r3, #3
 8017a8a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017a8e:	f992 2000 	ldrsb.w	r2, [r2]
 8017a92:	2a00      	cmp	r2, #0
 8017a94:	bf14      	ite	ne
 8017a96:	2101      	movne	r1, #1
 8017a98:	2100      	moveq	r1, #0
 8017a9a:	b2c9      	uxtb	r1, r1
 8017a9c:	f003 0007 	and.w	r0, r3, #7
 8017aa0:	b240      	sxtb	r0, r0
 8017aa2:	4290      	cmp	r0, r2
 8017aa4:	bfac      	ite	ge
 8017aa6:	2201      	movge	r2, #1
 8017aa8:	2200      	movlt	r2, #0
 8017aaa:	b2d2      	uxtb	r2, r2
 8017aac:	400a      	ands	r2, r1
 8017aae:	b2d2      	uxtb	r2, r2
 8017ab0:	2a00      	cmp	r2, #0
 8017ab2:	d002      	beq.n	8017aba <validateRequest+0x2f6>
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	f7f1 fcd9 	bl	800946c <__asan_report_load1>
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	79dc      	ldrb	r4, [r3, #7]
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	3308      	adds	r3, #8
 8017ac2:	08da      	lsrs	r2, r3, #3
 8017ac4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017ac8:	f992 2000 	ldrsb.w	r2, [r2]
 8017acc:	2a00      	cmp	r2, #0
 8017ace:	bf14      	ite	ne
 8017ad0:	2101      	movne	r1, #1
 8017ad2:	2100      	moveq	r1, #0
 8017ad4:	b2c9      	uxtb	r1, r1
 8017ad6:	f003 0007 	and.w	r0, r3, #7
 8017ada:	b240      	sxtb	r0, r0
 8017adc:	4290      	cmp	r0, r2
 8017ade:	bfac      	ite	ge
 8017ae0:	2201      	movge	r2, #1
 8017ae2:	2200      	movlt	r2, #0
 8017ae4:	b2d2      	uxtb	r2, r2
 8017ae6:	400a      	ands	r2, r1
 8017ae8:	b2d2      	uxtb	r2, r2
 8017aea:	2a00      	cmp	r2, #0
 8017aec:	d002      	beq.n	8017af4 <validateRequest+0x330>
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7f1 fcbc 	bl	800946c <__asan_report_load1>
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	7a1b      	ldrb	r3, [r3, #8]
 8017af8:	4619      	mov	r1, r3
 8017afa:	4620      	mov	r0, r4
 8017afc:	f7ff f9da 	bl	8016eb4 <word>
 8017b00:	4603      	mov	r3, r0
 8017b02:	091b      	lsrs	r3, r3, #4
 8017b04:	817b      	strh	r3, [r7, #10]
         u16regs += word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ]) /16;
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	3309      	adds	r3, #9
 8017b0a:	08da      	lsrs	r2, r3, #3
 8017b0c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017b10:	f992 2000 	ldrsb.w	r2, [r2]
 8017b14:	2a00      	cmp	r2, #0
 8017b16:	bf14      	ite	ne
 8017b18:	2101      	movne	r1, #1
 8017b1a:	2100      	moveq	r1, #0
 8017b1c:	b2c9      	uxtb	r1, r1
 8017b1e:	f003 0007 	and.w	r0, r3, #7
 8017b22:	b240      	sxtb	r0, r0
 8017b24:	4290      	cmp	r0, r2
 8017b26:	bfac      	ite	ge
 8017b28:	2201      	movge	r2, #1
 8017b2a:	2200      	movlt	r2, #0
 8017b2c:	b2d2      	uxtb	r2, r2
 8017b2e:	400a      	ands	r2, r1
 8017b30:	b2d2      	uxtb	r2, r2
 8017b32:	2a00      	cmp	r2, #0
 8017b34:	d002      	beq.n	8017b3c <validateRequest+0x378>
 8017b36:	4618      	mov	r0, r3
 8017b38:	f7f1 fc98 	bl	800946c <__asan_report_load1>
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	7a5c      	ldrb	r4, [r3, #9]
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	330a      	adds	r3, #10
 8017b44:	08da      	lsrs	r2, r3, #3
 8017b46:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017b4a:	f992 2000 	ldrsb.w	r2, [r2]
 8017b4e:	2a00      	cmp	r2, #0
 8017b50:	bf14      	ite	ne
 8017b52:	2101      	movne	r1, #1
 8017b54:	2100      	moveq	r1, #0
 8017b56:	b2c9      	uxtb	r1, r1
 8017b58:	f003 0007 	and.w	r0, r3, #7
 8017b5c:	b240      	sxtb	r0, r0
 8017b5e:	4290      	cmp	r0, r2
 8017b60:	bfac      	ite	ge
 8017b62:	2201      	movge	r2, #1
 8017b64:	2200      	movlt	r2, #0
 8017b66:	b2d2      	uxtb	r2, r2
 8017b68:	400a      	ands	r2, r1
 8017b6a:	b2d2      	uxtb	r2, r2
 8017b6c:	2a00      	cmp	r2, #0
 8017b6e:	d002      	beq.n	8017b76 <validateRequest+0x3b2>
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7f1 fc7b 	bl	800946c <__asan_report_load1>
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	7a9b      	ldrb	r3, [r3, #10]
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	f7ff f999 	bl	8016eb4 <word>
 8017b82:	4603      	mov	r3, r0
 8017b84:	091b      	lsrs	r3, r3, #4
 8017b86:	b29b      	uxth	r3, r3
 8017b88:	b29a      	uxth	r2, r3
 8017b8a:	897b      	ldrh	r3, [r7, #10]
 8017b8c:	4413      	add	r3, r2
 8017b8e:	817b      	strh	r3, [r7, #10]
         u8regs = (uint8_t) u16regs;
 8017b90:	897b      	ldrh	r3, [r7, #10]
 8017b92:	71fb      	strb	r3, [r7, #7]
         if (u8regs > ModbusH->u8regsize)
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	33dc      	adds	r3, #220	; 0xdc
 8017b98:	08da      	lsrs	r2, r3, #3
 8017b9a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017b9e:	f992 2000 	ldrsb.w	r2, [r2]
 8017ba2:	2a00      	cmp	r2, #0
 8017ba4:	bf14      	ite	ne
 8017ba6:	2101      	movne	r1, #1
 8017ba8:	2100      	moveq	r1, #0
 8017baa:	b2c9      	uxtb	r1, r1
 8017bac:	f003 0007 	and.w	r0, r3, #7
 8017bb0:	b240      	sxtb	r0, r0
 8017bb2:	4290      	cmp	r0, r2
 8017bb4:	bfac      	ite	ge
 8017bb6:	2201      	movge	r2, #1
 8017bb8:	2200      	movlt	r2, #0
 8017bba:	b2d2      	uxtb	r2, r2
 8017bbc:	400a      	ands	r2, r1
 8017bbe:	b2d2      	uxtb	r2, r2
 8017bc0:	2a00      	cmp	r2, #0
 8017bc2:	d002      	beq.n	8017bca <validateRequest+0x406>
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	f7f1 fc51 	bl	800946c <__asan_report_load1>
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8017bd0:	79fa      	ldrb	r2, [r7, #7]
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	f240 8185 	bls.w	8017ee2 <validateRequest+0x71e>
         {
        	 //printf("EXC_ADDR_RANGE!\n");
        	 return EXC_ADDR_RANGE;
 8017bd8:	f7f2 f944 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017bdc:	2402      	movs	r4, #2
 8017bde:	e18a      	b.n	8017ef6 <validateRequest+0x732>
         }

         break;
     case MB_FC_WRITE_COIL:
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]) / 16;
 8017be0:	f7f2 f940 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	3307      	adds	r3, #7
 8017be8:	08da      	lsrs	r2, r3, #3
 8017bea:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017bee:	f992 2000 	ldrsb.w	r2, [r2]
 8017bf2:	2a00      	cmp	r2, #0
 8017bf4:	bf14      	ite	ne
 8017bf6:	2101      	movne	r1, #1
 8017bf8:	2100      	moveq	r1, #0
 8017bfa:	b2c9      	uxtb	r1, r1
 8017bfc:	f003 0007 	and.w	r0, r3, #7
 8017c00:	b240      	sxtb	r0, r0
 8017c02:	4290      	cmp	r0, r2
 8017c04:	bfac      	ite	ge
 8017c06:	2201      	movge	r2, #1
 8017c08:	2200      	movlt	r2, #0
 8017c0a:	b2d2      	uxtb	r2, r2
 8017c0c:	400a      	ands	r2, r1
 8017c0e:	b2d2      	uxtb	r2, r2
 8017c10:	2a00      	cmp	r2, #0
 8017c12:	d002      	beq.n	8017c1a <validateRequest+0x456>
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7f1 fc29 	bl	800946c <__asan_report_load1>
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	79dc      	ldrb	r4, [r3, #7]
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	3308      	adds	r3, #8
 8017c22:	08da      	lsrs	r2, r3, #3
 8017c24:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017c28:	f992 2000 	ldrsb.w	r2, [r2]
 8017c2c:	2a00      	cmp	r2, #0
 8017c2e:	bf14      	ite	ne
 8017c30:	2101      	movne	r1, #1
 8017c32:	2100      	moveq	r1, #0
 8017c34:	b2c9      	uxtb	r1, r1
 8017c36:	f003 0007 	and.w	r0, r3, #7
 8017c3a:	b240      	sxtb	r0, r0
 8017c3c:	4290      	cmp	r0, r2
 8017c3e:	bfac      	ite	ge
 8017c40:	2201      	movge	r2, #1
 8017c42:	2200      	movlt	r2, #0
 8017c44:	b2d2      	uxtb	r2, r2
 8017c46:	400a      	ands	r2, r1
 8017c48:	b2d2      	uxtb	r2, r2
 8017c4a:	2a00      	cmp	r2, #0
 8017c4c:	d002      	beq.n	8017c54 <validateRequest+0x490>
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7f1 fc0c 	bl	800946c <__asan_report_load1>
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	7a1b      	ldrb	r3, [r3, #8]
 8017c58:	4619      	mov	r1, r3
 8017c5a:	4620      	mov	r0, r4
 8017c5c:	f7ff f92a 	bl	8016eb4 <word>
 8017c60:	4603      	mov	r3, r0
 8017c62:	091b      	lsrs	r3, r3, #4
 8017c64:	817b      	strh	r3, [r7, #10]
         u8regs = (uint8_t) u16regs;
 8017c66:	897b      	ldrh	r3, [r7, #10]
 8017c68:	71fb      	strb	r3, [r7, #7]
         if (u8regs > ModbusH->u8regsize)
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	33dc      	adds	r3, #220	; 0xdc
 8017c6e:	08da      	lsrs	r2, r3, #3
 8017c70:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017c74:	f992 2000 	ldrsb.w	r2, [r2]
 8017c78:	2a00      	cmp	r2, #0
 8017c7a:	bf14      	ite	ne
 8017c7c:	2101      	movne	r1, #1
 8017c7e:	2100      	moveq	r1, #0
 8017c80:	b2c9      	uxtb	r1, r1
 8017c82:	f003 0007 	and.w	r0, r3, #7
 8017c86:	b240      	sxtb	r0, r0
 8017c88:	4290      	cmp	r0, r2
 8017c8a:	bfac      	ite	ge
 8017c8c:	2201      	movge	r2, #1
 8017c8e:	2200      	movlt	r2, #0
 8017c90:	b2d2      	uxtb	r2, r2
 8017c92:	400a      	ands	r2, r1
 8017c94:	b2d2      	uxtb	r2, r2
 8017c96:	2a00      	cmp	r2, #0
 8017c98:	d002      	beq.n	8017ca0 <validateRequest+0x4dc>
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7f1 fbe6 	bl	800946c <__asan_report_load1>
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8017ca6:	79fa      	ldrb	r2, [r7, #7]
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	f240 811c 	bls.w	8017ee6 <validateRequest+0x722>
         {
        	 //printf("EXC_ADDR_RANGE!\n");
        	 return EXC_ADDR_RANGE;
 8017cae:	f7f2 f8d9 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017cb2:	2402      	movs	r4, #2
 8017cb4:	e11f      	b.n	8017ef6 <validateRequest+0x732>
         }
         break;
     case MB_FC_WRITE_REGISTER :
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]);
 8017cb6:	f7f2 f8d5 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	3307      	adds	r3, #7
 8017cbe:	08da      	lsrs	r2, r3, #3
 8017cc0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017cc4:	f992 2000 	ldrsb.w	r2, [r2]
 8017cc8:	2a00      	cmp	r2, #0
 8017cca:	bf14      	ite	ne
 8017ccc:	2101      	movne	r1, #1
 8017cce:	2100      	moveq	r1, #0
 8017cd0:	b2c9      	uxtb	r1, r1
 8017cd2:	f003 0007 	and.w	r0, r3, #7
 8017cd6:	b240      	sxtb	r0, r0
 8017cd8:	4290      	cmp	r0, r2
 8017cda:	bfac      	ite	ge
 8017cdc:	2201      	movge	r2, #1
 8017cde:	2200      	movlt	r2, #0
 8017ce0:	b2d2      	uxtb	r2, r2
 8017ce2:	400a      	ands	r2, r1
 8017ce4:	b2d2      	uxtb	r2, r2
 8017ce6:	2a00      	cmp	r2, #0
 8017ce8:	d002      	beq.n	8017cf0 <validateRequest+0x52c>
 8017cea:	4618      	mov	r0, r3
 8017cec:	f7f1 fbbe 	bl	800946c <__asan_report_load1>
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	79dc      	ldrb	r4, [r3, #7]
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	3308      	adds	r3, #8
 8017cf8:	08da      	lsrs	r2, r3, #3
 8017cfa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017cfe:	f992 2000 	ldrsb.w	r2, [r2]
 8017d02:	2a00      	cmp	r2, #0
 8017d04:	bf14      	ite	ne
 8017d06:	2101      	movne	r1, #1
 8017d08:	2100      	moveq	r1, #0
 8017d0a:	b2c9      	uxtb	r1, r1
 8017d0c:	f003 0007 	and.w	r0, r3, #7
 8017d10:	b240      	sxtb	r0, r0
 8017d12:	4290      	cmp	r0, r2
 8017d14:	bfac      	ite	ge
 8017d16:	2201      	movge	r2, #1
 8017d18:	2200      	movlt	r2, #0
 8017d1a:	b2d2      	uxtb	r2, r2
 8017d1c:	400a      	ands	r2, r1
 8017d1e:	b2d2      	uxtb	r2, r2
 8017d20:	2a00      	cmp	r2, #0
 8017d22:	d002      	beq.n	8017d2a <validateRequest+0x566>
 8017d24:	4618      	mov	r0, r3
 8017d26:	f7f1 fba1 	bl	800946c <__asan_report_load1>
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	7a1b      	ldrb	r3, [r3, #8]
 8017d2e:	4619      	mov	r1, r3
 8017d30:	4620      	mov	r0, r4
 8017d32:	f7ff f8bf 	bl	8016eb4 <word>
 8017d36:	4603      	mov	r3, r0
 8017d38:	817b      	strh	r3, [r7, #10]
         u8regs = (uint8_t) u16regs;
 8017d3a:	897b      	ldrh	r3, [r7, #10]
 8017d3c:	71fb      	strb	r3, [r7, #7]
         if (u8regs > ModbusH->u8regsize)
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	33dc      	adds	r3, #220	; 0xdc
 8017d42:	08da      	lsrs	r2, r3, #3
 8017d44:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017d48:	f992 2000 	ldrsb.w	r2, [r2]
 8017d4c:	2a00      	cmp	r2, #0
 8017d4e:	bf14      	ite	ne
 8017d50:	2101      	movne	r1, #1
 8017d52:	2100      	moveq	r1, #0
 8017d54:	b2c9      	uxtb	r1, r1
 8017d56:	f003 0007 	and.w	r0, r3, #7
 8017d5a:	b240      	sxtb	r0, r0
 8017d5c:	4290      	cmp	r0, r2
 8017d5e:	bfac      	ite	ge
 8017d60:	2201      	movge	r2, #1
 8017d62:	2200      	movlt	r2, #0
 8017d64:	b2d2      	uxtb	r2, r2
 8017d66:	400a      	ands	r2, r1
 8017d68:	b2d2      	uxtb	r2, r2
 8017d6a:	2a00      	cmp	r2, #0
 8017d6c:	d002      	beq.n	8017d74 <validateRequest+0x5b0>
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7f1 fb7c 	bl	800946c <__asan_report_load1>
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8017d7a:	79fa      	ldrb	r2, [r7, #7]
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	f240 80b4 	bls.w	8017eea <validateRequest+0x726>
         {
           	 //printf("EXC_ADDR_RANGE!\n");
           	 return EXC_ADDR_RANGE;
 8017d82:	f7f2 f86f 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017d86:	2402      	movs	r4, #2
 8017d88:	e0b5      	b.n	8017ef6 <validateRequest+0x732>
         }
         break;
     case MB_FC_READ_REGISTERS :
     case MB_FC_READ_INPUT_REGISTER :
     case MB_FC_WRITE_MULTIPLE_REGISTERS :
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]);
 8017d8a:	f7f2 f86b 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	3307      	adds	r3, #7
 8017d92:	08da      	lsrs	r2, r3, #3
 8017d94:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017d98:	f992 2000 	ldrsb.w	r2, [r2]
 8017d9c:	2a00      	cmp	r2, #0
 8017d9e:	bf14      	ite	ne
 8017da0:	2101      	movne	r1, #1
 8017da2:	2100      	moveq	r1, #0
 8017da4:	b2c9      	uxtb	r1, r1
 8017da6:	f003 0007 	and.w	r0, r3, #7
 8017daa:	b240      	sxtb	r0, r0
 8017dac:	4290      	cmp	r0, r2
 8017dae:	bfac      	ite	ge
 8017db0:	2201      	movge	r2, #1
 8017db2:	2200      	movlt	r2, #0
 8017db4:	b2d2      	uxtb	r2, r2
 8017db6:	400a      	ands	r2, r1
 8017db8:	b2d2      	uxtb	r2, r2
 8017dba:	2a00      	cmp	r2, #0
 8017dbc:	d002      	beq.n	8017dc4 <validateRequest+0x600>
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f7f1 fb54 	bl	800946c <__asan_report_load1>
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	79dc      	ldrb	r4, [r3, #7]
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	3308      	adds	r3, #8
 8017dcc:	08da      	lsrs	r2, r3, #3
 8017dce:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017dd2:	f992 2000 	ldrsb.w	r2, [r2]
 8017dd6:	2a00      	cmp	r2, #0
 8017dd8:	bf14      	ite	ne
 8017dda:	2101      	movne	r1, #1
 8017ddc:	2100      	moveq	r1, #0
 8017dde:	b2c9      	uxtb	r1, r1
 8017de0:	f003 0007 	and.w	r0, r3, #7
 8017de4:	b240      	sxtb	r0, r0
 8017de6:	4290      	cmp	r0, r2
 8017de8:	bfac      	ite	ge
 8017dea:	2201      	movge	r2, #1
 8017dec:	2200      	movlt	r2, #0
 8017dee:	b2d2      	uxtb	r2, r2
 8017df0:	400a      	ands	r2, r1
 8017df2:	b2d2      	uxtb	r2, r2
 8017df4:	2a00      	cmp	r2, #0
 8017df6:	d002      	beq.n	8017dfe <validateRequest+0x63a>
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f7f1 fb37 	bl	800946c <__asan_report_load1>
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	7a1b      	ldrb	r3, [r3, #8]
 8017e02:	4619      	mov	r1, r3
 8017e04:	4620      	mov	r0, r4
 8017e06:	f7ff f855 	bl	8016eb4 <word>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	817b      	strh	r3, [r7, #10]
         u16regs += word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ]);
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	3309      	adds	r3, #9
 8017e12:	08da      	lsrs	r2, r3, #3
 8017e14:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017e18:	f992 2000 	ldrsb.w	r2, [r2]
 8017e1c:	2a00      	cmp	r2, #0
 8017e1e:	bf14      	ite	ne
 8017e20:	2101      	movne	r1, #1
 8017e22:	2100      	moveq	r1, #0
 8017e24:	b2c9      	uxtb	r1, r1
 8017e26:	f003 0007 	and.w	r0, r3, #7
 8017e2a:	b240      	sxtb	r0, r0
 8017e2c:	4290      	cmp	r0, r2
 8017e2e:	bfac      	ite	ge
 8017e30:	2201      	movge	r2, #1
 8017e32:	2200      	movlt	r2, #0
 8017e34:	b2d2      	uxtb	r2, r2
 8017e36:	400a      	ands	r2, r1
 8017e38:	b2d2      	uxtb	r2, r2
 8017e3a:	2a00      	cmp	r2, #0
 8017e3c:	d002      	beq.n	8017e44 <validateRequest+0x680>
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7f1 fb14 	bl	800946c <__asan_report_load1>
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	7a5c      	ldrb	r4, [r3, #9]
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	330a      	adds	r3, #10
 8017e4c:	08da      	lsrs	r2, r3, #3
 8017e4e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017e52:	f992 2000 	ldrsb.w	r2, [r2]
 8017e56:	2a00      	cmp	r2, #0
 8017e58:	bf14      	ite	ne
 8017e5a:	2101      	movne	r1, #1
 8017e5c:	2100      	moveq	r1, #0
 8017e5e:	b2c9      	uxtb	r1, r1
 8017e60:	f003 0007 	and.w	r0, r3, #7
 8017e64:	b240      	sxtb	r0, r0
 8017e66:	4290      	cmp	r0, r2
 8017e68:	bfac      	ite	ge
 8017e6a:	2201      	movge	r2, #1
 8017e6c:	2200      	movlt	r2, #0
 8017e6e:	b2d2      	uxtb	r2, r2
 8017e70:	400a      	ands	r2, r1
 8017e72:	b2d2      	uxtb	r2, r2
 8017e74:	2a00      	cmp	r2, #0
 8017e76:	d002      	beq.n	8017e7e <validateRequest+0x6ba>
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f7f1 faf7 	bl	800946c <__asan_report_load1>
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	7a9b      	ldrb	r3, [r3, #10]
 8017e82:	4619      	mov	r1, r3
 8017e84:	4620      	mov	r0, r4
 8017e86:	f7ff f815 	bl	8016eb4 <word>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	461a      	mov	r2, r3
 8017e8e:	897b      	ldrh	r3, [r7, #10]
 8017e90:	4413      	add	r3, r2
 8017e92:	817b      	strh	r3, [r7, #10]
         u8regs = (uint8_t) u16regs;
 8017e94:	897b      	ldrh	r3, [r7, #10]
 8017e96:	71fb      	strb	r3, [r7, #7]
         if (u8regs > ModbusH->u8regsize)
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	33dc      	adds	r3, #220	; 0xdc
 8017e9c:	08da      	lsrs	r2, r3, #3
 8017e9e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017ea2:	f992 2000 	ldrsb.w	r2, [r2]
 8017ea6:	2a00      	cmp	r2, #0
 8017ea8:	bf14      	ite	ne
 8017eaa:	2101      	movne	r1, #1
 8017eac:	2100      	moveq	r1, #0
 8017eae:	b2c9      	uxtb	r1, r1
 8017eb0:	f003 0007 	and.w	r0, r3, #7
 8017eb4:	b240      	sxtb	r0, r0
 8017eb6:	4290      	cmp	r0, r2
 8017eb8:	bfac      	ite	ge
 8017eba:	2201      	movge	r2, #1
 8017ebc:	2200      	movlt	r2, #0
 8017ebe:	b2d2      	uxtb	r2, r2
 8017ec0:	400a      	ands	r2, r1
 8017ec2:	b2d2      	uxtb	r2, r2
 8017ec4:	2a00      	cmp	r2, #0
 8017ec6:	d002      	beq.n	8017ece <validateRequest+0x70a>
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f7f1 facf 	bl	800946c <__asan_report_load1>
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8017ed4:	79fa      	ldrb	r2, [r7, #7]
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d909      	bls.n	8017eee <validateRequest+0x72a>
         {
           	 //printf("EXC_ADDR_RANGE!\n");
           	 return EXC_ADDR_RANGE;
 8017eda:	f7f1 ffc3 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017ede:	2402      	movs	r4, #2
 8017ee0:	e009      	b.n	8017ef6 <validateRequest+0x732>
         break;
 8017ee2:	bf00      	nop
 8017ee4:	e004      	b.n	8017ef0 <validateRequest+0x72c>
         break;
 8017ee6:	bf00      	nop
 8017ee8:	e002      	b.n	8017ef0 <validateRequest+0x72c>
         break;
 8017eea:	bf00      	nop
 8017eec:	e000      	b.n	8017ef0 <validateRequest+0x72c>
         }
         break;
 8017eee:	bf00      	nop
     }
     return 0; // OK, no exception code thrown
 8017ef0:	f7f1 ffb8 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017ef4:	2400      	movs	r4, #0
 8017ef6:	f7f1 ffb5 	bl	8009e64 <__sanitizer_cov_trace_pc>
 }
 8017efa:	4623      	mov	r3, r4
 8017efc:	4618      	mov	r0, r3
 8017efe:	3710      	adds	r7, #16
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bdb0      	pop	{r4, r5, r7, pc}

08017f04 <process_FC1>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup discrete
  */
 int8_t process_FC1( uint16_t *regs, uint8_t u8size )
 {
 8017f04:	b5b0      	push	{r4, r5, r7, lr}
 8017f06:	b086      	sub	sp, #24
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	460b      	mov	r3, r1
 8017f0e:	70fb      	strb	r3, [r7, #3]
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 8017f10:	f7f1 ffa8 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8017f14:	4ba5      	ldr	r3, [pc, #660]	; (80181ac <process_FC1+0x2a8>)
 8017f16:	617b      	str	r3, [r7, #20]
     uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
     //uint8_t u8CopyBufferSize;
     uint16_t u16currentCoil, u16coil;

     // get the first and last coil from the message
     uint16_t u16StartCoil = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 8017f18:	697b      	ldr	r3, [r7, #20]
 8017f1a:	3307      	adds	r3, #7
 8017f1c:	08da      	lsrs	r2, r3, #3
 8017f1e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017f22:	f992 2000 	ldrsb.w	r2, [r2]
 8017f26:	2a00      	cmp	r2, #0
 8017f28:	bf14      	ite	ne
 8017f2a:	2101      	movne	r1, #1
 8017f2c:	2100      	moveq	r1, #0
 8017f2e:	b2c9      	uxtb	r1, r1
 8017f30:	f003 0007 	and.w	r0, r3, #7
 8017f34:	b240      	sxtb	r0, r0
 8017f36:	4290      	cmp	r0, r2
 8017f38:	bfac      	ite	ge
 8017f3a:	2201      	movge	r2, #1
 8017f3c:	2200      	movlt	r2, #0
 8017f3e:	b2d2      	uxtb	r2, r2
 8017f40:	400a      	ands	r2, r1
 8017f42:	b2d2      	uxtb	r2, r2
 8017f44:	2a00      	cmp	r2, #0
 8017f46:	d002      	beq.n	8017f4e <process_FC1+0x4a>
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f7f1 fa8f 	bl	800946c <__asan_report_load1>
 8017f4e:	697b      	ldr	r3, [r7, #20]
 8017f50:	79dc      	ldrb	r4, [r3, #7]
 8017f52:	697b      	ldr	r3, [r7, #20]
 8017f54:	3308      	adds	r3, #8
 8017f56:	08da      	lsrs	r2, r3, #3
 8017f58:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017f5c:	f992 2000 	ldrsb.w	r2, [r2]
 8017f60:	2a00      	cmp	r2, #0
 8017f62:	bf14      	ite	ne
 8017f64:	2101      	movne	r1, #1
 8017f66:	2100      	moveq	r1, #0
 8017f68:	b2c9      	uxtb	r1, r1
 8017f6a:	f003 0007 	and.w	r0, r3, #7
 8017f6e:	b240      	sxtb	r0, r0
 8017f70:	4290      	cmp	r0, r2
 8017f72:	bfac      	ite	ge
 8017f74:	2201      	movge	r2, #1
 8017f76:	2200      	movlt	r2, #0
 8017f78:	b2d2      	uxtb	r2, r2
 8017f7a:	400a      	ands	r2, r1
 8017f7c:	b2d2      	uxtb	r2, r2
 8017f7e:	2a00      	cmp	r2, #0
 8017f80:	d002      	beq.n	8017f88 <process_FC1+0x84>
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7f1 fa72 	bl	800946c <__asan_report_load1>
 8017f88:	697b      	ldr	r3, [r7, #20]
 8017f8a:	7a1b      	ldrb	r3, [r3, #8]
 8017f8c:	4619      	mov	r1, r3
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f7fe ff90 	bl	8016eb4 <word>
 8017f94:	4603      	mov	r3, r0
 8017f96:	81fb      	strh	r3, [r7, #14]
     uint16_t u16Coilno = word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ] );
 8017f98:	697b      	ldr	r3, [r7, #20]
 8017f9a:	3309      	adds	r3, #9
 8017f9c:	08da      	lsrs	r2, r3, #3
 8017f9e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017fa2:	f992 2000 	ldrsb.w	r2, [r2]
 8017fa6:	2a00      	cmp	r2, #0
 8017fa8:	bf14      	ite	ne
 8017faa:	2101      	movne	r1, #1
 8017fac:	2100      	moveq	r1, #0
 8017fae:	b2c9      	uxtb	r1, r1
 8017fb0:	f003 0007 	and.w	r0, r3, #7
 8017fb4:	b240      	sxtb	r0, r0
 8017fb6:	4290      	cmp	r0, r2
 8017fb8:	bfac      	ite	ge
 8017fba:	2201      	movge	r2, #1
 8017fbc:	2200      	movlt	r2, #0
 8017fbe:	b2d2      	uxtb	r2, r2
 8017fc0:	400a      	ands	r2, r1
 8017fc2:	b2d2      	uxtb	r2, r2
 8017fc4:	2a00      	cmp	r2, #0
 8017fc6:	d002      	beq.n	8017fce <process_FC1+0xca>
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7f1 fa4f 	bl	800946c <__asan_report_load1>
 8017fce:	697b      	ldr	r3, [r7, #20]
 8017fd0:	7a5c      	ldrb	r4, [r3, #9]
 8017fd2:	697b      	ldr	r3, [r7, #20]
 8017fd4:	330a      	adds	r3, #10
 8017fd6:	08da      	lsrs	r2, r3, #3
 8017fd8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017fdc:	f992 2000 	ldrsb.w	r2, [r2]
 8017fe0:	2a00      	cmp	r2, #0
 8017fe2:	bf14      	ite	ne
 8017fe4:	2101      	movne	r1, #1
 8017fe6:	2100      	moveq	r1, #0
 8017fe8:	b2c9      	uxtb	r1, r1
 8017fea:	f003 0007 	and.w	r0, r3, #7
 8017fee:	b240      	sxtb	r0, r0
 8017ff0:	4290      	cmp	r0, r2
 8017ff2:	bfac      	ite	ge
 8017ff4:	2201      	movge	r2, #1
 8017ff6:	2200      	movlt	r2, #0
 8017ff8:	b2d2      	uxtb	r2, r2
 8017ffa:	400a      	ands	r2, r1
 8017ffc:	b2d2      	uxtb	r2, r2
 8017ffe:	2a00      	cmp	r2, #0
 8018000:	d002      	beq.n	8018008 <process_FC1+0x104>
 8018002:	4618      	mov	r0, r3
 8018004:	f7f1 fa32 	bl	800946c <__asan_report_load1>
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	7a9b      	ldrb	r3, [r3, #10]
 801800c:	4619      	mov	r1, r3
 801800e:	4620      	mov	r0, r4
 8018010:	f7fe ff50 	bl	8016eb4 <word>
 8018014:	4603      	mov	r3, r0
 8018016:	823b      	strh	r3, [r7, #16]

     // put the number of bytes in the outcoming message
     u8bytesno = (uint8_t) (u16Coilno / 8);
 8018018:	8a3b      	ldrh	r3, [r7, #16]
 801801a:	08db      	lsrs	r3, r3, #3
 801801c:	b29b      	uxth	r3, r3
 801801e:	723b      	strb	r3, [r7, #8]
     if (u16Coilno % 8 != 0) u8bytesno ++;
 8018020:	8a3b      	ldrh	r3, [r7, #16]
 8018022:	f003 0307 	and.w	r3, r3, #7
 8018026:	b29b      	uxth	r3, r3
 8018028:	2b00      	cmp	r3, #0
 801802a:	d004      	beq.n	8018036 <process_FC1+0x132>
 801802c:	f7f1 ff1a 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018030:	7a3b      	ldrb	r3, [r7, #8]
 8018032:	3301      	adds	r3, #1
 8018034:	723b      	strb	r3, [r7, #8]
     ModbusH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8018036:	f7f1 ff15 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	3307      	adds	r3, #7
 801803e:	08da      	lsrs	r2, r3, #3
 8018040:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018044:	f992 2000 	ldrsb.w	r2, [r2]
 8018048:	2a00      	cmp	r2, #0
 801804a:	bf14      	ite	ne
 801804c:	2101      	movne	r1, #1
 801804e:	2100      	moveq	r1, #0
 8018050:	b2c9      	uxtb	r1, r1
 8018052:	f003 0007 	and.w	r0, r3, #7
 8018056:	b240      	sxtb	r0, r0
 8018058:	4290      	cmp	r0, r2
 801805a:	bfac      	ite	ge
 801805c:	2201      	movge	r2, #1
 801805e:	2200      	movlt	r2, #0
 8018060:	b2d2      	uxtb	r2, r2
 8018062:	400a      	ands	r2, r1
 8018064:	b2d2      	uxtb	r2, r2
 8018066:	2a00      	cmp	r2, #0
 8018068:	d002      	beq.n	8018070 <process_FC1+0x16c>
 801806a:	4618      	mov	r0, r3
 801806c:	f7f1 f9e6 	bl	800943c <__asan_report_store1>
 8018070:	697b      	ldr	r3, [r7, #20]
 8018072:	7a3a      	ldrb	r2, [r7, #8]
 8018074:	71da      	strb	r2, [r3, #7]
     ModbusH->u8BufferSize         = ADD_LO;
 8018076:	697b      	ldr	r3, [r7, #20]
 8018078:	33c6      	adds	r3, #198	; 0xc6
 801807a:	08da      	lsrs	r2, r3, #3
 801807c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018080:	f992 2000 	ldrsb.w	r2, [r2]
 8018084:	2a00      	cmp	r2, #0
 8018086:	bf14      	ite	ne
 8018088:	2101      	movne	r1, #1
 801808a:	2100      	moveq	r1, #0
 801808c:	b2c9      	uxtb	r1, r1
 801808e:	f003 0007 	and.w	r0, r3, #7
 8018092:	b240      	sxtb	r0, r0
 8018094:	4290      	cmp	r0, r2
 8018096:	bfac      	ite	ge
 8018098:	2201      	movge	r2, #1
 801809a:	2200      	movlt	r2, #0
 801809c:	b2d2      	uxtb	r2, r2
 801809e:	400a      	ands	r2, r1
 80180a0:	b2d2      	uxtb	r2, r2
 80180a2:	2a00      	cmp	r2, #0
 80180a4:	d002      	beq.n	80180ac <process_FC1+0x1a8>
 80180a6:	4618      	mov	r0, r3
 80180a8:	f7f1 f9c8 	bl	800943c <__asan_report_store1>
 80180ac:	697b      	ldr	r3, [r7, #20]
 80180ae:	2203      	movs	r2, #3
 80180b0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

     // read each coil from the register map and put its value inside the outcoming message
     u8bitsno = 0;
 80180b4:	2300      	movs	r3, #0
 80180b6:	727b      	strb	r3, [r7, #9]

     for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80180b8:	2300      	movs	r3, #0
 80180ba:	81bb      	strh	r3, [r7, #12]
 80180bc:	e160      	b.n	8018380 <process_FC1+0x47c>
     {
         u16coil = u16StartCoil + u16currentCoil;
 80180be:	f7f1 fed1 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80180c2:	89fa      	ldrh	r2, [r7, #14]
 80180c4:	89bb      	ldrh	r3, [r7, #12]
 80180c6:	4413      	add	r3, r2
 80180c8:	827b      	strh	r3, [r7, #18]
         // 16 bits per register
         u8currentRegister = (uint8_t) (u16coil / 16);
 80180ca:	8a7b      	ldrh	r3, [r7, #18]
 80180cc:	091b      	lsrs	r3, r3, #4
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	72bb      	strb	r3, [r7, #10]
         u8currentBit = (uint8_t) (u16coil % 16);
 80180d2:	8a7b      	ldrh	r3, [r7, #18]
 80180d4:	b2db      	uxtb	r3, r3
 80180d6:	f003 030f 	and.w	r3, r3, #15
 80180da:	72fb      	strb	r3, [r7, #11]

         bitWrite(
 80180dc:	7abb      	ldrb	r3, [r7, #10]
 80180de:	005b      	lsls	r3, r3, #1
 80180e0:	687a      	ldr	r2, [r7, #4]
 80180e2:	18d1      	adds	r1, r2, r3
 80180e4:	460b      	mov	r3, r1
 80180e6:	08da      	lsrs	r2, r3, #3
 80180e8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80180ec:	f992 2000 	ldrsb.w	r2, [r2]
 80180f0:	2a00      	cmp	r2, #0
 80180f2:	bf14      	ite	ne
 80180f4:	2001      	movne	r0, #1
 80180f6:	2000      	moveq	r0, #0
 80180f8:	b2c0      	uxtb	r0, r0
 80180fa:	f003 0407 	and.w	r4, r3, #7
 80180fe:	b264      	sxtb	r4, r4
 8018100:	3401      	adds	r4, #1
 8018102:	b264      	sxtb	r4, r4
 8018104:	4294      	cmp	r4, r2
 8018106:	bfac      	ite	ge
 8018108:	2201      	movge	r2, #1
 801810a:	2200      	movlt	r2, #0
 801810c:	b2d2      	uxtb	r2, r2
 801810e:	4002      	ands	r2, r0
 8018110:	b2d2      	uxtb	r2, r2
 8018112:	2a00      	cmp	r2, #0
 8018114:	d002      	beq.n	801811c <process_FC1+0x218>
 8018116:	4618      	mov	r0, r3
 8018118:	f7f1 f9b4 	bl	8009484 <__asan_report_load2>
 801811c:	880b      	ldrh	r3, [r1, #0]
 801811e:	461a      	mov	r2, r3
 8018120:	7afb      	ldrb	r3, [r7, #11]
 8018122:	fa42 f303 	asr.w	r3, r2, r3
 8018126:	f003 0301 	and.w	r3, r3, #1
 801812a:	2b00      	cmp	r3, #0
 801812c:	d06c      	beq.n	8018208 <process_FC1+0x304>
 801812e:	f7f1 fe99 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018132:	697b      	ldr	r3, [r7, #20]
 8018134:	33c6      	adds	r3, #198	; 0xc6
 8018136:	08da      	lsrs	r2, r3, #3
 8018138:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801813c:	f992 2000 	ldrsb.w	r2, [r2]
 8018140:	2a00      	cmp	r2, #0
 8018142:	bf14      	ite	ne
 8018144:	2101      	movne	r1, #1
 8018146:	2100      	moveq	r1, #0
 8018148:	b2c9      	uxtb	r1, r1
 801814a:	f003 0007 	and.w	r0, r3, #7
 801814e:	b240      	sxtb	r0, r0
 8018150:	4290      	cmp	r0, r2
 8018152:	bfac      	ite	ge
 8018154:	2201      	movge	r2, #1
 8018156:	2200      	movlt	r2, #0
 8018158:	b2d2      	uxtb	r2, r2
 801815a:	400a      	ands	r2, r1
 801815c:	b2d2      	uxtb	r2, r2
 801815e:	2a00      	cmp	r2, #0
 8018160:	d002      	beq.n	8018168 <process_FC1+0x264>
 8018162:	4618      	mov	r0, r3
 8018164:	f7f1 f982 	bl	800946c <__asan_report_load1>
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 801816e:	b2dd      	uxtb	r5, r3
 8018170:	4629      	mov	r1, r5
 8018172:	697b      	ldr	r3, [r7, #20]
 8018174:	440b      	add	r3, r1
 8018176:	3305      	adds	r3, #5
 8018178:	08da      	lsrs	r2, r3, #3
 801817a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801817e:	f992 2000 	ldrsb.w	r2, [r2]
 8018182:	2a00      	cmp	r2, #0
 8018184:	bf14      	ite	ne
 8018186:	2001      	movne	r0, #1
 8018188:	2000      	moveq	r0, #0
 801818a:	b2c0      	uxtb	r0, r0
 801818c:	f003 0407 	and.w	r4, r3, #7
 8018190:	b264      	sxtb	r4, r4
 8018192:	4294      	cmp	r4, r2
 8018194:	bfac      	ite	ge
 8018196:	2201      	movge	r2, #1
 8018198:	2200      	movlt	r2, #0
 801819a:	b2d2      	uxtb	r2, r2
 801819c:	4002      	ands	r2, r0
 801819e:	b2d2      	uxtb	r2, r2
 80181a0:	2a00      	cmp	r2, #0
 80181a2:	d005      	beq.n	80181b0 <process_FC1+0x2ac>
 80181a4:	4618      	mov	r0, r3
 80181a6:	f7f1 f961 	bl	800946c <__asan_report_load1>
 80181aa:	bf00      	nop
 80181ac:	24011900 	.word	0x24011900
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	440b      	add	r3, r1
 80181b4:	795a      	ldrb	r2, [r3, #5]
 80181b6:	7a7b      	ldrb	r3, [r7, #9]
 80181b8:	2101      	movs	r1, #1
 80181ba:	fa01 f303 	lsl.w	r3, r1, r3
 80181be:	b2db      	uxtb	r3, r3
 80181c0:	4629      	mov	r1, r5
 80181c2:	4313      	orrs	r3, r2
 80181c4:	b2dd      	uxtb	r5, r3
 80181c6:	697b      	ldr	r3, [r7, #20]
 80181c8:	440b      	add	r3, r1
 80181ca:	3305      	adds	r3, #5
 80181cc:	08da      	lsrs	r2, r3, #3
 80181ce:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80181d2:	f992 2000 	ldrsb.w	r2, [r2]
 80181d6:	2a00      	cmp	r2, #0
 80181d8:	bf14      	ite	ne
 80181da:	2001      	movne	r0, #1
 80181dc:	2000      	moveq	r0, #0
 80181de:	b2c0      	uxtb	r0, r0
 80181e0:	f003 0407 	and.w	r4, r3, #7
 80181e4:	b264      	sxtb	r4, r4
 80181e6:	4294      	cmp	r4, r2
 80181e8:	bfac      	ite	ge
 80181ea:	2201      	movge	r2, #1
 80181ec:	2200      	movlt	r2, #0
 80181ee:	b2d2      	uxtb	r2, r2
 80181f0:	4002      	ands	r2, r0
 80181f2:	b2d2      	uxtb	r2, r2
 80181f4:	2a00      	cmp	r2, #0
 80181f6:	d002      	beq.n	80181fe <process_FC1+0x2fa>
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7f1 f91f 	bl	800943c <__asan_report_store1>
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	440b      	add	r3, r1
 8018202:	462a      	mov	r2, r5
 8018204:	715a      	strb	r2, [r3, #5]
 8018206:	e06a      	b.n	80182de <process_FC1+0x3da>
 8018208:	f7f1 fe2c 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801820c:	697b      	ldr	r3, [r7, #20]
 801820e:	33c6      	adds	r3, #198	; 0xc6
 8018210:	08da      	lsrs	r2, r3, #3
 8018212:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018216:	f992 2000 	ldrsb.w	r2, [r2]
 801821a:	2a00      	cmp	r2, #0
 801821c:	bf14      	ite	ne
 801821e:	2101      	movne	r1, #1
 8018220:	2100      	moveq	r1, #0
 8018222:	b2c9      	uxtb	r1, r1
 8018224:	f003 0007 	and.w	r0, r3, #7
 8018228:	b240      	sxtb	r0, r0
 801822a:	4290      	cmp	r0, r2
 801822c:	bfac      	ite	ge
 801822e:	2201      	movge	r2, #1
 8018230:	2200      	movlt	r2, #0
 8018232:	b2d2      	uxtb	r2, r2
 8018234:	400a      	ands	r2, r1
 8018236:	b2d2      	uxtb	r2, r2
 8018238:	2a00      	cmp	r2, #0
 801823a:	d002      	beq.n	8018242 <process_FC1+0x33e>
 801823c:	4618      	mov	r0, r3
 801823e:	f7f1 f915 	bl	800946c <__asan_report_load1>
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8018248:	b2dd      	uxtb	r5, r3
 801824a:	4629      	mov	r1, r5
 801824c:	697b      	ldr	r3, [r7, #20]
 801824e:	440b      	add	r3, r1
 8018250:	3305      	adds	r3, #5
 8018252:	08da      	lsrs	r2, r3, #3
 8018254:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018258:	f992 2000 	ldrsb.w	r2, [r2]
 801825c:	2a00      	cmp	r2, #0
 801825e:	bf14      	ite	ne
 8018260:	2001      	movne	r0, #1
 8018262:	2000      	moveq	r0, #0
 8018264:	b2c0      	uxtb	r0, r0
 8018266:	f003 0407 	and.w	r4, r3, #7
 801826a:	b264      	sxtb	r4, r4
 801826c:	4294      	cmp	r4, r2
 801826e:	bfac      	ite	ge
 8018270:	2201      	movge	r2, #1
 8018272:	2200      	movlt	r2, #0
 8018274:	b2d2      	uxtb	r2, r2
 8018276:	4002      	ands	r2, r0
 8018278:	b2d2      	uxtb	r2, r2
 801827a:	2a00      	cmp	r2, #0
 801827c:	d002      	beq.n	8018284 <process_FC1+0x380>
 801827e:	4618      	mov	r0, r3
 8018280:	f7f1 f8f4 	bl	800946c <__asan_report_load1>
 8018284:	697b      	ldr	r3, [r7, #20]
 8018286:	440b      	add	r3, r1
 8018288:	795a      	ldrb	r2, [r3, #5]
 801828a:	7a7b      	ldrb	r3, [r7, #9]
 801828c:	2101      	movs	r1, #1
 801828e:	fa01 f303 	lsl.w	r3, r1, r3
 8018292:	b2db      	uxtb	r3, r3
 8018294:	43db      	mvns	r3, r3
 8018296:	b2db      	uxtb	r3, r3
 8018298:	4629      	mov	r1, r5
 801829a:	4013      	ands	r3, r2
 801829c:	b2dd      	uxtb	r5, r3
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	440b      	add	r3, r1
 80182a2:	3305      	adds	r3, #5
 80182a4:	08da      	lsrs	r2, r3, #3
 80182a6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80182aa:	f992 2000 	ldrsb.w	r2, [r2]
 80182ae:	2a00      	cmp	r2, #0
 80182b0:	bf14      	ite	ne
 80182b2:	2001      	movne	r0, #1
 80182b4:	2000      	moveq	r0, #0
 80182b6:	b2c0      	uxtb	r0, r0
 80182b8:	f003 0407 	and.w	r4, r3, #7
 80182bc:	b264      	sxtb	r4, r4
 80182be:	4294      	cmp	r4, r2
 80182c0:	bfac      	ite	ge
 80182c2:	2201      	movge	r2, #1
 80182c4:	2200      	movlt	r2, #0
 80182c6:	b2d2      	uxtb	r2, r2
 80182c8:	4002      	ands	r2, r0
 80182ca:	b2d2      	uxtb	r2, r2
 80182cc:	2a00      	cmp	r2, #0
 80182ce:	d002      	beq.n	80182d6 <process_FC1+0x3d2>
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7f1 f8b3 	bl	800943c <__asan_report_store1>
 80182d6:	697b      	ldr	r3, [r7, #20]
 80182d8:	440b      	add	r3, r1
 80182da:	462a      	mov	r2, r5
 80182dc:	715a      	strb	r2, [r3, #5]
        	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ],
             u8bitsno,
             // out of bound read can happen here
             bitRead( regs[ u8currentRegister ], u8currentBit ) );
         u8bitsno ++;
 80182de:	f7f1 fdc1 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80182e2:	7a7b      	ldrb	r3, [r7, #9]
 80182e4:	3301      	adds	r3, #1
 80182e6:	727b      	strb	r3, [r7, #9]

         if (u8bitsno > 7)
 80182e8:	7a7b      	ldrb	r3, [r7, #9]
 80182ea:	2b07      	cmp	r3, #7
 80182ec:	d943      	bls.n	8018376 <process_FC1+0x472>
         {
             u8bitsno = 0;
 80182ee:	f7f1 fdb9 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80182f2:	2300      	movs	r3, #0
 80182f4:	727b      	strb	r3, [r7, #9]
             ModbusH->u8BufferSize++;
 80182f6:	697b      	ldr	r3, [r7, #20]
 80182f8:	33c6      	adds	r3, #198	; 0xc6
 80182fa:	08da      	lsrs	r2, r3, #3
 80182fc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018300:	f992 2000 	ldrsb.w	r2, [r2]
 8018304:	2a00      	cmp	r2, #0
 8018306:	bf14      	ite	ne
 8018308:	2101      	movne	r1, #1
 801830a:	2100      	moveq	r1, #0
 801830c:	b2c9      	uxtb	r1, r1
 801830e:	f003 0007 	and.w	r0, r3, #7
 8018312:	b240      	sxtb	r0, r0
 8018314:	4290      	cmp	r0, r2
 8018316:	bfac      	ite	ge
 8018318:	2201      	movge	r2, #1
 801831a:	2200      	movlt	r2, #0
 801831c:	b2d2      	uxtb	r2, r2
 801831e:	400a      	ands	r2, r1
 8018320:	b2d2      	uxtb	r2, r2
 8018322:	2a00      	cmp	r2, #0
 8018324:	d002      	beq.n	801832c <process_FC1+0x428>
 8018326:	4618      	mov	r0, r3
 8018328:	f7f1 f8a0 	bl	800946c <__asan_report_load1>
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8018332:	b2db      	uxtb	r3, r3
 8018334:	3301      	adds	r3, #1
 8018336:	b2dc      	uxtb	r4, r3
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	33c6      	adds	r3, #198	; 0xc6
 801833c:	08da      	lsrs	r2, r3, #3
 801833e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018342:	f992 2000 	ldrsb.w	r2, [r2]
 8018346:	2a00      	cmp	r2, #0
 8018348:	bf14      	ite	ne
 801834a:	2101      	movne	r1, #1
 801834c:	2100      	moveq	r1, #0
 801834e:	b2c9      	uxtb	r1, r1
 8018350:	f003 0007 	and.w	r0, r3, #7
 8018354:	b240      	sxtb	r0, r0
 8018356:	4290      	cmp	r0, r2
 8018358:	bfac      	ite	ge
 801835a:	2201      	movge	r2, #1
 801835c:	2200      	movlt	r2, #0
 801835e:	b2d2      	uxtb	r2, r2
 8018360:	400a      	ands	r2, r1
 8018362:	b2d2      	uxtb	r2, r2
 8018364:	2a00      	cmp	r2, #0
 8018366:	d002      	beq.n	801836e <process_FC1+0x46a>
 8018368:	4618      	mov	r0, r3
 801836a:	f7f1 f867 	bl	800943c <__asan_report_store1>
 801836e:	697b      	ldr	r3, [r7, #20]
 8018370:	4622      	mov	r2, r4
 8018372:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8018376:	f7f1 fd75 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801837a:	89bb      	ldrh	r3, [r7, #12]
 801837c:	3301      	adds	r3, #1
 801837e:	81bb      	strh	r3, [r7, #12]
 8018380:	f7f1 fd70 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018384:	89ba      	ldrh	r2, [r7, #12]
 8018386:	8a3b      	ldrh	r3, [r7, #16]
 8018388:	429a      	cmp	r2, r3
 801838a:	f4ff ae98 	bcc.w	80180be <process_FC1+0x1ba>
         }
     }

     // send outcoming message
     // TODO seems not necessary, verify it!
     if (u16Coilno % 8 != 0) ModbusH->u8BufferSize ++;
 801838e:	f7f1 fd69 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018392:	8a3b      	ldrh	r3, [r7, #16]
 8018394:	f003 0307 	and.w	r3, r3, #7
 8018398:	b29b      	uxth	r3, r3
 801839a:	2b00      	cmp	r3, #0
 801839c:	d041      	beq.n	8018422 <process_FC1+0x51e>
 801839e:	f7f1 fd61 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	33c6      	adds	r3, #198	; 0xc6
 80183a6:	08da      	lsrs	r2, r3, #3
 80183a8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80183ac:	f992 2000 	ldrsb.w	r2, [r2]
 80183b0:	2a00      	cmp	r2, #0
 80183b2:	bf14      	ite	ne
 80183b4:	2101      	movne	r1, #1
 80183b6:	2100      	moveq	r1, #0
 80183b8:	b2c9      	uxtb	r1, r1
 80183ba:	f003 0007 	and.w	r0, r3, #7
 80183be:	b240      	sxtb	r0, r0
 80183c0:	4290      	cmp	r0, r2
 80183c2:	bfac      	ite	ge
 80183c4:	2201      	movge	r2, #1
 80183c6:	2200      	movlt	r2, #0
 80183c8:	b2d2      	uxtb	r2, r2
 80183ca:	400a      	ands	r2, r1
 80183cc:	b2d2      	uxtb	r2, r2
 80183ce:	2a00      	cmp	r2, #0
 80183d0:	d002      	beq.n	80183d8 <process_FC1+0x4d4>
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7f1 f84a 	bl	800946c <__asan_report_load1>
 80183d8:	697b      	ldr	r3, [r7, #20]
 80183da:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80183de:	b2db      	uxtb	r3, r3
 80183e0:	3301      	adds	r3, #1
 80183e2:	b2dc      	uxtb	r4, r3
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	33c6      	adds	r3, #198	; 0xc6
 80183e8:	08da      	lsrs	r2, r3, #3
 80183ea:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80183ee:	f992 2000 	ldrsb.w	r2, [r2]
 80183f2:	2a00      	cmp	r2, #0
 80183f4:	bf14      	ite	ne
 80183f6:	2101      	movne	r1, #1
 80183f8:	2100      	moveq	r1, #0
 80183fa:	b2c9      	uxtb	r1, r1
 80183fc:	f003 0007 	and.w	r0, r3, #7
 8018400:	b240      	sxtb	r0, r0
 8018402:	4290      	cmp	r0, r2
 8018404:	bfac      	ite	ge
 8018406:	2201      	movge	r2, #1
 8018408:	2200      	movlt	r2, #0
 801840a:	b2d2      	uxtb	r2, r2
 801840c:	400a      	ands	r2, r1
 801840e:	b2d2      	uxtb	r2, r2
 8018410:	2a00      	cmp	r2, #0
 8018412:	d002      	beq.n	801841a <process_FC1+0x516>
 8018414:	4618      	mov	r0, r3
 8018416:	f7f1 f811 	bl	800943c <__asan_report_store1>
 801841a:	697b      	ldr	r3, [r7, #20]
 801841c:	4622      	mov	r2, r4
 801841e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     //u8CopyBufferSize = u8BufferSize +2;
     //printf("%s\n",__func__);
     sendTxBuffer();
 8018422:	f7f1 fd1f 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018426:	f7fe fda1 	bl	8016f6c <sendTxBuffer>
     return FAULT_NONE;
 801842a:	2400      	movs	r4, #0
 801842c:	f7f1 fd1a 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018430:	4623      	mov	r3, r4
 }
 8018432:	4618      	mov	r0, r3
 8018434:	3718      	adds	r7, #24
 8018436:	46bd      	mov	sp, r7
 8018438:	bdb0      	pop	{r4, r5, r7, pc}
 801843a:	bf00      	nop

0801843c <process_FC3>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup register
  */
 int8_t process_FC3( uint16_t *regs, uint8_t u8size )
 {
 801843c:	b5b0      	push	{r4, r5, r7, lr}
 801843e:	b084      	sub	sp, #16
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
 8018444:	460b      	mov	r3, r1
 8018446:	70fb      	strb	r3, [r7, #3]

	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 8018448:	f7f1 fd0c 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801844c:	4ba2      	ldr	r3, [pc, #648]	; (80186d8 <process_FC3+0x29c>)
 801844e:	60fb      	str	r3, [r7, #12]
     uint8_t u8StartAdd = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	3307      	adds	r3, #7
 8018454:	08da      	lsrs	r2, r3, #3
 8018456:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801845a:	f992 2000 	ldrsb.w	r2, [r2]
 801845e:	2a00      	cmp	r2, #0
 8018460:	bf14      	ite	ne
 8018462:	2101      	movne	r1, #1
 8018464:	2100      	moveq	r1, #0
 8018466:	b2c9      	uxtb	r1, r1
 8018468:	f003 0007 	and.w	r0, r3, #7
 801846c:	b240      	sxtb	r0, r0
 801846e:	4290      	cmp	r0, r2
 8018470:	bfac      	ite	ge
 8018472:	2201      	movge	r2, #1
 8018474:	2200      	movlt	r2, #0
 8018476:	b2d2      	uxtb	r2, r2
 8018478:	400a      	ands	r2, r1
 801847a:	b2d2      	uxtb	r2, r2
 801847c:	2a00      	cmp	r2, #0
 801847e:	d002      	beq.n	8018486 <process_FC3+0x4a>
 8018480:	4618      	mov	r0, r3
 8018482:	f7f0 fff3 	bl	800946c <__asan_report_load1>
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	79dc      	ldrb	r4, [r3, #7]
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	3308      	adds	r3, #8
 801848e:	08da      	lsrs	r2, r3, #3
 8018490:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018494:	f992 2000 	ldrsb.w	r2, [r2]
 8018498:	2a00      	cmp	r2, #0
 801849a:	bf14      	ite	ne
 801849c:	2101      	movne	r1, #1
 801849e:	2100      	moveq	r1, #0
 80184a0:	b2c9      	uxtb	r1, r1
 80184a2:	f003 0007 	and.w	r0, r3, #7
 80184a6:	b240      	sxtb	r0, r0
 80184a8:	4290      	cmp	r0, r2
 80184aa:	bfac      	ite	ge
 80184ac:	2201      	movge	r2, #1
 80184ae:	2200      	movlt	r2, #0
 80184b0:	b2d2      	uxtb	r2, r2
 80184b2:	400a      	ands	r2, r1
 80184b4:	b2d2      	uxtb	r2, r2
 80184b6:	2a00      	cmp	r2, #0
 80184b8:	d002      	beq.n	80184c0 <process_FC3+0x84>
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7f0 ffd6 	bl	800946c <__asan_report_load1>
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	7a1b      	ldrb	r3, [r3, #8]
 80184c4:	4619      	mov	r1, r3
 80184c6:	4620      	mov	r0, r4
 80184c8:	f7fe fcf4 	bl	8016eb4 <word>
 80184cc:	4603      	mov	r3, r0
 80184ce:	72bb      	strb	r3, [r7, #10]
     uint8_t u8regsno = word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ] );
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	3309      	adds	r3, #9
 80184d4:	08da      	lsrs	r2, r3, #3
 80184d6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80184da:	f992 2000 	ldrsb.w	r2, [r2]
 80184de:	2a00      	cmp	r2, #0
 80184e0:	bf14      	ite	ne
 80184e2:	2101      	movne	r1, #1
 80184e4:	2100      	moveq	r1, #0
 80184e6:	b2c9      	uxtb	r1, r1
 80184e8:	f003 0007 	and.w	r0, r3, #7
 80184ec:	b240      	sxtb	r0, r0
 80184ee:	4290      	cmp	r0, r2
 80184f0:	bfac      	ite	ge
 80184f2:	2201      	movge	r2, #1
 80184f4:	2200      	movlt	r2, #0
 80184f6:	b2d2      	uxtb	r2, r2
 80184f8:	400a      	ands	r2, r1
 80184fa:	b2d2      	uxtb	r2, r2
 80184fc:	2a00      	cmp	r2, #0
 80184fe:	d002      	beq.n	8018506 <process_FC3+0xca>
 8018500:	4618      	mov	r0, r3
 8018502:	f7f0 ffb3 	bl	800946c <__asan_report_load1>
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	7a5c      	ldrb	r4, [r3, #9]
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	330a      	adds	r3, #10
 801850e:	08da      	lsrs	r2, r3, #3
 8018510:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018514:	f992 2000 	ldrsb.w	r2, [r2]
 8018518:	2a00      	cmp	r2, #0
 801851a:	bf14      	ite	ne
 801851c:	2101      	movne	r1, #1
 801851e:	2100      	moveq	r1, #0
 8018520:	b2c9      	uxtb	r1, r1
 8018522:	f003 0007 	and.w	r0, r3, #7
 8018526:	b240      	sxtb	r0, r0
 8018528:	4290      	cmp	r0, r2
 801852a:	bfac      	ite	ge
 801852c:	2201      	movge	r2, #1
 801852e:	2200      	movlt	r2, #0
 8018530:	b2d2      	uxtb	r2, r2
 8018532:	400a      	ands	r2, r1
 8018534:	b2d2      	uxtb	r2, r2
 8018536:	2a00      	cmp	r2, #0
 8018538:	d002      	beq.n	8018540 <process_FC3+0x104>
 801853a:	4618      	mov	r0, r3
 801853c:	f7f0 ff96 	bl	800946c <__asan_report_load1>
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	7a9b      	ldrb	r3, [r3, #10]
 8018544:	4619      	mov	r1, r3
 8018546:	4620      	mov	r0, r4
 8018548:	f7fe fcb4 	bl	8016eb4 <word>
 801854c:	4603      	mov	r3, r0
 801854e:	72fb      	strb	r3, [r7, #11]
     //uint8_t u8CopyBufferSize;
     uint8_t i;

     ModbusH->au8Buffer[ 2 ]       = u8regsno * 2;
 8018550:	7afb      	ldrb	r3, [r7, #11]
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	b2dc      	uxtb	r4, r3
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	3307      	adds	r3, #7
 801855a:	08da      	lsrs	r2, r3, #3
 801855c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018560:	f992 2000 	ldrsb.w	r2, [r2]
 8018564:	2a00      	cmp	r2, #0
 8018566:	bf14      	ite	ne
 8018568:	2101      	movne	r1, #1
 801856a:	2100      	moveq	r1, #0
 801856c:	b2c9      	uxtb	r1, r1
 801856e:	f003 0007 	and.w	r0, r3, #7
 8018572:	b240      	sxtb	r0, r0
 8018574:	4290      	cmp	r0, r2
 8018576:	bfac      	ite	ge
 8018578:	2201      	movge	r2, #1
 801857a:	2200      	movlt	r2, #0
 801857c:	b2d2      	uxtb	r2, r2
 801857e:	400a      	ands	r2, r1
 8018580:	b2d2      	uxtb	r2, r2
 8018582:	2a00      	cmp	r2, #0
 8018584:	d002      	beq.n	801858c <process_FC3+0x150>
 8018586:	4618      	mov	r0, r3
 8018588:	f7f0 ff58 	bl	800943c <__asan_report_store1>
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	4622      	mov	r2, r4
 8018590:	71da      	strb	r2, [r3, #7]
     ModbusH->u8BufferSize         = 3;
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	33c6      	adds	r3, #198	; 0xc6
 8018596:	08da      	lsrs	r2, r3, #3
 8018598:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801859c:	f992 2000 	ldrsb.w	r2, [r2]
 80185a0:	2a00      	cmp	r2, #0
 80185a2:	bf14      	ite	ne
 80185a4:	2101      	movne	r1, #1
 80185a6:	2100      	moveq	r1, #0
 80185a8:	b2c9      	uxtb	r1, r1
 80185aa:	f003 0007 	and.w	r0, r3, #7
 80185ae:	b240      	sxtb	r0, r0
 80185b0:	4290      	cmp	r0, r2
 80185b2:	bfac      	ite	ge
 80185b4:	2201      	movge	r2, #1
 80185b6:	2200      	movlt	r2, #0
 80185b8:	b2d2      	uxtb	r2, r2
 80185ba:	400a      	ands	r2, r1
 80185bc:	b2d2      	uxtb	r2, r2
 80185be:	2a00      	cmp	r2, #0
 80185c0:	d002      	beq.n	80185c8 <process_FC3+0x18c>
 80185c2:	4618      	mov	r0, r3
 80185c4:	f7f0 ff3a 	bl	800943c <__asan_report_store1>
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	2203      	movs	r2, #3
 80185cc:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

     for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 80185d0:	7abb      	ldrb	r3, [r7, #10]
 80185d2:	727b      	strb	r3, [r7, #9]
 80185d4:	e14c      	b.n	8018870 <process_FC3+0x434>
     {
    	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = highByte(regs[i]);
 80185d6:	f7f1 fc45 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80185da:	7a7b      	ldrb	r3, [r7, #9]
 80185dc:	005b      	lsls	r3, r3, #1
 80185de:	687a      	ldr	r2, [r7, #4]
 80185e0:	18d1      	adds	r1, r2, r3
 80185e2:	460b      	mov	r3, r1
 80185e4:	08da      	lsrs	r2, r3, #3
 80185e6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80185ea:	f992 2000 	ldrsb.w	r2, [r2]
 80185ee:	2a00      	cmp	r2, #0
 80185f0:	bf14      	ite	ne
 80185f2:	2001      	movne	r0, #1
 80185f4:	2000      	moveq	r0, #0
 80185f6:	b2c0      	uxtb	r0, r0
 80185f8:	f003 0407 	and.w	r4, r3, #7
 80185fc:	b264      	sxtb	r4, r4
 80185fe:	3401      	adds	r4, #1
 8018600:	b264      	sxtb	r4, r4
 8018602:	4294      	cmp	r4, r2
 8018604:	bfac      	ite	ge
 8018606:	2201      	movge	r2, #1
 8018608:	2200      	movlt	r2, #0
 801860a:	b2d2      	uxtb	r2, r2
 801860c:	4002      	ands	r2, r0
 801860e:	b2d2      	uxtb	r2, r2
 8018610:	2a00      	cmp	r2, #0
 8018612:	d002      	beq.n	801861a <process_FC3+0x1de>
 8018614:	4618      	mov	r0, r3
 8018616:	f7f0 ff35 	bl	8009484 <__asan_report_load2>
 801861a:	880b      	ldrh	r3, [r1, #0]
 801861c:	0a1b      	lsrs	r3, r3, #8
 801861e:	b29c      	uxth	r4, r3
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	33c6      	adds	r3, #198	; 0xc6
 8018624:	08da      	lsrs	r2, r3, #3
 8018626:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801862a:	f992 2000 	ldrsb.w	r2, [r2]
 801862e:	2a00      	cmp	r2, #0
 8018630:	bf14      	ite	ne
 8018632:	2101      	movne	r1, #1
 8018634:	2100      	moveq	r1, #0
 8018636:	b2c9      	uxtb	r1, r1
 8018638:	f003 0007 	and.w	r0, r3, #7
 801863c:	b240      	sxtb	r0, r0
 801863e:	4290      	cmp	r0, r2
 8018640:	bfac      	ite	ge
 8018642:	2201      	movge	r2, #1
 8018644:	2200      	movlt	r2, #0
 8018646:	b2d2      	uxtb	r2, r2
 8018648:	400a      	ands	r2, r1
 801864a:	b2d2      	uxtb	r2, r2
 801864c:	2a00      	cmp	r2, #0
 801864e:	d002      	beq.n	8018656 <process_FC3+0x21a>
 8018650:	4618      	mov	r0, r3
 8018652:	f7f0 ff0b 	bl	800946c <__asan_report_load1>
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 801865c:	b2db      	uxtb	r3, r3
 801865e:	4619      	mov	r1, r3
 8018660:	b2e5      	uxtb	r5, r4
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	440b      	add	r3, r1
 8018666:	3305      	adds	r3, #5
 8018668:	08da      	lsrs	r2, r3, #3
 801866a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801866e:	f992 2000 	ldrsb.w	r2, [r2]
 8018672:	2a00      	cmp	r2, #0
 8018674:	bf14      	ite	ne
 8018676:	2001      	movne	r0, #1
 8018678:	2000      	moveq	r0, #0
 801867a:	b2c0      	uxtb	r0, r0
 801867c:	f003 0407 	and.w	r4, r3, #7
 8018680:	b264      	sxtb	r4, r4
 8018682:	4294      	cmp	r4, r2
 8018684:	bfac      	ite	ge
 8018686:	2201      	movge	r2, #1
 8018688:	2200      	movlt	r2, #0
 801868a:	b2d2      	uxtb	r2, r2
 801868c:	4002      	ands	r2, r0
 801868e:	b2d2      	uxtb	r2, r2
 8018690:	2a00      	cmp	r2, #0
 8018692:	d002      	beq.n	801869a <process_FC3+0x25e>
 8018694:	4618      	mov	r0, r3
 8018696:	f7f0 fed1 	bl	800943c <__asan_report_store1>
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	440b      	add	r3, r1
 801869e:	462a      	mov	r2, r5
 80186a0:	715a      	strb	r2, [r3, #5]
    	 ModbusH->u8BufferSize++;
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	33c6      	adds	r3, #198	; 0xc6
 80186a6:	08da      	lsrs	r2, r3, #3
 80186a8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80186ac:	f992 2000 	ldrsb.w	r2, [r2]
 80186b0:	2a00      	cmp	r2, #0
 80186b2:	bf14      	ite	ne
 80186b4:	2101      	movne	r1, #1
 80186b6:	2100      	moveq	r1, #0
 80186b8:	b2c9      	uxtb	r1, r1
 80186ba:	f003 0007 	and.w	r0, r3, #7
 80186be:	b240      	sxtb	r0, r0
 80186c0:	4290      	cmp	r0, r2
 80186c2:	bfac      	ite	ge
 80186c4:	2201      	movge	r2, #1
 80186c6:	2200      	movlt	r2, #0
 80186c8:	b2d2      	uxtb	r2, r2
 80186ca:	400a      	ands	r2, r1
 80186cc:	b2d2      	uxtb	r2, r2
 80186ce:	2a00      	cmp	r2, #0
 80186d0:	d004      	beq.n	80186dc <process_FC3+0x2a0>
 80186d2:	4618      	mov	r0, r3
 80186d4:	f7f0 feca 	bl	800946c <__asan_report_load1>
 80186d8:	24011900 	.word	0x24011900
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80186e2:	b2db      	uxtb	r3, r3
 80186e4:	3301      	adds	r3, #1
 80186e6:	b2dc      	uxtb	r4, r3
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	33c6      	adds	r3, #198	; 0xc6
 80186ec:	08da      	lsrs	r2, r3, #3
 80186ee:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80186f2:	f992 2000 	ldrsb.w	r2, [r2]
 80186f6:	2a00      	cmp	r2, #0
 80186f8:	bf14      	ite	ne
 80186fa:	2101      	movne	r1, #1
 80186fc:	2100      	moveq	r1, #0
 80186fe:	b2c9      	uxtb	r1, r1
 8018700:	f003 0007 	and.w	r0, r3, #7
 8018704:	b240      	sxtb	r0, r0
 8018706:	4290      	cmp	r0, r2
 8018708:	bfac      	ite	ge
 801870a:	2201      	movge	r2, #1
 801870c:	2200      	movlt	r2, #0
 801870e:	b2d2      	uxtb	r2, r2
 8018710:	400a      	ands	r2, r1
 8018712:	b2d2      	uxtb	r2, r2
 8018714:	2a00      	cmp	r2, #0
 8018716:	d002      	beq.n	801871e <process_FC3+0x2e2>
 8018718:	4618      	mov	r0, r3
 801871a:	f7f0 fe8f 	bl	800943c <__asan_report_store1>
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	4622      	mov	r2, r4
 8018722:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
         ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = lowByte(regs[i]);
 8018726:	7a7b      	ldrb	r3, [r7, #9]
 8018728:	005b      	lsls	r3, r3, #1
 801872a:	687a      	ldr	r2, [r7, #4]
 801872c:	18d1      	adds	r1, r2, r3
 801872e:	460b      	mov	r3, r1
 8018730:	08da      	lsrs	r2, r3, #3
 8018732:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018736:	f992 2000 	ldrsb.w	r2, [r2]
 801873a:	2a00      	cmp	r2, #0
 801873c:	bf14      	ite	ne
 801873e:	2001      	movne	r0, #1
 8018740:	2000      	moveq	r0, #0
 8018742:	b2c0      	uxtb	r0, r0
 8018744:	f003 0407 	and.w	r4, r3, #7
 8018748:	b264      	sxtb	r4, r4
 801874a:	3401      	adds	r4, #1
 801874c:	b264      	sxtb	r4, r4
 801874e:	4294      	cmp	r4, r2
 8018750:	bfac      	ite	ge
 8018752:	2201      	movge	r2, #1
 8018754:	2200      	movlt	r2, #0
 8018756:	b2d2      	uxtb	r2, r2
 8018758:	4002      	ands	r2, r0
 801875a:	b2d2      	uxtb	r2, r2
 801875c:	2a00      	cmp	r2, #0
 801875e:	d002      	beq.n	8018766 <process_FC3+0x32a>
 8018760:	4618      	mov	r0, r3
 8018762:	f7f0 fe8f 	bl	8009484 <__asan_report_load2>
 8018766:	880c      	ldrh	r4, [r1, #0]
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	33c6      	adds	r3, #198	; 0xc6
 801876c:	08da      	lsrs	r2, r3, #3
 801876e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018772:	f992 2000 	ldrsb.w	r2, [r2]
 8018776:	2a00      	cmp	r2, #0
 8018778:	bf14      	ite	ne
 801877a:	2101      	movne	r1, #1
 801877c:	2100      	moveq	r1, #0
 801877e:	b2c9      	uxtb	r1, r1
 8018780:	f003 0007 	and.w	r0, r3, #7
 8018784:	b240      	sxtb	r0, r0
 8018786:	4290      	cmp	r0, r2
 8018788:	bfac      	ite	ge
 801878a:	2201      	movge	r2, #1
 801878c:	2200      	movlt	r2, #0
 801878e:	b2d2      	uxtb	r2, r2
 8018790:	400a      	ands	r2, r1
 8018792:	b2d2      	uxtb	r2, r2
 8018794:	2a00      	cmp	r2, #0
 8018796:	d002      	beq.n	801879e <process_FC3+0x362>
 8018798:	4618      	mov	r0, r3
 801879a:	f7f0 fe67 	bl	800946c <__asan_report_load1>
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80187a4:	b2db      	uxtb	r3, r3
 80187a6:	4619      	mov	r1, r3
 80187a8:	b2e5      	uxtb	r5, r4
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	440b      	add	r3, r1
 80187ae:	3305      	adds	r3, #5
 80187b0:	08da      	lsrs	r2, r3, #3
 80187b2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80187b6:	f992 2000 	ldrsb.w	r2, [r2]
 80187ba:	2a00      	cmp	r2, #0
 80187bc:	bf14      	ite	ne
 80187be:	2001      	movne	r0, #1
 80187c0:	2000      	moveq	r0, #0
 80187c2:	b2c0      	uxtb	r0, r0
 80187c4:	f003 0407 	and.w	r4, r3, #7
 80187c8:	b264      	sxtb	r4, r4
 80187ca:	4294      	cmp	r4, r2
 80187cc:	bfac      	ite	ge
 80187ce:	2201      	movge	r2, #1
 80187d0:	2200      	movlt	r2, #0
 80187d2:	b2d2      	uxtb	r2, r2
 80187d4:	4002      	ands	r2, r0
 80187d6:	b2d2      	uxtb	r2, r2
 80187d8:	2a00      	cmp	r2, #0
 80187da:	d002      	beq.n	80187e2 <process_FC3+0x3a6>
 80187dc:	4618      	mov	r0, r3
 80187de:	f7f0 fe2d 	bl	800943c <__asan_report_store1>
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	440b      	add	r3, r1
 80187e6:	462a      	mov	r2, r5
 80187e8:	715a      	strb	r2, [r3, #5]
         ModbusH->u8BufferSize++;
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	33c6      	adds	r3, #198	; 0xc6
 80187ee:	08da      	lsrs	r2, r3, #3
 80187f0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80187f4:	f992 2000 	ldrsb.w	r2, [r2]
 80187f8:	2a00      	cmp	r2, #0
 80187fa:	bf14      	ite	ne
 80187fc:	2101      	movne	r1, #1
 80187fe:	2100      	moveq	r1, #0
 8018800:	b2c9      	uxtb	r1, r1
 8018802:	f003 0007 	and.w	r0, r3, #7
 8018806:	b240      	sxtb	r0, r0
 8018808:	4290      	cmp	r0, r2
 801880a:	bfac      	ite	ge
 801880c:	2201      	movge	r2, #1
 801880e:	2200      	movlt	r2, #0
 8018810:	b2d2      	uxtb	r2, r2
 8018812:	400a      	ands	r2, r1
 8018814:	b2d2      	uxtb	r2, r2
 8018816:	2a00      	cmp	r2, #0
 8018818:	d002      	beq.n	8018820 <process_FC3+0x3e4>
 801881a:	4618      	mov	r0, r3
 801881c:	f7f0 fe26 	bl	800946c <__asan_report_load1>
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8018826:	b2db      	uxtb	r3, r3
 8018828:	3301      	adds	r3, #1
 801882a:	b2dc      	uxtb	r4, r3
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	33c6      	adds	r3, #198	; 0xc6
 8018830:	08da      	lsrs	r2, r3, #3
 8018832:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018836:	f992 2000 	ldrsb.w	r2, [r2]
 801883a:	2a00      	cmp	r2, #0
 801883c:	bf14      	ite	ne
 801883e:	2101      	movne	r1, #1
 8018840:	2100      	moveq	r1, #0
 8018842:	b2c9      	uxtb	r1, r1
 8018844:	f003 0007 	and.w	r0, r3, #7
 8018848:	b240      	sxtb	r0, r0
 801884a:	4290      	cmp	r0, r2
 801884c:	bfac      	ite	ge
 801884e:	2201      	movge	r2, #1
 8018850:	2200      	movlt	r2, #0
 8018852:	b2d2      	uxtb	r2, r2
 8018854:	400a      	ands	r2, r1
 8018856:	b2d2      	uxtb	r2, r2
 8018858:	2a00      	cmp	r2, #0
 801885a:	d002      	beq.n	8018862 <process_FC3+0x426>
 801885c:	4618      	mov	r0, r3
 801885e:	f7f0 fded 	bl	800943c <__asan_report_store1>
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	4622      	mov	r2, r4
 8018866:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 801886a:	7a7b      	ldrb	r3, [r7, #9]
 801886c:	3301      	adds	r3, #1
 801886e:	727b      	strb	r3, [r7, #9]
 8018870:	f7f1 faf8 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018874:	7a7a      	ldrb	r2, [r7, #9]
 8018876:	7ab9      	ldrb	r1, [r7, #10]
 8018878:	7afb      	ldrb	r3, [r7, #11]
 801887a:	440b      	add	r3, r1
 801887c:	429a      	cmp	r2, r3
 801887e:	f6ff aeaa 	blt.w	80185d6 <process_FC3+0x19a>
     }
     //u8CopyBufferSize = u8BufferSize +2;

     //printf("%s\n",__func__);
     sendTxBuffer();
 8018882:	f7f1 faef 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018886:	f7fe fb71 	bl	8016f6c <sendTxBuffer>

     return FAULT_NONE;
 801888a:	2400      	movs	r4, #0
 801888c:	f7f1 faea 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018890:	4623      	mov	r3, r4
 }
 8018892:	4618      	mov	r0, r3
 8018894:	3710      	adds	r7, #16
 8018896:	46bd      	mov	sp, r7
 8018898:	bdb0      	pop	{r4, r5, r7, pc}
 801889a:	bf00      	nop

0801889c <process_FC5>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup discrete
  */
 int8_t process_FC5( uint16_t *regs, uint8_t u8size )
 {
 801889c:	b5b0      	push	{r4, r5, r7, lr}
 801889e:	b084      	sub	sp, #16
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
 80188a4:	460b      	mov	r3, r1
 80188a6:	70fb      	strb	r3, [r7, #3]
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 80188a8:	f7f1 fadc 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80188ac:	4b97      	ldr	r3, [pc, #604]	; (8018b0c <process_FC5+0x270>)
 80188ae:	60fb      	str	r3, [r7, #12]
     uint8_t u8currentRegister, u8currentBit;
     //uint8_t u8CopyBufferSize;
     uint16_t u16coil = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	3307      	adds	r3, #7
 80188b4:	08da      	lsrs	r2, r3, #3
 80188b6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80188ba:	f992 2000 	ldrsb.w	r2, [r2]
 80188be:	2a00      	cmp	r2, #0
 80188c0:	bf14      	ite	ne
 80188c2:	2101      	movne	r1, #1
 80188c4:	2100      	moveq	r1, #0
 80188c6:	b2c9      	uxtb	r1, r1
 80188c8:	f003 0007 	and.w	r0, r3, #7
 80188cc:	b240      	sxtb	r0, r0
 80188ce:	4290      	cmp	r0, r2
 80188d0:	bfac      	ite	ge
 80188d2:	2201      	movge	r2, #1
 80188d4:	2200      	movlt	r2, #0
 80188d6:	b2d2      	uxtb	r2, r2
 80188d8:	400a      	ands	r2, r1
 80188da:	b2d2      	uxtb	r2, r2
 80188dc:	2a00      	cmp	r2, #0
 80188de:	d002      	beq.n	80188e6 <process_FC5+0x4a>
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7f0 fdc3 	bl	800946c <__asan_report_load1>
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	79dc      	ldrb	r4, [r3, #7]
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	3308      	adds	r3, #8
 80188ee:	08da      	lsrs	r2, r3, #3
 80188f0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80188f4:	f992 2000 	ldrsb.w	r2, [r2]
 80188f8:	2a00      	cmp	r2, #0
 80188fa:	bf14      	ite	ne
 80188fc:	2101      	movne	r1, #1
 80188fe:	2100      	moveq	r1, #0
 8018900:	b2c9      	uxtb	r1, r1
 8018902:	f003 0007 	and.w	r0, r3, #7
 8018906:	b240      	sxtb	r0, r0
 8018908:	4290      	cmp	r0, r2
 801890a:	bfac      	ite	ge
 801890c:	2201      	movge	r2, #1
 801890e:	2200      	movlt	r2, #0
 8018910:	b2d2      	uxtb	r2, r2
 8018912:	400a      	ands	r2, r1
 8018914:	b2d2      	uxtb	r2, r2
 8018916:	2a00      	cmp	r2, #0
 8018918:	d002      	beq.n	8018920 <process_FC5+0x84>
 801891a:	4618      	mov	r0, r3
 801891c:	f7f0 fda6 	bl	800946c <__asan_report_load1>
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	7a1b      	ldrb	r3, [r3, #8]
 8018924:	4619      	mov	r1, r3
 8018926:	4620      	mov	r0, r4
 8018928:	f7fe fac4 	bl	8016eb4 <word>
 801892c:	4603      	mov	r3, r0
 801892e:	817b      	strh	r3, [r7, #10]

     // point to the register and its bit
     u8currentRegister = (uint8_t) (u16coil / 16);
 8018930:	897b      	ldrh	r3, [r7, #10]
 8018932:	091b      	lsrs	r3, r3, #4
 8018934:	b29b      	uxth	r3, r3
 8018936:	723b      	strb	r3, [r7, #8]
     u8currentBit = (uint8_t) (u16coil % 16);
 8018938:	897b      	ldrh	r3, [r7, #10]
 801893a:	b2db      	uxtb	r3, r3
 801893c:	f003 030f 	and.w	r3, r3, #15
 8018940:	727b      	strb	r3, [r7, #9]

     // write to coil
     bitWrite(
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	3309      	adds	r3, #9
 8018946:	08da      	lsrs	r2, r3, #3
 8018948:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801894c:	f992 2000 	ldrsb.w	r2, [r2]
 8018950:	2a00      	cmp	r2, #0
 8018952:	bf14      	ite	ne
 8018954:	2101      	movne	r1, #1
 8018956:	2100      	moveq	r1, #0
 8018958:	b2c9      	uxtb	r1, r1
 801895a:	f003 0007 	and.w	r0, r3, #7
 801895e:	b240      	sxtb	r0, r0
 8018960:	4290      	cmp	r0, r2
 8018962:	bfac      	ite	ge
 8018964:	2201      	movge	r2, #1
 8018966:	2200      	movlt	r2, #0
 8018968:	b2d2      	uxtb	r2, r2
 801896a:	400a      	ands	r2, r1
 801896c:	b2d2      	uxtb	r2, r2
 801896e:	2a00      	cmp	r2, #0
 8018970:	d002      	beq.n	8018978 <process_FC5+0xdc>
 8018972:	4618      	mov	r0, r3
 8018974:	f7f0 fd7a 	bl	800946c <__asan_report_load1>
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	7a5b      	ldrb	r3, [r3, #9]
 801897c:	2bff      	cmp	r3, #255	; 0xff
 801897e:	d14c      	bne.n	8018a1a <process_FC5+0x17e>
 8018980:	f7f1 fa70 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018984:	7a3b      	ldrb	r3, [r7, #8]
 8018986:	005b      	lsls	r3, r3, #1
 8018988:	687a      	ldr	r2, [r7, #4]
 801898a:	18d1      	adds	r1, r2, r3
 801898c:	460b      	mov	r3, r1
 801898e:	08da      	lsrs	r2, r3, #3
 8018990:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018994:	f992 2000 	ldrsb.w	r2, [r2]
 8018998:	2a00      	cmp	r2, #0
 801899a:	bf14      	ite	ne
 801899c:	2001      	movne	r0, #1
 801899e:	2000      	moveq	r0, #0
 80189a0:	b2c0      	uxtb	r0, r0
 80189a2:	f003 0407 	and.w	r4, r3, #7
 80189a6:	b264      	sxtb	r4, r4
 80189a8:	3401      	adds	r4, #1
 80189aa:	b264      	sxtb	r4, r4
 80189ac:	4294      	cmp	r4, r2
 80189ae:	bfac      	ite	ge
 80189b0:	2201      	movge	r2, #1
 80189b2:	2200      	movlt	r2, #0
 80189b4:	b2d2      	uxtb	r2, r2
 80189b6:	4002      	ands	r2, r0
 80189b8:	b2d2      	uxtb	r2, r2
 80189ba:	2a00      	cmp	r2, #0
 80189bc:	d002      	beq.n	80189c4 <process_FC5+0x128>
 80189be:	4618      	mov	r0, r3
 80189c0:	f7f0 fd60 	bl	8009484 <__asan_report_load2>
 80189c4:	880a      	ldrh	r2, [r1, #0]
 80189c6:	7a7b      	ldrb	r3, [r7, #9]
 80189c8:	2101      	movs	r1, #1
 80189ca:	fa01 f303 	lsl.w	r3, r1, r3
 80189ce:	b29b      	uxth	r3, r3
 80189d0:	7a39      	ldrb	r1, [r7, #8]
 80189d2:	0049      	lsls	r1, r1, #1
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	4401      	add	r1, r0
 80189d8:	4313      	orrs	r3, r2
 80189da:	b29d      	uxth	r5, r3
 80189dc:	460b      	mov	r3, r1
 80189de:	08da      	lsrs	r2, r3, #3
 80189e0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80189e4:	f992 2000 	ldrsb.w	r2, [r2]
 80189e8:	2a00      	cmp	r2, #0
 80189ea:	bf14      	ite	ne
 80189ec:	2001      	movne	r0, #1
 80189ee:	2000      	moveq	r0, #0
 80189f0:	b2c0      	uxtb	r0, r0
 80189f2:	f003 0407 	and.w	r4, r3, #7
 80189f6:	b264      	sxtb	r4, r4
 80189f8:	3401      	adds	r4, #1
 80189fa:	b264      	sxtb	r4, r4
 80189fc:	4294      	cmp	r4, r2
 80189fe:	bfac      	ite	ge
 8018a00:	2201      	movge	r2, #1
 8018a02:	2200      	movlt	r2, #0
 8018a04:	b2d2      	uxtb	r2, r2
 8018a06:	4002      	ands	r2, r0
 8018a08:	b2d2      	uxtb	r2, r2
 8018a0a:	2a00      	cmp	r2, #0
 8018a0c:	d002      	beq.n	8018a14 <process_FC5+0x178>
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7f0 fd20 	bl	8009454 <__asan_report_store2>
 8018a14:	462b      	mov	r3, r5
 8018a16:	800b      	strh	r3, [r1, #0]
 8018a18:	e04d      	b.n	8018ab6 <process_FC5+0x21a>
 8018a1a:	f7f1 fa23 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018a1e:	7a3b      	ldrb	r3, [r7, #8]
 8018a20:	005b      	lsls	r3, r3, #1
 8018a22:	687a      	ldr	r2, [r7, #4]
 8018a24:	18d1      	adds	r1, r2, r3
 8018a26:	460b      	mov	r3, r1
 8018a28:	08da      	lsrs	r2, r3, #3
 8018a2a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018a2e:	f992 2000 	ldrsb.w	r2, [r2]
 8018a32:	2a00      	cmp	r2, #0
 8018a34:	bf14      	ite	ne
 8018a36:	2001      	movne	r0, #1
 8018a38:	2000      	moveq	r0, #0
 8018a3a:	b2c0      	uxtb	r0, r0
 8018a3c:	f003 0407 	and.w	r4, r3, #7
 8018a40:	b264      	sxtb	r4, r4
 8018a42:	3401      	adds	r4, #1
 8018a44:	b264      	sxtb	r4, r4
 8018a46:	4294      	cmp	r4, r2
 8018a48:	bfac      	ite	ge
 8018a4a:	2201      	movge	r2, #1
 8018a4c:	2200      	movlt	r2, #0
 8018a4e:	b2d2      	uxtb	r2, r2
 8018a50:	4002      	ands	r2, r0
 8018a52:	b2d2      	uxtb	r2, r2
 8018a54:	2a00      	cmp	r2, #0
 8018a56:	d002      	beq.n	8018a5e <process_FC5+0x1c2>
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f7f0 fd13 	bl	8009484 <__asan_report_load2>
 8018a5e:	880a      	ldrh	r2, [r1, #0]
 8018a60:	7a7b      	ldrb	r3, [r7, #9]
 8018a62:	2101      	movs	r1, #1
 8018a64:	fa01 f303 	lsl.w	r3, r1, r3
 8018a68:	b29b      	uxth	r3, r3
 8018a6a:	43db      	mvns	r3, r3
 8018a6c:	b29b      	uxth	r3, r3
 8018a6e:	7a39      	ldrb	r1, [r7, #8]
 8018a70:	0049      	lsls	r1, r1, #1
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	4401      	add	r1, r0
 8018a76:	4013      	ands	r3, r2
 8018a78:	b29d      	uxth	r5, r3
 8018a7a:	460b      	mov	r3, r1
 8018a7c:	08da      	lsrs	r2, r3, #3
 8018a7e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018a82:	f992 2000 	ldrsb.w	r2, [r2]
 8018a86:	2a00      	cmp	r2, #0
 8018a88:	bf14      	ite	ne
 8018a8a:	2001      	movne	r0, #1
 8018a8c:	2000      	moveq	r0, #0
 8018a8e:	b2c0      	uxtb	r0, r0
 8018a90:	f003 0407 	and.w	r4, r3, #7
 8018a94:	b264      	sxtb	r4, r4
 8018a96:	3401      	adds	r4, #1
 8018a98:	b264      	sxtb	r4, r4
 8018a9a:	4294      	cmp	r4, r2
 8018a9c:	bfac      	ite	ge
 8018a9e:	2201      	movge	r2, #1
 8018aa0:	2200      	movlt	r2, #0
 8018aa2:	b2d2      	uxtb	r2, r2
 8018aa4:	4002      	ands	r2, r0
 8018aa6:	b2d2      	uxtb	r2, r2
 8018aa8:	2a00      	cmp	r2, #0
 8018aaa:	d002      	beq.n	8018ab2 <process_FC5+0x216>
 8018aac:	4618      	mov	r0, r3
 8018aae:	f7f0 fcd1 	bl	8009454 <__asan_report_store2>
 8018ab2:	462b      	mov	r3, r5
 8018ab4:	800b      	strh	r3, [r1, #0]
         regs[ u8currentRegister ],
         u8currentBit,
		 ModbusH->au8Buffer[ NB_HI ] == 0xff );

     // send answer to master
     ModbusH->u8BufferSize = 6;
 8018ab6:	f7f1 f9d5 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	33c6      	adds	r3, #198	; 0xc6
 8018abe:	08da      	lsrs	r2, r3, #3
 8018ac0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018ac4:	f992 2000 	ldrsb.w	r2, [r2]
 8018ac8:	2a00      	cmp	r2, #0
 8018aca:	bf14      	ite	ne
 8018acc:	2101      	movne	r1, #1
 8018ace:	2100      	moveq	r1, #0
 8018ad0:	b2c9      	uxtb	r1, r1
 8018ad2:	f003 0007 	and.w	r0, r3, #7
 8018ad6:	b240      	sxtb	r0, r0
 8018ad8:	4290      	cmp	r0, r2
 8018ada:	bfac      	ite	ge
 8018adc:	2201      	movge	r2, #1
 8018ade:	2200      	movlt	r2, #0
 8018ae0:	b2d2      	uxtb	r2, r2
 8018ae2:	400a      	ands	r2, r1
 8018ae4:	b2d2      	uxtb	r2, r2
 8018ae6:	2a00      	cmp	r2, #0
 8018ae8:	d002      	beq.n	8018af0 <process_FC5+0x254>
 8018aea:	4618      	mov	r0, r3
 8018aec:	f7f0 fca6 	bl	800943c <__asan_report_store1>
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	2206      	movs	r2, #6
 8018af4:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     //u8CopyBufferSize = u8BufferSize +2;

     //printf("%s\n",__func__);
     sendTxBuffer();
 8018af8:	f7fe fa38 	bl	8016f6c <sendTxBuffer>

     return FAULT_NONE;
 8018afc:	2400      	movs	r4, #0
 8018afe:	f7f1 f9b1 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018b02:	4623      	mov	r3, r4
 }
 8018b04:	4618      	mov	r0, r3
 8018b06:	3710      	adds	r7, #16
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8018b0c:	24011900 	.word	0x24011900

08018b10 <process_FC6>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup register
  */
 int8_t process_FC6( uint16_t *regs, uint8_t u8size )
 {
 8018b10:	b590      	push	{r4, r7, lr}
 8018b12:	b085      	sub	sp, #20
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
 8018b18:	460b      	mov	r3, r1
 8018b1a:	70fb      	strb	r3, [r7, #3]
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 8018b1c:	f7f1 f9a2 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018b20:	4b66      	ldr	r3, [pc, #408]	; (8018cbc <process_FC6+0x1ac>)
 8018b22:	60fb      	str	r3, [r7, #12]
     uint8_t u8add = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	3307      	adds	r3, #7
 8018b28:	08da      	lsrs	r2, r3, #3
 8018b2a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018b2e:	f992 2000 	ldrsb.w	r2, [r2]
 8018b32:	2a00      	cmp	r2, #0
 8018b34:	bf14      	ite	ne
 8018b36:	2101      	movne	r1, #1
 8018b38:	2100      	moveq	r1, #0
 8018b3a:	b2c9      	uxtb	r1, r1
 8018b3c:	f003 0007 	and.w	r0, r3, #7
 8018b40:	b240      	sxtb	r0, r0
 8018b42:	4290      	cmp	r0, r2
 8018b44:	bfac      	ite	ge
 8018b46:	2201      	movge	r2, #1
 8018b48:	2200      	movlt	r2, #0
 8018b4a:	b2d2      	uxtb	r2, r2
 8018b4c:	400a      	ands	r2, r1
 8018b4e:	b2d2      	uxtb	r2, r2
 8018b50:	2a00      	cmp	r2, #0
 8018b52:	d002      	beq.n	8018b5a <process_FC6+0x4a>
 8018b54:	4618      	mov	r0, r3
 8018b56:	f7f0 fc89 	bl	800946c <__asan_report_load1>
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	79dc      	ldrb	r4, [r3, #7]
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	3308      	adds	r3, #8
 8018b62:	08da      	lsrs	r2, r3, #3
 8018b64:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018b68:	f992 2000 	ldrsb.w	r2, [r2]
 8018b6c:	2a00      	cmp	r2, #0
 8018b6e:	bf14      	ite	ne
 8018b70:	2101      	movne	r1, #1
 8018b72:	2100      	moveq	r1, #0
 8018b74:	b2c9      	uxtb	r1, r1
 8018b76:	f003 0007 	and.w	r0, r3, #7
 8018b7a:	b240      	sxtb	r0, r0
 8018b7c:	4290      	cmp	r0, r2
 8018b7e:	bfac      	ite	ge
 8018b80:	2201      	movge	r2, #1
 8018b82:	2200      	movlt	r2, #0
 8018b84:	b2d2      	uxtb	r2, r2
 8018b86:	400a      	ands	r2, r1
 8018b88:	b2d2      	uxtb	r2, r2
 8018b8a:	2a00      	cmp	r2, #0
 8018b8c:	d002      	beq.n	8018b94 <process_FC6+0x84>
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f7f0 fc6c 	bl	800946c <__asan_report_load1>
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	7a1b      	ldrb	r3, [r3, #8]
 8018b98:	4619      	mov	r1, r3
 8018b9a:	4620      	mov	r0, r4
 8018b9c:	f7fe f98a 	bl	8016eb4 <word>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	727b      	strb	r3, [r7, #9]
     //uint8_t u8CopyBufferSize;
     uint16_t u16val = word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ] );
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	3309      	adds	r3, #9
 8018ba8:	08da      	lsrs	r2, r3, #3
 8018baa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018bae:	f992 2000 	ldrsb.w	r2, [r2]
 8018bb2:	2a00      	cmp	r2, #0
 8018bb4:	bf14      	ite	ne
 8018bb6:	2101      	movne	r1, #1
 8018bb8:	2100      	moveq	r1, #0
 8018bba:	b2c9      	uxtb	r1, r1
 8018bbc:	f003 0007 	and.w	r0, r3, #7
 8018bc0:	b240      	sxtb	r0, r0
 8018bc2:	4290      	cmp	r0, r2
 8018bc4:	bfac      	ite	ge
 8018bc6:	2201      	movge	r2, #1
 8018bc8:	2200      	movlt	r2, #0
 8018bca:	b2d2      	uxtb	r2, r2
 8018bcc:	400a      	ands	r2, r1
 8018bce:	b2d2      	uxtb	r2, r2
 8018bd0:	2a00      	cmp	r2, #0
 8018bd2:	d002      	beq.n	8018bda <process_FC6+0xca>
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f7f0 fc49 	bl	800946c <__asan_report_load1>
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	7a5c      	ldrb	r4, [r3, #9]
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	330a      	adds	r3, #10
 8018be2:	08da      	lsrs	r2, r3, #3
 8018be4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018be8:	f992 2000 	ldrsb.w	r2, [r2]
 8018bec:	2a00      	cmp	r2, #0
 8018bee:	bf14      	ite	ne
 8018bf0:	2101      	movne	r1, #1
 8018bf2:	2100      	moveq	r1, #0
 8018bf4:	b2c9      	uxtb	r1, r1
 8018bf6:	f003 0007 	and.w	r0, r3, #7
 8018bfa:	b240      	sxtb	r0, r0
 8018bfc:	4290      	cmp	r0, r2
 8018bfe:	bfac      	ite	ge
 8018c00:	2201      	movge	r2, #1
 8018c02:	2200      	movlt	r2, #0
 8018c04:	b2d2      	uxtb	r2, r2
 8018c06:	400a      	ands	r2, r1
 8018c08:	b2d2      	uxtb	r2, r2
 8018c0a:	2a00      	cmp	r2, #0
 8018c0c:	d002      	beq.n	8018c14 <process_FC6+0x104>
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7f0 fc2c 	bl	800946c <__asan_report_load1>
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	7a9b      	ldrb	r3, [r3, #10]
 8018c18:	4619      	mov	r1, r3
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	f7fe f94a 	bl	8016eb4 <word>
 8018c20:	4603      	mov	r3, r0
 8018c22:	817b      	strh	r3, [r7, #10]

     regs[ u8add ] = u16val;
 8018c24:	7a7b      	ldrb	r3, [r7, #9]
 8018c26:	005b      	lsls	r3, r3, #1
 8018c28:	687a      	ldr	r2, [r7, #4]
 8018c2a:	18d1      	adds	r1, r2, r3
 8018c2c:	460b      	mov	r3, r1
 8018c2e:	08da      	lsrs	r2, r3, #3
 8018c30:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018c34:	f992 2000 	ldrsb.w	r2, [r2]
 8018c38:	2a00      	cmp	r2, #0
 8018c3a:	bf14      	ite	ne
 8018c3c:	2001      	movne	r0, #1
 8018c3e:	2000      	moveq	r0, #0
 8018c40:	b2c0      	uxtb	r0, r0
 8018c42:	f003 0407 	and.w	r4, r3, #7
 8018c46:	b264      	sxtb	r4, r4
 8018c48:	3401      	adds	r4, #1
 8018c4a:	b264      	sxtb	r4, r4
 8018c4c:	4294      	cmp	r4, r2
 8018c4e:	bfac      	ite	ge
 8018c50:	2201      	movge	r2, #1
 8018c52:	2200      	movlt	r2, #0
 8018c54:	b2d2      	uxtb	r2, r2
 8018c56:	4002      	ands	r2, r0
 8018c58:	b2d2      	uxtb	r2, r2
 8018c5a:	2a00      	cmp	r2, #0
 8018c5c:	d002      	beq.n	8018c64 <process_FC6+0x154>
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7f0 fbf8 	bl	8009454 <__asan_report_store2>
 8018c64:	897b      	ldrh	r3, [r7, #10]
 8018c66:	800b      	strh	r3, [r1, #0]

     // keep the same header
     ModbusH->u8BufferSize         = RESPONSE_SIZE;
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	33c6      	adds	r3, #198	; 0xc6
 8018c6c:	08da      	lsrs	r2, r3, #3
 8018c6e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018c72:	f992 2000 	ldrsb.w	r2, [r2]
 8018c76:	2a00      	cmp	r2, #0
 8018c78:	bf14      	ite	ne
 8018c7a:	2101      	movne	r1, #1
 8018c7c:	2100      	moveq	r1, #0
 8018c7e:	b2c9      	uxtb	r1, r1
 8018c80:	f003 0007 	and.w	r0, r3, #7
 8018c84:	b240      	sxtb	r0, r0
 8018c86:	4290      	cmp	r0, r2
 8018c88:	bfac      	ite	ge
 8018c8a:	2201      	movge	r2, #1
 8018c8c:	2200      	movlt	r2, #0
 8018c8e:	b2d2      	uxtb	r2, r2
 8018c90:	400a      	ands	r2, r1
 8018c92:	b2d2      	uxtb	r2, r2
 8018c94:	2a00      	cmp	r2, #0
 8018c96:	d002      	beq.n	8018c9e <process_FC6+0x18e>
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f7f0 fbcf 	bl	800943c <__asan_report_store1>
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	2206      	movs	r2, #6
 8018ca2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     //u8CopyBufferSize = u8BufferSize +2;
     //printf("%s\n",__func__);
     sendTxBuffer();
 8018ca6:	f7fe f961 	bl	8016f6c <sendTxBuffer>
     return FAULT_NONE;
 8018caa:	2400      	movs	r4, #0
 8018cac:	f7f1 f8da 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018cb0:	4623      	mov	r3, r4
 }
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3714      	adds	r7, #20
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd90      	pop	{r4, r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	24011900 	.word	0x24011900

08018cc0 <process_FC15>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup discrete
  */
 int8_t process_FC15( uint16_t *regs, uint8_t u8size )
 {
 8018cc0:	b5b0      	push	{r4, r5, r7, lr}
 8018cc2:	b088      	sub	sp, #32
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
 8018cc8:	460b      	mov	r3, r1
 8018cca:	70fb      	strb	r3, [r7, #3]
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 8018ccc:	f7f1 f8ca 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018cd0:	4b9a      	ldr	r3, [pc, #616]	; (8018f3c <process_FC15+0x27c>)
 8018cd2:	61fb      	str	r3, [r7, #28]
     //uint8_t u8CopyBufferSize;
     uint16_t u16currentCoil, u16coil;
     bool bTemp;

     // get the first and last coil from the message
     uint16_t u16StartCoil = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 8018cd4:	69fb      	ldr	r3, [r7, #28]
 8018cd6:	3307      	adds	r3, #7
 8018cd8:	08da      	lsrs	r2, r3, #3
 8018cda:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018cde:	f992 2000 	ldrsb.w	r2, [r2]
 8018ce2:	2a00      	cmp	r2, #0
 8018ce4:	bf14      	ite	ne
 8018ce6:	2101      	movne	r1, #1
 8018ce8:	2100      	moveq	r1, #0
 8018cea:	b2c9      	uxtb	r1, r1
 8018cec:	f003 0007 	and.w	r0, r3, #7
 8018cf0:	b240      	sxtb	r0, r0
 8018cf2:	4290      	cmp	r0, r2
 8018cf4:	bfac      	ite	ge
 8018cf6:	2201      	movge	r2, #1
 8018cf8:	2200      	movlt	r2, #0
 8018cfa:	b2d2      	uxtb	r2, r2
 8018cfc:	400a      	ands	r2, r1
 8018cfe:	b2d2      	uxtb	r2, r2
 8018d00:	2a00      	cmp	r2, #0
 8018d02:	d002      	beq.n	8018d0a <process_FC15+0x4a>
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7f0 fbb1 	bl	800946c <__asan_report_load1>
 8018d0a:	69fb      	ldr	r3, [r7, #28]
 8018d0c:	79dc      	ldrb	r4, [r3, #7]
 8018d0e:	69fb      	ldr	r3, [r7, #28]
 8018d10:	3308      	adds	r3, #8
 8018d12:	08da      	lsrs	r2, r3, #3
 8018d14:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018d18:	f992 2000 	ldrsb.w	r2, [r2]
 8018d1c:	2a00      	cmp	r2, #0
 8018d1e:	bf14      	ite	ne
 8018d20:	2101      	movne	r1, #1
 8018d22:	2100      	moveq	r1, #0
 8018d24:	b2c9      	uxtb	r1, r1
 8018d26:	f003 0007 	and.w	r0, r3, #7
 8018d2a:	b240      	sxtb	r0, r0
 8018d2c:	4290      	cmp	r0, r2
 8018d2e:	bfac      	ite	ge
 8018d30:	2201      	movge	r2, #1
 8018d32:	2200      	movlt	r2, #0
 8018d34:	b2d2      	uxtb	r2, r2
 8018d36:	400a      	ands	r2, r1
 8018d38:	b2d2      	uxtb	r2, r2
 8018d3a:	2a00      	cmp	r2, #0
 8018d3c:	d002      	beq.n	8018d44 <process_FC15+0x84>
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7f0 fb94 	bl	800946c <__asan_report_load1>
 8018d44:	69fb      	ldr	r3, [r7, #28]
 8018d46:	7a1b      	ldrb	r3, [r3, #8]
 8018d48:	4619      	mov	r1, r3
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	f7fe f8b2 	bl	8016eb4 <word>
 8018d50:	4603      	mov	r3, r0
 8018d52:	82fb      	strh	r3, [r7, #22]
     uint16_t u16Coilno = word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ] );
 8018d54:	69fb      	ldr	r3, [r7, #28]
 8018d56:	3309      	adds	r3, #9
 8018d58:	08da      	lsrs	r2, r3, #3
 8018d5a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018d5e:	f992 2000 	ldrsb.w	r2, [r2]
 8018d62:	2a00      	cmp	r2, #0
 8018d64:	bf14      	ite	ne
 8018d66:	2101      	movne	r1, #1
 8018d68:	2100      	moveq	r1, #0
 8018d6a:	b2c9      	uxtb	r1, r1
 8018d6c:	f003 0007 	and.w	r0, r3, #7
 8018d70:	b240      	sxtb	r0, r0
 8018d72:	4290      	cmp	r0, r2
 8018d74:	bfac      	ite	ge
 8018d76:	2201      	movge	r2, #1
 8018d78:	2200      	movlt	r2, #0
 8018d7a:	b2d2      	uxtb	r2, r2
 8018d7c:	400a      	ands	r2, r1
 8018d7e:	b2d2      	uxtb	r2, r2
 8018d80:	2a00      	cmp	r2, #0
 8018d82:	d002      	beq.n	8018d8a <process_FC15+0xca>
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7f0 fb71 	bl	800946c <__asan_report_load1>
 8018d8a:	69fb      	ldr	r3, [r7, #28]
 8018d8c:	7a5c      	ldrb	r4, [r3, #9]
 8018d8e:	69fb      	ldr	r3, [r7, #28]
 8018d90:	330a      	adds	r3, #10
 8018d92:	08da      	lsrs	r2, r3, #3
 8018d94:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018d98:	f992 2000 	ldrsb.w	r2, [r2]
 8018d9c:	2a00      	cmp	r2, #0
 8018d9e:	bf14      	ite	ne
 8018da0:	2101      	movne	r1, #1
 8018da2:	2100      	moveq	r1, #0
 8018da4:	b2c9      	uxtb	r1, r1
 8018da6:	f003 0007 	and.w	r0, r3, #7
 8018daa:	b240      	sxtb	r0, r0
 8018dac:	4290      	cmp	r0, r2
 8018dae:	bfac      	ite	ge
 8018db0:	2201      	movge	r2, #1
 8018db2:	2200      	movlt	r2, #0
 8018db4:	b2d2      	uxtb	r2, r2
 8018db6:	400a      	ands	r2, r1
 8018db8:	b2d2      	uxtb	r2, r2
 8018dba:	2a00      	cmp	r2, #0
 8018dbc:	d002      	beq.n	8018dc4 <process_FC15+0x104>
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f7f0 fb54 	bl	800946c <__asan_report_load1>
 8018dc4:	69fb      	ldr	r3, [r7, #28]
 8018dc6:	7a9b      	ldrb	r3, [r3, #10]
 8018dc8:	4619      	mov	r1, r3
 8018dca:	4620      	mov	r0, r4
 8018dcc:	f7fe f872 	bl	8016eb4 <word>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	833b      	strh	r3, [r7, #24]


     // read each coil from the register map and put its value inside the outcoming message
     u8bitsno = 0;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	743b      	strb	r3, [r7, #16]
     u8frameByte = 7;
 8018dd8:	2307      	movs	r3, #7
 8018dda:	73fb      	strb	r3, [r7, #15]
     for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8018ddc:	2300      	movs	r3, #0
 8018dde:	82bb      	strh	r3, [r7, #20]
 8018de0:	e0ee      	b.n	8018fc0 <process_FC15+0x300>
     {

         u16coil = u16StartCoil + u16currentCoil;
 8018de2:	f7f1 f83f 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018de6:	8afa      	ldrh	r2, [r7, #22]
 8018de8:	8abb      	ldrh	r3, [r7, #20]
 8018dea:	4413      	add	r3, r2
 8018dec:	837b      	strh	r3, [r7, #26]
         u8currentRegister = (uint8_t) (u16coil / 16);
 8018dee:	8b7b      	ldrh	r3, [r7, #26]
 8018df0:	091b      	lsrs	r3, r3, #4
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	747b      	strb	r3, [r7, #17]
         u8currentBit = (uint8_t) (u16coil % 16);
 8018df6:	8b7b      	ldrh	r3, [r7, #26]
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	f003 030f 	and.w	r3, r3, #15
 8018dfe:	74bb      	strb	r3, [r7, #18]

         bTemp = bitRead(
 8018e00:	7bfa      	ldrb	r2, [r7, #15]
 8018e02:	69fb      	ldr	r3, [r7, #28]
 8018e04:	4413      	add	r3, r2
 8018e06:	3305      	adds	r3, #5
 8018e08:	08d9      	lsrs	r1, r3, #3
 8018e0a:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8018e0e:	f991 1000 	ldrsb.w	r1, [r1]
 8018e12:	2900      	cmp	r1, #0
 8018e14:	bf14      	ite	ne
 8018e16:	2001      	movne	r0, #1
 8018e18:	2000      	moveq	r0, #0
 8018e1a:	b2c0      	uxtb	r0, r0
 8018e1c:	f003 0407 	and.w	r4, r3, #7
 8018e20:	b264      	sxtb	r4, r4
 8018e22:	428c      	cmp	r4, r1
 8018e24:	bfac      	ite	ge
 8018e26:	2101      	movge	r1, #1
 8018e28:	2100      	movlt	r1, #0
 8018e2a:	b2c9      	uxtb	r1, r1
 8018e2c:	4001      	ands	r1, r0
 8018e2e:	b2c9      	uxtb	r1, r1
 8018e30:	2900      	cmp	r1, #0
 8018e32:	d002      	beq.n	8018e3a <process_FC15+0x17a>
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7f0 fb19 	bl	800946c <__asan_report_load1>
 8018e3a:	69fb      	ldr	r3, [r7, #28]
 8018e3c:	4413      	add	r3, r2
 8018e3e:	795b      	ldrb	r3, [r3, #5]
 8018e40:	461a      	mov	r2, r3
 8018e42:	7c3b      	ldrb	r3, [r7, #16]
 8018e44:	fa42 f303 	asr.w	r3, r2, r3
 8018e48:	f003 0301 	and.w	r3, r3, #1
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	bf14      	ite	ne
 8018e50:	2301      	movne	r3, #1
 8018e52:	2300      	moveq	r3, #0
 8018e54:	74fb      	strb	r3, [r7, #19]
        		 ModbusH->au8Buffer[ u8frameByte ],
                     u8bitsno );

         bitWrite(
 8018e56:	7cfb      	ldrb	r3, [r7, #19]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d04c      	beq.n	8018ef6 <process_FC15+0x236>
 8018e5c:	f7f1 f802 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018e60:	7c7b      	ldrb	r3, [r7, #17]
 8018e62:	005b      	lsls	r3, r3, #1
 8018e64:	687a      	ldr	r2, [r7, #4]
 8018e66:	18d1      	adds	r1, r2, r3
 8018e68:	460b      	mov	r3, r1
 8018e6a:	08da      	lsrs	r2, r3, #3
 8018e6c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018e70:	f992 2000 	ldrsb.w	r2, [r2]
 8018e74:	2a00      	cmp	r2, #0
 8018e76:	bf14      	ite	ne
 8018e78:	2001      	movne	r0, #1
 8018e7a:	2000      	moveq	r0, #0
 8018e7c:	b2c0      	uxtb	r0, r0
 8018e7e:	f003 0407 	and.w	r4, r3, #7
 8018e82:	b264      	sxtb	r4, r4
 8018e84:	3401      	adds	r4, #1
 8018e86:	b264      	sxtb	r4, r4
 8018e88:	4294      	cmp	r4, r2
 8018e8a:	bfac      	ite	ge
 8018e8c:	2201      	movge	r2, #1
 8018e8e:	2200      	movlt	r2, #0
 8018e90:	b2d2      	uxtb	r2, r2
 8018e92:	4002      	ands	r2, r0
 8018e94:	b2d2      	uxtb	r2, r2
 8018e96:	2a00      	cmp	r2, #0
 8018e98:	d002      	beq.n	8018ea0 <process_FC15+0x1e0>
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f7f0 faf2 	bl	8009484 <__asan_report_load2>
 8018ea0:	880a      	ldrh	r2, [r1, #0]
 8018ea2:	7cbb      	ldrb	r3, [r7, #18]
 8018ea4:	2101      	movs	r1, #1
 8018ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	7c79      	ldrb	r1, [r7, #17]
 8018eae:	0049      	lsls	r1, r1, #1
 8018eb0:	6878      	ldr	r0, [r7, #4]
 8018eb2:	4401      	add	r1, r0
 8018eb4:	4313      	orrs	r3, r2
 8018eb6:	b29d      	uxth	r5, r3
 8018eb8:	460b      	mov	r3, r1
 8018eba:	08da      	lsrs	r2, r3, #3
 8018ebc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018ec0:	f992 2000 	ldrsb.w	r2, [r2]
 8018ec4:	2a00      	cmp	r2, #0
 8018ec6:	bf14      	ite	ne
 8018ec8:	2001      	movne	r0, #1
 8018eca:	2000      	moveq	r0, #0
 8018ecc:	b2c0      	uxtb	r0, r0
 8018ece:	f003 0407 	and.w	r4, r3, #7
 8018ed2:	b264      	sxtb	r4, r4
 8018ed4:	3401      	adds	r4, #1
 8018ed6:	b264      	sxtb	r4, r4
 8018ed8:	4294      	cmp	r4, r2
 8018eda:	bfac      	ite	ge
 8018edc:	2201      	movge	r2, #1
 8018ede:	2200      	movlt	r2, #0
 8018ee0:	b2d2      	uxtb	r2, r2
 8018ee2:	4002      	ands	r2, r0
 8018ee4:	b2d2      	uxtb	r2, r2
 8018ee6:	2a00      	cmp	r2, #0
 8018ee8:	d002      	beq.n	8018ef0 <process_FC15+0x230>
 8018eea:	4618      	mov	r0, r3
 8018eec:	f7f0 fab2 	bl	8009454 <__asan_report_store2>
 8018ef0:	462b      	mov	r3, r5
 8018ef2:	800b      	strh	r3, [r1, #0]
 8018ef4:	e050      	b.n	8018f98 <process_FC15+0x2d8>
 8018ef6:	f7f0 ffb5 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018efa:	7c7b      	ldrb	r3, [r7, #17]
 8018efc:	005b      	lsls	r3, r3, #1
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	18d1      	adds	r1, r2, r3
 8018f02:	460b      	mov	r3, r1
 8018f04:	08da      	lsrs	r2, r3, #3
 8018f06:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018f0a:	f992 2000 	ldrsb.w	r2, [r2]
 8018f0e:	2a00      	cmp	r2, #0
 8018f10:	bf14      	ite	ne
 8018f12:	2001      	movne	r0, #1
 8018f14:	2000      	moveq	r0, #0
 8018f16:	b2c0      	uxtb	r0, r0
 8018f18:	f003 0407 	and.w	r4, r3, #7
 8018f1c:	b264      	sxtb	r4, r4
 8018f1e:	3401      	adds	r4, #1
 8018f20:	b264      	sxtb	r4, r4
 8018f22:	4294      	cmp	r4, r2
 8018f24:	bfac      	ite	ge
 8018f26:	2201      	movge	r2, #1
 8018f28:	2200      	movlt	r2, #0
 8018f2a:	b2d2      	uxtb	r2, r2
 8018f2c:	4002      	ands	r2, r0
 8018f2e:	b2d2      	uxtb	r2, r2
 8018f30:	2a00      	cmp	r2, #0
 8018f32:	d005      	beq.n	8018f40 <process_FC15+0x280>
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7f0 faa5 	bl	8009484 <__asan_report_load2>
 8018f3a:	bf00      	nop
 8018f3c:	24011900 	.word	0x24011900
 8018f40:	880a      	ldrh	r2, [r1, #0]
 8018f42:	7cbb      	ldrb	r3, [r7, #18]
 8018f44:	2101      	movs	r1, #1
 8018f46:	fa01 f303 	lsl.w	r3, r1, r3
 8018f4a:	b29b      	uxth	r3, r3
 8018f4c:	43db      	mvns	r3, r3
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	7c79      	ldrb	r1, [r7, #17]
 8018f52:	0049      	lsls	r1, r1, #1
 8018f54:	6878      	ldr	r0, [r7, #4]
 8018f56:	4401      	add	r1, r0
 8018f58:	4013      	ands	r3, r2
 8018f5a:	b29d      	uxth	r5, r3
 8018f5c:	460b      	mov	r3, r1
 8018f5e:	08da      	lsrs	r2, r3, #3
 8018f60:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018f64:	f992 2000 	ldrsb.w	r2, [r2]
 8018f68:	2a00      	cmp	r2, #0
 8018f6a:	bf14      	ite	ne
 8018f6c:	2001      	movne	r0, #1
 8018f6e:	2000      	moveq	r0, #0
 8018f70:	b2c0      	uxtb	r0, r0
 8018f72:	f003 0407 	and.w	r4, r3, #7
 8018f76:	b264      	sxtb	r4, r4
 8018f78:	3401      	adds	r4, #1
 8018f7a:	b264      	sxtb	r4, r4
 8018f7c:	4294      	cmp	r4, r2
 8018f7e:	bfac      	ite	ge
 8018f80:	2201      	movge	r2, #1
 8018f82:	2200      	movlt	r2, #0
 8018f84:	b2d2      	uxtb	r2, r2
 8018f86:	4002      	ands	r2, r0
 8018f88:	b2d2      	uxtb	r2, r2
 8018f8a:	2a00      	cmp	r2, #0
 8018f8c:	d002      	beq.n	8018f94 <process_FC15+0x2d4>
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f7f0 fa60 	bl	8009454 <__asan_report_store2>
 8018f94:	462b      	mov	r3, r5
 8018f96:	800b      	strh	r3, [r1, #0]
             regs[ u8currentRegister ],
             u8currentBit,
             bTemp );

         u8bitsno ++;
 8018f98:	f7f0 ff64 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018f9c:	7c3b      	ldrb	r3, [r7, #16]
 8018f9e:	3301      	adds	r3, #1
 8018fa0:	743b      	strb	r3, [r7, #16]

         if (u8bitsno > 7)
 8018fa2:	7c3b      	ldrb	r3, [r7, #16]
 8018fa4:	2b07      	cmp	r3, #7
 8018fa6:	d906      	bls.n	8018fb6 <process_FC15+0x2f6>
         {
             u8bitsno = 0;
 8018fa8:	f7f0 ff5c 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018fac:	2300      	movs	r3, #0
 8018fae:	743b      	strb	r3, [r7, #16]
             u8frameByte++;
 8018fb0:	7bfb      	ldrb	r3, [r7, #15]
 8018fb2:	3301      	adds	r3, #1
 8018fb4:	73fb      	strb	r3, [r7, #15]
     for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8018fb6:	f7f0 ff55 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018fba:	8abb      	ldrh	r3, [r7, #20]
 8018fbc:	3301      	adds	r3, #1
 8018fbe:	82bb      	strh	r3, [r7, #20]
 8018fc0:	f7f0 ff50 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018fc4:	8aba      	ldrh	r2, [r7, #20]
 8018fc6:	8b3b      	ldrh	r3, [r7, #24]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	f4ff af0a 	bcc.w	8018de2 <process_FC15+0x122>
         }
     }

     // send outcoming message
     // it's just a copy of the incomping frame until 6th byte
     ModbusH->u8BufferSize         = 6;
 8018fce:	f7f0 ff49 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8018fd2:	69fb      	ldr	r3, [r7, #28]
 8018fd4:	33c6      	adds	r3, #198	; 0xc6
 8018fd6:	08da      	lsrs	r2, r3, #3
 8018fd8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8018fdc:	f992 2000 	ldrsb.w	r2, [r2]
 8018fe0:	2a00      	cmp	r2, #0
 8018fe2:	bf14      	ite	ne
 8018fe4:	2101      	movne	r1, #1
 8018fe6:	2100      	moveq	r1, #0
 8018fe8:	b2c9      	uxtb	r1, r1
 8018fea:	f003 0007 	and.w	r0, r3, #7
 8018fee:	b240      	sxtb	r0, r0
 8018ff0:	4290      	cmp	r0, r2
 8018ff2:	bfac      	ite	ge
 8018ff4:	2201      	movge	r2, #1
 8018ff6:	2200      	movlt	r2, #0
 8018ff8:	b2d2      	uxtb	r2, r2
 8018ffa:	400a      	ands	r2, r1
 8018ffc:	b2d2      	uxtb	r2, r2
 8018ffe:	2a00      	cmp	r2, #0
 8019000:	d002      	beq.n	8019008 <process_FC15+0x348>
 8019002:	4618      	mov	r0, r3
 8019004:	f7f0 fa1a 	bl	800943c <__asan_report_store1>
 8019008:	69fb      	ldr	r3, [r7, #28]
 801900a:	2206      	movs	r2, #6
 801900c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     //u8CopyBufferSize = u8BufferSize +2;
     //printf("%s\n",__func__);
     sendTxBuffer();
 8019010:	f7fd ffac 	bl	8016f6c <sendTxBuffer>
     return FAULT_NONE;
 8019014:	2400      	movs	r4, #0
 8019016:	f7f0 ff25 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801901a:	4623      	mov	r3, r4
 }
 801901c:	4618      	mov	r0, r3
 801901e:	3720      	adds	r7, #32
 8019020:	46bd      	mov	sp, r7
 8019022:	bdb0      	pop	{r4, r5, r7, pc}

08019024 <process_FC16>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup register
  */
 int8_t process_FC16( uint16_t *regs, uint8_t u8size )
 {
 8019024:	b5b0      	push	{r4, r5, r7, lr}
 8019026:	b086      	sub	sp, #24
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	460b      	mov	r3, r1
 801902e:	70fb      	strb	r3, [r7, #3]
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 8019030:	f7f0 ff18 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019034:	4b97      	ldr	r3, [pc, #604]	; (8019294 <process_FC16+0x270>)
 8019036:	617b      	str	r3, [r7, #20]
     //uint8_t u8func = ModbusH->au8Buffer[ FUNC ];  // get the original FUNC code
     uint8_t u8StartAdd = ModbusH->au8Buffer[ ADD_HI ] << 8 | ModbusH->au8Buffer[ ADD_LO ];
 8019038:	697b      	ldr	r3, [r7, #20]
 801903a:	3307      	adds	r3, #7
 801903c:	08da      	lsrs	r2, r3, #3
 801903e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019042:	f992 2000 	ldrsb.w	r2, [r2]
 8019046:	2a00      	cmp	r2, #0
 8019048:	bf14      	ite	ne
 801904a:	2101      	movne	r1, #1
 801904c:	2100      	moveq	r1, #0
 801904e:	b2c9      	uxtb	r1, r1
 8019050:	f003 0007 	and.w	r0, r3, #7
 8019054:	b240      	sxtb	r0, r0
 8019056:	4290      	cmp	r0, r2
 8019058:	bfac      	ite	ge
 801905a:	2201      	movge	r2, #1
 801905c:	2200      	movlt	r2, #0
 801905e:	b2d2      	uxtb	r2, r2
 8019060:	400a      	ands	r2, r1
 8019062:	b2d2      	uxtb	r2, r2
 8019064:	2a00      	cmp	r2, #0
 8019066:	d002      	beq.n	801906e <process_FC16+0x4a>
 8019068:	4618      	mov	r0, r3
 801906a:	f7f0 f9ff 	bl	800946c <__asan_report_load1>
 801906e:	697b      	ldr	r3, [r7, #20]
 8019070:	79db      	ldrb	r3, [r3, #7]
 8019072:	021b      	lsls	r3, r3, #8
 8019074:	b259      	sxtb	r1, r3
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	3308      	adds	r3, #8
 801907a:	08da      	lsrs	r2, r3, #3
 801907c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019080:	f992 2000 	ldrsb.w	r2, [r2]
 8019084:	2a00      	cmp	r2, #0
 8019086:	bf14      	ite	ne
 8019088:	2001      	movne	r0, #1
 801908a:	2000      	moveq	r0, #0
 801908c:	b2c0      	uxtb	r0, r0
 801908e:	f003 0407 	and.w	r4, r3, #7
 8019092:	b264      	sxtb	r4, r4
 8019094:	4294      	cmp	r4, r2
 8019096:	bfac      	ite	ge
 8019098:	2201      	movge	r2, #1
 801909a:	2200      	movlt	r2, #0
 801909c:	b2d2      	uxtb	r2, r2
 801909e:	4002      	ands	r2, r0
 80190a0:	b2d2      	uxtb	r2, r2
 80190a2:	2a00      	cmp	r2, #0
 80190a4:	d002      	beq.n	80190ac <process_FC16+0x88>
 80190a6:	4618      	mov	r0, r3
 80190a8:	f7f0 f9e0 	bl	800946c <__asan_report_load1>
 80190ac:	697b      	ldr	r3, [r7, #20]
 80190ae:	7a1b      	ldrb	r3, [r3, #8]
 80190b0:	b25b      	sxtb	r3, r3
 80190b2:	430b      	orrs	r3, r1
 80190b4:	b25b      	sxtb	r3, r3
 80190b6:	743b      	strb	r3, [r7, #16]
     uint8_t u8regsno = ModbusH->au8Buffer[ NB_HI ] << 8 | ModbusH->au8Buffer[ NB_LO ];
 80190b8:	697b      	ldr	r3, [r7, #20]
 80190ba:	3309      	adds	r3, #9
 80190bc:	08da      	lsrs	r2, r3, #3
 80190be:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80190c2:	f992 2000 	ldrsb.w	r2, [r2]
 80190c6:	2a00      	cmp	r2, #0
 80190c8:	bf14      	ite	ne
 80190ca:	2101      	movne	r1, #1
 80190cc:	2100      	moveq	r1, #0
 80190ce:	b2c9      	uxtb	r1, r1
 80190d0:	f003 0007 	and.w	r0, r3, #7
 80190d4:	b240      	sxtb	r0, r0
 80190d6:	4290      	cmp	r0, r2
 80190d8:	bfac      	ite	ge
 80190da:	2201      	movge	r2, #1
 80190dc:	2200      	movlt	r2, #0
 80190de:	b2d2      	uxtb	r2, r2
 80190e0:	400a      	ands	r2, r1
 80190e2:	b2d2      	uxtb	r2, r2
 80190e4:	2a00      	cmp	r2, #0
 80190e6:	d002      	beq.n	80190ee <process_FC16+0xca>
 80190e8:	4618      	mov	r0, r3
 80190ea:	f7f0 f9bf 	bl	800946c <__asan_report_load1>
 80190ee:	697b      	ldr	r3, [r7, #20]
 80190f0:	7a5b      	ldrb	r3, [r3, #9]
 80190f2:	021b      	lsls	r3, r3, #8
 80190f4:	b259      	sxtb	r1, r3
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	330a      	adds	r3, #10
 80190fa:	08da      	lsrs	r2, r3, #3
 80190fc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019100:	f992 2000 	ldrsb.w	r2, [r2]
 8019104:	2a00      	cmp	r2, #0
 8019106:	bf14      	ite	ne
 8019108:	2001      	movne	r0, #1
 801910a:	2000      	moveq	r0, #0
 801910c:	b2c0      	uxtb	r0, r0
 801910e:	f003 0407 	and.w	r4, r3, #7
 8019112:	b264      	sxtb	r4, r4
 8019114:	4294      	cmp	r4, r2
 8019116:	bfac      	ite	ge
 8019118:	2201      	movge	r2, #1
 801911a:	2200      	movlt	r2, #0
 801911c:	b2d2      	uxtb	r2, r2
 801911e:	4002      	ands	r2, r0
 8019120:	b2d2      	uxtb	r2, r2
 8019122:	2a00      	cmp	r2, #0
 8019124:	d002      	beq.n	801912c <process_FC16+0x108>
 8019126:	4618      	mov	r0, r3
 8019128:	f7f0 f9a0 	bl	800946c <__asan_report_load1>
 801912c:	697b      	ldr	r3, [r7, #20]
 801912e:	7a9b      	ldrb	r3, [r3, #10]
 8019130:	b25b      	sxtb	r3, r3
 8019132:	430b      	orrs	r3, r1
 8019134:	b25b      	sxtb	r3, r3
 8019136:	747b      	strb	r3, [r7, #17]
     //uint8_t u8CopyBufferSize;
     uint8_t i;
     uint16_t temp;

     // build header
     ModbusH->au8Buffer[ NB_HI ]   = 0;
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	2200      	movs	r2, #0
 801913c:	725a      	strb	r2, [r3, #9]
     ModbusH->au8Buffer[ NB_LO ]   = u8regsno;
 801913e:	697b      	ldr	r3, [r7, #20]
 8019140:	7c7a      	ldrb	r2, [r7, #17]
 8019142:	729a      	strb	r2, [r3, #10]
     ModbusH->u8BufferSize         = RESPONSE_SIZE;
 8019144:	697b      	ldr	r3, [r7, #20]
 8019146:	33c6      	adds	r3, #198	; 0xc6
 8019148:	08da      	lsrs	r2, r3, #3
 801914a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801914e:	f992 2000 	ldrsb.w	r2, [r2]
 8019152:	2a00      	cmp	r2, #0
 8019154:	bf14      	ite	ne
 8019156:	2101      	movne	r1, #1
 8019158:	2100      	moveq	r1, #0
 801915a:	b2c9      	uxtb	r1, r1
 801915c:	f003 0007 	and.w	r0, r3, #7
 8019160:	b240      	sxtb	r0, r0
 8019162:	4290      	cmp	r0, r2
 8019164:	bfac      	ite	ge
 8019166:	2201      	movge	r2, #1
 8019168:	2200      	movlt	r2, #0
 801916a:	b2d2      	uxtb	r2, r2
 801916c:	400a      	ands	r2, r1
 801916e:	b2d2      	uxtb	r2, r2
 8019170:	2a00      	cmp	r2, #0
 8019172:	d002      	beq.n	801917a <process_FC16+0x156>
 8019174:	4618      	mov	r0, r3
 8019176:	f7f0 f961 	bl	800943c <__asan_report_store1>
 801917a:	697b      	ldr	r3, [r7, #20]
 801917c:	2206      	movs	r2, #6
 801917e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

     // write registers
     for (i = 0; i < u8regsno; i++)
 8019182:	2300      	movs	r3, #0
 8019184:	73fb      	strb	r3, [r7, #15]
 8019186:	e072      	b.n	801926e <process_FC16+0x24a>
     {
         temp = word(
        		 ModbusH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8019188:	f7f0 fe6c 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801918c:	7bfb      	ldrb	r3, [r7, #15]
 801918e:	005b      	lsls	r3, r3, #1
 8019190:	1dda      	adds	r2, r3, #7
         temp = word(
 8019192:	697b      	ldr	r3, [r7, #20]
 8019194:	4413      	add	r3, r2
 8019196:	3305      	adds	r3, #5
 8019198:	08d9      	lsrs	r1, r3, #3
 801919a:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801919e:	f991 1000 	ldrsb.w	r1, [r1]
 80191a2:	2900      	cmp	r1, #0
 80191a4:	bf14      	ite	ne
 80191a6:	2001      	movne	r0, #1
 80191a8:	2000      	moveq	r0, #0
 80191aa:	b2c0      	uxtb	r0, r0
 80191ac:	f003 0407 	and.w	r4, r3, #7
 80191b0:	b264      	sxtb	r4, r4
 80191b2:	428c      	cmp	r4, r1
 80191b4:	bfac      	ite	ge
 80191b6:	2101      	movge	r1, #1
 80191b8:	2100      	movlt	r1, #0
 80191ba:	b2c9      	uxtb	r1, r1
 80191bc:	4001      	ands	r1, r0
 80191be:	b2c9      	uxtb	r1, r1
 80191c0:	2900      	cmp	r1, #0
 80191c2:	d002      	beq.n	80191ca <process_FC16+0x1a6>
 80191c4:	4618      	mov	r0, r3
 80191c6:	f7f0 f951 	bl	800946c <__asan_report_load1>
 80191ca:	697b      	ldr	r3, [r7, #20]
 80191cc:	4413      	add	r3, r2
 80191ce:	795d      	ldrb	r5, [r3, #5]
				 ModbusH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80191d0:	7bfb      	ldrb	r3, [r7, #15]
 80191d2:	3304      	adds	r3, #4
 80191d4:	005a      	lsls	r2, r3, #1
         temp = word(
 80191d6:	697b      	ldr	r3, [r7, #20]
 80191d8:	4413      	add	r3, r2
 80191da:	3305      	adds	r3, #5
 80191dc:	08d9      	lsrs	r1, r3, #3
 80191de:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 80191e2:	f991 1000 	ldrsb.w	r1, [r1]
 80191e6:	2900      	cmp	r1, #0
 80191e8:	bf14      	ite	ne
 80191ea:	2001      	movne	r0, #1
 80191ec:	2000      	moveq	r0, #0
 80191ee:	b2c0      	uxtb	r0, r0
 80191f0:	f003 0407 	and.w	r4, r3, #7
 80191f4:	b264      	sxtb	r4, r4
 80191f6:	428c      	cmp	r4, r1
 80191f8:	bfac      	ite	ge
 80191fa:	2101      	movge	r1, #1
 80191fc:	2100      	movlt	r1, #0
 80191fe:	b2c9      	uxtb	r1, r1
 8019200:	4001      	ands	r1, r0
 8019202:	b2c9      	uxtb	r1, r1
 8019204:	2900      	cmp	r1, #0
 8019206:	d002      	beq.n	801920e <process_FC16+0x1ea>
 8019208:	4618      	mov	r0, r3
 801920a:	f7f0 f92f 	bl	800946c <__asan_report_load1>
 801920e:	697b      	ldr	r3, [r7, #20]
 8019210:	4413      	add	r3, r2
 8019212:	795b      	ldrb	r3, [r3, #5]
 8019214:	4619      	mov	r1, r3
 8019216:	4628      	mov	r0, r5
 8019218:	f7fd fe4c 	bl	8016eb4 <word>
 801921c:	4603      	mov	r3, r0
 801921e:	827b      	strh	r3, [r7, #18]

         regs[ u8StartAdd + i ] = temp;
 8019220:	7c3a      	ldrb	r2, [r7, #16]
 8019222:	7bfb      	ldrb	r3, [r7, #15]
 8019224:	4413      	add	r3, r2
 8019226:	005b      	lsls	r3, r3, #1
 8019228:	687a      	ldr	r2, [r7, #4]
 801922a:	18d1      	adds	r1, r2, r3
 801922c:	460b      	mov	r3, r1
 801922e:	08da      	lsrs	r2, r3, #3
 8019230:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019234:	f992 2000 	ldrsb.w	r2, [r2]
 8019238:	2a00      	cmp	r2, #0
 801923a:	bf14      	ite	ne
 801923c:	2001      	movne	r0, #1
 801923e:	2000      	moveq	r0, #0
 8019240:	b2c0      	uxtb	r0, r0
 8019242:	f003 0407 	and.w	r4, r3, #7
 8019246:	b264      	sxtb	r4, r4
 8019248:	3401      	adds	r4, #1
 801924a:	b264      	sxtb	r4, r4
 801924c:	4294      	cmp	r4, r2
 801924e:	bfac      	ite	ge
 8019250:	2201      	movge	r2, #1
 8019252:	2200      	movlt	r2, #0
 8019254:	b2d2      	uxtb	r2, r2
 8019256:	4002      	ands	r2, r0
 8019258:	b2d2      	uxtb	r2, r2
 801925a:	2a00      	cmp	r2, #0
 801925c:	d002      	beq.n	8019264 <process_FC16+0x240>
 801925e:	4618      	mov	r0, r3
 8019260:	f7f0 f8f8 	bl	8009454 <__asan_report_store2>
 8019264:	8a7b      	ldrh	r3, [r7, #18]
 8019266:	800b      	strh	r3, [r1, #0]
     for (i = 0; i < u8regsno; i++)
 8019268:	7bfb      	ldrb	r3, [r7, #15]
 801926a:	3301      	adds	r3, #1
 801926c:	73fb      	strb	r3, [r7, #15]
 801926e:	f7f0 fdf9 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019272:	7bfa      	ldrb	r2, [r7, #15]
 8019274:	7c7b      	ldrb	r3, [r7, #17]
 8019276:	429a      	cmp	r2, r3
 8019278:	d386      	bcc.n	8019188 <process_FC16+0x164>
     }
    // u8CopyBufferSize = u8BufferSize +2;

     //printf("%s\n",__func__);
     sendTxBuffer();
 801927a:	f7f0 fdf3 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801927e:	f7fd fe75 	bl	8016f6c <sendTxBuffer>

     return FAULT_NONE;
 8019282:	2400      	movs	r4, #0
 8019284:	f7f0 fdee 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019288:	4623      	mov	r3, r4
 }
 801928a:	4618      	mov	r0, r3
 801928c:	3718      	adds	r7, #24
 801928e:	46bd      	mov	sp, r7
 8019290:	bdb0      	pop	{r4, r5, r7, pc}
 8019292:	bf00      	nop
 8019294:	24011900 	.word	0x24011900

08019298 <modbusparsing>:



 uint32_t modbusparsing(uint8_t *Buffer, uint8_t u8size )
 {
 8019298:	b590      	push	{r4, r7, lr}
 801929a:	b087      	sub	sp, #28
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
 80192a0:	460b      	mov	r3, r1
 80192a2:	70fb      	strb	r3, [r7, #3]
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
 80192a4:	f7f0 fdde 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80192a8:	4baa      	ldr	r3, [pc, #680]	; (8019554 <modbusparsing+0x2bc>)
 80192aa:	613b      	str	r3, [r7, #16]

	 ModbusH->fctsupported[0] = MB_FC_READ_COILS;
 80192ac:	693b      	ldr	r3, [r7, #16]
 80192ae:	33dd      	adds	r3, #221	; 0xdd
 80192b0:	08da      	lsrs	r2, r3, #3
 80192b2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80192b6:	f992 2000 	ldrsb.w	r2, [r2]
 80192ba:	2a00      	cmp	r2, #0
 80192bc:	bf14      	ite	ne
 80192be:	2101      	movne	r1, #1
 80192c0:	2100      	moveq	r1, #0
 80192c2:	b2c9      	uxtb	r1, r1
 80192c4:	f003 0007 	and.w	r0, r3, #7
 80192c8:	b240      	sxtb	r0, r0
 80192ca:	4290      	cmp	r0, r2
 80192cc:	bfac      	ite	ge
 80192ce:	2201      	movge	r2, #1
 80192d0:	2200      	movlt	r2, #0
 80192d2:	b2d2      	uxtb	r2, r2
 80192d4:	400a      	ands	r2, r1
 80192d6:	b2d2      	uxtb	r2, r2
 80192d8:	2a00      	cmp	r2, #0
 80192da:	d002      	beq.n	80192e2 <modbusparsing+0x4a>
 80192dc:	4618      	mov	r0, r3
 80192de:	f7f0 f8ad 	bl	800943c <__asan_report_store1>
 80192e2:	693b      	ldr	r3, [r7, #16]
 80192e4:	2201      	movs	r2, #1
 80192e6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	 ModbusH->fctsupported[1] = MB_FC_READ_DISCRETE_INPUT;
 80192ea:	693b      	ldr	r3, [r7, #16]
 80192ec:	33de      	adds	r3, #222	; 0xde
 80192ee:	08da      	lsrs	r2, r3, #3
 80192f0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80192f4:	f992 2000 	ldrsb.w	r2, [r2]
 80192f8:	2a00      	cmp	r2, #0
 80192fa:	bf14      	ite	ne
 80192fc:	2101      	movne	r1, #1
 80192fe:	2100      	moveq	r1, #0
 8019300:	b2c9      	uxtb	r1, r1
 8019302:	f003 0007 	and.w	r0, r3, #7
 8019306:	b240      	sxtb	r0, r0
 8019308:	4290      	cmp	r0, r2
 801930a:	bfac      	ite	ge
 801930c:	2201      	movge	r2, #1
 801930e:	2200      	movlt	r2, #0
 8019310:	b2d2      	uxtb	r2, r2
 8019312:	400a      	ands	r2, r1
 8019314:	b2d2      	uxtb	r2, r2
 8019316:	2a00      	cmp	r2, #0
 8019318:	d002      	beq.n	8019320 <modbusparsing+0x88>
 801931a:	4618      	mov	r0, r3
 801931c:	f7f0 f88e 	bl	800943c <__asan_report_store1>
 8019320:	693b      	ldr	r3, [r7, #16]
 8019322:	2202      	movs	r2, #2
 8019324:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
	 ModbusH->fctsupported[2] = MB_FC_READ_REGISTERS;
 8019328:	693b      	ldr	r3, [r7, #16]
 801932a:	33df      	adds	r3, #223	; 0xdf
 801932c:	08da      	lsrs	r2, r3, #3
 801932e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019332:	f992 2000 	ldrsb.w	r2, [r2]
 8019336:	2a00      	cmp	r2, #0
 8019338:	bf14      	ite	ne
 801933a:	2101      	movne	r1, #1
 801933c:	2100      	moveq	r1, #0
 801933e:	b2c9      	uxtb	r1, r1
 8019340:	f003 0007 	and.w	r0, r3, #7
 8019344:	b240      	sxtb	r0, r0
 8019346:	4290      	cmp	r0, r2
 8019348:	bfac      	ite	ge
 801934a:	2201      	movge	r2, #1
 801934c:	2200      	movlt	r2, #0
 801934e:	b2d2      	uxtb	r2, r2
 8019350:	400a      	ands	r2, r1
 8019352:	b2d2      	uxtb	r2, r2
 8019354:	2a00      	cmp	r2, #0
 8019356:	d002      	beq.n	801935e <modbusparsing+0xc6>
 8019358:	4618      	mov	r0, r3
 801935a:	f7f0 f86f 	bl	800943c <__asan_report_store1>
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	2203      	movs	r2, #3
 8019362:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	 ModbusH->fctsupported[3] = MB_FC_READ_INPUT_REGISTER;
 8019366:	693b      	ldr	r3, [r7, #16]
 8019368:	33e0      	adds	r3, #224	; 0xe0
 801936a:	08da      	lsrs	r2, r3, #3
 801936c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019370:	f992 2000 	ldrsb.w	r2, [r2]
 8019374:	2a00      	cmp	r2, #0
 8019376:	bf14      	ite	ne
 8019378:	2101      	movne	r1, #1
 801937a:	2100      	moveq	r1, #0
 801937c:	b2c9      	uxtb	r1, r1
 801937e:	f003 0007 	and.w	r0, r3, #7
 8019382:	b240      	sxtb	r0, r0
 8019384:	4290      	cmp	r0, r2
 8019386:	bfac      	ite	ge
 8019388:	2201      	movge	r2, #1
 801938a:	2200      	movlt	r2, #0
 801938c:	b2d2      	uxtb	r2, r2
 801938e:	400a      	ands	r2, r1
 8019390:	b2d2      	uxtb	r2, r2
 8019392:	2a00      	cmp	r2, #0
 8019394:	d002      	beq.n	801939c <modbusparsing+0x104>
 8019396:	4618      	mov	r0, r3
 8019398:	f7f0 f850 	bl	800943c <__asan_report_store1>
 801939c:	693b      	ldr	r3, [r7, #16]
 801939e:	2204      	movs	r2, #4
 80193a0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	 ModbusH->fctsupported[4] = MB_FC_WRITE_COIL;
 80193a4:	693b      	ldr	r3, [r7, #16]
 80193a6:	33e1      	adds	r3, #225	; 0xe1
 80193a8:	08da      	lsrs	r2, r3, #3
 80193aa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80193ae:	f992 2000 	ldrsb.w	r2, [r2]
 80193b2:	2a00      	cmp	r2, #0
 80193b4:	bf14      	ite	ne
 80193b6:	2101      	movne	r1, #1
 80193b8:	2100      	moveq	r1, #0
 80193ba:	b2c9      	uxtb	r1, r1
 80193bc:	f003 0007 	and.w	r0, r3, #7
 80193c0:	b240      	sxtb	r0, r0
 80193c2:	4290      	cmp	r0, r2
 80193c4:	bfac      	ite	ge
 80193c6:	2201      	movge	r2, #1
 80193c8:	2200      	movlt	r2, #0
 80193ca:	b2d2      	uxtb	r2, r2
 80193cc:	400a      	ands	r2, r1
 80193ce:	b2d2      	uxtb	r2, r2
 80193d0:	2a00      	cmp	r2, #0
 80193d2:	d002      	beq.n	80193da <modbusparsing+0x142>
 80193d4:	4618      	mov	r0, r3
 80193d6:	f7f0 f831 	bl	800943c <__asan_report_store1>
 80193da:	693b      	ldr	r3, [r7, #16]
 80193dc:	2205      	movs	r2, #5
 80193de:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	 ModbusH->fctsupported[5] = MB_FC_WRITE_REGISTER;
 80193e2:	693b      	ldr	r3, [r7, #16]
 80193e4:	33e2      	adds	r3, #226	; 0xe2
 80193e6:	08da      	lsrs	r2, r3, #3
 80193e8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80193ec:	f992 2000 	ldrsb.w	r2, [r2]
 80193f0:	2a00      	cmp	r2, #0
 80193f2:	bf14      	ite	ne
 80193f4:	2101      	movne	r1, #1
 80193f6:	2100      	moveq	r1, #0
 80193f8:	b2c9      	uxtb	r1, r1
 80193fa:	f003 0007 	and.w	r0, r3, #7
 80193fe:	b240      	sxtb	r0, r0
 8019400:	4290      	cmp	r0, r2
 8019402:	bfac      	ite	ge
 8019404:	2201      	movge	r2, #1
 8019406:	2200      	movlt	r2, #0
 8019408:	b2d2      	uxtb	r2, r2
 801940a:	400a      	ands	r2, r1
 801940c:	b2d2      	uxtb	r2, r2
 801940e:	2a00      	cmp	r2, #0
 8019410:	d002      	beq.n	8019418 <modbusparsing+0x180>
 8019412:	4618      	mov	r0, r3
 8019414:	f7f0 f812 	bl	800943c <__asan_report_store1>
 8019418:	693b      	ldr	r3, [r7, #16]
 801941a:	2206      	movs	r2, #6
 801941c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	 ModbusH->fctsupported[6] = MB_FC_WRITE_MULTIPLE_COILS;
 8019420:	693b      	ldr	r3, [r7, #16]
 8019422:	33e3      	adds	r3, #227	; 0xe3
 8019424:	08da      	lsrs	r2, r3, #3
 8019426:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801942a:	f992 2000 	ldrsb.w	r2, [r2]
 801942e:	2a00      	cmp	r2, #0
 8019430:	bf14      	ite	ne
 8019432:	2101      	movne	r1, #1
 8019434:	2100      	moveq	r1, #0
 8019436:	b2c9      	uxtb	r1, r1
 8019438:	f003 0007 	and.w	r0, r3, #7
 801943c:	b240      	sxtb	r0, r0
 801943e:	4290      	cmp	r0, r2
 8019440:	bfac      	ite	ge
 8019442:	2201      	movge	r2, #1
 8019444:	2200      	movlt	r2, #0
 8019446:	b2d2      	uxtb	r2, r2
 8019448:	400a      	ands	r2, r1
 801944a:	b2d2      	uxtb	r2, r2
 801944c:	2a00      	cmp	r2, #0
 801944e:	d002      	beq.n	8019456 <modbusparsing+0x1be>
 8019450:	4618      	mov	r0, r3
 8019452:	f7ef fff3 	bl	800943c <__asan_report_store1>
 8019456:	693b      	ldr	r3, [r7, #16]
 8019458:	220f      	movs	r2, #15
 801945a:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
	 ModbusH->fctsupported[7] = MB_FC_WRITE_MULTIPLE_REGISTERS;
 801945e:	693b      	ldr	r3, [r7, #16]
 8019460:	33e4      	adds	r3, #228	; 0xe4
 8019462:	08da      	lsrs	r2, r3, #3
 8019464:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019468:	f992 2000 	ldrsb.w	r2, [r2]
 801946c:	2a00      	cmp	r2, #0
 801946e:	bf14      	ite	ne
 8019470:	2101      	movne	r1, #1
 8019472:	2100      	moveq	r1, #0
 8019474:	b2c9      	uxtb	r1, r1
 8019476:	f003 0007 	and.w	r0, r3, #7
 801947a:	b240      	sxtb	r0, r0
 801947c:	4290      	cmp	r0, r2
 801947e:	bfac      	ite	ge
 8019480:	2201      	movge	r2, #1
 8019482:	2200      	movlt	r2, #0
 8019484:	b2d2      	uxtb	r2, r2
 8019486:	400a      	ands	r2, r1
 8019488:	b2d2      	uxtb	r2, r2
 801948a:	2a00      	cmp	r2, #0
 801948c:	d002      	beq.n	8019494 <modbusparsing+0x1fc>
 801948e:	4618      	mov	r0, r3
 8019490:	f7ef ffd4 	bl	800943c <__asan_report_store1>
 8019494:	693b      	ldr	r3, [r7, #16]
 8019496:	2210      	movs	r2, #16
 8019498:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4

	 int8_t i8state;
	 int8_t u8current;
	 u8current= u8size; // this is hacky way to update this variable
 801949c:	78fb      	ldrb	r3, [r7, #3]
 801949e:	737b      	strb	r3, [r7, #13]
	 uint16_t *regs = ModbusH->u16regs;
 80194a0:	693b      	ldr	r3, [r7, #16]
 80194a2:	3346      	adds	r3, #70	; 0x46
 80194a4:	617b      	str	r3, [r7, #20]


	 if (u8current >= 8) {
 80194a6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80194aa:	2b07      	cmp	r3, #7
 80194ac:	dd30      	ble.n	8019510 <modbusparsing+0x278>
         i8state = getRxBuffer(Buffer,  u8size);
 80194ae:	f7f0 fcd9 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80194b2:	78fb      	ldrb	r3, [r7, #3]
 80194b4:	4619      	mov	r1, r3
 80194b6:	6878      	ldr	r0, [r7, #4]
 80194b8:	f7fd fed4 	bl	8017264 <getRxBuffer>
 80194bc:	4603      	mov	r3, r0
 80194be:	73bb      	strb	r3, [r7, #14]
         ModbusH->u8lastError = i8state;
 80194c0:	7bbc      	ldrb	r4, [r7, #14]
 80194c2:	693b      	ldr	r3, [r7, #16]
 80194c4:	3304      	adds	r3, #4
 80194c6:	08da      	lsrs	r2, r3, #3
 80194c8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80194cc:	f992 2000 	ldrsb.w	r2, [r2]
 80194d0:	2a00      	cmp	r2, #0
 80194d2:	bf14      	ite	ne
 80194d4:	2101      	movne	r1, #1
 80194d6:	2100      	moveq	r1, #0
 80194d8:	b2c9      	uxtb	r1, r1
 80194da:	f003 0007 	and.w	r0, r3, #7
 80194de:	b240      	sxtb	r0, r0
 80194e0:	4290      	cmp	r0, r2
 80194e2:	bfac      	ite	ge
 80194e4:	2201      	movge	r2, #1
 80194e6:	2200      	movlt	r2, #0
 80194e8:	b2d2      	uxtb	r2, r2
 80194ea:	400a      	ands	r2, r1
 80194ec:	b2d2      	uxtb	r2, r2
 80194ee:	2a00      	cmp	r2, #0
 80194f0:	d002      	beq.n	80194f8 <modbusparsing+0x260>
 80194f2:	4618      	mov	r0, r3
 80194f4:	f7ef ffa2 	bl	800943c <__asan_report_store1>
 80194f8:	693b      	ldr	r3, [r7, #16]
 80194fa:	4622      	mov	r2, r4
 80194fc:	711a      	strb	r2, [r3, #4]
         if(i8state == ERR_BUFF_OVERFLOW)
 80194fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019502:	f113 0f03 	cmn.w	r3, #3
 8019506:	d107      	bne.n	8019518 <modbusparsing+0x280>
         {
        	 //printf("size too large!\n");
        	 return FAULT_NONE_RTOS;
 8019508:	f7f0 fcac 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801950c:	2408      	movs	r4, #8
 801950e:	e123      	b.n	8019758 <modbusparsing+0x4c0>
         }
     } else {

    	 //printf("size too small!\n");
         return FAULT_NONE_RTOS;
 8019510:	f7f0 fca8 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019514:	2408      	movs	r4, #8
 8019516:	e11f      	b.n	8019758 <modbusparsing+0x4c0>
     }

     // check slave id, omit bytes if doesn't match
     if (ModbusH->au8Buffer[ ID ] != ModbusH->u8id)
 8019518:	f7f0 fca4 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801951c:	693b      	ldr	r3, [r7, #16]
 801951e:	3305      	adds	r3, #5
 8019520:	08da      	lsrs	r2, r3, #3
 8019522:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019526:	f992 2000 	ldrsb.w	r2, [r2]
 801952a:	2a00      	cmp	r2, #0
 801952c:	bf14      	ite	ne
 801952e:	2101      	movne	r1, #1
 8019530:	2100      	moveq	r1, #0
 8019532:	b2c9      	uxtb	r1, r1
 8019534:	f003 0007 	and.w	r0, r3, #7
 8019538:	b240      	sxtb	r0, r0
 801953a:	4290      	cmp	r0, r2
 801953c:	bfac      	ite	ge
 801953e:	2201      	movge	r2, #1
 8019540:	2200      	movlt	r2, #0
 8019542:	b2d2      	uxtb	r2, r2
 8019544:	400a      	ands	r2, r1
 8019546:	b2d2      	uxtb	r2, r2
 8019548:	2a00      	cmp	r2, #0
 801954a:	d005      	beq.n	8019558 <modbusparsing+0x2c0>
 801954c:	4618      	mov	r0, r3
 801954e:	f7ef ff8d 	bl	800946c <__asan_report_load1>
 8019552:	bf00      	nop
 8019554:	24011900 	.word	0x24011900
 8019558:	693b      	ldr	r3, [r7, #16]
 801955a:	7959      	ldrb	r1, [r3, #5]
 801955c:	693b      	ldr	r3, [r7, #16]
 801955e:	08da      	lsrs	r2, r3, #3
 8019560:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8019564:	f992 2000 	ldrsb.w	r2, [r2]
 8019568:	2a00      	cmp	r2, #0
 801956a:	bf14      	ite	ne
 801956c:	2001      	movne	r0, #1
 801956e:	2000      	moveq	r0, #0
 8019570:	b2c0      	uxtb	r0, r0
 8019572:	f003 0407 	and.w	r4, r3, #7
 8019576:	b264      	sxtb	r4, r4
 8019578:	4294      	cmp	r4, r2
 801957a:	bfac      	ite	ge
 801957c:	2201      	movge	r2, #1
 801957e:	2200      	movlt	r2, #0
 8019580:	b2d2      	uxtb	r2, r2
 8019582:	4002      	ands	r2, r0
 8019584:	b2d2      	uxtb	r2, r2
 8019586:	2a00      	cmp	r2, #0
 8019588:	d002      	beq.n	8019590 <modbusparsing+0x2f8>
 801958a:	4618      	mov	r0, r3
 801958c:	f7ef ff6e 	bl	800946c <__asan_report_load1>
 8019590:	693b      	ldr	r3, [r7, #16]
 8019592:	781b      	ldrb	r3, [r3, #0]
 8019594:	4299      	cmp	r1, r3
 8019596:	d003      	beq.n	80195a0 <modbusparsing+0x308>
     {
    	 //printf("Wrong ID!\n");
    	 return FAULT_NONE_RTOS;
 8019598:	f7f0 fc64 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801959c:	2408      	movs	r4, #8
 801959e:	e0db      	b.n	8019758 <modbusparsing+0x4c0>
     }


     // validate message: CRC, FCT, address and size
     uint8_t u8exception = validateRequest();
 80195a0:	f7f0 fc60 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80195a4:	f7fe f90e 	bl	80177c4 <validateRequest>
 80195a8:	4603      	mov	r3, r0
 80195aa:	73fb      	strb	r3, [r7, #15]
     if (u8exception > 0)
 80195ac:	7bfb      	ldrb	r3, [r7, #15]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d02e      	beq.n	8019610 <modbusparsing+0x378>
     {
         if (u8exception != NO_REPLY)
 80195b2:	f7f0 fc57 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80195b6:	7bfb      	ldrb	r3, [r7, #15]
 80195b8:	2bff      	cmp	r3, #255	; 0xff
 80195ba:	d007      	beq.n	80195cc <modbusparsing+0x334>
         {
             buildException( u8exception );
 80195bc:	f7f0 fc52 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80195c0:	7bfb      	ldrb	r3, [r7, #15]
 80195c2:	4618      	mov	r0, r3
 80195c4:	f7fd ffdc 	bl	8017580 <buildException>
             sendTxBuffer();
 80195c8:	f7fd fcd0 	bl	8016f6c <sendTxBuffer>
         }
         ModbusH->u8lastError = u8exception;
 80195cc:	f7f0 fc4a 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	3304      	adds	r3, #4
 80195d4:	08da      	lsrs	r2, r3, #3
 80195d6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80195da:	f992 2000 	ldrsb.w	r2, [r2]
 80195de:	2a00      	cmp	r2, #0
 80195e0:	bf14      	ite	ne
 80195e2:	2101      	movne	r1, #1
 80195e4:	2100      	moveq	r1, #0
 80195e6:	b2c9      	uxtb	r1, r1
 80195e8:	f003 0007 	and.w	r0, r3, #7
 80195ec:	b240      	sxtb	r0, r0
 80195ee:	4290      	cmp	r0, r2
 80195f0:	bfac      	ite	ge
 80195f2:	2201      	movge	r2, #1
 80195f4:	2200      	movlt	r2, #0
 80195f6:	b2d2      	uxtb	r2, r2
 80195f8:	400a      	ands	r2, r1
 80195fa:	b2d2      	uxtb	r2, r2
 80195fc:	2a00      	cmp	r2, #0
 80195fe:	d002      	beq.n	8019606 <modbusparsing+0x36e>
 8019600:	4618      	mov	r0, r3
 8019602:	f7ef ff1b 	bl	800943c <__asan_report_store1>
 8019606:	693b      	ldr	r3, [r7, #16]
 8019608:	7bfa      	ldrb	r2, [r7, #15]
 801960a:	711a      	strb	r2, [r3, #4]
         //printf("Fail validation ID!\n");
         return FAULT_NONE_RTOS;
 801960c:	2408      	movs	r4, #8
 801960e:	e0a3      	b.n	8019758 <modbusparsing+0x4c0>
     }

     // this value is not used by slave
     //u32timeOut = millis() + long(u16timeOut);
     ModbusH->u8lastError = 0;
 8019610:	f7f0 fc28 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019614:	693b      	ldr	r3, [r7, #16]
 8019616:	3304      	adds	r3, #4
 8019618:	08da      	lsrs	r2, r3, #3
 801961a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801961e:	f992 2000 	ldrsb.w	r2, [r2]
 8019622:	2a00      	cmp	r2, #0
 8019624:	bf14      	ite	ne
 8019626:	2101      	movne	r1, #1
 8019628:	2100      	moveq	r1, #0
 801962a:	b2c9      	uxtb	r1, r1
 801962c:	f003 0007 	and.w	r0, r3, #7
 8019630:	b240      	sxtb	r0, r0
 8019632:	4290      	cmp	r0, r2
 8019634:	bfac      	ite	ge
 8019636:	2201      	movge	r2, #1
 8019638:	2200      	movlt	r2, #0
 801963a:	b2d2      	uxtb	r2, r2
 801963c:	400a      	ands	r2, r1
 801963e:	b2d2      	uxtb	r2, r2
 8019640:	2a00      	cmp	r2, #0
 8019642:	d002      	beq.n	801964a <modbusparsing+0x3b2>
 8019644:	4618      	mov	r0, r3
 8019646:	f7ef fef9 	bl	800943c <__asan_report_store1>
 801964a:	693b      	ldr	r3, [r7, #16]
 801964c:	2200      	movs	r2, #0
 801964e:	711a      	strb	r2, [r3, #4]

     // process message
     switch( ModbusH->au8Buffer[ FUNC ] )
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	3306      	adds	r3, #6
 8019654:	08da      	lsrs	r2, r3, #3
 8019656:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801965a:	f992 2000 	ldrsb.w	r2, [r2]
 801965e:	2a00      	cmp	r2, #0
 8019660:	bf14      	ite	ne
 8019662:	2101      	movne	r1, #1
 8019664:	2100      	moveq	r1, #0
 8019666:	b2c9      	uxtb	r1, r1
 8019668:	f003 0007 	and.w	r0, r3, #7
 801966c:	b240      	sxtb	r0, r0
 801966e:	4290      	cmp	r0, r2
 8019670:	bfac      	ite	ge
 8019672:	2201      	movge	r2, #1
 8019674:	2200      	movlt	r2, #0
 8019676:	b2d2      	uxtb	r2, r2
 8019678:	400a      	ands	r2, r1
 801967a:	b2d2      	uxtb	r2, r2
 801967c:	2a00      	cmp	r2, #0
 801967e:	d002      	beq.n	8019686 <modbusparsing+0x3ee>
 8019680:	4618      	mov	r0, r3
 8019682:	f7ef fef3 	bl	800946c <__asan_report_load1>
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	799b      	ldrb	r3, [r3, #6]
 801968a:	3b01      	subs	r3, #1
 801968c:	2b0f      	cmp	r3, #15
 801968e:	d85f      	bhi.n	8019750 <modbusparsing+0x4b8>
 8019690:	a201      	add	r2, pc, #4	; (adr r2, 8019698 <modbusparsing+0x400>)
 8019692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019696:	bf00      	nop
 8019698:	080196d9 	.word	0x080196d9
 801969c:	080196d9 	.word	0x080196d9
 80196a0:	080196ed 	.word	0x080196ed
 80196a4:	080196ed 	.word	0x080196ed
 80196a8:	08019701 	.word	0x08019701
 80196ac:	08019715 	.word	0x08019715
 80196b0:	08019751 	.word	0x08019751
 80196b4:	08019751 	.word	0x08019751
 80196b8:	08019751 	.word	0x08019751
 80196bc:	08019751 	.word	0x08019751
 80196c0:	08019751 	.word	0x08019751
 80196c4:	08019751 	.word	0x08019751
 80196c8:	08019751 	.word	0x08019751
 80196cc:	08019751 	.word	0x08019751
 80196d0:	08019729 	.word	0x08019729
 80196d4:	0801973d 	.word	0x0801973d
     {
     case MB_FC_READ_COILS:
     case MB_FC_READ_DISCRETE_INPUT:
         return process_FC1( regs, u8size );
 80196d8:	f7f0 fbc4 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80196dc:	78fb      	ldrb	r3, [r7, #3]
 80196de:	4619      	mov	r1, r3
 80196e0:	6978      	ldr	r0, [r7, #20]
 80196e2:	f7fe fc0f 	bl	8017f04 <process_FC1>
 80196e6:	4603      	mov	r3, r0
 80196e8:	461c      	mov	r4, r3
 80196ea:	e035      	b.n	8019758 <modbusparsing+0x4c0>
         break;
     case MB_FC_READ_INPUT_REGISTER:
     case MB_FC_READ_REGISTERS :
         return process_FC3( regs, u8size );
 80196ec:	f7f0 fbba 	bl	8009e64 <__sanitizer_cov_trace_pc>
 80196f0:	78fb      	ldrb	r3, [r7, #3]
 80196f2:	4619      	mov	r1, r3
 80196f4:	6978      	ldr	r0, [r7, #20]
 80196f6:	f7fe fea1 	bl	801843c <process_FC3>
 80196fa:	4603      	mov	r3, r0
 80196fc:	461c      	mov	r4, r3
 80196fe:	e02b      	b.n	8019758 <modbusparsing+0x4c0>
         break;
     case MB_FC_WRITE_COIL:
         return process_FC5( regs, u8size );
 8019700:	f7f0 fbb0 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019704:	78fb      	ldrb	r3, [r7, #3]
 8019706:	4619      	mov	r1, r3
 8019708:	6978      	ldr	r0, [r7, #20]
 801970a:	f7ff f8c7 	bl	801889c <process_FC5>
 801970e:	4603      	mov	r3, r0
 8019710:	461c      	mov	r4, r3
 8019712:	e021      	b.n	8019758 <modbusparsing+0x4c0>
         break;
     case MB_FC_WRITE_REGISTER :
         return process_FC6( regs, u8size );
 8019714:	f7f0 fba6 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019718:	78fb      	ldrb	r3, [r7, #3]
 801971a:	4619      	mov	r1, r3
 801971c:	6978      	ldr	r0, [r7, #20]
 801971e:	f7ff f9f7 	bl	8018b10 <process_FC6>
 8019722:	4603      	mov	r3, r0
 8019724:	461c      	mov	r4, r3
 8019726:	e017      	b.n	8019758 <modbusparsing+0x4c0>
         break;
     case MB_FC_WRITE_MULTIPLE_COILS:
         return process_FC15( regs, u8size );
 8019728:	f7f0 fb9c 	bl	8009e64 <__sanitizer_cov_trace_pc>
 801972c:	78fb      	ldrb	r3, [r7, #3]
 801972e:	4619      	mov	r1, r3
 8019730:	6978      	ldr	r0, [r7, #20]
 8019732:	f7ff fac5 	bl	8018cc0 <process_FC15>
 8019736:	4603      	mov	r3, r0
 8019738:	461c      	mov	r4, r3
 801973a:	e00d      	b.n	8019758 <modbusparsing+0x4c0>
         break;
     case MB_FC_WRITE_MULTIPLE_REGISTERS :
         return process_FC16( regs, u8size );
 801973c:	f7f0 fb92 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019740:	78fb      	ldrb	r3, [r7, #3]
 8019742:	4619      	mov	r1, r3
 8019744:	6978      	ldr	r0, [r7, #20]
 8019746:	f7ff fc6d 	bl	8019024 <process_FC16>
 801974a:	4603      	mov	r3, r0
 801974c:	461c      	mov	r4, r3
 801974e:	e003      	b.n	8019758 <modbusparsing+0x4c0>
         break;
     default:
         break;
 8019750:	bf00      	nop
     }
     return FAULT_NONE_RTOS;
 8019752:	f7f0 fb87 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019756:	2408      	movs	r4, #8
 8019758:	f7f0 fb84 	bl	8009e64 <__sanitizer_cov_trace_pc>
 }
 801975c:	4623      	mov	r3, r4
 801975e:	4618      	mov	r0, r3
 8019760:	371c      	adds	r7, #28
 8019762:	46bd      	mov	sp, r7
 8019764:	bd90      	pop	{r4, r7, pc}
 8019766:	bf00      	nop

08019768 <_sub_I_00099_0>:
 8019768:	b580      	push	{r7, lr}
 801976a:	af00      	add	r7, sp, #0
 801976c:	f7f0 fb7a 	bl	8009e64 <__sanitizer_cov_trace_pc>
 8019770:	f7ef fe98 	bl	80094a4 <__asan_init>
 8019774:	f7ef ff16 	bl	80095a4 <__asan_version_mismatch_check_v8>
 8019778:	bd80      	pop	{r7, pc}
	...

0801977c <targetTask>:
}
#endif


static void targetTask( void * pvParameters )
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b086      	sub	sp, #24
 8019780:	af02      	add	r7, sp, #8
 8019782:	6078      	str	r0, [r7, #4]
	/* Unused parameters. */
	//( void ) pvParameters;

   #if DUALCOREFUZZ == 0
   //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
   Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8019784:	4b34      	ldr	r3, [pc, #208]	; (8019858 <targetTask+0xdc>)
 8019786:	60bb      	str	r3, [r7, #8]

    pointer = mallocMPU(32);

    */

    AFLfuzzer.xTypeEx = EX_NO_EX;
 8019788:	68bb      	ldr	r3, [r7, #8]
 801978a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801978e:	2200      	movs	r2, #0
 8019790:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8019794:	2201      	movs	r2, #1
 8019796:	2101      	movs	r1, #1
 8019798:	4830      	ldr	r0, [pc, #192]	; (801985c <targetTask+0xe0>)
 801979a:	f7f5 fc49 	bl	800f030 <HAL_GPIO_WritePin>
    uint8_t firstRun=1;
 801979e:	2301      	movs	r3, #1
 80197a0:	73fb      	strb	r3, [r7, #15]

   	xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,2,1,eSetValueWithOverwrite); //notify the fuzzer task the target is ready
 80197a2:	68bb      	ldr	r3, [r7, #8]
 80197a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80197a8:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 80197ac:	2300      	movs	r3, #0
 80197ae:	9300      	str	r3, [sp, #0]
 80197b0:	2303      	movs	r3, #3
 80197b2:	2201      	movs	r2, #1
 80197b4:	2102      	movs	r1, #2
 80197b6:	f7ee fdd8 	bl	800836a <MPU_xTaskGenericNotify>
    for( ; ; )
	{

    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for the data coming from the fuzzer task
 80197ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80197be:	2101      	movs	r1, #1
 80197c0:	2000      	movs	r0, #0
 80197c2:	f7ee fe09 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>

    	if(firstRun)
 80197c6:	7bfb      	ldrb	r3, [r7, #15]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d01d      	beq.n	8019808 <targetTask+0x8c>
    	{
    		//AFLfuzzer.bRXcomplete = false;
    		//AFLfuzzer.inputLength = 0;
    		AFLfuzzer.previousGuard = 0;
 80197cc:	68bb      	ldr	r3, [r7, #8]
 80197ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80197d2:	2200      	movs	r2, #0
 80197d4:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
    		//RingZeroes(&AFLfuzzer.inputAFL);
    		memset(AFLfuzzer.aflbmp,0,AFL_BITMAP_SIZE*sizeof(uint16_t));
 80197d8:	68bb      	ldr	r3, [r7, #8]
 80197da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80197de:	2100      	movs	r1, #0
 80197e0:	4618      	mov	r0, r3
 80197e2:	f002 ff69 	bl	801c6b8 <memset>
    		memset(AFLfuzzer.afldiff,0, AFL_BITMAP_SIZE/4 *sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80197ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80197f0:	2100      	movs	r1, #0
 80197f2:	4618      	mov	r0, r3
 80197f4:	f002 ff60 	bl	801c6b8 <memset>
    		AFLfuzzer.indexdif = 0;
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80197fe:	2200      	movs	r2, #0
 8019800:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
    		firstRun=0;
 8019804:	2300      	movs	r3, #0
 8019806:	73fb      	strb	r3, [r7, #15]
    	}

		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8019808:	2200      	movs	r2, #0
 801980a:	2101      	movs	r1, #1
 801980c:	4813      	ldr	r0, [pc, #76]	; (801985c <targetTask+0xe0>)
 801980e:	f7f5 fc0f 	bl	800f030 <HAL_GPIO_WritePin>
		{
			printf("\\x\%02x",AFLfuzzer.inputAFL.uxBuffer[i+4]);
		}
		printf("\n");
		*/
		modbusparsing(&AFLfuzzer.inputAFL.uxBuffer[4], AFLfuzzer.inputAFL.u32availablenopad-4 );
 8019812:	68ba      	ldr	r2, [r7, #8]
 8019814:	f246 0304 	movw	r3, #24580	; 0x6004
 8019818:	4413      	add	r3, r2
 801981a:	68ba      	ldr	r2, [r7, #8]
 801981c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8019820:	f8d2 280c 	ldr.w	r2, [r2, #2060]	; 0x80c
 8019824:	b2d2      	uxtb	r2, r2
 8019826:	3a04      	subs	r2, #4
 8019828:	b2d2      	uxtb	r2, r2
 801982a:	4611      	mov	r1, r2
 801982c:	4618      	mov	r0, r3
 801982e:	f7ff fd33 	bl	8019298 <modbusparsing>
		xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_NONE_RTOS,eSetValueWithOverwrite);//notify that the test finished
 8019832:	68bb      	ldr	r3, [r7, #8]
 8019834:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019838:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 801983c:	2300      	movs	r3, #0
 801983e:	9300      	str	r3, [sp, #0]
 8019840:	2303      	movs	r3, #3
 8019842:	2208      	movs	r2, #8
 8019844:	2100      	movs	r1, #0
 8019846:	f7ee fd90 	bl	800836a <MPU_xTaskGenericNotify>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 801984a:	2201      	movs	r2, #1
 801984c:	2101      	movs	r1, #1
 801984e:	4803      	ldr	r0, [pc, #12]	; (801985c <targetTask+0xe0>)
 8019850:	f7f5 fbee 	bl	800f030 <HAL_GPIO_WritePin>
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for the data coming from the fuzzer task
 8019854:	e7b1      	b.n	80197ba <targetTask+0x3e>
 8019856:	bf00      	nop
 8019858:	24020000 	.word	0x24020000
 801985c:	58020400 	.word	0x58020400

08019860 <spawnNewTarget>:
}



static void spawnNewTarget( )
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b0aa      	sub	sp, #168	; 0xa8
 8019864:	af00      	add	r7, sp, #0
   #if DUALCOREFUZZ == 0
   //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
   Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8019866:	4b21      	ldr	r3, [pc, #132]	; (80198ec <spawnNewTarget+0x8c>)
 8019868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   #endif

   TaskParameters_t targetTaskParameters =
 801986c:	1d3b      	adds	r3, r7, #4
 801986e:	22a0      	movs	r2, #160	; 0xa0
 8019870:	2100      	movs	r1, #0
 8019872:	4618      	mov	r0, r3
 8019874:	f002 ff20 	bl	801c6b8 <memset>
 8019878:	4b1d      	ldr	r3, [pc, #116]	; (80198f0 <spawnNewTarget+0x90>)
 801987a:	607b      	str	r3, [r7, #4]
 801987c:	4b1d      	ldr	r3, [pc, #116]	; (80198f4 <spawnNewTarget+0x94>)
 801987e:	60bb      	str	r3, [r7, #8]
 8019880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019884:	81bb      	strh	r3, [r7, #12]
 8019886:	2314      	movs	r3, #20
 8019888:	617b      	str	r3, [r7, #20]
 801988a:	4b1b      	ldr	r3, [pc, #108]	; (80198f8 <spawnNewTarget+0x98>)
 801988c:	61bb      	str	r3, [r7, #24]
 801988e:	4b17      	ldr	r3, [pc, #92]	; (80198ec <spawnNewTarget+0x8c>)
 8019890:	61fb      	str	r3, [r7, #28]
 8019892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019896:	623b      	str	r3, [r7, #32]
 8019898:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 801989c:	627b      	str	r3, [r7, #36]	; 0x24
 801989e:	4b17      	ldr	r3, [pc, #92]	; (80198fc <spawnNewTarget+0x9c>)
 80198a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80198a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80198a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80198a8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80198ac:	633b      	str	r3, [r7, #48]	; 0x30
 80198ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80198b2:	637b      	str	r3, [r7, #52]	; 0x34
 80198b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80198b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80198ba:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80198be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80198c0:	4b0f      	ldr	r3, [pc, #60]	; (8019900 <spawnNewTarget+0xa0>)
 80198c2:	643b      	str	r3, [r7, #64]	; 0x40
 80198c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80198c8:	647b      	str	r3, [r7, #68]	; 0x44
 80198ca:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80198ce:	64bb      	str	r3, [r7, #72]	; 0x48
        						 }
   };


   //create a new task
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 80198d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80198d4:	f646 0370 	movw	r3, #26736	; 0x6870
 80198d8:	4413      	add	r3, r2
 80198da:	1d3a      	adds	r2, r7, #4
 80198dc:	4619      	mov	r1, r3
 80198de:	4610      	mov	r0, r2
 80198e0:	f7e9 fc8d 	bl	80031fe <xTaskCreateRestricted>



}
 80198e4:	bf00      	nop
 80198e6:	37a8      	adds	r7, #168	; 0xa8
 80198e8:	46bd      	mov	sp, r7
 80198ea:	bd80      	pop	{r7, pc}
 80198ec:	24020000 	.word	0x24020000
 80198f0:	0801977d 	.word	0x0801977d
 80198f4:	240083f0 	.word	0x240083f0
 80198f8:	24031000 	.word	0x24031000
 80198fc:	24036000 	.word	0x24036000
 8019900:	24011900 	.word	0x24011900

08019904 <fuzzerTask>:

uint16_t *indexdifP;
uint8_t  bufferDMA[550];
static void fuzzerTask( void * pvParameters )
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b090      	sub	sp, #64	; 0x40
 8019908:	af02      	add	r7, sp, #8
 801990a:	6078      	str	r0, [r7, #4]
	int i;


    #if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 801990c:	4b7c      	ldr	r3, [pc, #496]	; (8019b00 <fuzzerTask+0x1fc>)
 801990e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
 8019910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019912:	627b      	str	r3, [r7, #36]	; 0x24
    #endif

    indexdifP = &AFLfuzzer.indexdif;
 8019914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019916:	f646 0362 	movw	r3, #26722	; 0x6862
 801991a:	4413      	add	r3, r2
 801991c:	4a79      	ldr	r2, [pc, #484]	; (8019b04 <fuzzerTask+0x200>)
 801991e:	6013      	str	r3, [r2, #0]

    		   AFLfuzzer.receiving = false;
	           HAL_UART_Receive_IT(&huart3, AFLfuzzer.inputAFL.uxBuffer, 4);
	           //HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);
    #endif
	MX_USB_DEVICE_Init();
 8019920:	f001 fffc 	bl	801b91c <MX_USB_DEVICE_Init>
	error_cnt = 0;
 8019924:	4b78      	ldr	r3, [pc, #480]	; (8019b08 <fuzzerTask+0x204>)
 8019926:	2200      	movs	r2, #0
 8019928:	601a      	str	r2, [r3, #0]
	 * 1: Notification from USB USART driver to the fuzzer task when data has arrived
	 * 2: Notification from target to fuzzer to signal readiness to execute the test
	 * ********/

	/**Lets poison the AFLfuzzer structure**/
	uint32_t *HelperShadow =  (uint32_t *)( ((uint32_t)pAFLfuzzer>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 801992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801992c:	08db      	lsrs	r3, r3, #3
 801992e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019932:	623b      	str	r3, [r7, #32]
	uint32_t HelperShadowSize = AFLINPUTREGION_SIZE>>3;
 8019934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019938:	61fb      	str	r3, [r7, #28]
	memset((void *)HelperShadow, 0xff,HelperShadowSize);
 801993a:	69fa      	ldr	r2, [r7, #28]
 801993c:	21ff      	movs	r1, #255	; 0xff
 801993e:	6a38      	ldr	r0, [r7, #32]
 8019940:	f002 feba 	bl	801c6b8 <memset>
	// the only section that should be accessible by the target is the input buffer, so lets un-poison it
	HelperShadow =  (uint32_t *)( ((uint32_t)(&AFLfuzzer.inputAFL.uxBuffer)>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 8019944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019946:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801994a:	08db      	lsrs	r3, r3, #3
 801994c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019950:	623b      	str	r3, [r7, #32]
	HelperShadowSize = MAX_BUFFER_INPUT>>3;
 8019952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019956:	61fb      	str	r3, [r7, #28]
	memset((void *)HelperShadow, 0x00,HelperShadowSize);
 8019958:	69fa      	ldr	r2, [r7, #28]
 801995a:	2100      	movs	r1, #0
 801995c:	6a38      	ldr	r0, [r7, #32]
 801995e:	f002 feab 	bl	801c6b8 <memset>


	numberofcycles = 0;
 8019962:	2300      	movs	r3, #0
 8019964:	637b      	str	r3, [r7, #52]	; 0x34
	spawnNewTarget();
 8019966:	f7ff ff7b 	bl	8019860 <spawnNewTarget>
	// wait for the target task notification when ready
	ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 801996a:	220a      	movs	r2, #10
 801996c:	2101      	movs	r1, #1
 801996e:	2002      	movs	r0, #2
 8019970:	f7ee fd32 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>

	for( ; ; )
	{

		// we will wait for a notification on index 1 when fuzzing data has arrived
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 8019974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019978:	2101      	movs	r1, #1
 801997a:	2001      	movs	r0, #1
 801997c:	f7ee fd2c 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
		{

			 xTaskNotify(AFLfuzzer.xTaskTarget,0,eSetValueWithOverwrite);
 8019980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019982:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019986:	f8d3 0870 	ldr.w	r0, [r3, #2160]	; 0x870
 801998a:	2300      	movs	r3, #0
 801998c:	9300      	str	r3, [sp, #0]
 801998e:	2303      	movs	r3, #3
 8019990:	2200      	movs	r2, #0
 8019992:	2100      	movs	r1, #0
 8019994:	f7ee fce9 	bl	800836a <MPU_xTaskGenericNotify>

			 //we will wait on Index 0 for notification from target task when testing finished
			 notificationvalue = ulTaskNotifyTakeIndexed(0,pdTRUE, TARGET_TIMEOUT);
 8019998:	2214      	movs	r2, #20
 801999a:	2101      	movs	r1, #1
 801999c:	2000      	movs	r0, #0
 801999e:	f7ee fd1b 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 80199a2:	61b8      	str	r0, [r7, #24]

			 if (notificationvalue == 0) // TIMEOUT
 80199a4:	69bb      	ldr	r3, [r7, #24]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d11c      	bne.n	80199e4 <fuzzerTask+0xe0>
			 {
				 AFLfuzzer.aflheader[0] = FAULT_TMOUT;
 80199aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ac:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80199b0:	461a      	mov	r2, r3
 80199b2:	2301      	movs	r3, #1
 80199b4:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				 printf("Target timeout, starting a new target process...\n");
 80199b8:	4854      	ldr	r0, [pc, #336]	; (8019b0c <fuzzerTask+0x208>)
 80199ba:	f002 ffeb 	bl	801c994 <puts>
			     //We need to kill the target task and spawn a new target
				 vTaskDelete(AFLfuzzer.xTaskTarget);
 80199be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80199c4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80199c8:	4618      	mov	r0, r3
 80199ca:	f7ee fba5 	bl	8008118 <MPU_vTaskDelete>
				 taskYIELD(); //lets the kernel clean the TCB
 80199ce:	df01      	svc	1
				 numberofcycles = 0;
 80199d0:	2300      	movs	r3, #0
 80199d2:	637b      	str	r3, [r7, #52]	; 0x34
				 spawnNewTarget();
 80199d4:	f7ff ff44 	bl	8019860 <spawnNewTarget>
				 // wait for the target task notification when ready
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 80199d8:	220a      	movs	r2, #10
 80199da:	2101      	movs	r1, #1
 80199dc:	2002      	movs	r0, #2
 80199de:	f7ee fcfb 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 80199e2:	e0cc      	b.n	8019b7e <fuzzerTask+0x27a>


			 }
			 else if(notificationvalue == FAULT_ASAN)
 80199e4:	69bb      	ldr	r3, [r7, #24]
 80199e6:	2b09      	cmp	r3, #9
 80199e8:	d14a      	bne.n	8019a80 <fuzzerTask+0x17c>
			 {

				 i= 0;
 80199ea:	2300      	movs	r3, #0
 80199ec:	633b      	str	r3, [r7, #48]	; 0x30
				 while(i<McuASAN_MAX_NUMBER_ALLOCS) //clean malloc allocations if any
 80199ee:	e01d      	b.n	8019a2c <fuzzerTask+0x128>
				 {
					 if(AFLfuzzer.allocs[i])
 80199f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80199f4:	f641 230c 	movw	r3, #6668	; 0x1a0c
 80199f8:	440b      	add	r3, r1
 80199fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d011      	beq.n	8019a26 <fuzzerTask+0x122>
				     {
						 free(AFLfuzzer.allocs[i]);
 8019a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019a06:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8019a0a:	440b      	add	r3, r1
 8019a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019a10:	4618      	mov	r0, r3
 8019a12:	f002 fe3b 	bl	801c68c <free>
						 AFLfuzzer.allocs[i] = NULL;
 8019a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019a1a:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8019a1e:	440b      	add	r3, r1
 8019a20:	2100      	movs	r1, #0
 8019a22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					 }
					 i++;
 8019a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a28:	3301      	adds	r3, #1
 8019a2a:	633b      	str	r3, [r7, #48]	; 0x30
				 while(i<McuASAN_MAX_NUMBER_ALLOCS) //clean malloc allocations if any
 8019a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a2e:	2b09      	cmp	r3, #9
 8019a30:	ddde      	ble.n	80199f0 <fuzzerTask+0xec>
				  }
				  notificationvalue = FAULT_CRASH;
 8019a32:	2302      	movs	r3, #2
 8019a34:	61bb      	str	r3, [r7, #24]
				  AFLfuzzer.aflheader[0] = notificationvalue;
 8019a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a38:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019a3c:	461a      	mov	r2, r3
 8019a3e:	69bb      	ldr	r3, [r7, #24]
 8019a40:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				  printf("ASAN violation %s \n", (char *)EX_str[AFLfuzzer.xTypeEx]);
 8019a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a46:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019a4a:	f893 3874 	ldrb.w	r3, [r3, #2164]	; 0x874
 8019a4e:	461a      	mov	r2, r3
 8019a50:	4b2f      	ldr	r3, [pc, #188]	; (8019b10 <fuzzerTask+0x20c>)
 8019a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019a56:	4619      	mov	r1, r3
 8019a58:	482e      	ldr	r0, [pc, #184]	; (8019b14 <fuzzerTask+0x210>)
 8019a5a:	f002 ff15 	bl	801c888 <iprintf>
				  vTaskDelete(AFLfuzzer.xTaskTarget);
 8019a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a60:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019a64:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8019a68:	4618      	mov	r0, r3
 8019a6a:	f7ee fb55 	bl	8008118 <MPU_vTaskDelete>
				  taskYIELD();
 8019a6e:	df01      	svc	1
 				  spawnNewTarget();
 8019a70:	f7ff fef6 	bl	8019860 <spawnNewTarget>
 				  ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8019a74:	220a      	movs	r2, #10
 8019a76:	2101      	movs	r1, #1
 8019a78:	2002      	movs	r0, #2
 8019a7a:	f7ee fcad 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 8019a7e:	e07e      	b.n	8019b7e <fuzzerTask+0x27a>
			 }
			 else if(notificationvalue == FAULT_CRASH)
 8019a80:	69bb      	ldr	r3, [r7, #24]
 8019a82:	2b02      	cmp	r3, #2
 8019a84:	d123      	bne.n	8019ace <fuzzerTask+0x1ca>
			 {
				 AFLfuzzer.aflheader[0] = notificationvalue;
 8019a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a88:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019a8c:	461a      	mov	r2, r3
 8019a8e:	69bb      	ldr	r3, [r7, #24]
 8019a90:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				 printf("T. crash at: 0x%x, %s \n", (unsigned int)AFLfuzzer.PCcrash, (char *)EX_str[AFLfuzzer.xTypeEx]);
 8019a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a96:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019a9a:	f8d3 1868 	ldr.w	r1, [r3, #2152]	; 0x868
 8019a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aa0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019aa4:	f893 3874 	ldrb.w	r3, [r3, #2164]	; 0x874
 8019aa8:	461a      	mov	r2, r3
 8019aaa:	4b19      	ldr	r3, [pc, #100]	; (8019b10 <fuzzerTask+0x20c>)
 8019aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019ab0:	461a      	mov	r2, r3
 8019ab2:	4819      	ldr	r0, [pc, #100]	; (8019b18 <fuzzerTask+0x214>)
 8019ab4:	f002 fee8 	bl	801c888 <iprintf>
				 //The target process was already killed in the Fault Handler ISR,
				 //We need to spawn a new target task
				 numberofcycles = 0;
 8019ab8:	2300      	movs	r3, #0
 8019aba:	637b      	str	r3, [r7, #52]	; 0x34
				 spawnNewTarget();
 8019abc:	f7ff fed0 	bl	8019860 <spawnNewTarget>
				 taskYIELD(); // let's the kernel clean the TCB
 8019ac0:	df01      	svc	1
				 // wait for the target task notification when ready
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8019ac2:	220a      	movs	r2, #10
 8019ac4:	2101      	movs	r1, #1
 8019ac6:	2002      	movs	r0, #2
 8019ac8:	f7ee fc86 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 8019acc:	e057      	b.n	8019b7e <fuzzerTask+0x27a>

			 }
			 else if (notificationvalue == FAULT_NONE_RTOS)
 8019ace:	69bb      	ldr	r3, [r7, #24]
 8019ad0:	2b08      	cmp	r3, #8
 8019ad2:	d154      	bne.n	8019b7e <fuzzerTask+0x27a>
			 {
				 // we need this because 0 means timeout for the RTOS notification system
				notificationvalue = FAULT_NONE;
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	61bb      	str	r3, [r7, #24]
				AFLfuzzer.aflheader[0] = notificationvalue;
 8019ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ada:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019ade:	461a      	mov	r2, r3
 8019ae0:	69bb      	ldr	r3, [r7, #24]
 8019ae2:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814

#if PERSISTENT_MODE
				numberofcycles++;
 8019ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ae8:	3301      	adds	r3, #1
 8019aea:	637b      	str	r3, [r7, #52]	; 0x34
				if(numberofcycles>=FUZZING_CYCLES_IN_PROCESS)
 8019aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019af2:	d344      	bcc.n	8019b7e <fuzzerTask+0x27a>
				{
					numberofcycles=0;
 8019af4:	2300      	movs	r3, #0
 8019af6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
					i = 0;
 8019af8:	2300      	movs	r3, #0
 8019afa:	633b      	str	r3, [r7, #48]	; 0x30

					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8019afc:	e02c      	b.n	8019b58 <fuzzerTask+0x254>
 8019afe:	bf00      	nop
 8019b00:	24020000 	.word	0x24020000
 8019b04:	24033000 	.word	0x24033000
 8019b08:	24030000 	.word	0x24030000
 8019b0c:	240083f8 	.word	0x240083f8
 8019b10:	24008020 	.word	0x24008020
 8019b14:	2400842c 	.word	0x2400842c
 8019b18:	24008440 	.word	0x24008440
					{
						 if(AFLfuzzer.allocs[i])
 8019b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019b20:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8019b24:	440b      	add	r3, r1
 8019b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d011      	beq.n	8019b52 <fuzzerTask+0x24e>
						 {
							 free(AFLfuzzer.allocs[i]);
 8019b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019b32:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8019b36:	440b      	add	r3, r1
 8019b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f002 fda5 	bl	801c68c <free>
							 AFLfuzzer.allocs[i] = NULL;
 8019b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019b46:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8019b4a:	440b      	add	r3, r1
 8019b4c:	2100      	movs	r1, #0
 8019b4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						 }
							 i++;
 8019b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b54:	3301      	adds	r3, #1
 8019b56:	633b      	str	r3, [r7, #48]	; 0x30
					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8019b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b5a:	2b09      	cmp	r3, #9
 8019b5c:	ddde      	ble.n	8019b1c <fuzzerTask+0x218>
					}
					vTaskDelete(AFLfuzzer.xTaskTarget);
 8019b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b60:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019b64:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f7ee fad5 	bl	8008118 <MPU_vTaskDelete>
				    taskYIELD();
 8019b6e:	df01      	svc	1
					spawnNewTarget();
 8019b70:	f7ff fe76 	bl	8019860 <spawnNewTarget>
					ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8019b74:	220a      	movs	r2, #10
 8019b76:	2101      	movs	r1, #1
 8019b78:	2002      	movs	r0, #2
 8019b7a:	f7ee fc2d 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
				}
#endif

			 }

			 AFLfuzzer.aflheader[1] = (AFLfuzzer.indexdif * sizeof(tuple_t)  + 4 );
 8019b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019b84:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8019b88:	3301      	adds	r3, #1
 8019b8a:	009b      	lsls	r3, r3, #2
 8019b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b8e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8019b92:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818

			 tuple_t *auxdiff = AFLfuzzer.afldiff + 1; // the first tuple is empty so we can skip it
 8019b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8019b9c:	3304      	adds	r3, #4
 8019b9e:	617b      	str	r3, [r7, #20]
			 union ubytes_t *crcbytes;
			 crcbytes = (union ubytes_t *)(auxdiff + AFLfuzzer.indexdif); //set CRC bytes * at the end of the tuple array
 8019ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ba2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019ba6:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	697a      	ldr	r2, [r7, #20]
 8019bae:	4413      	add	r3, r2
 8019bb0:	613b      	str	r3, [r7, #16]

			 //calculate the CRC of the return value and payload size
			 uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 8019bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bb4:	f646 0314 	movw	r3, #26644	; 0x6814
 8019bb8:	4413      	add	r3, r2
 8019bba:	2202      	movs	r2, #2
 8019bbc:	4619      	mov	r1, r3
 8019bbe:	4848      	ldr	r0, [pc, #288]	; (8019ce0 <fuzzerTask+0x3dc>)
 8019bc0:	f7f1 fde4 	bl	800b78c <HAL_CRC_Calculate>
 8019bc4:	60f8      	str	r0, [r7, #12]
			 //calculate the CRC of the tuples (payload)
			 uwCRCValue = HAL_CRC_Accumulate(&hcrc, (uint32_t *)auxdiff, AFLfuzzer.indexdif);
 8019bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bc8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019bcc:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8019bd0:	461a      	mov	r2, r3
 8019bd2:	6979      	ldr	r1, [r7, #20]
 8019bd4:	4842      	ldr	r0, [pc, #264]	; (8019ce0 <fuzzerTask+0x3dc>)
 8019bd6:	f7f1 fd95 	bl	800b704 <HAL_CRC_Accumulate>
 8019bda:	60f8      	str	r0, [r7, #12]

			 // invert the CRC to match the zlib method
			 crcbytes->vuint32 = ~uwCRCValue; //write the CRC at the end of the buffer
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	43da      	mvns	r2, r3
 8019be0:	693b      	ldr	r3, [r7, #16]
 8019be2:	601a      	str	r2, [r3, #0]

			 AFLfuzzer.bTXcomplete = false;
 8019be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019be6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019bea:	2200      	movs	r2, #0
 8019bec:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865

			 #if USARTHW == 0
			 CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 8);
 8019bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bf2:	f646 0314 	movw	r3, #26644	; 0x6814
 8019bf6:	4413      	add	r3, r2
 8019bf8:	2108      	movs	r1, #8
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	f001 ff52 	bl	801baa4 <CDC_Transmit_FS>
			 HAL_UART_Transmit_IT(&huart3, (uint8_t *)AFLfuzzer.aflheader, 8);
			 //HAL_UART_Transmit_DMA(&huart3,(uint8_t *)AFLfuzzer.aflheader, 8);
             #endif

			 //while(AFLfuzzer.bTXcomplete ==false); //wait for end of transmission
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 8019c00:	220a      	movs	r2, #10
 8019c02:	2101      	movs	r1, #1
 8019c04:	2001      	movs	r0, #1
 8019c06:	f7ee fbe7 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>

			 AFLfuzzer.bTXcomplete = false;
 8019c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c0c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019c10:	2200      	movs	r2, #0
 8019c12:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
             #if USARTHW == 0
			 CDC_Transmit_FS((uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
 8019c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c18:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019c1c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8019c20:	b29b      	uxth	r3, r3
 8019c22:	4619      	mov	r1, r3
 8019c24:	6978      	ldr	r0, [r7, #20]
 8019c26:	f001 ff3d 	bl	801baa4 <CDC_Transmit_FS>
			 HAL_UART_Transmit_IT(&huart3, (uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
			 //HAL_UART_Transmit_DMA(&huart3, (uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
             #endif

			 //while(AFLfuzzer.bTXcomplete ==false); //wait for end of transmission
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 8019c2a:	220a      	movs	r2, #10
 8019c2c:	2101      	movs	r1, #1
 8019c2e:	2001      	movs	r0, #1
 8019c30:	f7ee fbd2 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
			 AFLfuzzer.bRXcomplete = false;
 8019c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c36:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019c3a:	2200      	movs	r2, #0
 8019c3c:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
			 AFLfuzzer.inputLength = 0;
 8019c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c42:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019c46:	461a      	mov	r2, r3
 8019c48:	2300      	movs	r3, #0
 8019c4a:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
			 AFLfuzzer.previousGuard = 0;
 8019c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c50:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019c54:	2200      	movs	r2, #0
 8019c56:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
			 RingZeroes(&AFLfuzzer.inputAFL);
 8019c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019c60:	4618      	mov	r0, r3
 8019c62:	f7f0 fd5e 	bl	800a722 <RingZeroes>

			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 8019c66:	2300      	movs	r3, #0
 8019c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c6a:	e00c      	b.n	8019c86 <fuzzerTask+0x382>
			 {
				 paflbitmap[auxdiff[i].index]=0;
 8019c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c6e:	009b      	lsls	r3, r3, #2
 8019c70:	697a      	ldr	r2, [r7, #20]
 8019c72:	4413      	add	r3, r2
 8019c74:	881b      	ldrh	r3, [r3, #0]
 8019c76:	005b      	lsls	r3, r3, #1
 8019c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c7a:	4413      	add	r3, r2
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	801a      	strh	r2, [r3, #0]
			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 8019c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c82:	3301      	adds	r3, #1
 8019c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c88:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019c8c:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8019c90:	461a      	mov	r2, r3
 8019c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c94:	4293      	cmp	r3, r2
 8019c96:	d3e9      	bcc.n	8019c6c <fuzzerTask+0x368>
			 }
			 memset(AFLfuzzer.afldiff,0,(AFLfuzzer.indexdif+2)*sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
 8019c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c9a:	f503 4080 	add.w	r0, r3, #16384	; 0x4000
 8019c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ca0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019ca4:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8019ca8:	3302      	adds	r3, #2
 8019caa:	009b      	lsls	r3, r3, #2
 8019cac:	461a      	mov	r2, r3
 8019cae:	2100      	movs	r1, #0
 8019cb0:	f002 fd02 	bl	801c6b8 <memset>
			 AFLfuzzer.indexdif = 0;
 8019cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019cba:	2200      	movs	r2, #0
 8019cbc:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
			 AFLfuzzer.timespan = HAL_GetTick() - AFLfuzzer.timespan;
 8019cc0:	f7f1 fb36 	bl	800b330 <HAL_GetTick>
 8019cc4:	4602      	mov	r2, r0
 8019cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019ccc:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
 8019cd0:	1ad3      	subs	r3, r2, r3
 8019cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cd4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8019cd8:	f8c2 382c 	str.w	r3, [r2, #2092]	; 0x82c
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 8019cdc:	e64a      	b.n	8019974 <fuzzerTask+0x70>
 8019cde:	bf00      	nop
 8019ce0:	240116b0 	.word	0x240116b0

08019ce4 <HAL_UART_TxCpltCallback>:
}



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019ce4:	b480      	push	{r7}
 8019ce6:	b085      	sub	sp, #20
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	6078      	str	r0, [r7, #4]
#if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8019cec:	4b08      	ldr	r3, [pc, #32]	; (8019d10 <HAL_UART_TxCpltCallback+0x2c>)
 8019cee:	60fb      	str	r3, [r7, #12]
#endif

	if(huart == &huart3)
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	4a08      	ldr	r2, [pc, #32]	; (8019d14 <HAL_UART_TxCpltCallback+0x30>)
 8019cf4:	4293      	cmp	r3, r2
 8019cf6:	d105      	bne.n	8019d04 <HAL_UART_TxCpltCallback+0x20>
    {
    	AFLfuzzer.bTXcomplete = true;
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019cfe:	2201      	movs	r2, #1
 8019d00:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
    }

}
 8019d04:	bf00      	nop
 8019d06:	3714      	adds	r7, #20
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0e:	4770      	bx	lr
 8019d10:	24020000 	.word	0x24020000
 8019d14:	240116e8 	.word	0x240116e8

08019d18 <HAL_UART_ErrorCallback>:

uint32_t errors;
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b084      	sub	sp, #16
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]

#if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8019d20:	4b2a      	ldr	r3, [pc, #168]	; (8019dcc <HAL_UART_ErrorCallback+0xb4>)
 8019d22:	60fb      	str	r3, [r7, #12]

	 HAL_UART_Abort_IT(&huart3);
	 HAL_UART_Receive_IT(&huart3, data, 4);
*/

     HAL_UART_Abort(&huart3);
 8019d24:	482a      	ldr	r0, [pc, #168]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d26:	f7f9 fc6d 	bl	8013604 <HAL_UART_Abort>
 	 __HAL_UART_FLUSH_DRREGISTER(&huart3);
 8019d2a:	4b29      	ldr	r3, [pc, #164]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	699a      	ldr	r2, [r3, #24]
 8019d30:	4b27      	ldr	r3, [pc, #156]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	f042 0208 	orr.w	r2, r2, #8
 8019d38:	619a      	str	r2, [r3, #24]
 8019d3a:	4b25      	ldr	r3, [pc, #148]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	699a      	ldr	r2, [r3, #24]
 8019d40:	4b23      	ldr	r3, [pc, #140]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	f042 0210 	orr.w	r2, r2, #16
 8019d48:	619a      	str	r2, [r3, #24]
     HAL_UART_DeInit(&huart3);
 8019d4a:	4821      	ldr	r0, [pc, #132]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d4c:	f7f9 fb42 	bl	80133d4 <HAL_UART_DeInit>
	 __HAL_UART_DISABLE(&huart3);
 8019d50:	4b1f      	ldr	r3, [pc, #124]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	681a      	ldr	r2, [r3, #0]
 8019d56:	4b1e      	ldr	r3, [pc, #120]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	f022 0201 	bic.w	r2, r2, #1
 8019d5e:	601a      	str	r2, [r3, #0]
	 __HAL_UART_ENABLE(&huart3);
 8019d60:	4b1b      	ldr	r3, [pc, #108]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	681a      	ldr	r2, [r3, #0]
 8019d66:	4b1a      	ldr	r3, [pc, #104]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	f042 0201 	orr.w	r2, r2, #1
 8019d6e:	601a      	str	r2, [r3, #0]

	 HAL_UART_Init(&huart3);
 8019d70:	4817      	ldr	r0, [pc, #92]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019d72:	f7f9 fadf 	bl	8013334 <HAL_UART_Init>


    errors++;
 8019d76:	4b17      	ldr	r3, [pc, #92]	; (8019dd4 <HAL_UART_ErrorCallback+0xbc>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	3301      	adds	r3, #1
 8019d7c:	4a15      	ldr	r2, [pc, #84]	; (8019dd4 <HAL_UART_ErrorCallback+0xbc>)
 8019d7e:	6013      	str	r3, [r2, #0]



	 AFLfuzzer.bRXcomplete = false;
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019d86:	2200      	movs	r2, #0
 8019d88:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
	 AFLfuzzer.inputLength = 0;
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019d92:	461a      	mov	r2, r3
 8019d94:	2300      	movs	r3, #0
 8019d96:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
	 AFLfuzzer.previousGuard = 0;
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019da0:	2200      	movs	r2, #0
 8019da2:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
	 RingZeroes(&AFLfuzzer.inputAFL);
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019dac:	4618      	mov	r0, r3
 8019dae:	f7f0 fcb8 	bl	800a722 <RingZeroes>
	 HAL_UART_Receive_IT(&huart3, AFLfuzzer.inputAFL.uxBuffer, 4);
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019db8:	2204      	movs	r2, #4
 8019dba:	4619      	mov	r1, r3
 8019dbc:	4804      	ldr	r0, [pc, #16]	; (8019dd0 <HAL_UART_ErrorCallback+0xb8>)
 8019dbe:	f7f9 fbdb 	bl	8013578 <HAL_UART_Receive_IT>
	 //HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);

}
 8019dc2:	bf00      	nop
 8019dc4:	3710      	adds	r7, #16
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bd80      	pop	{r7, pc}
 8019dca:	bf00      	nop
 8019dcc:	24020000 	.word	0x24020000
 8019dd0:	240116e8 	.word	0x240116e8
 8019dd4:	2403322c 	.word	0x2403322c

08019dd8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b086      	sub	sp, #24
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]

#if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8019de0:	4b56      	ldr	r3, [pc, #344]	; (8019f3c <HAL_UART_RxCpltCallback+0x164>)
 8019de2:	613b      	str	r3, [r7, #16]
#endif

	union ubytes_t auxbytes;
	uint8_t *data;
	uint8_t padding;
	data = AFLfuzzer.inputAFL.uxBuffer;
 8019de4:	693b      	ldr	r3, [r7, #16]
 8019de6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019dea:	60fb      	str	r3, [r7, #12]

    if(AFLfuzzer.breceiving == false)
 8019dec:	693b      	ldr	r3, [r7, #16]
 8019dee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019df2:	f893 3866 	ldrb.w	r3, [r3, #2150]	; 0x866
 8019df6:	b2db      	uxtb	r3, r3
 8019df8:	f083 0301 	eor.w	r3, r3, #1
 8019dfc:	b2db      	uxtb	r3, r3
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d058      	beq.n	8019eb4 <HAL_UART_RxCpltCallback+0xdc>
    {
    	AFLfuzzer.breceiving = true;
 8019e02:	693b      	ldr	r3, [r7, #16]
 8019e04:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019e08:	2201      	movs	r2, #1
 8019e0a:	f883 2866 	strb.w	r2, [r3, #2150]	; 0x866

    	auxbytes.vbytes[0] = data[0];
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	781b      	ldrb	r3, [r3, #0]
 8019e12:	723b      	strb	r3, [r7, #8]
    	auxbytes.vbytes[1] = data[1];
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	785b      	ldrb	r3, [r3, #1]
 8019e18:	727b      	strb	r3, [r7, #9]
    	auxbytes.vbytes[2] = data[2];
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	789b      	ldrb	r3, [r3, #2]
 8019e1e:	72bb      	strb	r3, [r7, #10]
    	auxbytes.vbytes[3] = data[3];
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	78db      	ldrb	r3, [r3, #3]
 8019e24:	72fb      	strb	r3, [r7, #11]
    	AFLfuzzer.inputLength = auxbytes.vint32;
 8019e26:	68bb      	ldr	r3, [r7, #8]
 8019e28:	461a      	mov	r2, r3
 8019e2a:	693b      	ldr	r3, [r7, #16]
 8019e2c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019e30:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
        if(auxbytes.vint32 < 530)
 8019e34:	68bb      	ldr	r3, [r7, #8]
 8019e36:	f240 2211 	movw	r2, #529	; 0x211
 8019e3a:	4293      	cmp	r3, r2
 8019e3c:	dc7a      	bgt.n	8019f34 <HAL_UART_RxCpltCallback+0x15c>
        {
        	if (auxbytes.vint32 % 4)
 8019e3e:	68bb      	ldr	r3, [r7, #8]
 8019e40:	f003 0303 	and.w	r3, r3, #3
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d00b      	beq.n	8019e60 <HAL_UART_RxCpltCallback+0x88>
        	{
        	     padding = 4 - auxbytes.vint32 % 4;
 8019e48:	68bb      	ldr	r3, [r7, #8]
 8019e4a:	425a      	negs	r2, r3
 8019e4c:	f003 0303 	and.w	r3, r3, #3
 8019e50:	f002 0203 	and.w	r2, r2, #3
 8019e54:	bf58      	it	pl
 8019e56:	4253      	negpl	r3, r2
 8019e58:	b2db      	uxtb	r3, r3
 8019e5a:	f1c3 0304 	rsb	r3, r3, #4
 8019e5e:	75fb      	strb	r3, [r7, #23]
        	}
        	if (auxbytes.vint32 % 4)
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	f003 0303 	and.w	r3, r3, #3
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d00c      	beq.n	8019e84 <HAL_UART_RxCpltCallback+0xac>
        	{
        	   padding = 4 - auxbytes.vint32 % 4;
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	425a      	negs	r2, r3
 8019e6e:	f003 0303 	and.w	r3, r3, #3
 8019e72:	f002 0203 	and.w	r2, r2, #3
 8019e76:	bf58      	it	pl
 8019e78:	4253      	negpl	r3, r2
 8019e7a:	b2db      	uxtb	r3, r3
 8019e7c:	f1c3 0304 	rsb	r3, r3, #4
 8019e80:	75fb      	strb	r3, [r7, #23]
 8019e82:	e001      	b.n	8019e88 <HAL_UART_RxCpltCallback+0xb0>
        	}
        	else
        	{
        	    padding = 0;
 8019e84:	2300      	movs	r3, #0
 8019e86:	75fb      	strb	r3, [r7, #23]
        	}
        	AFLfuzzer.inputLengthpadded = auxbytes.vint32 + padding;
 8019e88:	68ba      	ldr	r2, [r7, #8]
 8019e8a:	7dfb      	ldrb	r3, [r7, #23]
 8019e8c:	4413      	add	r3, r2
 8019e8e:	461a      	mov	r2, r3
 8019e90:	693b      	ldr	r3, [r7, #16]
 8019e92:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019e96:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
        	HAL_UART_Receive_IT(&huart3, data+4, AFLfuzzer.inputLengthpadded);
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	1d19      	adds	r1, r3, #4
 8019e9e:	693b      	ldr	r3, [r7, #16]
 8019ea0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019ea4:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 8019ea8:	b29b      	uxth	r3, r3
 8019eaa:	461a      	mov	r2, r3
 8019eac:	4824      	ldr	r0, [pc, #144]	; (8019f40 <HAL_UART_RxCpltCallback+0x168>)
 8019eae:	f7f9 fb63 	bl	8013578 <HAL_UART_Receive_IT>

    	}

    }

}
 8019eb2:	e03f      	b.n	8019f34 <HAL_UART_RxCpltCallback+0x15c>
    	AFLfuzzer.breceiving = false;
 8019eb4:	693b      	ldr	r3, [r7, #16]
 8019eb6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019eba:	2200      	movs	r2, #0
 8019ebc:	f883 2866 	strb.w	r2, [r3, #2150]	; 0x866
    	AFLfuzzer.inputAFL.u32available =  AFLfuzzer.inputLengthpadded  + 4;
 8019ec0:	693b      	ldr	r3, [r7, #16]
 8019ec2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019ec6:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 8019eca:	3304      	adds	r3, #4
 8019ecc:	693a      	ldr	r2, [r7, #16]
 8019ece:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8019ed2:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808
    	if(checkCRC(&AFLfuzzer.inputAFL))
 8019ed6:	693b      	ldr	r3, [r7, #16]
 8019ed8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019edc:	4618      	mov	r0, r3
 8019ede:	f7f0 fa0f 	bl	800a300 <checkCRC>
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d006      	beq.n	8019ef6 <HAL_UART_RxCpltCallback+0x11e>
    		AFLfuzzer.bRXcomplete = true;
 8019ee8:	693b      	ldr	r3, [r7, #16]
 8019eea:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019eee:	2201      	movs	r2, #1
 8019ef0:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
}
 8019ef4:	e01e      	b.n	8019f34 <HAL_UART_RxCpltCallback+0x15c>
			 AFLfuzzer.inputLength = 0;
 8019ef6:	693b      	ldr	r3, [r7, #16]
 8019ef8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019efc:	461a      	mov	r2, r3
 8019efe:	2300      	movs	r3, #0
 8019f00:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
			 AFLfuzzer.bRXcomplete = false;
 8019f04:	693b      	ldr	r3, [r7, #16]
 8019f06:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019f0a:	2200      	movs	r2, #0
 8019f0c:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
			 AFLfuzzer.inputLength = 0;
 8019f10:	693b      	ldr	r3, [r7, #16]
 8019f12:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019f16:	461a      	mov	r2, r3
 8019f18:	2300      	movs	r3, #0
 8019f1a:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
			 RingZeroes(&AFLfuzzer.inputAFL);
 8019f1e:	693b      	ldr	r3, [r7, #16]
 8019f20:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019f24:	4618      	mov	r0, r3
 8019f26:	f7f0 fbfc 	bl	800a722 <RingZeroes>
			 HAL_UART_Receive_IT(&huart3, data, 4);
 8019f2a:	2204      	movs	r2, #4
 8019f2c:	68f9      	ldr	r1, [r7, #12]
 8019f2e:	4804      	ldr	r0, [pc, #16]	; (8019f40 <HAL_UART_RxCpltCallback+0x168>)
 8019f30:	f7f9 fb22 	bl	8013578 <HAL_UART_Receive_IT>
}
 8019f34:	bf00      	nop
 8019f36:	3718      	adds	r7, #24
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	bd80      	pop	{r7, pc}
 8019f3c:	24020000 	.word	0x24020000
 8019f40:	240116e8 	.word	0x240116e8

08019f44 <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b084      	sub	sp, #16
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
 8019f4c:	460b      	mov	r3, r1
 8019f4e:	807b      	strh	r3, [r7, #2]
#if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8019f50:	4b0f      	ldr	r3, [pc, #60]	; (8019f90 <HAL_UARTEx_RxEventCallback+0x4c>)
 8019f52:	60fb      	str	r3, [r7, #12]
#endif
	uint16_t len;

	len = Size;
 8019f54:	887b      	ldrh	r3, [r7, #2]
 8019f56:	817b      	strh	r3, [r7, #10]
	FuzzingInputHandler(bufferDMA, (uint32_t *)(&len));
 8019f58:	f107 030a 	add.w	r3, r7, #10
 8019f5c:	4619      	mov	r1, r3
 8019f5e:	480d      	ldr	r0, [pc, #52]	; (8019f94 <HAL_UARTEx_RxEventCallback+0x50>)
 8019f60:	f7f0 fa5e 	bl	800a420 <FuzzingInputHandler>
	if(AFLfuzzer.bRXcomplete == false)
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8019f6a:	f893 3864 	ldrb.w	r3, [r3, #2148]	; 0x864
 8019f6e:	b2db      	uxtb	r3, r3
 8019f70:	f083 0301 	eor.w	r3, r3, #1
 8019f74:	b2db      	uxtb	r3, r3
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d005      	beq.n	8019f86 <HAL_UARTEx_RxEventCallback+0x42>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);
 8019f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019f7e:	4905      	ldr	r1, [pc, #20]	; (8019f94 <HAL_UARTEx_RxEventCallback+0x50>)
 8019f80:	4805      	ldr	r0, [pc, #20]	; (8019f98 <HAL_UARTEx_RxEventCallback+0x54>)
 8019f82:	f7fb fb90 	bl	80156a6 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 8019f86:	bf00      	nop
 8019f88:	3710      	adds	r7, #16
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	24020000 	.word	0x24020000
 8019f94:	24033004 	.word	0x24033004
 8019f98:	240116e8 	.word	0x240116e8

08019f9c <vStartMPUDemo>:



void vStartMPUDemo( void )
{
 8019f9c:	b580      	push	{r7, lr}
 8019f9e:	b0aa      	sub	sp, #168	; 0xa8
 8019fa0:	af00      	add	r7, sp, #0

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8019fa2:	4b11      	ldr	r3, [pc, #68]	; (8019fe8 <vStartMPUDemo+0x4c>)
 8019fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

TaskParameters_t fuzzerTaskParameters =
 8019fa8:	1d3b      	adds	r3, r7, #4
 8019faa:	22a0      	movs	r2, #160	; 0xa0
 8019fac:	2100      	movs	r1, #0
 8019fae:	4618      	mov	r0, r3
 8019fb0:	f002 fb82 	bl	801c6b8 <memset>
 8019fb4:	4b0d      	ldr	r3, [pc, #52]	; (8019fec <vStartMPUDemo+0x50>)
 8019fb6:	607b      	str	r3, [r7, #4]
 8019fb8:	4b0d      	ldr	r3, [pc, #52]	; (8019ff0 <vStartMPUDemo+0x54>)
 8019fba:	60bb      	str	r3, [r7, #8]
 8019fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019fc0:	81bb      	strh	r3, [r7, #12]
 8019fc2:	4b0c      	ldr	r3, [pc, #48]	; (8019ff4 <vStartMPUDemo+0x58>)
 8019fc4:	617b      	str	r3, [r7, #20]
 8019fc6:	4b0c      	ldr	r3, [pc, #48]	; (8019ff8 <vStartMPUDemo+0x5c>)
 8019fc8:	61bb      	str	r3, [r7, #24]
							{ 0, 0, 0 },
					}
};

	/* Create the fuzzer task */
	xTaskCreateRestricted( &( fuzzerTaskParameters ), &AFLfuzzer.xTaskFuzzer );
 8019fca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019fce:	f646 036c 	movw	r3, #26732	; 0x686c
 8019fd2:	4413      	add	r3, r2
 8019fd4:	1d3a      	adds	r2, r7, #4
 8019fd6:	4619      	mov	r1, r3
 8019fd8:	4610      	mov	r0, r2
 8019fda:	f7e9 f910 	bl	80031fe <xTaskCreateRestricted>
	//spawnNewTarget();

}
 8019fde:	bf00      	nop
 8019fe0:	37a8      	adds	r7, #168	; 0xa8
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	bd80      	pop	{r7, pc}
 8019fe6:	bf00      	nop
 8019fe8:	24020000 	.word	0x24020000
 8019fec:	08019905 	.word	0x08019905
 8019ff0:	24008458 	.word	0x24008458
 8019ff4:	80000014 	.word	0x80000014
 8019ff8:	24032000 	.word	0x24032000

08019ffc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b084      	sub	sp, #16
 801a000:	af00      	add	r7, sp, #0
 801a002:	6078      	str	r0, [r7, #4]
 801a004:	460b      	mov	r3, r1
 801a006:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a008:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801a00c:	f002 f9c4 	bl	801c398 <USBD_static_malloc>
 801a010:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d105      	bne.n	801a024 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2200      	movs	r2, #0
 801a01c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801a020:	2302      	movs	r3, #2
 801a022:	e066      	b.n	801a0f2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	68fa      	ldr	r2, [r7, #12]
 801a028:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	7c1b      	ldrb	r3, [r3, #16]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d119      	bne.n	801a068 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a034:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a038:	2202      	movs	r2, #2
 801a03a:	2181      	movs	r1, #129	; 0x81
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	f002 f888 	bl	801c152 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	2201      	movs	r2, #1
 801a046:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a048:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a04c:	2202      	movs	r2, #2
 801a04e:	2101      	movs	r1, #1
 801a050:	6878      	ldr	r0, [r7, #4]
 801a052:	f002 f87e 	bl	801c152 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	2201      	movs	r2, #1
 801a05a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2210      	movs	r2, #16
 801a062:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801a066:	e016      	b.n	801a096 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a068:	2340      	movs	r3, #64	; 0x40
 801a06a:	2202      	movs	r2, #2
 801a06c:	2181      	movs	r1, #129	; 0x81
 801a06e:	6878      	ldr	r0, [r7, #4]
 801a070:	f002 f86f 	bl	801c152 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	2201      	movs	r2, #1
 801a078:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a07a:	2340      	movs	r3, #64	; 0x40
 801a07c:	2202      	movs	r2, #2
 801a07e:	2101      	movs	r1, #1
 801a080:	6878      	ldr	r0, [r7, #4]
 801a082:	f002 f866 	bl	801c152 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	2201      	movs	r2, #1
 801a08a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	2210      	movs	r2, #16
 801a092:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a096:	2308      	movs	r3, #8
 801a098:	2203      	movs	r2, #3
 801a09a:	2182      	movs	r1, #130	; 0x82
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	f002 f858 	bl	801c152 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	2201      	movs	r2, #1
 801a0a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	2200      	movs	r2, #0
 801a0c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	7c1b      	ldrb	r3, [r3, #16]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d109      	bne.n	801a0e0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a0d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a0d6:	2101      	movs	r1, #1
 801a0d8:	6878      	ldr	r0, [r7, #4]
 801a0da:	f002 f929 	bl	801c330 <USBD_LL_PrepareReceive>
 801a0de:	e007      	b.n	801a0f0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a0e6:	2340      	movs	r3, #64	; 0x40
 801a0e8:	2101      	movs	r1, #1
 801a0ea:	6878      	ldr	r0, [r7, #4]
 801a0ec:	f002 f920 	bl	801c330 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801a0f0:	2300      	movs	r3, #0
}
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	3710      	adds	r7, #16
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	bd80      	pop	{r7, pc}

0801a0fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a0fa:	b580      	push	{r7, lr}
 801a0fc:	b082      	sub	sp, #8
 801a0fe:	af00      	add	r7, sp, #0
 801a100:	6078      	str	r0, [r7, #4]
 801a102:	460b      	mov	r3, r1
 801a104:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a106:	2181      	movs	r1, #129	; 0x81
 801a108:	6878      	ldr	r0, [r7, #4]
 801a10a:	f002 f848 	bl	801c19e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	2200      	movs	r2, #0
 801a112:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a114:	2101      	movs	r1, #1
 801a116:	6878      	ldr	r0, [r7, #4]
 801a118:	f002 f841 	bl	801c19e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	2200      	movs	r2, #0
 801a120:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a124:	2182      	movs	r1, #130	; 0x82
 801a126:	6878      	ldr	r0, [r7, #4]
 801a128:	f002 f839 	bl	801c19e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	2200      	movs	r2, #0
 801a130:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	2200      	movs	r2, #0
 801a138:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a142:	2b00      	cmp	r3, #0
 801a144:	d00e      	beq.n	801a164 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a14c:	685b      	ldr	r3, [r3, #4]
 801a14e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a156:	4618      	mov	r0, r3
 801a158:	f002 f92c 	bl	801c3b4 <USBD_static_free>
    pdev->pClassData = NULL;
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	2200      	movs	r2, #0
 801a160:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801a164:	2300      	movs	r3, #0
}
 801a166:	4618      	mov	r0, r3
 801a168:	3708      	adds	r7, #8
 801a16a:	46bd      	mov	sp, r7
 801a16c:	bd80      	pop	{r7, pc}
	...

0801a170 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801a170:	b580      	push	{r7, lr}
 801a172:	b086      	sub	sp, #24
 801a174:	af00      	add	r7, sp, #0
 801a176:	6078      	str	r0, [r7, #4]
 801a178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a180:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801a182:	2300      	movs	r3, #0
 801a184:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801a186:	2300      	movs	r3, #0
 801a188:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801a18a:	2300      	movs	r3, #0
 801a18c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801a18e:	693b      	ldr	r3, [r7, #16]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d101      	bne.n	801a198 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801a194:	2303      	movs	r3, #3
 801a196:	e0af      	b.n	801a2f8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a198:	683b      	ldr	r3, [r7, #0]
 801a19a:	781b      	ldrb	r3, [r3, #0]
 801a19c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d03f      	beq.n	801a224 <USBD_CDC_Setup+0xb4>
 801a1a4:	2b20      	cmp	r3, #32
 801a1a6:	f040 809f 	bne.w	801a2e8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801a1aa:	683b      	ldr	r3, [r7, #0]
 801a1ac:	88db      	ldrh	r3, [r3, #6]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d02e      	beq.n	801a210 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801a1b2:	683b      	ldr	r3, [r7, #0]
 801a1b4:	781b      	ldrb	r3, [r3, #0]
 801a1b6:	b25b      	sxtb	r3, r3
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	da16      	bge.n	801a1ea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a1c2:	689b      	ldr	r3, [r3, #8]
 801a1c4:	683a      	ldr	r2, [r7, #0]
 801a1c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801a1c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a1ca:	683a      	ldr	r2, [r7, #0]
 801a1cc:	88d2      	ldrh	r2, [r2, #6]
 801a1ce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801a1d0:	683b      	ldr	r3, [r7, #0]
 801a1d2:	88db      	ldrh	r3, [r3, #6]
 801a1d4:	2b07      	cmp	r3, #7
 801a1d6:	bf28      	it	cs
 801a1d8:	2307      	movcs	r3, #7
 801a1da:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801a1dc:	693b      	ldr	r3, [r7, #16]
 801a1de:	89fa      	ldrh	r2, [r7, #14]
 801a1e0:	4619      	mov	r1, r3
 801a1e2:	6878      	ldr	r0, [r7, #4]
 801a1e4:	f001 fb19 	bl	801b81a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801a1e8:	e085      	b.n	801a2f6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	785a      	ldrb	r2, [r3, #1]
 801a1ee:	693b      	ldr	r3, [r7, #16]
 801a1f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	88db      	ldrh	r3, [r3, #6]
 801a1f8:	b2da      	uxtb	r2, r3
 801a1fa:	693b      	ldr	r3, [r7, #16]
 801a1fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801a200:	6939      	ldr	r1, [r7, #16]
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	88db      	ldrh	r3, [r3, #6]
 801a206:	461a      	mov	r2, r3
 801a208:	6878      	ldr	r0, [r7, #4]
 801a20a:	f001 fb32 	bl	801b872 <USBD_CtlPrepareRx>
      break;
 801a20e:	e072      	b.n	801a2f6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a216:	689b      	ldr	r3, [r3, #8]
 801a218:	683a      	ldr	r2, [r7, #0]
 801a21a:	7850      	ldrb	r0, [r2, #1]
 801a21c:	2200      	movs	r2, #0
 801a21e:	6839      	ldr	r1, [r7, #0]
 801a220:	4798      	blx	r3
      break;
 801a222:	e068      	b.n	801a2f6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	785b      	ldrb	r3, [r3, #1]
 801a228:	2b0b      	cmp	r3, #11
 801a22a:	d852      	bhi.n	801a2d2 <USBD_CDC_Setup+0x162>
 801a22c:	a201      	add	r2, pc, #4	; (adr r2, 801a234 <USBD_CDC_Setup+0xc4>)
 801a22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a232:	bf00      	nop
 801a234:	0801a265 	.word	0x0801a265
 801a238:	0801a2e1 	.word	0x0801a2e1
 801a23c:	0801a2d3 	.word	0x0801a2d3
 801a240:	0801a2d3 	.word	0x0801a2d3
 801a244:	0801a2d3 	.word	0x0801a2d3
 801a248:	0801a2d3 	.word	0x0801a2d3
 801a24c:	0801a2d3 	.word	0x0801a2d3
 801a250:	0801a2d3 	.word	0x0801a2d3
 801a254:	0801a2d3 	.word	0x0801a2d3
 801a258:	0801a2d3 	.word	0x0801a2d3
 801a25c:	0801a28f 	.word	0x0801a28f
 801a260:	0801a2b9 	.word	0x0801a2b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a26a:	b2db      	uxtb	r3, r3
 801a26c:	2b03      	cmp	r3, #3
 801a26e:	d107      	bne.n	801a280 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801a270:	f107 030a 	add.w	r3, r7, #10
 801a274:	2202      	movs	r2, #2
 801a276:	4619      	mov	r1, r3
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f001 face 	bl	801b81a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a27e:	e032      	b.n	801a2e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801a280:	6839      	ldr	r1, [r7, #0]
 801a282:	6878      	ldr	r0, [r7, #4]
 801a284:	f001 fa58 	bl	801b738 <USBD_CtlError>
            ret = USBD_FAIL;
 801a288:	2303      	movs	r3, #3
 801a28a:	75fb      	strb	r3, [r7, #23]
          break;
 801a28c:	e02b      	b.n	801a2e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a294:	b2db      	uxtb	r3, r3
 801a296:	2b03      	cmp	r3, #3
 801a298:	d107      	bne.n	801a2aa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801a29a:	f107 030d 	add.w	r3, r7, #13
 801a29e:	2201      	movs	r2, #1
 801a2a0:	4619      	mov	r1, r3
 801a2a2:	6878      	ldr	r0, [r7, #4]
 801a2a4:	f001 fab9 	bl	801b81a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a2a8:	e01d      	b.n	801a2e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801a2aa:	6839      	ldr	r1, [r7, #0]
 801a2ac:	6878      	ldr	r0, [r7, #4]
 801a2ae:	f001 fa43 	bl	801b738 <USBD_CtlError>
            ret = USBD_FAIL;
 801a2b2:	2303      	movs	r3, #3
 801a2b4:	75fb      	strb	r3, [r7, #23]
          break;
 801a2b6:	e016      	b.n	801a2e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2be:	b2db      	uxtb	r3, r3
 801a2c0:	2b03      	cmp	r3, #3
 801a2c2:	d00f      	beq.n	801a2e4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801a2c4:	6839      	ldr	r1, [r7, #0]
 801a2c6:	6878      	ldr	r0, [r7, #4]
 801a2c8:	f001 fa36 	bl	801b738 <USBD_CtlError>
            ret = USBD_FAIL;
 801a2cc:	2303      	movs	r3, #3
 801a2ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801a2d0:	e008      	b.n	801a2e4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801a2d2:	6839      	ldr	r1, [r7, #0]
 801a2d4:	6878      	ldr	r0, [r7, #4]
 801a2d6:	f001 fa2f 	bl	801b738 <USBD_CtlError>
          ret = USBD_FAIL;
 801a2da:	2303      	movs	r3, #3
 801a2dc:	75fb      	strb	r3, [r7, #23]
          break;
 801a2de:	e002      	b.n	801a2e6 <USBD_CDC_Setup+0x176>
          break;
 801a2e0:	bf00      	nop
 801a2e2:	e008      	b.n	801a2f6 <USBD_CDC_Setup+0x186>
          break;
 801a2e4:	bf00      	nop
      }
      break;
 801a2e6:	e006      	b.n	801a2f6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801a2e8:	6839      	ldr	r1, [r7, #0]
 801a2ea:	6878      	ldr	r0, [r7, #4]
 801a2ec:	f001 fa24 	bl	801b738 <USBD_CtlError>
      ret = USBD_FAIL;
 801a2f0:	2303      	movs	r3, #3
 801a2f2:	75fb      	strb	r3, [r7, #23]
      break;
 801a2f4:	bf00      	nop
  }

  return (uint8_t)ret;
 801a2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	3718      	adds	r7, #24
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}

0801a300 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b084      	sub	sp, #16
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
 801a308:	460b      	mov	r3, r1
 801a30a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d101      	bne.n	801a322 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801a31e:	2303      	movs	r3, #3
 801a320:	e04f      	b.n	801a3c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a328:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801a32a:	78fa      	ldrb	r2, [r7, #3]
 801a32c:	6879      	ldr	r1, [r7, #4]
 801a32e:	4613      	mov	r3, r2
 801a330:	009b      	lsls	r3, r3, #2
 801a332:	4413      	add	r3, r2
 801a334:	009b      	lsls	r3, r3, #2
 801a336:	440b      	add	r3, r1
 801a338:	3318      	adds	r3, #24
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d029      	beq.n	801a394 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801a340:	78fa      	ldrb	r2, [r7, #3]
 801a342:	6879      	ldr	r1, [r7, #4]
 801a344:	4613      	mov	r3, r2
 801a346:	009b      	lsls	r3, r3, #2
 801a348:	4413      	add	r3, r2
 801a34a:	009b      	lsls	r3, r3, #2
 801a34c:	440b      	add	r3, r1
 801a34e:	3318      	adds	r3, #24
 801a350:	681a      	ldr	r2, [r3, #0]
 801a352:	78f9      	ldrb	r1, [r7, #3]
 801a354:	68f8      	ldr	r0, [r7, #12]
 801a356:	460b      	mov	r3, r1
 801a358:	00db      	lsls	r3, r3, #3
 801a35a:	1a5b      	subs	r3, r3, r1
 801a35c:	009b      	lsls	r3, r3, #2
 801a35e:	4403      	add	r3, r0
 801a360:	3344      	adds	r3, #68	; 0x44
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	fbb2 f1f3 	udiv	r1, r2, r3
 801a368:	fb01 f303 	mul.w	r3, r1, r3
 801a36c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d110      	bne.n	801a394 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801a372:	78fa      	ldrb	r2, [r7, #3]
 801a374:	6879      	ldr	r1, [r7, #4]
 801a376:	4613      	mov	r3, r2
 801a378:	009b      	lsls	r3, r3, #2
 801a37a:	4413      	add	r3, r2
 801a37c:	009b      	lsls	r3, r3, #2
 801a37e:	440b      	add	r3, r1
 801a380:	3318      	adds	r3, #24
 801a382:	2200      	movs	r2, #0
 801a384:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a386:	78f9      	ldrb	r1, [r7, #3]
 801a388:	2300      	movs	r3, #0
 801a38a:	2200      	movs	r2, #0
 801a38c:	6878      	ldr	r0, [r7, #4]
 801a38e:	f001 ffae 	bl	801c2ee <USBD_LL_Transmit>
 801a392:	e015      	b.n	801a3c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801a394:	68bb      	ldr	r3, [r7, #8]
 801a396:	2200      	movs	r2, #0
 801a398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a3a2:	691b      	ldr	r3, [r3, #16]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d00b      	beq.n	801a3c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a3ae:	691b      	ldr	r3, [r3, #16]
 801a3b0:	68ba      	ldr	r2, [r7, #8]
 801a3b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801a3b6:	68ba      	ldr	r2, [r7, #8]
 801a3b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801a3bc:	78fa      	ldrb	r2, [r7, #3]
 801a3be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801a3c0:	2300      	movs	r3, #0
}
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	3710      	adds	r7, #16
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd80      	pop	{r7, pc}

0801a3ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a3ca:	b580      	push	{r7, lr}
 801a3cc:	b084      	sub	sp, #16
 801a3ce:	af00      	add	r7, sp, #0
 801a3d0:	6078      	str	r0, [r7, #4]
 801a3d2:	460b      	mov	r3, r1
 801a3d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a3dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d101      	bne.n	801a3ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801a3e8:	2303      	movs	r3, #3
 801a3ea:	e015      	b.n	801a418 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a3ec:	78fb      	ldrb	r3, [r7, #3]
 801a3ee:	4619      	mov	r1, r3
 801a3f0:	6878      	ldr	r0, [r7, #4]
 801a3f2:	f001 ffbe 	bl	801c372 <USBD_LL_GetRxDataSize>
 801a3f6:	4602      	mov	r2, r0
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a404:	68db      	ldr	r3, [r3, #12]
 801a406:	68fa      	ldr	r2, [r7, #12]
 801a408:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801a40c:	68fa      	ldr	r2, [r7, #12]
 801a40e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801a412:	4611      	mov	r1, r2
 801a414:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801a416:	2300      	movs	r3, #0
}
 801a418:	4618      	mov	r0, r3
 801a41a:	3710      	adds	r7, #16
 801a41c:	46bd      	mov	sp, r7
 801a41e:	bd80      	pop	{r7, pc}

0801a420 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b084      	sub	sp, #16
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a42e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d101      	bne.n	801a43a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801a436:	2303      	movs	r3, #3
 801a438:	e01b      	b.n	801a472 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a440:	2b00      	cmp	r3, #0
 801a442:	d015      	beq.n	801a470 <USBD_CDC_EP0_RxReady+0x50>
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801a44a:	2bff      	cmp	r3, #255	; 0xff
 801a44c:	d010      	beq.n	801a470 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a454:	689b      	ldr	r3, [r3, #8]
 801a456:	68fa      	ldr	r2, [r7, #12]
 801a458:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801a45c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801a45e:	68fa      	ldr	r2, [r7, #12]
 801a460:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a464:	b292      	uxth	r2, r2
 801a466:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	22ff      	movs	r2, #255	; 0xff
 801a46c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801a470:	2300      	movs	r3, #0
}
 801a472:	4618      	mov	r0, r3
 801a474:	3710      	adds	r7, #16
 801a476:	46bd      	mov	sp, r7
 801a478:	bd80      	pop	{r7, pc}
	...

0801a47c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801a47c:	b480      	push	{r7}
 801a47e:	b083      	sub	sp, #12
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	2243      	movs	r2, #67	; 0x43
 801a488:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801a48a:	4b03      	ldr	r3, [pc, #12]	; (801a498 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801a48c:	4618      	mov	r0, r3
 801a48e:	370c      	adds	r7, #12
 801a490:	46bd      	mov	sp, r7
 801a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a496:	4770      	bx	lr
 801a498:	240080e0 	.word	0x240080e0

0801a49c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801a49c:	b480      	push	{r7}
 801a49e:	b083      	sub	sp, #12
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	2243      	movs	r2, #67	; 0x43
 801a4a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801a4aa:	4b03      	ldr	r3, [pc, #12]	; (801a4b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	370c      	adds	r7, #12
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b6:	4770      	bx	lr
 801a4b8:	2400809c 	.word	0x2400809c

0801a4bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801a4bc:	b480      	push	{r7}
 801a4be:	b083      	sub	sp, #12
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	2243      	movs	r2, #67	; 0x43
 801a4c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801a4ca:	4b03      	ldr	r3, [pc, #12]	; (801a4d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	370c      	adds	r7, #12
 801a4d0:	46bd      	mov	sp, r7
 801a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d6:	4770      	bx	lr
 801a4d8:	24008124 	.word	0x24008124

0801a4dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801a4dc:	b480      	push	{r7}
 801a4de:	b083      	sub	sp, #12
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	220a      	movs	r2, #10
 801a4e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801a4ea:	4b03      	ldr	r3, [pc, #12]	; (801a4f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	370c      	adds	r7, #12
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f6:	4770      	bx	lr
 801a4f8:	24008058 	.word	0x24008058

0801a4fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801a4fc:	b480      	push	{r7}
 801a4fe:	b083      	sub	sp, #12
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]
 801a504:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d101      	bne.n	801a510 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801a50c:	2303      	movs	r3, #3
 801a50e:	e004      	b.n	801a51a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	683a      	ldr	r2, [r7, #0]
 801a514:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801a518:	2300      	movs	r3, #0
}
 801a51a:	4618      	mov	r0, r3
 801a51c:	370c      	adds	r7, #12
 801a51e:	46bd      	mov	sp, r7
 801a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a524:	4770      	bx	lr

0801a526 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801a526:	b480      	push	{r7}
 801a528:	b087      	sub	sp, #28
 801a52a:	af00      	add	r7, sp, #0
 801a52c:	60f8      	str	r0, [r7, #12]
 801a52e:	60b9      	str	r1, [r7, #8]
 801a530:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a538:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801a53a:	697b      	ldr	r3, [r7, #20]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d101      	bne.n	801a544 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801a540:	2303      	movs	r3, #3
 801a542:	e008      	b.n	801a556 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801a544:	697b      	ldr	r3, [r7, #20]
 801a546:	68ba      	ldr	r2, [r7, #8]
 801a548:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	687a      	ldr	r2, [r7, #4]
 801a550:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801a554:	2300      	movs	r3, #0
}
 801a556:	4618      	mov	r0, r3
 801a558:	371c      	adds	r7, #28
 801a55a:	46bd      	mov	sp, r7
 801a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a560:	4770      	bx	lr

0801a562 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801a562:	b480      	push	{r7}
 801a564:	b085      	sub	sp, #20
 801a566:	af00      	add	r7, sp, #0
 801a568:	6078      	str	r0, [r7, #4]
 801a56a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a572:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d101      	bne.n	801a57e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801a57a:	2303      	movs	r3, #3
 801a57c:	e004      	b.n	801a588 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	683a      	ldr	r2, [r7, #0]
 801a582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801a586:	2300      	movs	r3, #0
}
 801a588:	4618      	mov	r0, r3
 801a58a:	3714      	adds	r7, #20
 801a58c:	46bd      	mov	sp, r7
 801a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a592:	4770      	bx	lr

0801a594 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b084      	sub	sp, #16
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a5a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d101      	bne.n	801a5b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801a5b2:	2303      	movs	r3, #3
 801a5b4:	e01a      	b.n	801a5ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d114      	bne.n	801a5ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801a5c0:	68bb      	ldr	r3, [r7, #8]
 801a5c2:	2201      	movs	r2, #1
 801a5c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801a5c8:	68bb      	ldr	r3, [r7, #8]
 801a5ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801a5d8:	68bb      	ldr	r3, [r7, #8]
 801a5da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801a5de:	2181      	movs	r1, #129	; 0x81
 801a5e0:	6878      	ldr	r0, [r7, #4]
 801a5e2:	f001 fe84 	bl	801c2ee <USBD_LL_Transmit>

    ret = USBD_OK;
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801a5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	3710      	adds	r7, #16
 801a5f0:	46bd      	mov	sp, r7
 801a5f2:	bd80      	pop	{r7, pc}

0801a5f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b084      	sub	sp, #16
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a602:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d101      	bne.n	801a612 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801a60e:	2303      	movs	r3, #3
 801a610:	e016      	b.n	801a640 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	7c1b      	ldrb	r3, [r3, #16]
 801a616:	2b00      	cmp	r3, #0
 801a618:	d109      	bne.n	801a62e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a620:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a624:	2101      	movs	r1, #1
 801a626:	6878      	ldr	r0, [r7, #4]
 801a628:	f001 fe82 	bl	801c330 <USBD_LL_PrepareReceive>
 801a62c:	e007      	b.n	801a63e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a634:	2340      	movs	r3, #64	; 0x40
 801a636:	2101      	movs	r1, #1
 801a638:	6878      	ldr	r0, [r7, #4]
 801a63a:	f001 fe79 	bl	801c330 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801a63e:	2300      	movs	r3, #0
}
 801a640:	4618      	mov	r0, r3
 801a642:	3710      	adds	r7, #16
 801a644:	46bd      	mov	sp, r7
 801a646:	bd80      	pop	{r7, pc}

0801a648 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b086      	sub	sp, #24
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	60f8      	str	r0, [r7, #12]
 801a650:	60b9      	str	r1, [r7, #8]
 801a652:	4613      	mov	r3, r2
 801a654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d101      	bne.n	801a660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801a65c:	2303      	movs	r3, #3
 801a65e:	e01f      	b.n	801a6a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	2200      	movs	r2, #0
 801a664:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	2200      	movs	r2, #0
 801a66c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	2200      	movs	r2, #0
 801a674:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801a678:	68bb      	ldr	r3, [r7, #8]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d003      	beq.n	801a686 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	68ba      	ldr	r2, [r7, #8]
 801a682:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	2201      	movs	r2, #1
 801a68a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	79fa      	ldrb	r2, [r7, #7]
 801a692:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801a694:	68f8      	ldr	r0, [r7, #12]
 801a696:	f001 fcf1 	bl	801c07c <USBD_LL_Init>
 801a69a:	4603      	mov	r3, r0
 801a69c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801a69e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	3718      	adds	r7, #24
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	bd80      	pop	{r7, pc}

0801a6a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b084      	sub	sp, #16
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
 801a6b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801a6b6:	683b      	ldr	r3, [r7, #0]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d101      	bne.n	801a6c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801a6bc:	2303      	movs	r3, #3
 801a6be:	e016      	b.n	801a6ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	683a      	ldr	r2, [r7, #0]
 801a6c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d00b      	beq.n	801a6ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6dc:	f107 020e 	add.w	r2, r7, #14
 801a6e0:	4610      	mov	r0, r2
 801a6e2:	4798      	blx	r3
 801a6e4:	4602      	mov	r2, r0
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801a6ec:	2300      	movs	r3, #0
}
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	3710      	adds	r7, #16
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}

0801a6f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801a6f6:	b580      	push	{r7, lr}
 801a6f8:	b082      	sub	sp, #8
 801a6fa:	af00      	add	r7, sp, #0
 801a6fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801a6fe:	6878      	ldr	r0, [r7, #4]
 801a700:	f001 fd0c 	bl	801c11c <USBD_LL_Start>
 801a704:	4603      	mov	r3, r0
}
 801a706:	4618      	mov	r0, r3
 801a708:	3708      	adds	r7, #8
 801a70a:	46bd      	mov	sp, r7
 801a70c:	bd80      	pop	{r7, pc}

0801a70e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801a70e:	b480      	push	{r7}
 801a710:	b083      	sub	sp, #12
 801a712:	af00      	add	r7, sp, #0
 801a714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a716:	2300      	movs	r3, #0
}
 801a718:	4618      	mov	r0, r3
 801a71a:	370c      	adds	r7, #12
 801a71c:	46bd      	mov	sp, r7
 801a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a722:	4770      	bx	lr

0801a724 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a724:	b580      	push	{r7, lr}
 801a726:	b084      	sub	sp, #16
 801a728:	af00      	add	r7, sp, #0
 801a72a:	6078      	str	r0, [r7, #4]
 801a72c:	460b      	mov	r3, r1
 801a72e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801a730:	2303      	movs	r3, #3
 801a732:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d009      	beq.n	801a752 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	78fa      	ldrb	r2, [r7, #3]
 801a748:	4611      	mov	r1, r2
 801a74a:	6878      	ldr	r0, [r7, #4]
 801a74c:	4798      	blx	r3
 801a74e:	4603      	mov	r3, r0
 801a750:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801a752:	7bfb      	ldrb	r3, [r7, #15]
}
 801a754:	4618      	mov	r0, r3
 801a756:	3710      	adds	r7, #16
 801a758:	46bd      	mov	sp, r7
 801a75a:	bd80      	pop	{r7, pc}

0801a75c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b082      	sub	sp, #8
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
 801a764:	460b      	mov	r3, r1
 801a766:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d007      	beq.n	801a782 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a778:	685b      	ldr	r3, [r3, #4]
 801a77a:	78fa      	ldrb	r2, [r7, #3]
 801a77c:	4611      	mov	r1, r2
 801a77e:	6878      	ldr	r0, [r7, #4]
 801a780:	4798      	blx	r3
  }

  return USBD_OK;
 801a782:	2300      	movs	r3, #0
}
 801a784:	4618      	mov	r0, r3
 801a786:	3708      	adds	r7, #8
 801a788:	46bd      	mov	sp, r7
 801a78a:	bd80      	pop	{r7, pc}

0801a78c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801a78c:	b580      	push	{r7, lr}
 801a78e:	b084      	sub	sp, #16
 801a790:	af00      	add	r7, sp, #0
 801a792:	6078      	str	r0, [r7, #4]
 801a794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a79c:	6839      	ldr	r1, [r7, #0]
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f000 ff90 	bl	801b6c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	2201      	movs	r2, #1
 801a7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801a7b2:	461a      	mov	r2, r3
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a7c0:	f003 031f 	and.w	r3, r3, #31
 801a7c4:	2b02      	cmp	r3, #2
 801a7c6:	d01a      	beq.n	801a7fe <USBD_LL_SetupStage+0x72>
 801a7c8:	2b02      	cmp	r3, #2
 801a7ca:	d822      	bhi.n	801a812 <USBD_LL_SetupStage+0x86>
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d002      	beq.n	801a7d6 <USBD_LL_SetupStage+0x4a>
 801a7d0:	2b01      	cmp	r3, #1
 801a7d2:	d00a      	beq.n	801a7ea <USBD_LL_SetupStage+0x5e>
 801a7d4:	e01d      	b.n	801a812 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a7dc:	4619      	mov	r1, r3
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	f000 fa62 	bl	801aca8 <USBD_StdDevReq>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	73fb      	strb	r3, [r7, #15]
      break;
 801a7e8:	e020      	b.n	801a82c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a7f0:	4619      	mov	r1, r3
 801a7f2:	6878      	ldr	r0, [r7, #4]
 801a7f4:	f000 fac6 	bl	801ad84 <USBD_StdItfReq>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	73fb      	strb	r3, [r7, #15]
      break;
 801a7fc:	e016      	b.n	801a82c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a804:	4619      	mov	r1, r3
 801a806:	6878      	ldr	r0, [r7, #4]
 801a808:	f000 fb05 	bl	801ae16 <USBD_StdEPReq>
 801a80c:	4603      	mov	r3, r0
 801a80e:	73fb      	strb	r3, [r7, #15]
      break;
 801a810:	e00c      	b.n	801a82c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a818:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a81c:	b2db      	uxtb	r3, r3
 801a81e:	4619      	mov	r1, r3
 801a820:	6878      	ldr	r0, [r7, #4]
 801a822:	f001 fcdb 	bl	801c1dc <USBD_LL_StallEP>
 801a826:	4603      	mov	r3, r0
 801a828:	73fb      	strb	r3, [r7, #15]
      break;
 801a82a:	bf00      	nop
  }

  return ret;
 801a82c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3710      	adds	r7, #16
 801a832:	46bd      	mov	sp, r7
 801a834:	bd80      	pop	{r7, pc}

0801a836 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801a836:	b580      	push	{r7, lr}
 801a838:	b086      	sub	sp, #24
 801a83a:	af00      	add	r7, sp, #0
 801a83c:	60f8      	str	r0, [r7, #12]
 801a83e:	460b      	mov	r3, r1
 801a840:	607a      	str	r2, [r7, #4]
 801a842:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a844:	7afb      	ldrb	r3, [r7, #11]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d138      	bne.n	801a8bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801a850:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a858:	2b03      	cmp	r3, #3
 801a85a:	d14a      	bne.n	801a8f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801a85c:	693b      	ldr	r3, [r7, #16]
 801a85e:	689a      	ldr	r2, [r3, #8]
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	68db      	ldr	r3, [r3, #12]
 801a864:	429a      	cmp	r2, r3
 801a866:	d913      	bls.n	801a890 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a868:	693b      	ldr	r3, [r7, #16]
 801a86a:	689a      	ldr	r2, [r3, #8]
 801a86c:	693b      	ldr	r3, [r7, #16]
 801a86e:	68db      	ldr	r3, [r3, #12]
 801a870:	1ad2      	subs	r2, r2, r3
 801a872:	693b      	ldr	r3, [r7, #16]
 801a874:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801a876:	693b      	ldr	r3, [r7, #16]
 801a878:	68da      	ldr	r2, [r3, #12]
 801a87a:	693b      	ldr	r3, [r7, #16]
 801a87c:	689b      	ldr	r3, [r3, #8]
 801a87e:	4293      	cmp	r3, r2
 801a880:	bf28      	it	cs
 801a882:	4613      	movcs	r3, r2
 801a884:	461a      	mov	r2, r3
 801a886:	6879      	ldr	r1, [r7, #4]
 801a888:	68f8      	ldr	r0, [r7, #12]
 801a88a:	f001 f80f 	bl	801b8ac <USBD_CtlContinueRx>
 801a88e:	e030      	b.n	801a8f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a896:	b2db      	uxtb	r3, r3
 801a898:	2b03      	cmp	r3, #3
 801a89a:	d10b      	bne.n	801a8b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a8a2:	691b      	ldr	r3, [r3, #16]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d005      	beq.n	801a8b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a8ae:	691b      	ldr	r3, [r3, #16]
 801a8b0:	68f8      	ldr	r0, [r7, #12]
 801a8b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801a8b4:	68f8      	ldr	r0, [r7, #12]
 801a8b6:	f001 f80a 	bl	801b8ce <USBD_CtlSendStatus>
 801a8ba:	e01a      	b.n	801a8f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a8c2:	b2db      	uxtb	r3, r3
 801a8c4:	2b03      	cmp	r3, #3
 801a8c6:	d114      	bne.n	801a8f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a8ce:	699b      	ldr	r3, [r3, #24]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d00e      	beq.n	801a8f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a8da:	699b      	ldr	r3, [r3, #24]
 801a8dc:	7afa      	ldrb	r2, [r7, #11]
 801a8de:	4611      	mov	r1, r2
 801a8e0:	68f8      	ldr	r0, [r7, #12]
 801a8e2:	4798      	blx	r3
 801a8e4:	4603      	mov	r3, r0
 801a8e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a8e8:	7dfb      	ldrb	r3, [r7, #23]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d001      	beq.n	801a8f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801a8ee:	7dfb      	ldrb	r3, [r7, #23]
 801a8f0:	e000      	b.n	801a8f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801a8f2:	2300      	movs	r3, #0
}
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	3718      	adds	r7, #24
 801a8f8:	46bd      	mov	sp, r7
 801a8fa:	bd80      	pop	{r7, pc}

0801a8fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b086      	sub	sp, #24
 801a900:	af00      	add	r7, sp, #0
 801a902:	60f8      	str	r0, [r7, #12]
 801a904:	460b      	mov	r3, r1
 801a906:	607a      	str	r2, [r7, #4]
 801a908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a90a:	7afb      	ldrb	r3, [r7, #11]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d16b      	bne.n	801a9e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	3314      	adds	r3, #20
 801a914:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a91c:	2b02      	cmp	r3, #2
 801a91e:	d156      	bne.n	801a9ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	689a      	ldr	r2, [r3, #8]
 801a924:	693b      	ldr	r3, [r7, #16]
 801a926:	68db      	ldr	r3, [r3, #12]
 801a928:	429a      	cmp	r2, r3
 801a92a:	d914      	bls.n	801a956 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a92c:	693b      	ldr	r3, [r7, #16]
 801a92e:	689a      	ldr	r2, [r3, #8]
 801a930:	693b      	ldr	r3, [r7, #16]
 801a932:	68db      	ldr	r3, [r3, #12]
 801a934:	1ad2      	subs	r2, r2, r3
 801a936:	693b      	ldr	r3, [r7, #16]
 801a938:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801a93a:	693b      	ldr	r3, [r7, #16]
 801a93c:	689b      	ldr	r3, [r3, #8]
 801a93e:	461a      	mov	r2, r3
 801a940:	6879      	ldr	r1, [r7, #4]
 801a942:	68f8      	ldr	r0, [r7, #12]
 801a944:	f000 ff84 	bl	801b850 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a948:	2300      	movs	r3, #0
 801a94a:	2200      	movs	r2, #0
 801a94c:	2100      	movs	r1, #0
 801a94e:	68f8      	ldr	r0, [r7, #12]
 801a950:	f001 fcee 	bl	801c330 <USBD_LL_PrepareReceive>
 801a954:	e03b      	b.n	801a9ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801a956:	693b      	ldr	r3, [r7, #16]
 801a958:	68da      	ldr	r2, [r3, #12]
 801a95a:	693b      	ldr	r3, [r7, #16]
 801a95c:	689b      	ldr	r3, [r3, #8]
 801a95e:	429a      	cmp	r2, r3
 801a960:	d11c      	bne.n	801a99c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801a962:	693b      	ldr	r3, [r7, #16]
 801a964:	685a      	ldr	r2, [r3, #4]
 801a966:	693b      	ldr	r3, [r7, #16]
 801a968:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801a96a:	429a      	cmp	r2, r3
 801a96c:	d316      	bcc.n	801a99c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801a96e:	693b      	ldr	r3, [r7, #16]
 801a970:	685a      	ldr	r2, [r3, #4]
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a978:	429a      	cmp	r2, r3
 801a97a:	d20f      	bcs.n	801a99c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a97c:	2200      	movs	r2, #0
 801a97e:	2100      	movs	r1, #0
 801a980:	68f8      	ldr	r0, [r7, #12]
 801a982:	f000 ff65 	bl	801b850 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	2200      	movs	r2, #0
 801a98a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a98e:	2300      	movs	r3, #0
 801a990:	2200      	movs	r2, #0
 801a992:	2100      	movs	r1, #0
 801a994:	68f8      	ldr	r0, [r7, #12]
 801a996:	f001 fccb 	bl	801c330 <USBD_LL_PrepareReceive>
 801a99a:	e018      	b.n	801a9ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a9a2:	b2db      	uxtb	r3, r3
 801a9a4:	2b03      	cmp	r3, #3
 801a9a6:	d10b      	bne.n	801a9c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a9ae:	68db      	ldr	r3, [r3, #12]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d005      	beq.n	801a9c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a9ba:	68db      	ldr	r3, [r3, #12]
 801a9bc:	68f8      	ldr	r0, [r7, #12]
 801a9be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801a9c0:	2180      	movs	r1, #128	; 0x80
 801a9c2:	68f8      	ldr	r0, [r7, #12]
 801a9c4:	f001 fc0a 	bl	801c1dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801a9c8:	68f8      	ldr	r0, [r7, #12]
 801a9ca:	f000 ff93 	bl	801b8f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a9d4:	2b01      	cmp	r3, #1
 801a9d6:	d122      	bne.n	801aa1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801a9d8:	68f8      	ldr	r0, [r7, #12]
 801a9da:	f7ff fe98 	bl	801a70e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	2200      	movs	r2, #0
 801a9e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a9e6:	e01a      	b.n	801aa1e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a9ee:	b2db      	uxtb	r3, r3
 801a9f0:	2b03      	cmp	r3, #3
 801a9f2:	d114      	bne.n	801aa1e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a9fa:	695b      	ldr	r3, [r3, #20]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d00e      	beq.n	801aa1e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aa06:	695b      	ldr	r3, [r3, #20]
 801aa08:	7afa      	ldrb	r2, [r7, #11]
 801aa0a:	4611      	mov	r1, r2
 801aa0c:	68f8      	ldr	r0, [r7, #12]
 801aa0e:	4798      	blx	r3
 801aa10:	4603      	mov	r3, r0
 801aa12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801aa14:	7dfb      	ldrb	r3, [r7, #23]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d001      	beq.n	801aa1e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801aa1a:	7dfb      	ldrb	r3, [r7, #23]
 801aa1c:	e000      	b.n	801aa20 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801aa1e:	2300      	movs	r3, #0
}
 801aa20:	4618      	mov	r0, r3
 801aa22:	3718      	adds	r7, #24
 801aa24:	46bd      	mov	sp, r7
 801aa26:	bd80      	pop	{r7, pc}

0801aa28 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b082      	sub	sp, #8
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	2201      	movs	r2, #1
 801aa34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	2200      	movs	r2, #0
 801aa44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	2200      	movs	r2, #0
 801aa4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d101      	bne.n	801aa5c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801aa58:	2303      	movs	r3, #3
 801aa5a:	e02f      	b.n	801aabc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d00f      	beq.n	801aa86 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aa6c:	685b      	ldr	r3, [r3, #4]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d009      	beq.n	801aa86 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aa78:	685b      	ldr	r3, [r3, #4]
 801aa7a:	687a      	ldr	r2, [r7, #4]
 801aa7c:	6852      	ldr	r2, [r2, #4]
 801aa7e:	b2d2      	uxtb	r2, r2
 801aa80:	4611      	mov	r1, r2
 801aa82:	6878      	ldr	r0, [r7, #4]
 801aa84:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801aa86:	2340      	movs	r3, #64	; 0x40
 801aa88:	2200      	movs	r2, #0
 801aa8a:	2100      	movs	r1, #0
 801aa8c:	6878      	ldr	r0, [r7, #4]
 801aa8e:	f001 fb60 	bl	801c152 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	2201      	movs	r2, #1
 801aa96:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	2240      	movs	r2, #64	; 0x40
 801aa9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801aaa2:	2340      	movs	r3, #64	; 0x40
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	2180      	movs	r1, #128	; 0x80
 801aaa8:	6878      	ldr	r0, [r7, #4]
 801aaaa:	f001 fb52 	bl	801c152 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	2201      	movs	r2, #1
 801aab2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	2240      	movs	r2, #64	; 0x40
 801aab8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801aaba:	2300      	movs	r3, #0
}
 801aabc:	4618      	mov	r0, r3
 801aabe:	3708      	adds	r7, #8
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}

0801aac4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801aac4:	b480      	push	{r7}
 801aac6:	b083      	sub	sp, #12
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	6078      	str	r0, [r7, #4]
 801aacc:	460b      	mov	r3, r1
 801aace:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	78fa      	ldrb	r2, [r7, #3]
 801aad4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801aad6:	2300      	movs	r3, #0
}
 801aad8:	4618      	mov	r0, r3
 801aada:	370c      	adds	r7, #12
 801aadc:	46bd      	mov	sp, r7
 801aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae2:	4770      	bx	lr

0801aae4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801aae4:	b480      	push	{r7}
 801aae6:	b083      	sub	sp, #12
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801aaf2:	b2da      	uxtb	r2, r3
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	2204      	movs	r2, #4
 801aafe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801ab02:	2300      	movs	r3, #0
}
 801ab04:	4618      	mov	r0, r3
 801ab06:	370c      	adds	r7, #12
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0e:	4770      	bx	lr

0801ab10 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801ab10:	b480      	push	{r7}
 801ab12:	b083      	sub	sp, #12
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ab1e:	b2db      	uxtb	r3, r3
 801ab20:	2b04      	cmp	r3, #4
 801ab22:	d106      	bne.n	801ab32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801ab2a:	b2da      	uxtb	r2, r3
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801ab32:	2300      	movs	r3, #0
}
 801ab34:	4618      	mov	r0, r3
 801ab36:	370c      	adds	r7, #12
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3e:	4770      	bx	lr

0801ab40 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d101      	bne.n	801ab56 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801ab52:	2303      	movs	r3, #3
 801ab54:	e012      	b.n	801ab7c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ab5c:	b2db      	uxtb	r3, r3
 801ab5e:	2b03      	cmp	r3, #3
 801ab60:	d10b      	bne.n	801ab7a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab68:	69db      	ldr	r3, [r3, #28]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d005      	beq.n	801ab7a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab74:	69db      	ldr	r3, [r3, #28]
 801ab76:	6878      	ldr	r0, [r7, #4]
 801ab78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801ab7a:	2300      	movs	r3, #0
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	3708      	adds	r7, #8
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd80      	pop	{r7, pc}

0801ab84 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b082      	sub	sp, #8
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
 801ab8c:	460b      	mov	r3, r1
 801ab8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d101      	bne.n	801ab9e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801ab9a:	2303      	movs	r3, #3
 801ab9c:	e014      	b.n	801abc8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801aba4:	b2db      	uxtb	r3, r3
 801aba6:	2b03      	cmp	r3, #3
 801aba8:	d10d      	bne.n	801abc6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801abb0:	6a1b      	ldr	r3, [r3, #32]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d007      	beq.n	801abc6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801abbc:	6a1b      	ldr	r3, [r3, #32]
 801abbe:	78fa      	ldrb	r2, [r7, #3]
 801abc0:	4611      	mov	r1, r2
 801abc2:	6878      	ldr	r0, [r7, #4]
 801abc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801abc6:	2300      	movs	r3, #0
}
 801abc8:	4618      	mov	r0, r3
 801abca:	3708      	adds	r7, #8
 801abcc:	46bd      	mov	sp, r7
 801abce:	bd80      	pop	{r7, pc}

0801abd0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801abd0:	b580      	push	{r7, lr}
 801abd2:	b082      	sub	sp, #8
 801abd4:	af00      	add	r7, sp, #0
 801abd6:	6078      	str	r0, [r7, #4]
 801abd8:	460b      	mov	r3, r1
 801abda:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d101      	bne.n	801abea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801abe6:	2303      	movs	r3, #3
 801abe8:	e014      	b.n	801ac14 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801abf0:	b2db      	uxtb	r3, r3
 801abf2:	2b03      	cmp	r3, #3
 801abf4:	d10d      	bne.n	801ac12 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d007      	beq.n	801ac12 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac0a:	78fa      	ldrb	r2, [r7, #3]
 801ac0c:	4611      	mov	r1, r2
 801ac0e:	6878      	ldr	r0, [r7, #4]
 801ac10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801ac12:	2300      	movs	r3, #0
}
 801ac14:	4618      	mov	r0, r3
 801ac16:	3708      	adds	r7, #8
 801ac18:	46bd      	mov	sp, r7
 801ac1a:	bd80      	pop	{r7, pc}

0801ac1c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801ac1c:	b480      	push	{r7}
 801ac1e:	b083      	sub	sp, #12
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ac24:	2300      	movs	r3, #0
}
 801ac26:	4618      	mov	r0, r3
 801ac28:	370c      	adds	r7, #12
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac30:	4770      	bx	lr

0801ac32 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801ac32:	b580      	push	{r7, lr}
 801ac34:	b082      	sub	sp, #8
 801ac36:	af00      	add	r7, sp, #0
 801ac38:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	2201      	movs	r2, #1
 801ac3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d009      	beq.n	801ac60 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ac52:	685b      	ldr	r3, [r3, #4]
 801ac54:	687a      	ldr	r2, [r7, #4]
 801ac56:	6852      	ldr	r2, [r2, #4]
 801ac58:	b2d2      	uxtb	r2, r2
 801ac5a:	4611      	mov	r1, r2
 801ac5c:	6878      	ldr	r0, [r7, #4]
 801ac5e:	4798      	blx	r3
  }

  return USBD_OK;
 801ac60:	2300      	movs	r3, #0
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	3708      	adds	r7, #8
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd80      	pop	{r7, pc}

0801ac6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801ac6a:	b480      	push	{r7}
 801ac6c:	b087      	sub	sp, #28
 801ac6e:	af00      	add	r7, sp, #0
 801ac70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	781b      	ldrb	r3, [r3, #0]
 801ac7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801ac7c:	697b      	ldr	r3, [r7, #20]
 801ac7e:	3301      	adds	r3, #1
 801ac80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	781b      	ldrb	r3, [r3, #0]
 801ac86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801ac88:	8a3b      	ldrh	r3, [r7, #16]
 801ac8a:	021b      	lsls	r3, r3, #8
 801ac8c:	b21a      	sxth	r2, r3
 801ac8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ac92:	4313      	orrs	r3, r2
 801ac94:	b21b      	sxth	r3, r3
 801ac96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801ac98:	89fb      	ldrh	r3, [r7, #14]
}
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	371c      	adds	r7, #28
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aca4:	4770      	bx	lr
	...

0801aca8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	b084      	sub	sp, #16
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
 801acb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801acb2:	2300      	movs	r3, #0
 801acb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801acb6:	683b      	ldr	r3, [r7, #0]
 801acb8:	781b      	ldrb	r3, [r3, #0]
 801acba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801acbe:	2b40      	cmp	r3, #64	; 0x40
 801acc0:	d005      	beq.n	801acce <USBD_StdDevReq+0x26>
 801acc2:	2b40      	cmp	r3, #64	; 0x40
 801acc4:	d853      	bhi.n	801ad6e <USBD_StdDevReq+0xc6>
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d00b      	beq.n	801ace2 <USBD_StdDevReq+0x3a>
 801acca:	2b20      	cmp	r3, #32
 801accc:	d14f      	bne.n	801ad6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801acd4:	689b      	ldr	r3, [r3, #8]
 801acd6:	6839      	ldr	r1, [r7, #0]
 801acd8:	6878      	ldr	r0, [r7, #4]
 801acda:	4798      	blx	r3
 801acdc:	4603      	mov	r3, r0
 801acde:	73fb      	strb	r3, [r7, #15]
      break;
 801ace0:	e04a      	b.n	801ad78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	785b      	ldrb	r3, [r3, #1]
 801ace6:	2b09      	cmp	r3, #9
 801ace8:	d83b      	bhi.n	801ad62 <USBD_StdDevReq+0xba>
 801acea:	a201      	add	r2, pc, #4	; (adr r2, 801acf0 <USBD_StdDevReq+0x48>)
 801acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801acf0:	0801ad45 	.word	0x0801ad45
 801acf4:	0801ad59 	.word	0x0801ad59
 801acf8:	0801ad63 	.word	0x0801ad63
 801acfc:	0801ad4f 	.word	0x0801ad4f
 801ad00:	0801ad63 	.word	0x0801ad63
 801ad04:	0801ad23 	.word	0x0801ad23
 801ad08:	0801ad19 	.word	0x0801ad19
 801ad0c:	0801ad63 	.word	0x0801ad63
 801ad10:	0801ad3b 	.word	0x0801ad3b
 801ad14:	0801ad2d 	.word	0x0801ad2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801ad18:	6839      	ldr	r1, [r7, #0]
 801ad1a:	6878      	ldr	r0, [r7, #4]
 801ad1c:	f000 f9de 	bl	801b0dc <USBD_GetDescriptor>
          break;
 801ad20:	e024      	b.n	801ad6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801ad22:	6839      	ldr	r1, [r7, #0]
 801ad24:	6878      	ldr	r0, [r7, #4]
 801ad26:	f000 fb43 	bl	801b3b0 <USBD_SetAddress>
          break;
 801ad2a:	e01f      	b.n	801ad6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801ad2c:	6839      	ldr	r1, [r7, #0]
 801ad2e:	6878      	ldr	r0, [r7, #4]
 801ad30:	f000 fb82 	bl	801b438 <USBD_SetConfig>
 801ad34:	4603      	mov	r3, r0
 801ad36:	73fb      	strb	r3, [r7, #15]
          break;
 801ad38:	e018      	b.n	801ad6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801ad3a:	6839      	ldr	r1, [r7, #0]
 801ad3c:	6878      	ldr	r0, [r7, #4]
 801ad3e:	f000 fc21 	bl	801b584 <USBD_GetConfig>
          break;
 801ad42:	e013      	b.n	801ad6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801ad44:	6839      	ldr	r1, [r7, #0]
 801ad46:	6878      	ldr	r0, [r7, #4]
 801ad48:	f000 fc52 	bl	801b5f0 <USBD_GetStatus>
          break;
 801ad4c:	e00e      	b.n	801ad6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801ad4e:	6839      	ldr	r1, [r7, #0]
 801ad50:	6878      	ldr	r0, [r7, #4]
 801ad52:	f000 fc81 	bl	801b658 <USBD_SetFeature>
          break;
 801ad56:	e009      	b.n	801ad6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801ad58:	6839      	ldr	r1, [r7, #0]
 801ad5a:	6878      	ldr	r0, [r7, #4]
 801ad5c:	f000 fc90 	bl	801b680 <USBD_ClrFeature>
          break;
 801ad60:	e004      	b.n	801ad6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801ad62:	6839      	ldr	r1, [r7, #0]
 801ad64:	6878      	ldr	r0, [r7, #4]
 801ad66:	f000 fce7 	bl	801b738 <USBD_CtlError>
          break;
 801ad6a:	bf00      	nop
      }
      break;
 801ad6c:	e004      	b.n	801ad78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801ad6e:	6839      	ldr	r1, [r7, #0]
 801ad70:	6878      	ldr	r0, [r7, #4]
 801ad72:	f000 fce1 	bl	801b738 <USBD_CtlError>
      break;
 801ad76:	bf00      	nop
  }

  return ret;
 801ad78:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	3710      	adds	r7, #16
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop

0801ad84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad84:	b580      	push	{r7, lr}
 801ad86:	b084      	sub	sp, #16
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	6078      	str	r0, [r7, #4]
 801ad8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ad8e:	2300      	movs	r3, #0
 801ad90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ad92:	683b      	ldr	r3, [r7, #0]
 801ad94:	781b      	ldrb	r3, [r3, #0]
 801ad96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ad9a:	2b40      	cmp	r3, #64	; 0x40
 801ad9c:	d005      	beq.n	801adaa <USBD_StdItfReq+0x26>
 801ad9e:	2b40      	cmp	r3, #64	; 0x40
 801ada0:	d82f      	bhi.n	801ae02 <USBD_StdItfReq+0x7e>
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d001      	beq.n	801adaa <USBD_StdItfReq+0x26>
 801ada6:	2b20      	cmp	r3, #32
 801ada8:	d12b      	bne.n	801ae02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801adb0:	b2db      	uxtb	r3, r3
 801adb2:	3b01      	subs	r3, #1
 801adb4:	2b02      	cmp	r3, #2
 801adb6:	d81d      	bhi.n	801adf4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801adb8:	683b      	ldr	r3, [r7, #0]
 801adba:	889b      	ldrh	r3, [r3, #4]
 801adbc:	b2db      	uxtb	r3, r3
 801adbe:	2b01      	cmp	r3, #1
 801adc0:	d813      	bhi.n	801adea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801adc8:	689b      	ldr	r3, [r3, #8]
 801adca:	6839      	ldr	r1, [r7, #0]
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	4798      	blx	r3
 801add0:	4603      	mov	r3, r0
 801add2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801add4:	683b      	ldr	r3, [r7, #0]
 801add6:	88db      	ldrh	r3, [r3, #6]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d110      	bne.n	801adfe <USBD_StdItfReq+0x7a>
 801addc:	7bfb      	ldrb	r3, [r7, #15]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d10d      	bne.n	801adfe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801ade2:	6878      	ldr	r0, [r7, #4]
 801ade4:	f000 fd73 	bl	801b8ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801ade8:	e009      	b.n	801adfe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801adea:	6839      	ldr	r1, [r7, #0]
 801adec:	6878      	ldr	r0, [r7, #4]
 801adee:	f000 fca3 	bl	801b738 <USBD_CtlError>
          break;
 801adf2:	e004      	b.n	801adfe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801adf4:	6839      	ldr	r1, [r7, #0]
 801adf6:	6878      	ldr	r0, [r7, #4]
 801adf8:	f000 fc9e 	bl	801b738 <USBD_CtlError>
          break;
 801adfc:	e000      	b.n	801ae00 <USBD_StdItfReq+0x7c>
          break;
 801adfe:	bf00      	nop
      }
      break;
 801ae00:	e004      	b.n	801ae0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801ae02:	6839      	ldr	r1, [r7, #0]
 801ae04:	6878      	ldr	r0, [r7, #4]
 801ae06:	f000 fc97 	bl	801b738 <USBD_CtlError>
      break;
 801ae0a:	bf00      	nop
  }

  return ret;
 801ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae0e:	4618      	mov	r0, r3
 801ae10:	3710      	adds	r7, #16
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}

0801ae16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae16:	b580      	push	{r7, lr}
 801ae18:	b084      	sub	sp, #16
 801ae1a:	af00      	add	r7, sp, #0
 801ae1c:	6078      	str	r0, [r7, #4]
 801ae1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801ae20:	2300      	movs	r3, #0
 801ae22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	889b      	ldrh	r3, [r3, #4]
 801ae28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	781b      	ldrb	r3, [r3, #0]
 801ae2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ae32:	2b40      	cmp	r3, #64	; 0x40
 801ae34:	d007      	beq.n	801ae46 <USBD_StdEPReq+0x30>
 801ae36:	2b40      	cmp	r3, #64	; 0x40
 801ae38:	f200 8145 	bhi.w	801b0c6 <USBD_StdEPReq+0x2b0>
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d00c      	beq.n	801ae5a <USBD_StdEPReq+0x44>
 801ae40:	2b20      	cmp	r3, #32
 801ae42:	f040 8140 	bne.w	801b0c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ae4c:	689b      	ldr	r3, [r3, #8]
 801ae4e:	6839      	ldr	r1, [r7, #0]
 801ae50:	6878      	ldr	r0, [r7, #4]
 801ae52:	4798      	blx	r3
 801ae54:	4603      	mov	r3, r0
 801ae56:	73fb      	strb	r3, [r7, #15]
      break;
 801ae58:	e13a      	b.n	801b0d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	785b      	ldrb	r3, [r3, #1]
 801ae5e:	2b03      	cmp	r3, #3
 801ae60:	d007      	beq.n	801ae72 <USBD_StdEPReq+0x5c>
 801ae62:	2b03      	cmp	r3, #3
 801ae64:	f300 8129 	bgt.w	801b0ba <USBD_StdEPReq+0x2a4>
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d07f      	beq.n	801af6c <USBD_StdEPReq+0x156>
 801ae6c:	2b01      	cmp	r3, #1
 801ae6e:	d03c      	beq.n	801aeea <USBD_StdEPReq+0xd4>
 801ae70:	e123      	b.n	801b0ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae78:	b2db      	uxtb	r3, r3
 801ae7a:	2b02      	cmp	r3, #2
 801ae7c:	d002      	beq.n	801ae84 <USBD_StdEPReq+0x6e>
 801ae7e:	2b03      	cmp	r3, #3
 801ae80:	d016      	beq.n	801aeb0 <USBD_StdEPReq+0x9a>
 801ae82:	e02c      	b.n	801aede <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ae84:	7bbb      	ldrb	r3, [r7, #14]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d00d      	beq.n	801aea6 <USBD_StdEPReq+0x90>
 801ae8a:	7bbb      	ldrb	r3, [r7, #14]
 801ae8c:	2b80      	cmp	r3, #128	; 0x80
 801ae8e:	d00a      	beq.n	801aea6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801ae90:	7bbb      	ldrb	r3, [r7, #14]
 801ae92:	4619      	mov	r1, r3
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f001 f9a1 	bl	801c1dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801ae9a:	2180      	movs	r1, #128	; 0x80
 801ae9c:	6878      	ldr	r0, [r7, #4]
 801ae9e:	f001 f99d 	bl	801c1dc <USBD_LL_StallEP>
 801aea2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801aea4:	e020      	b.n	801aee8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801aea6:	6839      	ldr	r1, [r7, #0]
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	f000 fc45 	bl	801b738 <USBD_CtlError>
              break;
 801aeae:	e01b      	b.n	801aee8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	885b      	ldrh	r3, [r3, #2]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d10e      	bne.n	801aed6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801aeb8:	7bbb      	ldrb	r3, [r7, #14]
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d00b      	beq.n	801aed6 <USBD_StdEPReq+0xc0>
 801aebe:	7bbb      	ldrb	r3, [r7, #14]
 801aec0:	2b80      	cmp	r3, #128	; 0x80
 801aec2:	d008      	beq.n	801aed6 <USBD_StdEPReq+0xc0>
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	88db      	ldrh	r3, [r3, #6]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d104      	bne.n	801aed6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801aecc:	7bbb      	ldrb	r3, [r7, #14]
 801aece:	4619      	mov	r1, r3
 801aed0:	6878      	ldr	r0, [r7, #4]
 801aed2:	f001 f983 	bl	801c1dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801aed6:	6878      	ldr	r0, [r7, #4]
 801aed8:	f000 fcf9 	bl	801b8ce <USBD_CtlSendStatus>

              break;
 801aedc:	e004      	b.n	801aee8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801aede:	6839      	ldr	r1, [r7, #0]
 801aee0:	6878      	ldr	r0, [r7, #4]
 801aee2:	f000 fc29 	bl	801b738 <USBD_CtlError>
              break;
 801aee6:	bf00      	nop
          }
          break;
 801aee8:	e0ec      	b.n	801b0c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801aef0:	b2db      	uxtb	r3, r3
 801aef2:	2b02      	cmp	r3, #2
 801aef4:	d002      	beq.n	801aefc <USBD_StdEPReq+0xe6>
 801aef6:	2b03      	cmp	r3, #3
 801aef8:	d016      	beq.n	801af28 <USBD_StdEPReq+0x112>
 801aefa:	e030      	b.n	801af5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801aefc:	7bbb      	ldrb	r3, [r7, #14]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d00d      	beq.n	801af1e <USBD_StdEPReq+0x108>
 801af02:	7bbb      	ldrb	r3, [r7, #14]
 801af04:	2b80      	cmp	r3, #128	; 0x80
 801af06:	d00a      	beq.n	801af1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801af08:	7bbb      	ldrb	r3, [r7, #14]
 801af0a:	4619      	mov	r1, r3
 801af0c:	6878      	ldr	r0, [r7, #4]
 801af0e:	f001 f965 	bl	801c1dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801af12:	2180      	movs	r1, #128	; 0x80
 801af14:	6878      	ldr	r0, [r7, #4]
 801af16:	f001 f961 	bl	801c1dc <USBD_LL_StallEP>
 801af1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801af1c:	e025      	b.n	801af6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801af1e:	6839      	ldr	r1, [r7, #0]
 801af20:	6878      	ldr	r0, [r7, #4]
 801af22:	f000 fc09 	bl	801b738 <USBD_CtlError>
              break;
 801af26:	e020      	b.n	801af6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801af28:	683b      	ldr	r3, [r7, #0]
 801af2a:	885b      	ldrh	r3, [r3, #2]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d11b      	bne.n	801af68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801af30:	7bbb      	ldrb	r3, [r7, #14]
 801af32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801af36:	2b00      	cmp	r3, #0
 801af38:	d004      	beq.n	801af44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801af3a:	7bbb      	ldrb	r3, [r7, #14]
 801af3c:	4619      	mov	r1, r3
 801af3e:	6878      	ldr	r0, [r7, #4]
 801af40:	f001 f96b 	bl	801c21a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801af44:	6878      	ldr	r0, [r7, #4]
 801af46:	f000 fcc2 	bl	801b8ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801af50:	689b      	ldr	r3, [r3, #8]
 801af52:	6839      	ldr	r1, [r7, #0]
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	4798      	blx	r3
 801af58:	4603      	mov	r3, r0
 801af5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801af5c:	e004      	b.n	801af68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801af5e:	6839      	ldr	r1, [r7, #0]
 801af60:	6878      	ldr	r0, [r7, #4]
 801af62:	f000 fbe9 	bl	801b738 <USBD_CtlError>
              break;
 801af66:	e000      	b.n	801af6a <USBD_StdEPReq+0x154>
              break;
 801af68:	bf00      	nop
          }
          break;
 801af6a:	e0ab      	b.n	801b0c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801af72:	b2db      	uxtb	r3, r3
 801af74:	2b02      	cmp	r3, #2
 801af76:	d002      	beq.n	801af7e <USBD_StdEPReq+0x168>
 801af78:	2b03      	cmp	r3, #3
 801af7a:	d032      	beq.n	801afe2 <USBD_StdEPReq+0x1cc>
 801af7c:	e097      	b.n	801b0ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801af7e:	7bbb      	ldrb	r3, [r7, #14]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d007      	beq.n	801af94 <USBD_StdEPReq+0x17e>
 801af84:	7bbb      	ldrb	r3, [r7, #14]
 801af86:	2b80      	cmp	r3, #128	; 0x80
 801af88:	d004      	beq.n	801af94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801af8a:	6839      	ldr	r1, [r7, #0]
 801af8c:	6878      	ldr	r0, [r7, #4]
 801af8e:	f000 fbd3 	bl	801b738 <USBD_CtlError>
                break;
 801af92:	e091      	b.n	801b0b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801af94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	da0b      	bge.n	801afb4 <USBD_StdEPReq+0x19e>
 801af9c:	7bbb      	ldrb	r3, [r7, #14]
 801af9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801afa2:	4613      	mov	r3, r2
 801afa4:	009b      	lsls	r3, r3, #2
 801afa6:	4413      	add	r3, r2
 801afa8:	009b      	lsls	r3, r3, #2
 801afaa:	3310      	adds	r3, #16
 801afac:	687a      	ldr	r2, [r7, #4]
 801afae:	4413      	add	r3, r2
 801afb0:	3304      	adds	r3, #4
 801afb2:	e00b      	b.n	801afcc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801afb4:	7bbb      	ldrb	r3, [r7, #14]
 801afb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801afba:	4613      	mov	r3, r2
 801afbc:	009b      	lsls	r3, r3, #2
 801afbe:	4413      	add	r3, r2
 801afc0:	009b      	lsls	r3, r3, #2
 801afc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801afc6:	687a      	ldr	r2, [r7, #4]
 801afc8:	4413      	add	r3, r2
 801afca:	3304      	adds	r3, #4
 801afcc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801afce:	68bb      	ldr	r3, [r7, #8]
 801afd0:	2200      	movs	r2, #0
 801afd2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801afd4:	68bb      	ldr	r3, [r7, #8]
 801afd6:	2202      	movs	r2, #2
 801afd8:	4619      	mov	r1, r3
 801afda:	6878      	ldr	r0, [r7, #4]
 801afdc:	f000 fc1d 	bl	801b81a <USBD_CtlSendData>
              break;
 801afe0:	e06a      	b.n	801b0b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801afe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	da11      	bge.n	801b00e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801afea:	7bbb      	ldrb	r3, [r7, #14]
 801afec:	f003 020f 	and.w	r2, r3, #15
 801aff0:	6879      	ldr	r1, [r7, #4]
 801aff2:	4613      	mov	r3, r2
 801aff4:	009b      	lsls	r3, r3, #2
 801aff6:	4413      	add	r3, r2
 801aff8:	009b      	lsls	r3, r3, #2
 801affa:	440b      	add	r3, r1
 801affc:	3324      	adds	r3, #36	; 0x24
 801affe:	881b      	ldrh	r3, [r3, #0]
 801b000:	2b00      	cmp	r3, #0
 801b002:	d117      	bne.n	801b034 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801b004:	6839      	ldr	r1, [r7, #0]
 801b006:	6878      	ldr	r0, [r7, #4]
 801b008:	f000 fb96 	bl	801b738 <USBD_CtlError>
                  break;
 801b00c:	e054      	b.n	801b0b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b00e:	7bbb      	ldrb	r3, [r7, #14]
 801b010:	f003 020f 	and.w	r2, r3, #15
 801b014:	6879      	ldr	r1, [r7, #4]
 801b016:	4613      	mov	r3, r2
 801b018:	009b      	lsls	r3, r3, #2
 801b01a:	4413      	add	r3, r2
 801b01c:	009b      	lsls	r3, r3, #2
 801b01e:	440b      	add	r3, r1
 801b020:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b024:	881b      	ldrh	r3, [r3, #0]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d104      	bne.n	801b034 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801b02a:	6839      	ldr	r1, [r7, #0]
 801b02c:	6878      	ldr	r0, [r7, #4]
 801b02e:	f000 fb83 	bl	801b738 <USBD_CtlError>
                  break;
 801b032:	e041      	b.n	801b0b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	da0b      	bge.n	801b054 <USBD_StdEPReq+0x23e>
 801b03c:	7bbb      	ldrb	r3, [r7, #14]
 801b03e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b042:	4613      	mov	r3, r2
 801b044:	009b      	lsls	r3, r3, #2
 801b046:	4413      	add	r3, r2
 801b048:	009b      	lsls	r3, r3, #2
 801b04a:	3310      	adds	r3, #16
 801b04c:	687a      	ldr	r2, [r7, #4]
 801b04e:	4413      	add	r3, r2
 801b050:	3304      	adds	r3, #4
 801b052:	e00b      	b.n	801b06c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b054:	7bbb      	ldrb	r3, [r7, #14]
 801b056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b05a:	4613      	mov	r3, r2
 801b05c:	009b      	lsls	r3, r3, #2
 801b05e:	4413      	add	r3, r2
 801b060:	009b      	lsls	r3, r3, #2
 801b062:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801b066:	687a      	ldr	r2, [r7, #4]
 801b068:	4413      	add	r3, r2
 801b06a:	3304      	adds	r3, #4
 801b06c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b06e:	7bbb      	ldrb	r3, [r7, #14]
 801b070:	2b00      	cmp	r3, #0
 801b072:	d002      	beq.n	801b07a <USBD_StdEPReq+0x264>
 801b074:	7bbb      	ldrb	r3, [r7, #14]
 801b076:	2b80      	cmp	r3, #128	; 0x80
 801b078:	d103      	bne.n	801b082 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801b07a:	68bb      	ldr	r3, [r7, #8]
 801b07c:	2200      	movs	r2, #0
 801b07e:	601a      	str	r2, [r3, #0]
 801b080:	e00e      	b.n	801b0a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801b082:	7bbb      	ldrb	r3, [r7, #14]
 801b084:	4619      	mov	r1, r3
 801b086:	6878      	ldr	r0, [r7, #4]
 801b088:	f001 f8e6 	bl	801c258 <USBD_LL_IsStallEP>
 801b08c:	4603      	mov	r3, r0
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d003      	beq.n	801b09a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801b092:	68bb      	ldr	r3, [r7, #8]
 801b094:	2201      	movs	r2, #1
 801b096:	601a      	str	r2, [r3, #0]
 801b098:	e002      	b.n	801b0a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801b09a:	68bb      	ldr	r3, [r7, #8]
 801b09c:	2200      	movs	r2, #0
 801b09e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801b0a0:	68bb      	ldr	r3, [r7, #8]
 801b0a2:	2202      	movs	r2, #2
 801b0a4:	4619      	mov	r1, r3
 801b0a6:	6878      	ldr	r0, [r7, #4]
 801b0a8:	f000 fbb7 	bl	801b81a <USBD_CtlSendData>
              break;
 801b0ac:	e004      	b.n	801b0b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801b0ae:	6839      	ldr	r1, [r7, #0]
 801b0b0:	6878      	ldr	r0, [r7, #4]
 801b0b2:	f000 fb41 	bl	801b738 <USBD_CtlError>
              break;
 801b0b6:	bf00      	nop
          }
          break;
 801b0b8:	e004      	b.n	801b0c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801b0ba:	6839      	ldr	r1, [r7, #0]
 801b0bc:	6878      	ldr	r0, [r7, #4]
 801b0be:	f000 fb3b 	bl	801b738 <USBD_CtlError>
          break;
 801b0c2:	bf00      	nop
      }
      break;
 801b0c4:	e004      	b.n	801b0d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801b0c6:	6839      	ldr	r1, [r7, #0]
 801b0c8:	6878      	ldr	r0, [r7, #4]
 801b0ca:	f000 fb35 	bl	801b738 <USBD_CtlError>
      break;
 801b0ce:	bf00      	nop
  }

  return ret;
 801b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	3710      	adds	r7, #16
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	bd80      	pop	{r7, pc}
	...

0801b0dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b084      	sub	sp, #16
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	6078      	str	r0, [r7, #4]
 801b0e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801b0f2:	683b      	ldr	r3, [r7, #0]
 801b0f4:	885b      	ldrh	r3, [r3, #2]
 801b0f6:	0a1b      	lsrs	r3, r3, #8
 801b0f8:	b29b      	uxth	r3, r3
 801b0fa:	3b01      	subs	r3, #1
 801b0fc:	2b06      	cmp	r3, #6
 801b0fe:	f200 8128 	bhi.w	801b352 <USBD_GetDescriptor+0x276>
 801b102:	a201      	add	r2, pc, #4	; (adr r2, 801b108 <USBD_GetDescriptor+0x2c>)
 801b104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b108:	0801b125 	.word	0x0801b125
 801b10c:	0801b13d 	.word	0x0801b13d
 801b110:	0801b17d 	.word	0x0801b17d
 801b114:	0801b353 	.word	0x0801b353
 801b118:	0801b353 	.word	0x0801b353
 801b11c:	0801b2f3 	.word	0x0801b2f3
 801b120:	0801b31f 	.word	0x0801b31f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	687a      	ldr	r2, [r7, #4]
 801b12e:	7c12      	ldrb	r2, [r2, #16]
 801b130:	f107 0108 	add.w	r1, r7, #8
 801b134:	4610      	mov	r0, r2
 801b136:	4798      	blx	r3
 801b138:	60f8      	str	r0, [r7, #12]
      break;
 801b13a:	e112      	b.n	801b362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	7c1b      	ldrb	r3, [r3, #16]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d10d      	bne.n	801b160 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b14c:	f107 0208 	add.w	r2, r7, #8
 801b150:	4610      	mov	r0, r2
 801b152:	4798      	blx	r3
 801b154:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	3301      	adds	r3, #1
 801b15a:	2202      	movs	r2, #2
 801b15c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b15e:	e100      	b.n	801b362 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b168:	f107 0208 	add.w	r2, r7, #8
 801b16c:	4610      	mov	r0, r2
 801b16e:	4798      	blx	r3
 801b170:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	3301      	adds	r3, #1
 801b176:	2202      	movs	r2, #2
 801b178:	701a      	strb	r2, [r3, #0]
      break;
 801b17a:	e0f2      	b.n	801b362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b17c:	683b      	ldr	r3, [r7, #0]
 801b17e:	885b      	ldrh	r3, [r3, #2]
 801b180:	b2db      	uxtb	r3, r3
 801b182:	2b05      	cmp	r3, #5
 801b184:	f200 80ac 	bhi.w	801b2e0 <USBD_GetDescriptor+0x204>
 801b188:	a201      	add	r2, pc, #4	; (adr r2, 801b190 <USBD_GetDescriptor+0xb4>)
 801b18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b18e:	bf00      	nop
 801b190:	0801b1a9 	.word	0x0801b1a9
 801b194:	0801b1dd 	.word	0x0801b1dd
 801b198:	0801b211 	.word	0x0801b211
 801b19c:	0801b245 	.word	0x0801b245
 801b1a0:	0801b279 	.word	0x0801b279
 801b1a4:	0801b2ad 	.word	0x0801b2ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b1ae:	685b      	ldr	r3, [r3, #4]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d00b      	beq.n	801b1cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b1ba:	685b      	ldr	r3, [r3, #4]
 801b1bc:	687a      	ldr	r2, [r7, #4]
 801b1be:	7c12      	ldrb	r2, [r2, #16]
 801b1c0:	f107 0108 	add.w	r1, r7, #8
 801b1c4:	4610      	mov	r0, r2
 801b1c6:	4798      	blx	r3
 801b1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b1ca:	e091      	b.n	801b2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801b1cc:	6839      	ldr	r1, [r7, #0]
 801b1ce:	6878      	ldr	r0, [r7, #4]
 801b1d0:	f000 fab2 	bl	801b738 <USBD_CtlError>
            err++;
 801b1d4:	7afb      	ldrb	r3, [r7, #11]
 801b1d6:	3301      	adds	r3, #1
 801b1d8:	72fb      	strb	r3, [r7, #11]
          break;
 801b1da:	e089      	b.n	801b2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b1e2:	689b      	ldr	r3, [r3, #8]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d00b      	beq.n	801b200 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b1ee:	689b      	ldr	r3, [r3, #8]
 801b1f0:	687a      	ldr	r2, [r7, #4]
 801b1f2:	7c12      	ldrb	r2, [r2, #16]
 801b1f4:	f107 0108 	add.w	r1, r7, #8
 801b1f8:	4610      	mov	r0, r2
 801b1fa:	4798      	blx	r3
 801b1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b1fe:	e077      	b.n	801b2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801b200:	6839      	ldr	r1, [r7, #0]
 801b202:	6878      	ldr	r0, [r7, #4]
 801b204:	f000 fa98 	bl	801b738 <USBD_CtlError>
            err++;
 801b208:	7afb      	ldrb	r3, [r7, #11]
 801b20a:	3301      	adds	r3, #1
 801b20c:	72fb      	strb	r3, [r7, #11]
          break;
 801b20e:	e06f      	b.n	801b2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b216:	68db      	ldr	r3, [r3, #12]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d00b      	beq.n	801b234 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b222:	68db      	ldr	r3, [r3, #12]
 801b224:	687a      	ldr	r2, [r7, #4]
 801b226:	7c12      	ldrb	r2, [r2, #16]
 801b228:	f107 0108 	add.w	r1, r7, #8
 801b22c:	4610      	mov	r0, r2
 801b22e:	4798      	blx	r3
 801b230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b232:	e05d      	b.n	801b2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801b234:	6839      	ldr	r1, [r7, #0]
 801b236:	6878      	ldr	r0, [r7, #4]
 801b238:	f000 fa7e 	bl	801b738 <USBD_CtlError>
            err++;
 801b23c:	7afb      	ldrb	r3, [r7, #11]
 801b23e:	3301      	adds	r3, #1
 801b240:	72fb      	strb	r3, [r7, #11]
          break;
 801b242:	e055      	b.n	801b2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b24a:	691b      	ldr	r3, [r3, #16]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d00b      	beq.n	801b268 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b256:	691b      	ldr	r3, [r3, #16]
 801b258:	687a      	ldr	r2, [r7, #4]
 801b25a:	7c12      	ldrb	r2, [r2, #16]
 801b25c:	f107 0108 	add.w	r1, r7, #8
 801b260:	4610      	mov	r0, r2
 801b262:	4798      	blx	r3
 801b264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b266:	e043      	b.n	801b2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801b268:	6839      	ldr	r1, [r7, #0]
 801b26a:	6878      	ldr	r0, [r7, #4]
 801b26c:	f000 fa64 	bl	801b738 <USBD_CtlError>
            err++;
 801b270:	7afb      	ldrb	r3, [r7, #11]
 801b272:	3301      	adds	r3, #1
 801b274:	72fb      	strb	r3, [r7, #11]
          break;
 801b276:	e03b      	b.n	801b2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b27e:	695b      	ldr	r3, [r3, #20]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d00b      	beq.n	801b29c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b28a:	695b      	ldr	r3, [r3, #20]
 801b28c:	687a      	ldr	r2, [r7, #4]
 801b28e:	7c12      	ldrb	r2, [r2, #16]
 801b290:	f107 0108 	add.w	r1, r7, #8
 801b294:	4610      	mov	r0, r2
 801b296:	4798      	blx	r3
 801b298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b29a:	e029      	b.n	801b2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801b29c:	6839      	ldr	r1, [r7, #0]
 801b29e:	6878      	ldr	r0, [r7, #4]
 801b2a0:	f000 fa4a 	bl	801b738 <USBD_CtlError>
            err++;
 801b2a4:	7afb      	ldrb	r3, [r7, #11]
 801b2a6:	3301      	adds	r3, #1
 801b2a8:	72fb      	strb	r3, [r7, #11]
          break;
 801b2aa:	e021      	b.n	801b2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b2b2:	699b      	ldr	r3, [r3, #24]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d00b      	beq.n	801b2d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b2be:	699b      	ldr	r3, [r3, #24]
 801b2c0:	687a      	ldr	r2, [r7, #4]
 801b2c2:	7c12      	ldrb	r2, [r2, #16]
 801b2c4:	f107 0108 	add.w	r1, r7, #8
 801b2c8:	4610      	mov	r0, r2
 801b2ca:	4798      	blx	r3
 801b2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b2ce:	e00f      	b.n	801b2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801b2d0:	6839      	ldr	r1, [r7, #0]
 801b2d2:	6878      	ldr	r0, [r7, #4]
 801b2d4:	f000 fa30 	bl	801b738 <USBD_CtlError>
            err++;
 801b2d8:	7afb      	ldrb	r3, [r7, #11]
 801b2da:	3301      	adds	r3, #1
 801b2dc:	72fb      	strb	r3, [r7, #11]
          break;
 801b2de:	e007      	b.n	801b2f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801b2e0:	6839      	ldr	r1, [r7, #0]
 801b2e2:	6878      	ldr	r0, [r7, #4]
 801b2e4:	f000 fa28 	bl	801b738 <USBD_CtlError>
          err++;
 801b2e8:	7afb      	ldrb	r3, [r7, #11]
 801b2ea:	3301      	adds	r3, #1
 801b2ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801b2ee:	bf00      	nop
      }
      break;
 801b2f0:	e037      	b.n	801b362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	7c1b      	ldrb	r3, [r3, #16]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d109      	bne.n	801b30e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b302:	f107 0208 	add.w	r2, r7, #8
 801b306:	4610      	mov	r0, r2
 801b308:	4798      	blx	r3
 801b30a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b30c:	e029      	b.n	801b362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801b30e:	6839      	ldr	r1, [r7, #0]
 801b310:	6878      	ldr	r0, [r7, #4]
 801b312:	f000 fa11 	bl	801b738 <USBD_CtlError>
        err++;
 801b316:	7afb      	ldrb	r3, [r7, #11]
 801b318:	3301      	adds	r3, #1
 801b31a:	72fb      	strb	r3, [r7, #11]
      break;
 801b31c:	e021      	b.n	801b362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	7c1b      	ldrb	r3, [r3, #16]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d10d      	bne.n	801b342 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b32e:	f107 0208 	add.w	r2, r7, #8
 801b332:	4610      	mov	r0, r2
 801b334:	4798      	blx	r3
 801b336:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	3301      	adds	r3, #1
 801b33c:	2207      	movs	r2, #7
 801b33e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b340:	e00f      	b.n	801b362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801b342:	6839      	ldr	r1, [r7, #0]
 801b344:	6878      	ldr	r0, [r7, #4]
 801b346:	f000 f9f7 	bl	801b738 <USBD_CtlError>
        err++;
 801b34a:	7afb      	ldrb	r3, [r7, #11]
 801b34c:	3301      	adds	r3, #1
 801b34e:	72fb      	strb	r3, [r7, #11]
      break;
 801b350:	e007      	b.n	801b362 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801b352:	6839      	ldr	r1, [r7, #0]
 801b354:	6878      	ldr	r0, [r7, #4]
 801b356:	f000 f9ef 	bl	801b738 <USBD_CtlError>
      err++;
 801b35a:	7afb      	ldrb	r3, [r7, #11]
 801b35c:	3301      	adds	r3, #1
 801b35e:	72fb      	strb	r3, [r7, #11]
      break;
 801b360:	bf00      	nop
  }

  if (err != 0U)
 801b362:	7afb      	ldrb	r3, [r7, #11]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d11e      	bne.n	801b3a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801b368:	683b      	ldr	r3, [r7, #0]
 801b36a:	88db      	ldrh	r3, [r3, #6]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d016      	beq.n	801b39e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801b370:	893b      	ldrh	r3, [r7, #8]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d00e      	beq.n	801b394 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	88da      	ldrh	r2, [r3, #6]
 801b37a:	893b      	ldrh	r3, [r7, #8]
 801b37c:	4293      	cmp	r3, r2
 801b37e:	bf28      	it	cs
 801b380:	4613      	movcs	r3, r2
 801b382:	b29b      	uxth	r3, r3
 801b384:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801b386:	893b      	ldrh	r3, [r7, #8]
 801b388:	461a      	mov	r2, r3
 801b38a:	68f9      	ldr	r1, [r7, #12]
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	f000 fa44 	bl	801b81a <USBD_CtlSendData>
 801b392:	e009      	b.n	801b3a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801b394:	6839      	ldr	r1, [r7, #0]
 801b396:	6878      	ldr	r0, [r7, #4]
 801b398:	f000 f9ce 	bl	801b738 <USBD_CtlError>
 801b39c:	e004      	b.n	801b3a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801b39e:	6878      	ldr	r0, [r7, #4]
 801b3a0:	f000 fa95 	bl	801b8ce <USBD_CtlSendStatus>
 801b3a4:	e000      	b.n	801b3a8 <USBD_GetDescriptor+0x2cc>
    return;
 801b3a6:	bf00      	nop
  }
}
 801b3a8:	3710      	adds	r7, #16
 801b3aa:	46bd      	mov	sp, r7
 801b3ac:	bd80      	pop	{r7, pc}
 801b3ae:	bf00      	nop

0801b3b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b084      	sub	sp, #16
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]
 801b3b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801b3ba:	683b      	ldr	r3, [r7, #0]
 801b3bc:	889b      	ldrh	r3, [r3, #4]
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d131      	bne.n	801b426 <USBD_SetAddress+0x76>
 801b3c2:	683b      	ldr	r3, [r7, #0]
 801b3c4:	88db      	ldrh	r3, [r3, #6]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d12d      	bne.n	801b426 <USBD_SetAddress+0x76>
 801b3ca:	683b      	ldr	r3, [r7, #0]
 801b3cc:	885b      	ldrh	r3, [r3, #2]
 801b3ce:	2b7f      	cmp	r3, #127	; 0x7f
 801b3d0:	d829      	bhi.n	801b426 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801b3d2:	683b      	ldr	r3, [r7, #0]
 801b3d4:	885b      	ldrh	r3, [r3, #2]
 801b3d6:	b2db      	uxtb	r3, r3
 801b3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b3dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b3e4:	b2db      	uxtb	r3, r3
 801b3e6:	2b03      	cmp	r3, #3
 801b3e8:	d104      	bne.n	801b3f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801b3ea:	6839      	ldr	r1, [r7, #0]
 801b3ec:	6878      	ldr	r0, [r7, #4]
 801b3ee:	f000 f9a3 	bl	801b738 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b3f2:	e01d      	b.n	801b430 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	7bfa      	ldrb	r2, [r7, #15]
 801b3f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801b3fc:	7bfb      	ldrb	r3, [r7, #15]
 801b3fe:	4619      	mov	r1, r3
 801b400:	6878      	ldr	r0, [r7, #4]
 801b402:	f000 ff55 	bl	801c2b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801b406:	6878      	ldr	r0, [r7, #4]
 801b408:	f000 fa61 	bl	801b8ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801b40c:	7bfb      	ldrb	r3, [r7, #15]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d004      	beq.n	801b41c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	2202      	movs	r2, #2
 801b416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b41a:	e009      	b.n	801b430 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	2201      	movs	r2, #1
 801b420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b424:	e004      	b.n	801b430 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801b426:	6839      	ldr	r1, [r7, #0]
 801b428:	6878      	ldr	r0, [r7, #4]
 801b42a:	f000 f985 	bl	801b738 <USBD_CtlError>
  }
}
 801b42e:	bf00      	nop
 801b430:	bf00      	nop
 801b432:	3710      	adds	r7, #16
 801b434:	46bd      	mov	sp, r7
 801b436:	bd80      	pop	{r7, pc}

0801b438 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b084      	sub	sp, #16
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
 801b440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b442:	2300      	movs	r3, #0
 801b444:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801b446:	683b      	ldr	r3, [r7, #0]
 801b448:	885b      	ldrh	r3, [r3, #2]
 801b44a:	b2da      	uxtb	r2, r3
 801b44c:	4b4c      	ldr	r3, [pc, #304]	; (801b580 <USBD_SetConfig+0x148>)
 801b44e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801b450:	4b4b      	ldr	r3, [pc, #300]	; (801b580 <USBD_SetConfig+0x148>)
 801b452:	781b      	ldrb	r3, [r3, #0]
 801b454:	2b01      	cmp	r3, #1
 801b456:	d905      	bls.n	801b464 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801b458:	6839      	ldr	r1, [r7, #0]
 801b45a:	6878      	ldr	r0, [r7, #4]
 801b45c:	f000 f96c 	bl	801b738 <USBD_CtlError>
    return USBD_FAIL;
 801b460:	2303      	movs	r3, #3
 801b462:	e088      	b.n	801b576 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b46a:	b2db      	uxtb	r3, r3
 801b46c:	2b02      	cmp	r3, #2
 801b46e:	d002      	beq.n	801b476 <USBD_SetConfig+0x3e>
 801b470:	2b03      	cmp	r3, #3
 801b472:	d025      	beq.n	801b4c0 <USBD_SetConfig+0x88>
 801b474:	e071      	b.n	801b55a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801b476:	4b42      	ldr	r3, [pc, #264]	; (801b580 <USBD_SetConfig+0x148>)
 801b478:	781b      	ldrb	r3, [r3, #0]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d01c      	beq.n	801b4b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801b47e:	4b40      	ldr	r3, [pc, #256]	; (801b580 <USBD_SetConfig+0x148>)
 801b480:	781b      	ldrb	r3, [r3, #0]
 801b482:	461a      	mov	r2, r3
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801b488:	4b3d      	ldr	r3, [pc, #244]	; (801b580 <USBD_SetConfig+0x148>)
 801b48a:	781b      	ldrb	r3, [r3, #0]
 801b48c:	4619      	mov	r1, r3
 801b48e:	6878      	ldr	r0, [r7, #4]
 801b490:	f7ff f948 	bl	801a724 <USBD_SetClassConfig>
 801b494:	4603      	mov	r3, r0
 801b496:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801b498:	7bfb      	ldrb	r3, [r7, #15]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d004      	beq.n	801b4a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801b49e:	6839      	ldr	r1, [r7, #0]
 801b4a0:	6878      	ldr	r0, [r7, #4]
 801b4a2:	f000 f949 	bl	801b738 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801b4a6:	e065      	b.n	801b574 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801b4a8:	6878      	ldr	r0, [r7, #4]
 801b4aa:	f000 fa10 	bl	801b8ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	2203      	movs	r2, #3
 801b4b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801b4b6:	e05d      	b.n	801b574 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801b4b8:	6878      	ldr	r0, [r7, #4]
 801b4ba:	f000 fa08 	bl	801b8ce <USBD_CtlSendStatus>
      break;
 801b4be:	e059      	b.n	801b574 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801b4c0:	4b2f      	ldr	r3, [pc, #188]	; (801b580 <USBD_SetConfig+0x148>)
 801b4c2:	781b      	ldrb	r3, [r3, #0]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d112      	bne.n	801b4ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	2202      	movs	r2, #2
 801b4cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801b4d0:	4b2b      	ldr	r3, [pc, #172]	; (801b580 <USBD_SetConfig+0x148>)
 801b4d2:	781b      	ldrb	r3, [r3, #0]
 801b4d4:	461a      	mov	r2, r3
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801b4da:	4b29      	ldr	r3, [pc, #164]	; (801b580 <USBD_SetConfig+0x148>)
 801b4dc:	781b      	ldrb	r3, [r3, #0]
 801b4de:	4619      	mov	r1, r3
 801b4e0:	6878      	ldr	r0, [r7, #4]
 801b4e2:	f7ff f93b 	bl	801a75c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801b4e6:	6878      	ldr	r0, [r7, #4]
 801b4e8:	f000 f9f1 	bl	801b8ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801b4ec:	e042      	b.n	801b574 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801b4ee:	4b24      	ldr	r3, [pc, #144]	; (801b580 <USBD_SetConfig+0x148>)
 801b4f0:	781b      	ldrb	r3, [r3, #0]
 801b4f2:	461a      	mov	r2, r3
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	685b      	ldr	r3, [r3, #4]
 801b4f8:	429a      	cmp	r2, r3
 801b4fa:	d02a      	beq.n	801b552 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	685b      	ldr	r3, [r3, #4]
 801b500:	b2db      	uxtb	r3, r3
 801b502:	4619      	mov	r1, r3
 801b504:	6878      	ldr	r0, [r7, #4]
 801b506:	f7ff f929 	bl	801a75c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801b50a:	4b1d      	ldr	r3, [pc, #116]	; (801b580 <USBD_SetConfig+0x148>)
 801b50c:	781b      	ldrb	r3, [r3, #0]
 801b50e:	461a      	mov	r2, r3
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801b514:	4b1a      	ldr	r3, [pc, #104]	; (801b580 <USBD_SetConfig+0x148>)
 801b516:	781b      	ldrb	r3, [r3, #0]
 801b518:	4619      	mov	r1, r3
 801b51a:	6878      	ldr	r0, [r7, #4]
 801b51c:	f7ff f902 	bl	801a724 <USBD_SetClassConfig>
 801b520:	4603      	mov	r3, r0
 801b522:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801b524:	7bfb      	ldrb	r3, [r7, #15]
 801b526:	2b00      	cmp	r3, #0
 801b528:	d00f      	beq.n	801b54a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801b52a:	6839      	ldr	r1, [r7, #0]
 801b52c:	6878      	ldr	r0, [r7, #4]
 801b52e:	f000 f903 	bl	801b738 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	685b      	ldr	r3, [r3, #4]
 801b536:	b2db      	uxtb	r3, r3
 801b538:	4619      	mov	r1, r3
 801b53a:	6878      	ldr	r0, [r7, #4]
 801b53c:	f7ff f90e 	bl	801a75c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	2202      	movs	r2, #2
 801b544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801b548:	e014      	b.n	801b574 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801b54a:	6878      	ldr	r0, [r7, #4]
 801b54c:	f000 f9bf 	bl	801b8ce <USBD_CtlSendStatus>
      break;
 801b550:	e010      	b.n	801b574 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801b552:	6878      	ldr	r0, [r7, #4]
 801b554:	f000 f9bb 	bl	801b8ce <USBD_CtlSendStatus>
      break;
 801b558:	e00c      	b.n	801b574 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801b55a:	6839      	ldr	r1, [r7, #0]
 801b55c:	6878      	ldr	r0, [r7, #4]
 801b55e:	f000 f8eb 	bl	801b738 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801b562:	4b07      	ldr	r3, [pc, #28]	; (801b580 <USBD_SetConfig+0x148>)
 801b564:	781b      	ldrb	r3, [r3, #0]
 801b566:	4619      	mov	r1, r3
 801b568:	6878      	ldr	r0, [r7, #4]
 801b56a:	f7ff f8f7 	bl	801a75c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801b56e:	2303      	movs	r3, #3
 801b570:	73fb      	strb	r3, [r7, #15]
      break;
 801b572:	bf00      	nop
  }

  return ret;
 801b574:	7bfb      	ldrb	r3, [r7, #15]
}
 801b576:	4618      	mov	r0, r3
 801b578:	3710      	adds	r7, #16
 801b57a:	46bd      	mov	sp, r7
 801b57c:	bd80      	pop	{r7, pc}
 801b57e:	bf00      	nop
 801b580:	24033230 	.word	0x24033230

0801b584 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	b082      	sub	sp, #8
 801b588:	af00      	add	r7, sp, #0
 801b58a:	6078      	str	r0, [r7, #4]
 801b58c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801b58e:	683b      	ldr	r3, [r7, #0]
 801b590:	88db      	ldrh	r3, [r3, #6]
 801b592:	2b01      	cmp	r3, #1
 801b594:	d004      	beq.n	801b5a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801b596:	6839      	ldr	r1, [r7, #0]
 801b598:	6878      	ldr	r0, [r7, #4]
 801b59a:	f000 f8cd 	bl	801b738 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801b59e:	e023      	b.n	801b5e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b5a6:	b2db      	uxtb	r3, r3
 801b5a8:	2b02      	cmp	r3, #2
 801b5aa:	dc02      	bgt.n	801b5b2 <USBD_GetConfig+0x2e>
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	dc03      	bgt.n	801b5b8 <USBD_GetConfig+0x34>
 801b5b0:	e015      	b.n	801b5de <USBD_GetConfig+0x5a>
 801b5b2:	2b03      	cmp	r3, #3
 801b5b4:	d00b      	beq.n	801b5ce <USBD_GetConfig+0x4a>
 801b5b6:	e012      	b.n	801b5de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	2200      	movs	r2, #0
 801b5bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	3308      	adds	r3, #8
 801b5c2:	2201      	movs	r2, #1
 801b5c4:	4619      	mov	r1, r3
 801b5c6:	6878      	ldr	r0, [r7, #4]
 801b5c8:	f000 f927 	bl	801b81a <USBD_CtlSendData>
        break;
 801b5cc:	e00c      	b.n	801b5e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	3304      	adds	r3, #4
 801b5d2:	2201      	movs	r2, #1
 801b5d4:	4619      	mov	r1, r3
 801b5d6:	6878      	ldr	r0, [r7, #4]
 801b5d8:	f000 f91f 	bl	801b81a <USBD_CtlSendData>
        break;
 801b5dc:	e004      	b.n	801b5e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801b5de:	6839      	ldr	r1, [r7, #0]
 801b5e0:	6878      	ldr	r0, [r7, #4]
 801b5e2:	f000 f8a9 	bl	801b738 <USBD_CtlError>
        break;
 801b5e6:	bf00      	nop
}
 801b5e8:	bf00      	nop
 801b5ea:	3708      	adds	r7, #8
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bd80      	pop	{r7, pc}

0801b5f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b082      	sub	sp, #8
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
 801b5f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b600:	b2db      	uxtb	r3, r3
 801b602:	3b01      	subs	r3, #1
 801b604:	2b02      	cmp	r3, #2
 801b606:	d81e      	bhi.n	801b646 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801b608:	683b      	ldr	r3, [r7, #0]
 801b60a:	88db      	ldrh	r3, [r3, #6]
 801b60c:	2b02      	cmp	r3, #2
 801b60e:	d004      	beq.n	801b61a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801b610:	6839      	ldr	r1, [r7, #0]
 801b612:	6878      	ldr	r0, [r7, #4]
 801b614:	f000 f890 	bl	801b738 <USBD_CtlError>
        break;
 801b618:	e01a      	b.n	801b650 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	2201      	movs	r2, #1
 801b61e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801b626:	2b00      	cmp	r3, #0
 801b628:	d005      	beq.n	801b636 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	68db      	ldr	r3, [r3, #12]
 801b62e:	f043 0202 	orr.w	r2, r3, #2
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	330c      	adds	r3, #12
 801b63a:	2202      	movs	r2, #2
 801b63c:	4619      	mov	r1, r3
 801b63e:	6878      	ldr	r0, [r7, #4]
 801b640:	f000 f8eb 	bl	801b81a <USBD_CtlSendData>
      break;
 801b644:	e004      	b.n	801b650 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801b646:	6839      	ldr	r1, [r7, #0]
 801b648:	6878      	ldr	r0, [r7, #4]
 801b64a:	f000 f875 	bl	801b738 <USBD_CtlError>
      break;
 801b64e:	bf00      	nop
  }
}
 801b650:	bf00      	nop
 801b652:	3708      	adds	r7, #8
 801b654:	46bd      	mov	sp, r7
 801b656:	bd80      	pop	{r7, pc}

0801b658 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b658:	b580      	push	{r7, lr}
 801b65a:	b082      	sub	sp, #8
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	6078      	str	r0, [r7, #4]
 801b660:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b662:	683b      	ldr	r3, [r7, #0]
 801b664:	885b      	ldrh	r3, [r3, #2]
 801b666:	2b01      	cmp	r3, #1
 801b668:	d106      	bne.n	801b678 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	2201      	movs	r2, #1
 801b66e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801b672:	6878      	ldr	r0, [r7, #4]
 801b674:	f000 f92b 	bl	801b8ce <USBD_CtlSendStatus>
  }
}
 801b678:	bf00      	nop
 801b67a:	3708      	adds	r7, #8
 801b67c:	46bd      	mov	sp, r7
 801b67e:	bd80      	pop	{r7, pc}

0801b680 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b680:	b580      	push	{r7, lr}
 801b682:	b082      	sub	sp, #8
 801b684:	af00      	add	r7, sp, #0
 801b686:	6078      	str	r0, [r7, #4]
 801b688:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b690:	b2db      	uxtb	r3, r3
 801b692:	3b01      	subs	r3, #1
 801b694:	2b02      	cmp	r3, #2
 801b696:	d80b      	bhi.n	801b6b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	885b      	ldrh	r3, [r3, #2]
 801b69c:	2b01      	cmp	r3, #1
 801b69e:	d10c      	bne.n	801b6ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801b6a8:	6878      	ldr	r0, [r7, #4]
 801b6aa:	f000 f910 	bl	801b8ce <USBD_CtlSendStatus>
      }
      break;
 801b6ae:	e004      	b.n	801b6ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801b6b0:	6839      	ldr	r1, [r7, #0]
 801b6b2:	6878      	ldr	r0, [r7, #4]
 801b6b4:	f000 f840 	bl	801b738 <USBD_CtlError>
      break;
 801b6b8:	e000      	b.n	801b6bc <USBD_ClrFeature+0x3c>
      break;
 801b6ba:	bf00      	nop
  }
}
 801b6bc:	bf00      	nop
 801b6be:	3708      	adds	r7, #8
 801b6c0:	46bd      	mov	sp, r7
 801b6c2:	bd80      	pop	{r7, pc}

0801b6c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b084      	sub	sp, #16
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
 801b6cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801b6d2:	68fb      	ldr	r3, [r7, #12]
 801b6d4:	781a      	ldrb	r2, [r3, #0]
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	3301      	adds	r3, #1
 801b6de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	781a      	ldrb	r2, [r3, #0]
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	3301      	adds	r3, #1
 801b6ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801b6ee:	68f8      	ldr	r0, [r7, #12]
 801b6f0:	f7ff fabb 	bl	801ac6a <SWAPBYTE>
 801b6f4:	4603      	mov	r3, r0
 801b6f6:	461a      	mov	r2, r3
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	3301      	adds	r3, #1
 801b700:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	3301      	adds	r3, #1
 801b706:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801b708:	68f8      	ldr	r0, [r7, #12]
 801b70a:	f7ff faae 	bl	801ac6a <SWAPBYTE>
 801b70e:	4603      	mov	r3, r0
 801b710:	461a      	mov	r2, r3
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	3301      	adds	r3, #1
 801b71a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	3301      	adds	r3, #1
 801b720:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801b722:	68f8      	ldr	r0, [r7, #12]
 801b724:	f7ff faa1 	bl	801ac6a <SWAPBYTE>
 801b728:	4603      	mov	r3, r0
 801b72a:	461a      	mov	r2, r3
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	80da      	strh	r2, [r3, #6]
}
 801b730:	bf00      	nop
 801b732:	3710      	adds	r7, #16
 801b734:	46bd      	mov	sp, r7
 801b736:	bd80      	pop	{r7, pc}

0801b738 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b082      	sub	sp, #8
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
 801b740:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801b742:	2180      	movs	r1, #128	; 0x80
 801b744:	6878      	ldr	r0, [r7, #4]
 801b746:	f000 fd49 	bl	801c1dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801b74a:	2100      	movs	r1, #0
 801b74c:	6878      	ldr	r0, [r7, #4]
 801b74e:	f000 fd45 	bl	801c1dc <USBD_LL_StallEP>
}
 801b752:	bf00      	nop
 801b754:	3708      	adds	r7, #8
 801b756:	46bd      	mov	sp, r7
 801b758:	bd80      	pop	{r7, pc}

0801b75a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801b75a:	b580      	push	{r7, lr}
 801b75c:	b086      	sub	sp, #24
 801b75e:	af00      	add	r7, sp, #0
 801b760:	60f8      	str	r0, [r7, #12]
 801b762:	60b9      	str	r1, [r7, #8]
 801b764:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801b766:	2300      	movs	r3, #0
 801b768:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d036      	beq.n	801b7de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801b774:	6938      	ldr	r0, [r7, #16]
 801b776:	f000 f836 	bl	801b7e6 <USBD_GetLen>
 801b77a:	4603      	mov	r3, r0
 801b77c:	3301      	adds	r3, #1
 801b77e:	b29b      	uxth	r3, r3
 801b780:	005b      	lsls	r3, r3, #1
 801b782:	b29a      	uxth	r2, r3
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801b788:	7dfb      	ldrb	r3, [r7, #23]
 801b78a:	68ba      	ldr	r2, [r7, #8]
 801b78c:	4413      	add	r3, r2
 801b78e:	687a      	ldr	r2, [r7, #4]
 801b790:	7812      	ldrb	r2, [r2, #0]
 801b792:	701a      	strb	r2, [r3, #0]
  idx++;
 801b794:	7dfb      	ldrb	r3, [r7, #23]
 801b796:	3301      	adds	r3, #1
 801b798:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801b79a:	7dfb      	ldrb	r3, [r7, #23]
 801b79c:	68ba      	ldr	r2, [r7, #8]
 801b79e:	4413      	add	r3, r2
 801b7a0:	2203      	movs	r2, #3
 801b7a2:	701a      	strb	r2, [r3, #0]
  idx++;
 801b7a4:	7dfb      	ldrb	r3, [r7, #23]
 801b7a6:	3301      	adds	r3, #1
 801b7a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801b7aa:	e013      	b.n	801b7d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801b7ac:	7dfb      	ldrb	r3, [r7, #23]
 801b7ae:	68ba      	ldr	r2, [r7, #8]
 801b7b0:	4413      	add	r3, r2
 801b7b2:	693a      	ldr	r2, [r7, #16]
 801b7b4:	7812      	ldrb	r2, [r2, #0]
 801b7b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801b7b8:	693b      	ldr	r3, [r7, #16]
 801b7ba:	3301      	adds	r3, #1
 801b7bc:	613b      	str	r3, [r7, #16]
    idx++;
 801b7be:	7dfb      	ldrb	r3, [r7, #23]
 801b7c0:	3301      	adds	r3, #1
 801b7c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801b7c4:	7dfb      	ldrb	r3, [r7, #23]
 801b7c6:	68ba      	ldr	r2, [r7, #8]
 801b7c8:	4413      	add	r3, r2
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	701a      	strb	r2, [r3, #0]
    idx++;
 801b7ce:	7dfb      	ldrb	r3, [r7, #23]
 801b7d0:	3301      	adds	r3, #1
 801b7d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801b7d4:	693b      	ldr	r3, [r7, #16]
 801b7d6:	781b      	ldrb	r3, [r3, #0]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d1e7      	bne.n	801b7ac <USBD_GetString+0x52>
 801b7dc:	e000      	b.n	801b7e0 <USBD_GetString+0x86>
    return;
 801b7de:	bf00      	nop
  }
}
 801b7e0:	3718      	adds	r7, #24
 801b7e2:	46bd      	mov	sp, r7
 801b7e4:	bd80      	pop	{r7, pc}

0801b7e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801b7e6:	b480      	push	{r7}
 801b7e8:	b085      	sub	sp, #20
 801b7ea:	af00      	add	r7, sp, #0
 801b7ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801b7f6:	e005      	b.n	801b804 <USBD_GetLen+0x1e>
  {
    len++;
 801b7f8:	7bfb      	ldrb	r3, [r7, #15]
 801b7fa:	3301      	adds	r3, #1
 801b7fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801b7fe:	68bb      	ldr	r3, [r7, #8]
 801b800:	3301      	adds	r3, #1
 801b802:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801b804:	68bb      	ldr	r3, [r7, #8]
 801b806:	781b      	ldrb	r3, [r3, #0]
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d1f5      	bne.n	801b7f8 <USBD_GetLen+0x12>
  }

  return len;
 801b80c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b80e:	4618      	mov	r0, r3
 801b810:	3714      	adds	r7, #20
 801b812:	46bd      	mov	sp, r7
 801b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b818:	4770      	bx	lr

0801b81a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801b81a:	b580      	push	{r7, lr}
 801b81c:	b084      	sub	sp, #16
 801b81e:	af00      	add	r7, sp, #0
 801b820:	60f8      	str	r0, [r7, #12]
 801b822:	60b9      	str	r1, [r7, #8]
 801b824:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	2202      	movs	r2, #2
 801b82a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	687a      	ldr	r2, [r7, #4]
 801b832:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	687a      	ldr	r2, [r7, #4]
 801b838:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	68ba      	ldr	r2, [r7, #8]
 801b83e:	2100      	movs	r1, #0
 801b840:	68f8      	ldr	r0, [r7, #12]
 801b842:	f000 fd54 	bl	801c2ee <USBD_LL_Transmit>

  return USBD_OK;
 801b846:	2300      	movs	r3, #0
}
 801b848:	4618      	mov	r0, r3
 801b84a:	3710      	adds	r7, #16
 801b84c:	46bd      	mov	sp, r7
 801b84e:	bd80      	pop	{r7, pc}

0801b850 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b850:	b580      	push	{r7, lr}
 801b852:	b084      	sub	sp, #16
 801b854:	af00      	add	r7, sp, #0
 801b856:	60f8      	str	r0, [r7, #12]
 801b858:	60b9      	str	r1, [r7, #8]
 801b85a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	68ba      	ldr	r2, [r7, #8]
 801b860:	2100      	movs	r1, #0
 801b862:	68f8      	ldr	r0, [r7, #12]
 801b864:	f000 fd43 	bl	801c2ee <USBD_LL_Transmit>

  return USBD_OK;
 801b868:	2300      	movs	r3, #0
}
 801b86a:	4618      	mov	r0, r3
 801b86c:	3710      	adds	r7, #16
 801b86e:	46bd      	mov	sp, r7
 801b870:	bd80      	pop	{r7, pc}

0801b872 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b872:	b580      	push	{r7, lr}
 801b874:	b084      	sub	sp, #16
 801b876:	af00      	add	r7, sp, #0
 801b878:	60f8      	str	r0, [r7, #12]
 801b87a:	60b9      	str	r1, [r7, #8]
 801b87c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	2203      	movs	r2, #3
 801b882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	687a      	ldr	r2, [r7, #4]
 801b88a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	687a      	ldr	r2, [r7, #4]
 801b892:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	68ba      	ldr	r2, [r7, #8]
 801b89a:	2100      	movs	r1, #0
 801b89c:	68f8      	ldr	r0, [r7, #12]
 801b89e:	f000 fd47 	bl	801c330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b8a2:	2300      	movs	r3, #0
}
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	3710      	adds	r7, #16
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	bd80      	pop	{r7, pc}

0801b8ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b084      	sub	sp, #16
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	60f8      	str	r0, [r7, #12]
 801b8b4:	60b9      	str	r1, [r7, #8]
 801b8b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	68ba      	ldr	r2, [r7, #8]
 801b8bc:	2100      	movs	r1, #0
 801b8be:	68f8      	ldr	r0, [r7, #12]
 801b8c0:	f000 fd36 	bl	801c330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b8c4:	2300      	movs	r3, #0
}
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	3710      	adds	r7, #16
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	bd80      	pop	{r7, pc}

0801b8ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b8ce:	b580      	push	{r7, lr}
 801b8d0:	b082      	sub	sp, #8
 801b8d2:	af00      	add	r7, sp, #0
 801b8d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	2204      	movs	r2, #4
 801b8da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b8de:	2300      	movs	r3, #0
 801b8e0:	2200      	movs	r2, #0
 801b8e2:	2100      	movs	r1, #0
 801b8e4:	6878      	ldr	r0, [r7, #4]
 801b8e6:	f000 fd02 	bl	801c2ee <USBD_LL_Transmit>

  return USBD_OK;
 801b8ea:	2300      	movs	r3, #0
}
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	3708      	adds	r7, #8
 801b8f0:	46bd      	mov	sp, r7
 801b8f2:	bd80      	pop	{r7, pc}

0801b8f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b082      	sub	sp, #8
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	2205      	movs	r2, #5
 801b900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b904:	2300      	movs	r3, #0
 801b906:	2200      	movs	r2, #0
 801b908:	2100      	movs	r1, #0
 801b90a:	6878      	ldr	r0, [r7, #4]
 801b90c:	f000 fd10 	bl	801c330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b910:	2300      	movs	r3, #0
}
 801b912:	4618      	mov	r0, r3
 801b914:	3708      	adds	r7, #8
 801b916:	46bd      	mov	sp, r7
 801b918:	bd80      	pop	{r7, pc}
	...

0801b91c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b920:	2200      	movs	r2, #0
 801b922:	4913      	ldr	r1, [pc, #76]	; (801b970 <MX_USB_DEVICE_Init+0x54>)
 801b924:	4813      	ldr	r0, [pc, #76]	; (801b974 <MX_USB_DEVICE_Init+0x58>)
 801b926:	f7fe fe8f 	bl	801a648 <USBD_Init>
 801b92a:	4603      	mov	r3, r0
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d001      	beq.n	801b934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b930:	f7ef f9b8 	bl	800aca4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b934:	4910      	ldr	r1, [pc, #64]	; (801b978 <MX_USB_DEVICE_Init+0x5c>)
 801b936:	480f      	ldr	r0, [pc, #60]	; (801b974 <MX_USB_DEVICE_Init+0x58>)
 801b938:	f7fe feb6 	bl	801a6a8 <USBD_RegisterClass>
 801b93c:	4603      	mov	r3, r0
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d001      	beq.n	801b946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b942:	f7ef f9af 	bl	800aca4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b946:	490d      	ldr	r1, [pc, #52]	; (801b97c <MX_USB_DEVICE_Init+0x60>)
 801b948:	480a      	ldr	r0, [pc, #40]	; (801b974 <MX_USB_DEVICE_Init+0x58>)
 801b94a:	f7fe fdd7 	bl	801a4fc <USBD_CDC_RegisterInterface>
 801b94e:	4603      	mov	r3, r0
 801b950:	2b00      	cmp	r3, #0
 801b952:	d001      	beq.n	801b958 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b954:	f7ef f9a6 	bl	800aca4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b958:	4806      	ldr	r0, [pc, #24]	; (801b974 <MX_USB_DEVICE_Init+0x58>)
 801b95a:	f7fe fecc 	bl	801a6f6 <USBD_Start>
 801b95e:	4603      	mov	r3, r0
 801b960:	2b00      	cmp	r3, #0
 801b962:	d001      	beq.n	801b968 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b964:	f7ef f99e 	bl	800aca4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801b968:	f7f4 fde0 	bl	801052c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b96c:	bf00      	nop
 801b96e:	bd80      	pop	{r7, pc}
 801b970:	2400817c 	.word	0x2400817c
 801b974:	24033234 	.word	0x24033234
 801b978:	24008064 	.word	0x24008064
 801b97c:	24008168 	.word	0x24008168

0801b980 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b980:	b580      	push	{r7, lr}
 801b982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b984:	2200      	movs	r2, #0
 801b986:	4905      	ldr	r1, [pc, #20]	; (801b99c <CDC_Init_FS+0x1c>)
 801b988:	4805      	ldr	r0, [pc, #20]	; (801b9a0 <CDC_Init_FS+0x20>)
 801b98a:	f7fe fdcc 	bl	801a526 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b98e:	4905      	ldr	r1, [pc, #20]	; (801b9a4 <CDC_Init_FS+0x24>)
 801b990:	4803      	ldr	r0, [pc, #12]	; (801b9a0 <CDC_Init_FS+0x20>)
 801b992:	f7fe fde6 	bl	801a562 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b996:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b998:	4618      	mov	r0, r3
 801b99a:	bd80      	pop	{r7, pc}
 801b99c:	24033d04 	.word	0x24033d04
 801b9a0:	24033234 	.word	0x24033234
 801b9a4:	24033504 	.word	0x24033504

0801b9a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b9a8:	b480      	push	{r7}
 801b9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b9ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b6:	4770      	bx	lr

0801b9b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b9b8:	b480      	push	{r7}
 801b9ba:	b083      	sub	sp, #12
 801b9bc:	af00      	add	r7, sp, #0
 801b9be:	4603      	mov	r3, r0
 801b9c0:	6039      	str	r1, [r7, #0]
 801b9c2:	71fb      	strb	r3, [r7, #7]
 801b9c4:	4613      	mov	r3, r2
 801b9c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b9c8:	79fb      	ldrb	r3, [r7, #7]
 801b9ca:	2b23      	cmp	r3, #35	; 0x23
 801b9cc:	d84a      	bhi.n	801ba64 <CDC_Control_FS+0xac>
 801b9ce:	a201      	add	r2, pc, #4	; (adr r2, 801b9d4 <CDC_Control_FS+0x1c>)
 801b9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9d4:	0801ba65 	.word	0x0801ba65
 801b9d8:	0801ba65 	.word	0x0801ba65
 801b9dc:	0801ba65 	.word	0x0801ba65
 801b9e0:	0801ba65 	.word	0x0801ba65
 801b9e4:	0801ba65 	.word	0x0801ba65
 801b9e8:	0801ba65 	.word	0x0801ba65
 801b9ec:	0801ba65 	.word	0x0801ba65
 801b9f0:	0801ba65 	.word	0x0801ba65
 801b9f4:	0801ba65 	.word	0x0801ba65
 801b9f8:	0801ba65 	.word	0x0801ba65
 801b9fc:	0801ba65 	.word	0x0801ba65
 801ba00:	0801ba65 	.word	0x0801ba65
 801ba04:	0801ba65 	.word	0x0801ba65
 801ba08:	0801ba65 	.word	0x0801ba65
 801ba0c:	0801ba65 	.word	0x0801ba65
 801ba10:	0801ba65 	.word	0x0801ba65
 801ba14:	0801ba65 	.word	0x0801ba65
 801ba18:	0801ba65 	.word	0x0801ba65
 801ba1c:	0801ba65 	.word	0x0801ba65
 801ba20:	0801ba65 	.word	0x0801ba65
 801ba24:	0801ba65 	.word	0x0801ba65
 801ba28:	0801ba65 	.word	0x0801ba65
 801ba2c:	0801ba65 	.word	0x0801ba65
 801ba30:	0801ba65 	.word	0x0801ba65
 801ba34:	0801ba65 	.word	0x0801ba65
 801ba38:	0801ba65 	.word	0x0801ba65
 801ba3c:	0801ba65 	.word	0x0801ba65
 801ba40:	0801ba65 	.word	0x0801ba65
 801ba44:	0801ba65 	.word	0x0801ba65
 801ba48:	0801ba65 	.word	0x0801ba65
 801ba4c:	0801ba65 	.word	0x0801ba65
 801ba50:	0801ba65 	.word	0x0801ba65
 801ba54:	0801ba65 	.word	0x0801ba65
 801ba58:	0801ba65 	.word	0x0801ba65
 801ba5c:	0801ba65 	.word	0x0801ba65
 801ba60:	0801ba65 	.word	0x0801ba65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ba64:	bf00      	nop
  }

  return (USBD_OK);
 801ba66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ba68:	4618      	mov	r0, r3
 801ba6a:	370c      	adds	r7, #12
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba72:	4770      	bx	lr

0801ba74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ba74:	b580      	push	{r7, lr}
 801ba76:	b082      	sub	sp, #8
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
 801ba7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

#if USARTHW ==0
  FuzzingInputHandler(Buf, Len);
 801ba7e:	6839      	ldr	r1, [r7, #0]
 801ba80:	6878      	ldr	r0, [r7, #4]
 801ba82:	f7ee fccd 	bl	800a420 <FuzzingInputHandler>
#endif

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ba86:	6879      	ldr	r1, [r7, #4]
 801ba88:	4805      	ldr	r0, [pc, #20]	; (801baa0 <CDC_Receive_FS+0x2c>)
 801ba8a:	f7fe fd6a 	bl	801a562 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ba8e:	4804      	ldr	r0, [pc, #16]	; (801baa0 <CDC_Receive_FS+0x2c>)
 801ba90:	f7fe fdb0 	bl	801a5f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801ba94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ba96:	4618      	mov	r0, r3
 801ba98:	3708      	adds	r7, #8
 801ba9a:	46bd      	mov	sp, r7
 801ba9c:	bd80      	pop	{r7, pc}
 801ba9e:	bf00      	nop
 801baa0:	24033234 	.word	0x24033234

0801baa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801baa4:	b580      	push	{r7, lr}
 801baa6:	b084      	sub	sp, #16
 801baa8:	af00      	add	r7, sp, #0
 801baaa:	6078      	str	r0, [r7, #4]
 801baac:	460b      	mov	r3, r1
 801baae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801bab0:	2300      	movs	r3, #0
 801bab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801bab4:	4b0d      	ldr	r3, [pc, #52]	; (801baec <CDC_Transmit_FS+0x48>)
 801bab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801baba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d001      	beq.n	801baca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801bac6:	2301      	movs	r3, #1
 801bac8:	e00b      	b.n	801bae2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801baca:	887b      	ldrh	r3, [r7, #2]
 801bacc:	461a      	mov	r2, r3
 801bace:	6879      	ldr	r1, [r7, #4]
 801bad0:	4806      	ldr	r0, [pc, #24]	; (801baec <CDC_Transmit_FS+0x48>)
 801bad2:	f7fe fd28 	bl	801a526 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801bad6:	4805      	ldr	r0, [pc, #20]	; (801baec <CDC_Transmit_FS+0x48>)
 801bad8:	f7fe fd5c 	bl	801a594 <USBD_CDC_TransmitPacket>
 801badc:	4603      	mov	r3, r0
 801bade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801bae0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bae2:	4618      	mov	r0, r3
 801bae4:	3710      	adds	r7, #16
 801bae6:	46bd      	mov	sp, r7
 801bae8:	bd80      	pop	{r7, pc}
 801baea:	bf00      	nop
 801baec:	24033234 	.word	0x24033234

0801baf0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801baf0:	b580      	push	{r7, lr}
 801baf2:	b08a      	sub	sp, #40	; 0x28
 801baf4:	af02      	add	r7, sp, #8
 801baf6:	60f8      	str	r0, [r7, #12]
 801baf8:	60b9      	str	r1, [r7, #8]
 801bafa:	4613      	mov	r3, r2
 801bafc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801bafe:	2300      	movs	r3, #0
 801bb00:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  BaseType_t xHigherPriorityTaskWoken;
  xHigherPriorityTaskWoken = pdFALSE;
 801bb02:	2300      	movs	r3, #0
 801bb04:	617b      	str	r3, [r7, #20]

  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 801bb06:	4b12      	ldr	r3, [pc, #72]	; (801bb50 <CDC_TransmitCplt_FS+0x60>)
 801bb08:	61bb      	str	r3, [r7, #24]

  AFLfuzzer.bTXcomplete = true;
 801bb0a:	69bb      	ldr	r3, [r7, #24]
 801bb0c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801bb10:	2201      	movs	r2, #1
 801bb12:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
  xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 801bb16:	69bb      	ldr	r3, [r7, #24]
 801bb18:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801bb1c:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 801bb20:	f107 0314 	add.w	r3, r7, #20
 801bb24:	9301      	str	r3, [sp, #4]
 801bb26:	2300      	movs	r3, #0
 801bb28:	9300      	str	r3, [sp, #0]
 801bb2a:	2301      	movs	r3, #1
 801bb2c:	2202      	movs	r2, #2
 801bb2e:	2101      	movs	r1, #1
 801bb30:	f7e8 fd0e 	bl	8004550 <xTaskGenericNotifyFromISR>
	  	    				1, //index
							2, //value = 2 data TX complete
							eSetBits,
							&xHigherPriorityTaskWoken);

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801bb34:	697b      	ldr	r3, [r7, #20]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d003      	beq.n	801bb42 <CDC_TransmitCplt_FS+0x52>
 801bb3a:	4b06      	ldr	r3, [pc, #24]	; (801bb54 <CDC_TransmitCplt_FS+0x64>)
 801bb3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bb40:	601a      	str	r2, [r3, #0]

  /* USER CODE END 13 */
  return result;
 801bb42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bb46:	4618      	mov	r0, r3
 801bb48:	3720      	adds	r7, #32
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	bd80      	pop	{r7, pc}
 801bb4e:	bf00      	nop
 801bb50:	24020000 	.word	0x24020000
 801bb54:	e000ed04 	.word	0xe000ed04

0801bb58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bb58:	b480      	push	{r7}
 801bb5a:	b083      	sub	sp, #12
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	4603      	mov	r3, r0
 801bb60:	6039      	str	r1, [r7, #0]
 801bb62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	2212      	movs	r2, #18
 801bb68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801bb6a:	4b03      	ldr	r3, [pc, #12]	; (801bb78 <USBD_FS_DeviceDescriptor+0x20>)
}
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	370c      	adds	r7, #12
 801bb70:	46bd      	mov	sp, r7
 801bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb76:	4770      	bx	lr
 801bb78:	24008198 	.word	0x24008198

0801bb7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bb7c:	b480      	push	{r7}
 801bb7e:	b083      	sub	sp, #12
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	4603      	mov	r3, r0
 801bb84:	6039      	str	r1, [r7, #0]
 801bb86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801bb88:	683b      	ldr	r3, [r7, #0]
 801bb8a:	2204      	movs	r2, #4
 801bb8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801bb8e:	4b03      	ldr	r3, [pc, #12]	; (801bb9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801bb90:	4618      	mov	r0, r3
 801bb92:	370c      	adds	r7, #12
 801bb94:	46bd      	mov	sp, r7
 801bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9a:	4770      	bx	lr
 801bb9c:	240081ac 	.word	0x240081ac

0801bba0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b082      	sub	sp, #8
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	4603      	mov	r3, r0
 801bba8:	6039      	str	r1, [r7, #0]
 801bbaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801bbac:	79fb      	ldrb	r3, [r7, #7]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d105      	bne.n	801bbbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bbb2:	683a      	ldr	r2, [r7, #0]
 801bbb4:	4907      	ldr	r1, [pc, #28]	; (801bbd4 <USBD_FS_ProductStrDescriptor+0x34>)
 801bbb6:	4808      	ldr	r0, [pc, #32]	; (801bbd8 <USBD_FS_ProductStrDescriptor+0x38>)
 801bbb8:	f7ff fdcf 	bl	801b75a <USBD_GetString>
 801bbbc:	e004      	b.n	801bbc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bbbe:	683a      	ldr	r2, [r7, #0]
 801bbc0:	4904      	ldr	r1, [pc, #16]	; (801bbd4 <USBD_FS_ProductStrDescriptor+0x34>)
 801bbc2:	4805      	ldr	r0, [pc, #20]	; (801bbd8 <USBD_FS_ProductStrDescriptor+0x38>)
 801bbc4:	f7ff fdc9 	bl	801b75a <USBD_GetString>
  }
  return USBD_StrDesc;
 801bbc8:	4b02      	ldr	r3, [pc, #8]	; (801bbd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801bbca:	4618      	mov	r0, r3
 801bbcc:	3708      	adds	r7, #8
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	bd80      	pop	{r7, pc}
 801bbd2:	bf00      	nop
 801bbd4:	24034504 	.word	0x24034504
 801bbd8:	24008460 	.word	0x24008460

0801bbdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b082      	sub	sp, #8
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	6039      	str	r1, [r7, #0]
 801bbe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801bbe8:	683a      	ldr	r2, [r7, #0]
 801bbea:	4904      	ldr	r1, [pc, #16]	; (801bbfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801bbec:	4804      	ldr	r0, [pc, #16]	; (801bc00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801bbee:	f7ff fdb4 	bl	801b75a <USBD_GetString>
  return USBD_StrDesc;
 801bbf2:	4b02      	ldr	r3, [pc, #8]	; (801bbfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	3708      	adds	r7, #8
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	bd80      	pop	{r7, pc}
 801bbfc:	24034504 	.word	0x24034504
 801bc00:	24008478 	.word	0x24008478

0801bc04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b082      	sub	sp, #8
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	6039      	str	r1, [r7, #0]
 801bc0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801bc10:	683b      	ldr	r3, [r7, #0]
 801bc12:	221a      	movs	r2, #26
 801bc14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801bc16:	f000 f843 	bl	801bca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801bc1a:	4b02      	ldr	r3, [pc, #8]	; (801bc24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	3708      	adds	r7, #8
 801bc20:	46bd      	mov	sp, r7
 801bc22:	bd80      	pop	{r7, pc}
 801bc24:	240081b0 	.word	0x240081b0

0801bc28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b082      	sub	sp, #8
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	4603      	mov	r3, r0
 801bc30:	6039      	str	r1, [r7, #0]
 801bc32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801bc34:	79fb      	ldrb	r3, [r7, #7]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d105      	bne.n	801bc46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bc3a:	683a      	ldr	r2, [r7, #0]
 801bc3c:	4907      	ldr	r1, [pc, #28]	; (801bc5c <USBD_FS_ConfigStrDescriptor+0x34>)
 801bc3e:	4808      	ldr	r0, [pc, #32]	; (801bc60 <USBD_FS_ConfigStrDescriptor+0x38>)
 801bc40:	f7ff fd8b 	bl	801b75a <USBD_GetString>
 801bc44:	e004      	b.n	801bc50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bc46:	683a      	ldr	r2, [r7, #0]
 801bc48:	4904      	ldr	r1, [pc, #16]	; (801bc5c <USBD_FS_ConfigStrDescriptor+0x34>)
 801bc4a:	4805      	ldr	r0, [pc, #20]	; (801bc60 <USBD_FS_ConfigStrDescriptor+0x38>)
 801bc4c:	f7ff fd85 	bl	801b75a <USBD_GetString>
  }
  return USBD_StrDesc;
 801bc50:	4b02      	ldr	r3, [pc, #8]	; (801bc5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801bc52:	4618      	mov	r0, r3
 801bc54:	3708      	adds	r7, #8
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}
 801bc5a:	bf00      	nop
 801bc5c:	24034504 	.word	0x24034504
 801bc60:	2400848c 	.word	0x2400848c

0801bc64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b082      	sub	sp, #8
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	6039      	str	r1, [r7, #0]
 801bc6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801bc70:	79fb      	ldrb	r3, [r7, #7]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d105      	bne.n	801bc82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bc76:	683a      	ldr	r2, [r7, #0]
 801bc78:	4907      	ldr	r1, [pc, #28]	; (801bc98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bc7a:	4808      	ldr	r0, [pc, #32]	; (801bc9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801bc7c:	f7ff fd6d 	bl	801b75a <USBD_GetString>
 801bc80:	e004      	b.n	801bc8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bc82:	683a      	ldr	r2, [r7, #0]
 801bc84:	4904      	ldr	r1, [pc, #16]	; (801bc98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bc86:	4805      	ldr	r0, [pc, #20]	; (801bc9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801bc88:	f7ff fd67 	bl	801b75a <USBD_GetString>
  }
  return USBD_StrDesc;
 801bc8c:	4b02      	ldr	r3, [pc, #8]	; (801bc98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801bc8e:	4618      	mov	r0, r3
 801bc90:	3708      	adds	r7, #8
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bd80      	pop	{r7, pc}
 801bc96:	bf00      	nop
 801bc98:	24034504 	.word	0x24034504
 801bc9c:	24008498 	.word	0x24008498

0801bca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b084      	sub	sp, #16
 801bca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801bca6:	4b0f      	ldr	r3, [pc, #60]	; (801bce4 <Get_SerialNum+0x44>)
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801bcac:	4b0e      	ldr	r3, [pc, #56]	; (801bce8 <Get_SerialNum+0x48>)
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801bcb2:	4b0e      	ldr	r3, [pc, #56]	; (801bcec <Get_SerialNum+0x4c>)
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801bcb8:	68fa      	ldr	r2, [r7, #12]
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	4413      	add	r3, r2
 801bcbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d009      	beq.n	801bcda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801bcc6:	2208      	movs	r2, #8
 801bcc8:	4909      	ldr	r1, [pc, #36]	; (801bcf0 <Get_SerialNum+0x50>)
 801bcca:	68f8      	ldr	r0, [r7, #12]
 801bccc:	f000 f814 	bl	801bcf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801bcd0:	2204      	movs	r2, #4
 801bcd2:	4908      	ldr	r1, [pc, #32]	; (801bcf4 <Get_SerialNum+0x54>)
 801bcd4:	68b8      	ldr	r0, [r7, #8]
 801bcd6:	f000 f80f 	bl	801bcf8 <IntToUnicode>
  }
}
 801bcda:	bf00      	nop
 801bcdc:	3710      	adds	r7, #16
 801bcde:	46bd      	mov	sp, r7
 801bce0:	bd80      	pop	{r7, pc}
 801bce2:	bf00      	nop
 801bce4:	1ff1e800 	.word	0x1ff1e800
 801bce8:	1ff1e804 	.word	0x1ff1e804
 801bcec:	1ff1e808 	.word	0x1ff1e808
 801bcf0:	240081b2 	.word	0x240081b2
 801bcf4:	240081c2 	.word	0x240081c2

0801bcf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801bcf8:	b480      	push	{r7}
 801bcfa:	b087      	sub	sp, #28
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	60f8      	str	r0, [r7, #12]
 801bd00:	60b9      	str	r1, [r7, #8]
 801bd02:	4613      	mov	r3, r2
 801bd04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801bd06:	2300      	movs	r3, #0
 801bd08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	75fb      	strb	r3, [r7, #23]
 801bd0e:	e027      	b.n	801bd60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	0f1b      	lsrs	r3, r3, #28
 801bd14:	2b09      	cmp	r3, #9
 801bd16:	d80b      	bhi.n	801bd30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	0f1b      	lsrs	r3, r3, #28
 801bd1c:	b2da      	uxtb	r2, r3
 801bd1e:	7dfb      	ldrb	r3, [r7, #23]
 801bd20:	005b      	lsls	r3, r3, #1
 801bd22:	4619      	mov	r1, r3
 801bd24:	68bb      	ldr	r3, [r7, #8]
 801bd26:	440b      	add	r3, r1
 801bd28:	3230      	adds	r2, #48	; 0x30
 801bd2a:	b2d2      	uxtb	r2, r2
 801bd2c:	701a      	strb	r2, [r3, #0]
 801bd2e:	e00a      	b.n	801bd46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801bd30:	68fb      	ldr	r3, [r7, #12]
 801bd32:	0f1b      	lsrs	r3, r3, #28
 801bd34:	b2da      	uxtb	r2, r3
 801bd36:	7dfb      	ldrb	r3, [r7, #23]
 801bd38:	005b      	lsls	r3, r3, #1
 801bd3a:	4619      	mov	r1, r3
 801bd3c:	68bb      	ldr	r3, [r7, #8]
 801bd3e:	440b      	add	r3, r1
 801bd40:	3237      	adds	r2, #55	; 0x37
 801bd42:	b2d2      	uxtb	r2, r2
 801bd44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	011b      	lsls	r3, r3, #4
 801bd4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801bd4c:	7dfb      	ldrb	r3, [r7, #23]
 801bd4e:	005b      	lsls	r3, r3, #1
 801bd50:	3301      	adds	r3, #1
 801bd52:	68ba      	ldr	r2, [r7, #8]
 801bd54:	4413      	add	r3, r2
 801bd56:	2200      	movs	r2, #0
 801bd58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801bd5a:	7dfb      	ldrb	r3, [r7, #23]
 801bd5c:	3301      	adds	r3, #1
 801bd5e:	75fb      	strb	r3, [r7, #23]
 801bd60:	7dfa      	ldrb	r2, [r7, #23]
 801bd62:	79fb      	ldrb	r3, [r7, #7]
 801bd64:	429a      	cmp	r2, r3
 801bd66:	d3d3      	bcc.n	801bd10 <IntToUnicode+0x18>
  }
}
 801bd68:	bf00      	nop
 801bd6a:	bf00      	nop
 801bd6c:	371c      	adds	r7, #28
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd74:	4770      	bx	lr
	...

0801bd78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801bd78:	b580      	push	{r7, lr}
 801bd7a:	b0b8      	sub	sp, #224	; 0xe0
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bd80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801bd84:	2200      	movs	r2, #0
 801bd86:	601a      	str	r2, [r3, #0]
 801bd88:	605a      	str	r2, [r3, #4]
 801bd8a:	609a      	str	r2, [r3, #8]
 801bd8c:	60da      	str	r2, [r3, #12]
 801bd8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801bd90:	f107 0310 	add.w	r3, r7, #16
 801bd94:	22bc      	movs	r2, #188	; 0xbc
 801bd96:	2100      	movs	r1, #0
 801bd98:	4618      	mov	r0, r3
 801bd9a:	f000 fc8d 	bl	801c6b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	4a3a      	ldr	r2, [pc, #232]	; (801be8c <HAL_PCD_MspInit+0x114>)
 801bda4:	4293      	cmp	r3, r2
 801bda6:	d16d      	bne.n	801be84 <HAL_PCD_MspInit+0x10c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801bda8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801bdac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801bdae:	2301      	movs	r3, #1
 801bdb0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 801bdb2:	2318      	movs	r3, #24
 801bdb4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801bdb6:	2302      	movs	r3, #2
 801bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 801bdba:	2304      	movs	r3, #4
 801bdbc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801bdbe:	2302      	movs	r3, #2
 801bdc0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801bdc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801bdc6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 801bdc8:	2300      	movs	r3, #0
 801bdca:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801bdcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801bdd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801bdd4:	f107 0310 	add.w	r3, r7, #16
 801bdd8:	4618      	mov	r0, r3
 801bdda:	f7f5 fb93 	bl	8011504 <HAL_RCCEx_PeriphCLKConfig>
 801bdde:	4603      	mov	r3, r0
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d001      	beq.n	801bde8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 801bde4:	f7ee ff5e 	bl	800aca4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801bde8:	f7f4 fba0 	bl	801052c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bdec:	4b28      	ldr	r3, [pc, #160]	; (801be90 <HAL_PCD_MspInit+0x118>)
 801bdee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801bdf2:	4a27      	ldr	r2, [pc, #156]	; (801be90 <HAL_PCD_MspInit+0x118>)
 801bdf4:	f043 0301 	orr.w	r3, r3, #1
 801bdf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801bdfc:	4b24      	ldr	r3, [pc, #144]	; (801be90 <HAL_PCD_MspInit+0x118>)
 801bdfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801be02:	f003 0301 	and.w	r3, r3, #1
 801be06:	60fb      	str	r3, [r7, #12]
 801be08:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801be0a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801be0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801be12:	2302      	movs	r3, #2
 801be14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801be18:	2300      	movs	r3, #0
 801be1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801be1e:	2300      	movs	r3, #0
 801be20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801be24:	230a      	movs	r3, #10
 801be26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801be2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801be2e:	4619      	mov	r1, r3
 801be30:	4818      	ldr	r0, [pc, #96]	; (801be94 <HAL_PCD_MspInit+0x11c>)
 801be32:	f7f2 fe43 	bl	800eabc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801be36:	f44f 7300 	mov.w	r3, #512	; 0x200
 801be3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801be3e:	2300      	movs	r3, #0
 801be40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801be44:	2300      	movs	r3, #0
 801be46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801be4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801be4e:	4619      	mov	r1, r3
 801be50:	4810      	ldr	r0, [pc, #64]	; (801be94 <HAL_PCD_MspInit+0x11c>)
 801be52:	f7f2 fe33 	bl	800eabc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801be56:	4b0e      	ldr	r3, [pc, #56]	; (801be90 <HAL_PCD_MspInit+0x118>)
 801be58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801be5c:	4a0c      	ldr	r2, [pc, #48]	; (801be90 <HAL_PCD_MspInit+0x118>)
 801be5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801be62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801be66:	4b0a      	ldr	r3, [pc, #40]	; (801be90 <HAL_PCD_MspInit+0x118>)
 801be68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801be6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801be70:	60bb      	str	r3, [r7, #8]
 801be72:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801be74:	2200      	movs	r2, #0
 801be76:	2105      	movs	r1, #5
 801be78:	2065      	movs	r0, #101	; 0x65
 801be7a:	f7ef fb71 	bl	800b560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801be7e:	2065      	movs	r0, #101	; 0x65
 801be80:	f7ef fb88 	bl	800b594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801be84:	bf00      	nop
 801be86:	37e0      	adds	r7, #224	; 0xe0
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}
 801be8c:	40080000 	.word	0x40080000
 801be90:	58024400 	.word	0x58024400
 801be94:	58020000 	.word	0x58020000

0801be98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be98:	b580      	push	{r7, lr}
 801be9a:	b082      	sub	sp, #8
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801beac:	4619      	mov	r1, r3
 801beae:	4610      	mov	r0, r2
 801beb0:	f7fe fc6c 	bl	801a78c <USBD_LL_SetupStage>
}
 801beb4:	bf00      	nop
 801beb6:	3708      	adds	r7, #8
 801beb8:	46bd      	mov	sp, r7
 801beba:	bd80      	pop	{r7, pc}

0801bebc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b082      	sub	sp, #8
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
 801bec4:	460b      	mov	r3, r1
 801bec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801bece:	78fa      	ldrb	r2, [r7, #3]
 801bed0:	6879      	ldr	r1, [r7, #4]
 801bed2:	4613      	mov	r3, r2
 801bed4:	00db      	lsls	r3, r3, #3
 801bed6:	1a9b      	subs	r3, r3, r2
 801bed8:	009b      	lsls	r3, r3, #2
 801beda:	440b      	add	r3, r1
 801bedc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bee0:	681a      	ldr	r2, [r3, #0]
 801bee2:	78fb      	ldrb	r3, [r7, #3]
 801bee4:	4619      	mov	r1, r3
 801bee6:	f7fe fca6 	bl	801a836 <USBD_LL_DataOutStage>
}
 801beea:	bf00      	nop
 801beec:	3708      	adds	r7, #8
 801beee:	46bd      	mov	sp, r7
 801bef0:	bd80      	pop	{r7, pc}

0801bef2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bef2:	b580      	push	{r7, lr}
 801bef4:	b082      	sub	sp, #8
 801bef6:	af00      	add	r7, sp, #0
 801bef8:	6078      	str	r0, [r7, #4]
 801befa:	460b      	mov	r3, r1
 801befc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801bf04:	78fa      	ldrb	r2, [r7, #3]
 801bf06:	6879      	ldr	r1, [r7, #4]
 801bf08:	4613      	mov	r3, r2
 801bf0a:	00db      	lsls	r3, r3, #3
 801bf0c:	1a9b      	subs	r3, r3, r2
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	440b      	add	r3, r1
 801bf12:	3348      	adds	r3, #72	; 0x48
 801bf14:	681a      	ldr	r2, [r3, #0]
 801bf16:	78fb      	ldrb	r3, [r7, #3]
 801bf18:	4619      	mov	r1, r3
 801bf1a:	f7fe fcef 	bl	801a8fc <USBD_LL_DataInStage>
}
 801bf1e:	bf00      	nop
 801bf20:	3708      	adds	r7, #8
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bd80      	pop	{r7, pc}

0801bf26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bf26:	b580      	push	{r7, lr}
 801bf28:	b082      	sub	sp, #8
 801bf2a:	af00      	add	r7, sp, #0
 801bf2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bf34:	4618      	mov	r0, r3
 801bf36:	f7fe fe03 	bl	801ab40 <USBD_LL_SOF>
}
 801bf3a:	bf00      	nop
 801bf3c:	3708      	adds	r7, #8
 801bf3e:	46bd      	mov	sp, r7
 801bf40:	bd80      	pop	{r7, pc}

0801bf42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bf42:	b580      	push	{r7, lr}
 801bf44:	b084      	sub	sp, #16
 801bf46:	af00      	add	r7, sp, #0
 801bf48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801bf4a:	2301      	movs	r3, #1
 801bf4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	68db      	ldr	r3, [r3, #12]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d102      	bne.n	801bf5c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801bf56:	2300      	movs	r3, #0
 801bf58:	73fb      	strb	r3, [r7, #15]
 801bf5a:	e008      	b.n	801bf6e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	68db      	ldr	r3, [r3, #12]
 801bf60:	2b02      	cmp	r3, #2
 801bf62:	d102      	bne.n	801bf6a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801bf64:	2301      	movs	r3, #1
 801bf66:	73fb      	strb	r3, [r7, #15]
 801bf68:	e001      	b.n	801bf6e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801bf6a:	f7ee fe9b 	bl	800aca4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bf74:	7bfa      	ldrb	r2, [r7, #15]
 801bf76:	4611      	mov	r1, r2
 801bf78:	4618      	mov	r0, r3
 801bf7a:	f7fe fda3 	bl	801aac4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bf84:	4618      	mov	r0, r3
 801bf86:	f7fe fd4f 	bl	801aa28 <USBD_LL_Reset>
}
 801bf8a:	bf00      	nop
 801bf8c:	3710      	adds	r7, #16
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	bd80      	pop	{r7, pc}
	...

0801bf94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b082      	sub	sp, #8
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bfa2:	4618      	mov	r0, r3
 801bfa4:	f7fe fd9e 	bl	801aae4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	687a      	ldr	r2, [r7, #4]
 801bfb4:	6812      	ldr	r2, [r2, #0]
 801bfb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801bfba:	f043 0301 	orr.w	r3, r3, #1
 801bfbe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	6a1b      	ldr	r3, [r3, #32]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d005      	beq.n	801bfd4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bfc8:	4b04      	ldr	r3, [pc, #16]	; (801bfdc <HAL_PCD_SuspendCallback+0x48>)
 801bfca:	691b      	ldr	r3, [r3, #16]
 801bfcc:	4a03      	ldr	r2, [pc, #12]	; (801bfdc <HAL_PCD_SuspendCallback+0x48>)
 801bfce:	f043 0306 	orr.w	r3, r3, #6
 801bfd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801bfd4:	bf00      	nop
 801bfd6:	3708      	adds	r7, #8
 801bfd8:	46bd      	mov	sp, r7
 801bfda:	bd80      	pop	{r7, pc}
 801bfdc:	e000ed00 	.word	0xe000ed00

0801bfe0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b082      	sub	sp, #8
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bfee:	4618      	mov	r0, r3
 801bff0:	f7fe fd8e 	bl	801ab10 <USBD_LL_Resume>
}
 801bff4:	bf00      	nop
 801bff6:	3708      	adds	r7, #8
 801bff8:	46bd      	mov	sp, r7
 801bffa:	bd80      	pop	{r7, pc}

0801bffc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b082      	sub	sp, #8
 801c000:	af00      	add	r7, sp, #0
 801c002:	6078      	str	r0, [r7, #4]
 801c004:	460b      	mov	r3, r1
 801c006:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c00e:	78fa      	ldrb	r2, [r7, #3]
 801c010:	4611      	mov	r1, r2
 801c012:	4618      	mov	r0, r3
 801c014:	f7fe fddc 	bl	801abd0 <USBD_LL_IsoOUTIncomplete>
}
 801c018:	bf00      	nop
 801c01a:	3708      	adds	r7, #8
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bd80      	pop	{r7, pc}

0801c020 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b082      	sub	sp, #8
 801c024:	af00      	add	r7, sp, #0
 801c026:	6078      	str	r0, [r7, #4]
 801c028:	460b      	mov	r3, r1
 801c02a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c032:	78fa      	ldrb	r2, [r7, #3]
 801c034:	4611      	mov	r1, r2
 801c036:	4618      	mov	r0, r3
 801c038:	f7fe fda4 	bl	801ab84 <USBD_LL_IsoINIncomplete>
}
 801c03c:	bf00      	nop
 801c03e:	3708      	adds	r7, #8
 801c040:	46bd      	mov	sp, r7
 801c042:	bd80      	pop	{r7, pc}

0801c044 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c044:	b580      	push	{r7, lr}
 801c046:	b082      	sub	sp, #8
 801c048:	af00      	add	r7, sp, #0
 801c04a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c052:	4618      	mov	r0, r3
 801c054:	f7fe fde2 	bl	801ac1c <USBD_LL_DevConnected>
}
 801c058:	bf00      	nop
 801c05a:	3708      	adds	r7, #8
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bd80      	pop	{r7, pc}

0801c060 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c060:	b580      	push	{r7, lr}
 801c062:	b082      	sub	sp, #8
 801c064:	af00      	add	r7, sp, #0
 801c066:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c06e:	4618      	mov	r0, r3
 801c070:	f7fe fddf 	bl	801ac32 <USBD_LL_DevDisconnected>
}
 801c074:	bf00      	nop
 801c076:	3708      	adds	r7, #8
 801c078:	46bd      	mov	sp, r7
 801c07a:	bd80      	pop	{r7, pc}

0801c07c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c07c:	b580      	push	{r7, lr}
 801c07e:	b082      	sub	sp, #8
 801c080:	af00      	add	r7, sp, #0
 801c082:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	781b      	ldrb	r3, [r3, #0]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d13e      	bne.n	801c10a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801c08c:	4a21      	ldr	r2, [pc, #132]	; (801c114 <USBD_LL_Init+0x98>)
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	4a1f      	ldr	r2, [pc, #124]	; (801c114 <USBD_LL_Init+0x98>)
 801c098:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c09c:	4b1d      	ldr	r3, [pc, #116]	; (801c114 <USBD_LL_Init+0x98>)
 801c09e:	4a1e      	ldr	r2, [pc, #120]	; (801c118 <USBD_LL_Init+0x9c>)
 801c0a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801c0a2:	4b1c      	ldr	r3, [pc, #112]	; (801c114 <USBD_LL_Init+0x98>)
 801c0a4:	2209      	movs	r2, #9
 801c0a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801c0a8:	4b1a      	ldr	r3, [pc, #104]	; (801c114 <USBD_LL_Init+0x98>)
 801c0aa:	2202      	movs	r2, #2
 801c0ac:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c0ae:	4b19      	ldr	r3, [pc, #100]	; (801c114 <USBD_LL_Init+0x98>)
 801c0b0:	2200      	movs	r2, #0
 801c0b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c0b4:	4b17      	ldr	r3, [pc, #92]	; (801c114 <USBD_LL_Init+0x98>)
 801c0b6:	2202      	movs	r2, #2
 801c0b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c0ba:	4b16      	ldr	r3, [pc, #88]	; (801c114 <USBD_LL_Init+0x98>)
 801c0bc:	2200      	movs	r2, #0
 801c0be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801c0c0:	4b14      	ldr	r3, [pc, #80]	; (801c114 <USBD_LL_Init+0x98>)
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801c0c6:	4b13      	ldr	r3, [pc, #76]	; (801c114 <USBD_LL_Init+0x98>)
 801c0c8:	2200      	movs	r2, #0
 801c0ca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 801c0cc:	4b11      	ldr	r3, [pc, #68]	; (801c114 <USBD_LL_Init+0x98>)
 801c0ce:	2201      	movs	r2, #1
 801c0d0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801c0d2:	4b10      	ldr	r3, [pc, #64]	; (801c114 <USBD_LL_Init+0x98>)
 801c0d4:	2201      	movs	r2, #1
 801c0d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801c0d8:	4b0e      	ldr	r3, [pc, #56]	; (801c114 <USBD_LL_Init+0x98>)
 801c0da:	2200      	movs	r2, #0
 801c0dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801c0de:	480d      	ldr	r0, [pc, #52]	; (801c114 <USBD_LL_Init+0x98>)
 801c0e0:	f7f2 ffee 	bl	800f0c0 <HAL_PCD_Init>
 801c0e4:	4603      	mov	r3, r0
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d001      	beq.n	801c0ee <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801c0ea:	f7ee fddb 	bl	800aca4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801c0ee:	2180      	movs	r1, #128	; 0x80
 801c0f0:	4808      	ldr	r0, [pc, #32]	; (801c114 <USBD_LL_Init+0x98>)
 801c0f2:	f7f4 f980 	bl	80103f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801c0f6:	2240      	movs	r2, #64	; 0x40
 801c0f8:	2100      	movs	r1, #0
 801c0fa:	4806      	ldr	r0, [pc, #24]	; (801c114 <USBD_LL_Init+0x98>)
 801c0fc:	f7f4 f934 	bl	8010368 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801c100:	2280      	movs	r2, #128	; 0x80
 801c102:	2101      	movs	r1, #1
 801c104:	4803      	ldr	r0, [pc, #12]	; (801c114 <USBD_LL_Init+0x98>)
 801c106:	f7f4 f92f 	bl	8010368 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801c10a:	2300      	movs	r3, #0
}
 801c10c:	4618      	mov	r0, r3
 801c10e:	3708      	adds	r7, #8
 801c110:	46bd      	mov	sp, r7
 801c112:	bd80      	pop	{r7, pc}
 801c114:	24034704 	.word	0x24034704
 801c118:	40080000 	.word	0x40080000

0801c11c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c11c:	b580      	push	{r7, lr}
 801c11e:	b084      	sub	sp, #16
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c124:	2300      	movs	r3, #0
 801c126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c128:	2300      	movs	r3, #0
 801c12a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c132:	4618      	mov	r0, r3
 801c134:	f7f3 f8e8 	bl	800f308 <HAL_PCD_Start>
 801c138:	4603      	mov	r3, r0
 801c13a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c13c:	7bfb      	ldrb	r3, [r7, #15]
 801c13e:	4618      	mov	r0, r3
 801c140:	f000 f942 	bl	801c3c8 <USBD_Get_USB_Status>
 801c144:	4603      	mov	r3, r0
 801c146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c148:	7bbb      	ldrb	r3, [r7, #14]
}
 801c14a:	4618      	mov	r0, r3
 801c14c:	3710      	adds	r7, #16
 801c14e:	46bd      	mov	sp, r7
 801c150:	bd80      	pop	{r7, pc}

0801c152 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c152:	b580      	push	{r7, lr}
 801c154:	b084      	sub	sp, #16
 801c156:	af00      	add	r7, sp, #0
 801c158:	6078      	str	r0, [r7, #4]
 801c15a:	4608      	mov	r0, r1
 801c15c:	4611      	mov	r1, r2
 801c15e:	461a      	mov	r2, r3
 801c160:	4603      	mov	r3, r0
 801c162:	70fb      	strb	r3, [r7, #3]
 801c164:	460b      	mov	r3, r1
 801c166:	70bb      	strb	r3, [r7, #2]
 801c168:	4613      	mov	r3, r2
 801c16a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c16c:	2300      	movs	r3, #0
 801c16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c170:	2300      	movs	r3, #0
 801c172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c17a:	78bb      	ldrb	r3, [r7, #2]
 801c17c:	883a      	ldrh	r2, [r7, #0]
 801c17e:	78f9      	ldrb	r1, [r7, #3]
 801c180:	f7f3 fcf9 	bl	800fb76 <HAL_PCD_EP_Open>
 801c184:	4603      	mov	r3, r0
 801c186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c188:	7bfb      	ldrb	r3, [r7, #15]
 801c18a:	4618      	mov	r0, r3
 801c18c:	f000 f91c 	bl	801c3c8 <USBD_Get_USB_Status>
 801c190:	4603      	mov	r3, r0
 801c192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c194:	7bbb      	ldrb	r3, [r7, #14]
}
 801c196:	4618      	mov	r0, r3
 801c198:	3710      	adds	r7, #16
 801c19a:	46bd      	mov	sp, r7
 801c19c:	bd80      	pop	{r7, pc}

0801c19e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c19e:	b580      	push	{r7, lr}
 801c1a0:	b084      	sub	sp, #16
 801c1a2:	af00      	add	r7, sp, #0
 801c1a4:	6078      	str	r0, [r7, #4]
 801c1a6:	460b      	mov	r3, r1
 801c1a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c1b8:	78fa      	ldrb	r2, [r7, #3]
 801c1ba:	4611      	mov	r1, r2
 801c1bc:	4618      	mov	r0, r3
 801c1be:	f7f3 fd42 	bl	800fc46 <HAL_PCD_EP_Close>
 801c1c2:	4603      	mov	r3, r0
 801c1c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c1c6:	7bfb      	ldrb	r3, [r7, #15]
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	f000 f8fd 	bl	801c3c8 <USBD_Get_USB_Status>
 801c1ce:	4603      	mov	r3, r0
 801c1d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c1d2:	7bbb      	ldrb	r3, [r7, #14]
}
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	3710      	adds	r7, #16
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	bd80      	pop	{r7, pc}

0801c1dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b084      	sub	sp, #16
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
 801c1e4:	460b      	mov	r3, r1
 801c1e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c1e8:	2300      	movs	r3, #0
 801c1ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c1ec:	2300      	movs	r3, #0
 801c1ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c1f6:	78fa      	ldrb	r2, [r7, #3]
 801c1f8:	4611      	mov	r1, r2
 801c1fa:	4618      	mov	r0, r3
 801c1fc:	f7f3 fe1a 	bl	800fe34 <HAL_PCD_EP_SetStall>
 801c200:	4603      	mov	r3, r0
 801c202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c204:	7bfb      	ldrb	r3, [r7, #15]
 801c206:	4618      	mov	r0, r3
 801c208:	f000 f8de 	bl	801c3c8 <USBD_Get_USB_Status>
 801c20c:	4603      	mov	r3, r0
 801c20e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c210:	7bbb      	ldrb	r3, [r7, #14]
}
 801c212:	4618      	mov	r0, r3
 801c214:	3710      	adds	r7, #16
 801c216:	46bd      	mov	sp, r7
 801c218:	bd80      	pop	{r7, pc}

0801c21a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c21a:	b580      	push	{r7, lr}
 801c21c:	b084      	sub	sp, #16
 801c21e:	af00      	add	r7, sp, #0
 801c220:	6078      	str	r0, [r7, #4]
 801c222:	460b      	mov	r3, r1
 801c224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c226:	2300      	movs	r3, #0
 801c228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c22a:	2300      	movs	r3, #0
 801c22c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c234:	78fa      	ldrb	r2, [r7, #3]
 801c236:	4611      	mov	r1, r2
 801c238:	4618      	mov	r0, r3
 801c23a:	f7f3 fe5f 	bl	800fefc <HAL_PCD_EP_ClrStall>
 801c23e:	4603      	mov	r3, r0
 801c240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c242:	7bfb      	ldrb	r3, [r7, #15]
 801c244:	4618      	mov	r0, r3
 801c246:	f000 f8bf 	bl	801c3c8 <USBD_Get_USB_Status>
 801c24a:	4603      	mov	r3, r0
 801c24c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c24e:	7bbb      	ldrb	r3, [r7, #14]
}
 801c250:	4618      	mov	r0, r3
 801c252:	3710      	adds	r7, #16
 801c254:	46bd      	mov	sp, r7
 801c256:	bd80      	pop	{r7, pc}

0801c258 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c258:	b480      	push	{r7}
 801c25a:	b085      	sub	sp, #20
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	6078      	str	r0, [r7, #4]
 801c260:	460b      	mov	r3, r1
 801c262:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c26a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c26c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c270:	2b00      	cmp	r3, #0
 801c272:	da0b      	bge.n	801c28c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c274:	78fb      	ldrb	r3, [r7, #3]
 801c276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c27a:	68f9      	ldr	r1, [r7, #12]
 801c27c:	4613      	mov	r3, r2
 801c27e:	00db      	lsls	r3, r3, #3
 801c280:	1a9b      	subs	r3, r3, r2
 801c282:	009b      	lsls	r3, r3, #2
 801c284:	440b      	add	r3, r1
 801c286:	333e      	adds	r3, #62	; 0x3e
 801c288:	781b      	ldrb	r3, [r3, #0]
 801c28a:	e00b      	b.n	801c2a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c28c:	78fb      	ldrb	r3, [r7, #3]
 801c28e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c292:	68f9      	ldr	r1, [r7, #12]
 801c294:	4613      	mov	r3, r2
 801c296:	00db      	lsls	r3, r3, #3
 801c298:	1a9b      	subs	r3, r3, r2
 801c29a:	009b      	lsls	r3, r3, #2
 801c29c:	440b      	add	r3, r1
 801c29e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c2a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	3714      	adds	r7, #20
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ae:	4770      	bx	lr

0801c2b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b084      	sub	sp, #16
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
 801c2b8:	460b      	mov	r3, r1
 801c2ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c2bc:	2300      	movs	r3, #0
 801c2be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c2ca:	78fa      	ldrb	r2, [r7, #3]
 801c2cc:	4611      	mov	r1, r2
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	f7f3 fc2c 	bl	800fb2c <HAL_PCD_SetAddress>
 801c2d4:	4603      	mov	r3, r0
 801c2d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c2d8:	7bfb      	ldrb	r3, [r7, #15]
 801c2da:	4618      	mov	r0, r3
 801c2dc:	f000 f874 	bl	801c3c8 <USBD_Get_USB_Status>
 801c2e0:	4603      	mov	r3, r0
 801c2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	3710      	adds	r7, #16
 801c2ea:	46bd      	mov	sp, r7
 801c2ec:	bd80      	pop	{r7, pc}

0801c2ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c2ee:	b580      	push	{r7, lr}
 801c2f0:	b086      	sub	sp, #24
 801c2f2:	af00      	add	r7, sp, #0
 801c2f4:	60f8      	str	r0, [r7, #12]
 801c2f6:	607a      	str	r2, [r7, #4]
 801c2f8:	603b      	str	r3, [r7, #0]
 801c2fa:	460b      	mov	r3, r1
 801c2fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c2fe:	2300      	movs	r3, #0
 801c300:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c302:	2300      	movs	r3, #0
 801c304:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c30c:	7af9      	ldrb	r1, [r7, #11]
 801c30e:	683b      	ldr	r3, [r7, #0]
 801c310:	687a      	ldr	r2, [r7, #4]
 801c312:	f7f3 fd45 	bl	800fda0 <HAL_PCD_EP_Transmit>
 801c316:	4603      	mov	r3, r0
 801c318:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c31a:	7dfb      	ldrb	r3, [r7, #23]
 801c31c:	4618      	mov	r0, r3
 801c31e:	f000 f853 	bl	801c3c8 <USBD_Get_USB_Status>
 801c322:	4603      	mov	r3, r0
 801c324:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c326:	7dbb      	ldrb	r3, [r7, #22]
}
 801c328:	4618      	mov	r0, r3
 801c32a:	3718      	adds	r7, #24
 801c32c:	46bd      	mov	sp, r7
 801c32e:	bd80      	pop	{r7, pc}

0801c330 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c330:	b580      	push	{r7, lr}
 801c332:	b086      	sub	sp, #24
 801c334:	af00      	add	r7, sp, #0
 801c336:	60f8      	str	r0, [r7, #12]
 801c338:	607a      	str	r2, [r7, #4]
 801c33a:	603b      	str	r3, [r7, #0]
 801c33c:	460b      	mov	r3, r1
 801c33e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c340:	2300      	movs	r3, #0
 801c342:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c344:	2300      	movs	r3, #0
 801c346:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c34e:	7af9      	ldrb	r1, [r7, #11]
 801c350:	683b      	ldr	r3, [r7, #0]
 801c352:	687a      	ldr	r2, [r7, #4]
 801c354:	f7f3 fcc1 	bl	800fcda <HAL_PCD_EP_Receive>
 801c358:	4603      	mov	r3, r0
 801c35a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c35c:	7dfb      	ldrb	r3, [r7, #23]
 801c35e:	4618      	mov	r0, r3
 801c360:	f000 f832 	bl	801c3c8 <USBD_Get_USB_Status>
 801c364:	4603      	mov	r3, r0
 801c366:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c368:	7dbb      	ldrb	r3, [r7, #22]
}
 801c36a:	4618      	mov	r0, r3
 801c36c:	3718      	adds	r7, #24
 801c36e:	46bd      	mov	sp, r7
 801c370:	bd80      	pop	{r7, pc}

0801c372 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c372:	b580      	push	{r7, lr}
 801c374:	b082      	sub	sp, #8
 801c376:	af00      	add	r7, sp, #0
 801c378:	6078      	str	r0, [r7, #4]
 801c37a:	460b      	mov	r3, r1
 801c37c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c384:	78fa      	ldrb	r2, [r7, #3]
 801c386:	4611      	mov	r1, r2
 801c388:	4618      	mov	r0, r3
 801c38a:	f7f3 fcf1 	bl	800fd70 <HAL_PCD_EP_GetRxCount>
 801c38e:	4603      	mov	r3, r0
}
 801c390:	4618      	mov	r0, r3
 801c392:	3708      	adds	r7, #8
 801c394:	46bd      	mov	sp, r7
 801c396:	bd80      	pop	{r7, pc}

0801c398 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c398:	b480      	push	{r7}
 801c39a:	b083      	sub	sp, #12
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c3a0:	4b03      	ldr	r3, [pc, #12]	; (801c3b0 <USBD_static_malloc+0x18>)
}
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	370c      	adds	r7, #12
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ac:	4770      	bx	lr
 801c3ae:	bf00      	nop
 801c3b0:	24034b0c 	.word	0x24034b0c

0801c3b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c3b4:	b480      	push	{r7}
 801c3b6:	b083      	sub	sp, #12
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]

}
 801c3bc:	bf00      	nop
 801c3be:	370c      	adds	r7, #12
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3c6:	4770      	bx	lr

0801c3c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c3c8:	b480      	push	{r7}
 801c3ca:	b085      	sub	sp, #20
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c3d6:	79fb      	ldrb	r3, [r7, #7]
 801c3d8:	2b03      	cmp	r3, #3
 801c3da:	d817      	bhi.n	801c40c <USBD_Get_USB_Status+0x44>
 801c3dc:	a201      	add	r2, pc, #4	; (adr r2, 801c3e4 <USBD_Get_USB_Status+0x1c>)
 801c3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c3e2:	bf00      	nop
 801c3e4:	0801c3f5 	.word	0x0801c3f5
 801c3e8:	0801c3fb 	.word	0x0801c3fb
 801c3ec:	0801c401 	.word	0x0801c401
 801c3f0:	0801c407 	.word	0x0801c407
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c3f4:	2300      	movs	r3, #0
 801c3f6:	73fb      	strb	r3, [r7, #15]
    break;
 801c3f8:	e00b      	b.n	801c412 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c3fa:	2303      	movs	r3, #3
 801c3fc:	73fb      	strb	r3, [r7, #15]
    break;
 801c3fe:	e008      	b.n	801c412 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c400:	2301      	movs	r3, #1
 801c402:	73fb      	strb	r3, [r7, #15]
    break;
 801c404:	e005      	b.n	801c412 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c406:	2303      	movs	r3, #3
 801c408:	73fb      	strb	r3, [r7, #15]
    break;
 801c40a:	e002      	b.n	801c412 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c40c:	2303      	movs	r3, #3
 801c40e:	73fb      	strb	r3, [r7, #15]
    break;
 801c410:	bf00      	nop
  }
  return usb_status;
 801c412:	7bfb      	ldrb	r3, [r7, #15]
}
 801c414:	4618      	mov	r0, r3
 801c416:	3714      	adds	r7, #20
 801c418:	46bd      	mov	sp, r7
 801c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c41e:	4770      	bx	lr

0801c420 <__errno>:
 801c420:	4b01      	ldr	r3, [pc, #4]	; (801c428 <__errno+0x8>)
 801c422:	6818      	ldr	r0, [r3, #0]
 801c424:	4770      	bx	lr
 801c426:	bf00      	nop
 801c428:	240081cc 	.word	0x240081cc

0801c42c <ffs>:
 801c42c:	2800      	cmp	r0, #0
 801c42e:	fa90 f3a0 	rbit	r3, r0
 801c432:	fab3 f383 	clz	r3, r3
 801c436:	bf08      	it	eq
 801c438:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 801c43c:	1c58      	adds	r0, r3, #1
 801c43e:	4770      	bx	lr

0801c440 <std>:
 801c440:	2300      	movs	r3, #0
 801c442:	b510      	push	{r4, lr}
 801c444:	4604      	mov	r4, r0
 801c446:	e9c0 3300 	strd	r3, r3, [r0]
 801c44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c44e:	6083      	str	r3, [r0, #8]
 801c450:	8181      	strh	r1, [r0, #12]
 801c452:	6643      	str	r3, [r0, #100]	; 0x64
 801c454:	81c2      	strh	r2, [r0, #14]
 801c456:	6183      	str	r3, [r0, #24]
 801c458:	4619      	mov	r1, r3
 801c45a:	2208      	movs	r2, #8
 801c45c:	305c      	adds	r0, #92	; 0x5c
 801c45e:	f000 f92b 	bl	801c6b8 <memset>
 801c462:	4b05      	ldr	r3, [pc, #20]	; (801c478 <std+0x38>)
 801c464:	6263      	str	r3, [r4, #36]	; 0x24
 801c466:	4b05      	ldr	r3, [pc, #20]	; (801c47c <std+0x3c>)
 801c468:	62a3      	str	r3, [r4, #40]	; 0x28
 801c46a:	4b05      	ldr	r3, [pc, #20]	; (801c480 <std+0x40>)
 801c46c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c46e:	4b05      	ldr	r3, [pc, #20]	; (801c484 <std+0x44>)
 801c470:	6224      	str	r4, [r4, #32]
 801c472:	6323      	str	r3, [r4, #48]	; 0x30
 801c474:	bd10      	pop	{r4, pc}
 801c476:	bf00      	nop
 801c478:	0801ca99 	.word	0x0801ca99
 801c47c:	0801cabb 	.word	0x0801cabb
 801c480:	0801caf3 	.word	0x0801caf3
 801c484:	0801cb17 	.word	0x0801cb17

0801c488 <_cleanup_r>:
 801c488:	4901      	ldr	r1, [pc, #4]	; (801c490 <_cleanup_r+0x8>)
 801c48a:	f000 b8af 	b.w	801c5ec <_fwalk_reent>
 801c48e:	bf00      	nop
 801c490:	0801cdf1 	.word	0x0801cdf1

0801c494 <__sfmoreglue>:
 801c494:	b570      	push	{r4, r5, r6, lr}
 801c496:	2268      	movs	r2, #104	; 0x68
 801c498:	1e4d      	subs	r5, r1, #1
 801c49a:	4355      	muls	r5, r2
 801c49c:	460e      	mov	r6, r1
 801c49e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c4a2:	f000 f97d 	bl	801c7a0 <_malloc_r>
 801c4a6:	4604      	mov	r4, r0
 801c4a8:	b140      	cbz	r0, 801c4bc <__sfmoreglue+0x28>
 801c4aa:	2100      	movs	r1, #0
 801c4ac:	e9c0 1600 	strd	r1, r6, [r0]
 801c4b0:	300c      	adds	r0, #12
 801c4b2:	60a0      	str	r0, [r4, #8]
 801c4b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c4b8:	f000 f8fe 	bl	801c6b8 <memset>
 801c4bc:	4620      	mov	r0, r4
 801c4be:	bd70      	pop	{r4, r5, r6, pc}

0801c4c0 <__sfp_lock_acquire>:
 801c4c0:	4801      	ldr	r0, [pc, #4]	; (801c4c8 <__sfp_lock_acquire+0x8>)
 801c4c2:	f000 b8d8 	b.w	801c676 <__retarget_lock_acquire_recursive>
 801c4c6:	bf00      	nop
 801c4c8:	24034d2d 	.word	0x24034d2d

0801c4cc <__sfp_lock_release>:
 801c4cc:	4801      	ldr	r0, [pc, #4]	; (801c4d4 <__sfp_lock_release+0x8>)
 801c4ce:	f000 b8d3 	b.w	801c678 <__retarget_lock_release_recursive>
 801c4d2:	bf00      	nop
 801c4d4:	24034d2d 	.word	0x24034d2d

0801c4d8 <__sinit_lock_acquire>:
 801c4d8:	4801      	ldr	r0, [pc, #4]	; (801c4e0 <__sinit_lock_acquire+0x8>)
 801c4da:	f000 b8cc 	b.w	801c676 <__retarget_lock_acquire_recursive>
 801c4de:	bf00      	nop
 801c4e0:	24034d2e 	.word	0x24034d2e

0801c4e4 <__sinit_lock_release>:
 801c4e4:	4801      	ldr	r0, [pc, #4]	; (801c4ec <__sinit_lock_release+0x8>)
 801c4e6:	f000 b8c7 	b.w	801c678 <__retarget_lock_release_recursive>
 801c4ea:	bf00      	nop
 801c4ec:	24034d2e 	.word	0x24034d2e

0801c4f0 <__sinit>:
 801c4f0:	b510      	push	{r4, lr}
 801c4f2:	4604      	mov	r4, r0
 801c4f4:	f7ff fff0 	bl	801c4d8 <__sinit_lock_acquire>
 801c4f8:	69a3      	ldr	r3, [r4, #24]
 801c4fa:	b11b      	cbz	r3, 801c504 <__sinit+0x14>
 801c4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c500:	f7ff bff0 	b.w	801c4e4 <__sinit_lock_release>
 801c504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c508:	6523      	str	r3, [r4, #80]	; 0x50
 801c50a:	4b13      	ldr	r3, [pc, #76]	; (801c558 <__sinit+0x68>)
 801c50c:	4a13      	ldr	r2, [pc, #76]	; (801c55c <__sinit+0x6c>)
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	62a2      	str	r2, [r4, #40]	; 0x28
 801c512:	42a3      	cmp	r3, r4
 801c514:	bf04      	itt	eq
 801c516:	2301      	moveq	r3, #1
 801c518:	61a3      	streq	r3, [r4, #24]
 801c51a:	4620      	mov	r0, r4
 801c51c:	f000 f820 	bl	801c560 <__sfp>
 801c520:	6060      	str	r0, [r4, #4]
 801c522:	4620      	mov	r0, r4
 801c524:	f000 f81c 	bl	801c560 <__sfp>
 801c528:	60a0      	str	r0, [r4, #8]
 801c52a:	4620      	mov	r0, r4
 801c52c:	f000 f818 	bl	801c560 <__sfp>
 801c530:	2200      	movs	r2, #0
 801c532:	60e0      	str	r0, [r4, #12]
 801c534:	2104      	movs	r1, #4
 801c536:	6860      	ldr	r0, [r4, #4]
 801c538:	f7ff ff82 	bl	801c440 <std>
 801c53c:	68a0      	ldr	r0, [r4, #8]
 801c53e:	2201      	movs	r2, #1
 801c540:	2109      	movs	r1, #9
 801c542:	f7ff ff7d 	bl	801c440 <std>
 801c546:	68e0      	ldr	r0, [r4, #12]
 801c548:	2202      	movs	r2, #2
 801c54a:	2112      	movs	r1, #18
 801c54c:	f7ff ff78 	bl	801c440 <std>
 801c550:	2301      	movs	r3, #1
 801c552:	61a3      	str	r3, [r4, #24]
 801c554:	e7d2      	b.n	801c4fc <__sinit+0xc>
 801c556:	bf00      	nop
 801c558:	24008548 	.word	0x24008548
 801c55c:	0801c489 	.word	0x0801c489

0801c560 <__sfp>:
 801c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c562:	4607      	mov	r7, r0
 801c564:	f7ff ffac 	bl	801c4c0 <__sfp_lock_acquire>
 801c568:	4b1e      	ldr	r3, [pc, #120]	; (801c5e4 <__sfp+0x84>)
 801c56a:	681e      	ldr	r6, [r3, #0]
 801c56c:	69b3      	ldr	r3, [r6, #24]
 801c56e:	b913      	cbnz	r3, 801c576 <__sfp+0x16>
 801c570:	4630      	mov	r0, r6
 801c572:	f7ff ffbd 	bl	801c4f0 <__sinit>
 801c576:	3648      	adds	r6, #72	; 0x48
 801c578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c57c:	3b01      	subs	r3, #1
 801c57e:	d503      	bpl.n	801c588 <__sfp+0x28>
 801c580:	6833      	ldr	r3, [r6, #0]
 801c582:	b30b      	cbz	r3, 801c5c8 <__sfp+0x68>
 801c584:	6836      	ldr	r6, [r6, #0]
 801c586:	e7f7      	b.n	801c578 <__sfp+0x18>
 801c588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c58c:	b9d5      	cbnz	r5, 801c5c4 <__sfp+0x64>
 801c58e:	4b16      	ldr	r3, [pc, #88]	; (801c5e8 <__sfp+0x88>)
 801c590:	60e3      	str	r3, [r4, #12]
 801c592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c596:	6665      	str	r5, [r4, #100]	; 0x64
 801c598:	f000 f86c 	bl	801c674 <__retarget_lock_init_recursive>
 801c59c:	f7ff ff96 	bl	801c4cc <__sfp_lock_release>
 801c5a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c5a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c5a8:	6025      	str	r5, [r4, #0]
 801c5aa:	61a5      	str	r5, [r4, #24]
 801c5ac:	2208      	movs	r2, #8
 801c5ae:	4629      	mov	r1, r5
 801c5b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c5b4:	f000 f880 	bl	801c6b8 <memset>
 801c5b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c5bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c5c0:	4620      	mov	r0, r4
 801c5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5c4:	3468      	adds	r4, #104	; 0x68
 801c5c6:	e7d9      	b.n	801c57c <__sfp+0x1c>
 801c5c8:	2104      	movs	r1, #4
 801c5ca:	4638      	mov	r0, r7
 801c5cc:	f7ff ff62 	bl	801c494 <__sfmoreglue>
 801c5d0:	4604      	mov	r4, r0
 801c5d2:	6030      	str	r0, [r6, #0]
 801c5d4:	2800      	cmp	r0, #0
 801c5d6:	d1d5      	bne.n	801c584 <__sfp+0x24>
 801c5d8:	f7ff ff78 	bl	801c4cc <__sfp_lock_release>
 801c5dc:	230c      	movs	r3, #12
 801c5de:	603b      	str	r3, [r7, #0]
 801c5e0:	e7ee      	b.n	801c5c0 <__sfp+0x60>
 801c5e2:	bf00      	nop
 801c5e4:	24008548 	.word	0x24008548
 801c5e8:	ffff0001 	.word	0xffff0001

0801c5ec <_fwalk_reent>:
 801c5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5f0:	4606      	mov	r6, r0
 801c5f2:	4688      	mov	r8, r1
 801c5f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c5f8:	2700      	movs	r7, #0
 801c5fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c5fe:	f1b9 0901 	subs.w	r9, r9, #1
 801c602:	d505      	bpl.n	801c610 <_fwalk_reent+0x24>
 801c604:	6824      	ldr	r4, [r4, #0]
 801c606:	2c00      	cmp	r4, #0
 801c608:	d1f7      	bne.n	801c5fa <_fwalk_reent+0xe>
 801c60a:	4638      	mov	r0, r7
 801c60c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c610:	89ab      	ldrh	r3, [r5, #12]
 801c612:	2b01      	cmp	r3, #1
 801c614:	d907      	bls.n	801c626 <_fwalk_reent+0x3a>
 801c616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c61a:	3301      	adds	r3, #1
 801c61c:	d003      	beq.n	801c626 <_fwalk_reent+0x3a>
 801c61e:	4629      	mov	r1, r5
 801c620:	4630      	mov	r0, r6
 801c622:	47c0      	blx	r8
 801c624:	4307      	orrs	r7, r0
 801c626:	3568      	adds	r5, #104	; 0x68
 801c628:	e7e9      	b.n	801c5fe <_fwalk_reent+0x12>
	...

0801c62c <__libc_init_array>:
 801c62c:	b570      	push	{r4, r5, r6, lr}
 801c62e:	4d0d      	ldr	r5, [pc, #52]	; (801c664 <__libc_init_array+0x38>)
 801c630:	4c0d      	ldr	r4, [pc, #52]	; (801c668 <__libc_init_array+0x3c>)
 801c632:	1b64      	subs	r4, r4, r5
 801c634:	10a4      	asrs	r4, r4, #2
 801c636:	2600      	movs	r6, #0
 801c638:	42a6      	cmp	r6, r4
 801c63a:	d109      	bne.n	801c650 <__libc_init_array+0x24>
 801c63c:	4d0b      	ldr	r5, [pc, #44]	; (801c66c <__libc_init_array+0x40>)
 801c63e:	4c0c      	ldr	r4, [pc, #48]	; (801c670 <__libc_init_array+0x44>)
 801c640:	f000 ffb8 	bl	801d5b4 <_init>
 801c644:	1b64      	subs	r4, r4, r5
 801c646:	10a4      	asrs	r4, r4, #2
 801c648:	2600      	movs	r6, #0
 801c64a:	42a6      	cmp	r6, r4
 801c64c:	d105      	bne.n	801c65a <__libc_init_array+0x2e>
 801c64e:	bd70      	pop	{r4, r5, r6, pc}
 801c650:	f855 3b04 	ldr.w	r3, [r5], #4
 801c654:	4798      	blx	r3
 801c656:	3601      	adds	r6, #1
 801c658:	e7ee      	b.n	801c638 <__libc_init_array+0xc>
 801c65a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c65e:	4798      	blx	r3
 801c660:	3601      	adds	r6, #1
 801c662:	e7f2      	b.n	801c64a <__libc_init_array+0x1e>
 801c664:	0801d5d4 	.word	0x0801d5d4
 801c668:	0801d5d4 	.word	0x0801d5d4
 801c66c:	0801d5d4 	.word	0x0801d5d4
 801c670:	0801d5dc 	.word	0x0801d5dc

0801c674 <__retarget_lock_init_recursive>:
 801c674:	4770      	bx	lr

0801c676 <__retarget_lock_acquire_recursive>:
 801c676:	4770      	bx	lr

0801c678 <__retarget_lock_release_recursive>:
 801c678:	4770      	bx	lr
	...

0801c67c <malloc>:
 801c67c:	4b02      	ldr	r3, [pc, #8]	; (801c688 <malloc+0xc>)
 801c67e:	4601      	mov	r1, r0
 801c680:	6818      	ldr	r0, [r3, #0]
 801c682:	f000 b88d 	b.w	801c7a0 <_malloc_r>
 801c686:	bf00      	nop
 801c688:	240081cc 	.word	0x240081cc

0801c68c <free>:
 801c68c:	4b02      	ldr	r3, [pc, #8]	; (801c698 <free+0xc>)
 801c68e:	4601      	mov	r1, r0
 801c690:	6818      	ldr	r0, [r3, #0]
 801c692:	f000 b819 	b.w	801c6c8 <_free_r>
 801c696:	bf00      	nop
 801c698:	240081cc 	.word	0x240081cc

0801c69c <memcpy>:
 801c69c:	440a      	add	r2, r1
 801c69e:	4291      	cmp	r1, r2
 801c6a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c6a4:	d100      	bne.n	801c6a8 <memcpy+0xc>
 801c6a6:	4770      	bx	lr
 801c6a8:	b510      	push	{r4, lr}
 801c6aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c6ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c6b2:	4291      	cmp	r1, r2
 801c6b4:	d1f9      	bne.n	801c6aa <memcpy+0xe>
 801c6b6:	bd10      	pop	{r4, pc}

0801c6b8 <memset>:
 801c6b8:	4402      	add	r2, r0
 801c6ba:	4603      	mov	r3, r0
 801c6bc:	4293      	cmp	r3, r2
 801c6be:	d100      	bne.n	801c6c2 <memset+0xa>
 801c6c0:	4770      	bx	lr
 801c6c2:	f803 1b01 	strb.w	r1, [r3], #1
 801c6c6:	e7f9      	b.n	801c6bc <memset+0x4>

0801c6c8 <_free_r>:
 801c6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c6ca:	2900      	cmp	r1, #0
 801c6cc:	d044      	beq.n	801c758 <_free_r+0x90>
 801c6ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c6d2:	9001      	str	r0, [sp, #4]
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	f1a1 0404 	sub.w	r4, r1, #4
 801c6da:	bfb8      	it	lt
 801c6dc:	18e4      	addlt	r4, r4, r3
 801c6de:	f000 fc3b 	bl	801cf58 <__malloc_lock>
 801c6e2:	4a1e      	ldr	r2, [pc, #120]	; (801c75c <_free_r+0x94>)
 801c6e4:	9801      	ldr	r0, [sp, #4]
 801c6e6:	6813      	ldr	r3, [r2, #0]
 801c6e8:	b933      	cbnz	r3, 801c6f8 <_free_r+0x30>
 801c6ea:	6063      	str	r3, [r4, #4]
 801c6ec:	6014      	str	r4, [r2, #0]
 801c6ee:	b003      	add	sp, #12
 801c6f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c6f4:	f000 bc36 	b.w	801cf64 <__malloc_unlock>
 801c6f8:	42a3      	cmp	r3, r4
 801c6fa:	d908      	bls.n	801c70e <_free_r+0x46>
 801c6fc:	6825      	ldr	r5, [r4, #0]
 801c6fe:	1961      	adds	r1, r4, r5
 801c700:	428b      	cmp	r3, r1
 801c702:	bf01      	itttt	eq
 801c704:	6819      	ldreq	r1, [r3, #0]
 801c706:	685b      	ldreq	r3, [r3, #4]
 801c708:	1949      	addeq	r1, r1, r5
 801c70a:	6021      	streq	r1, [r4, #0]
 801c70c:	e7ed      	b.n	801c6ea <_free_r+0x22>
 801c70e:	461a      	mov	r2, r3
 801c710:	685b      	ldr	r3, [r3, #4]
 801c712:	b10b      	cbz	r3, 801c718 <_free_r+0x50>
 801c714:	42a3      	cmp	r3, r4
 801c716:	d9fa      	bls.n	801c70e <_free_r+0x46>
 801c718:	6811      	ldr	r1, [r2, #0]
 801c71a:	1855      	adds	r5, r2, r1
 801c71c:	42a5      	cmp	r5, r4
 801c71e:	d10b      	bne.n	801c738 <_free_r+0x70>
 801c720:	6824      	ldr	r4, [r4, #0]
 801c722:	4421      	add	r1, r4
 801c724:	1854      	adds	r4, r2, r1
 801c726:	42a3      	cmp	r3, r4
 801c728:	6011      	str	r1, [r2, #0]
 801c72a:	d1e0      	bne.n	801c6ee <_free_r+0x26>
 801c72c:	681c      	ldr	r4, [r3, #0]
 801c72e:	685b      	ldr	r3, [r3, #4]
 801c730:	6053      	str	r3, [r2, #4]
 801c732:	4421      	add	r1, r4
 801c734:	6011      	str	r1, [r2, #0]
 801c736:	e7da      	b.n	801c6ee <_free_r+0x26>
 801c738:	d902      	bls.n	801c740 <_free_r+0x78>
 801c73a:	230c      	movs	r3, #12
 801c73c:	6003      	str	r3, [r0, #0]
 801c73e:	e7d6      	b.n	801c6ee <_free_r+0x26>
 801c740:	6825      	ldr	r5, [r4, #0]
 801c742:	1961      	adds	r1, r4, r5
 801c744:	428b      	cmp	r3, r1
 801c746:	bf04      	itt	eq
 801c748:	6819      	ldreq	r1, [r3, #0]
 801c74a:	685b      	ldreq	r3, [r3, #4]
 801c74c:	6063      	str	r3, [r4, #4]
 801c74e:	bf04      	itt	eq
 801c750:	1949      	addeq	r1, r1, r5
 801c752:	6021      	streq	r1, [r4, #0]
 801c754:	6054      	str	r4, [r2, #4]
 801c756:	e7ca      	b.n	801c6ee <_free_r+0x26>
 801c758:	b003      	add	sp, #12
 801c75a:	bd30      	pop	{r4, r5, pc}
 801c75c:	24034d30 	.word	0x24034d30

0801c760 <sbrk_aligned>:
 801c760:	b570      	push	{r4, r5, r6, lr}
 801c762:	4e0e      	ldr	r6, [pc, #56]	; (801c79c <sbrk_aligned+0x3c>)
 801c764:	460c      	mov	r4, r1
 801c766:	6831      	ldr	r1, [r6, #0]
 801c768:	4605      	mov	r5, r0
 801c76a:	b911      	cbnz	r1, 801c772 <sbrk_aligned+0x12>
 801c76c:	f000 f984 	bl	801ca78 <_sbrk_r>
 801c770:	6030      	str	r0, [r6, #0]
 801c772:	4621      	mov	r1, r4
 801c774:	4628      	mov	r0, r5
 801c776:	f000 f97f 	bl	801ca78 <_sbrk_r>
 801c77a:	1c43      	adds	r3, r0, #1
 801c77c:	d00a      	beq.n	801c794 <sbrk_aligned+0x34>
 801c77e:	1cc4      	adds	r4, r0, #3
 801c780:	f024 0403 	bic.w	r4, r4, #3
 801c784:	42a0      	cmp	r0, r4
 801c786:	d007      	beq.n	801c798 <sbrk_aligned+0x38>
 801c788:	1a21      	subs	r1, r4, r0
 801c78a:	4628      	mov	r0, r5
 801c78c:	f000 f974 	bl	801ca78 <_sbrk_r>
 801c790:	3001      	adds	r0, #1
 801c792:	d101      	bne.n	801c798 <sbrk_aligned+0x38>
 801c794:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c798:	4620      	mov	r0, r4
 801c79a:	bd70      	pop	{r4, r5, r6, pc}
 801c79c:	24034d34 	.word	0x24034d34

0801c7a0 <_malloc_r>:
 801c7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7a4:	1ccd      	adds	r5, r1, #3
 801c7a6:	f025 0503 	bic.w	r5, r5, #3
 801c7aa:	3508      	adds	r5, #8
 801c7ac:	2d0c      	cmp	r5, #12
 801c7ae:	bf38      	it	cc
 801c7b0:	250c      	movcc	r5, #12
 801c7b2:	2d00      	cmp	r5, #0
 801c7b4:	4607      	mov	r7, r0
 801c7b6:	db01      	blt.n	801c7bc <_malloc_r+0x1c>
 801c7b8:	42a9      	cmp	r1, r5
 801c7ba:	d905      	bls.n	801c7c8 <_malloc_r+0x28>
 801c7bc:	230c      	movs	r3, #12
 801c7be:	603b      	str	r3, [r7, #0]
 801c7c0:	2600      	movs	r6, #0
 801c7c2:	4630      	mov	r0, r6
 801c7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7c8:	4e2e      	ldr	r6, [pc, #184]	; (801c884 <_malloc_r+0xe4>)
 801c7ca:	f000 fbc5 	bl	801cf58 <__malloc_lock>
 801c7ce:	6833      	ldr	r3, [r6, #0]
 801c7d0:	461c      	mov	r4, r3
 801c7d2:	bb34      	cbnz	r4, 801c822 <_malloc_r+0x82>
 801c7d4:	4629      	mov	r1, r5
 801c7d6:	4638      	mov	r0, r7
 801c7d8:	f7ff ffc2 	bl	801c760 <sbrk_aligned>
 801c7dc:	1c43      	adds	r3, r0, #1
 801c7de:	4604      	mov	r4, r0
 801c7e0:	d14d      	bne.n	801c87e <_malloc_r+0xde>
 801c7e2:	6834      	ldr	r4, [r6, #0]
 801c7e4:	4626      	mov	r6, r4
 801c7e6:	2e00      	cmp	r6, #0
 801c7e8:	d140      	bne.n	801c86c <_malloc_r+0xcc>
 801c7ea:	6823      	ldr	r3, [r4, #0]
 801c7ec:	4631      	mov	r1, r6
 801c7ee:	4638      	mov	r0, r7
 801c7f0:	eb04 0803 	add.w	r8, r4, r3
 801c7f4:	f000 f940 	bl	801ca78 <_sbrk_r>
 801c7f8:	4580      	cmp	r8, r0
 801c7fa:	d13a      	bne.n	801c872 <_malloc_r+0xd2>
 801c7fc:	6821      	ldr	r1, [r4, #0]
 801c7fe:	3503      	adds	r5, #3
 801c800:	1a6d      	subs	r5, r5, r1
 801c802:	f025 0503 	bic.w	r5, r5, #3
 801c806:	3508      	adds	r5, #8
 801c808:	2d0c      	cmp	r5, #12
 801c80a:	bf38      	it	cc
 801c80c:	250c      	movcc	r5, #12
 801c80e:	4629      	mov	r1, r5
 801c810:	4638      	mov	r0, r7
 801c812:	f7ff ffa5 	bl	801c760 <sbrk_aligned>
 801c816:	3001      	adds	r0, #1
 801c818:	d02b      	beq.n	801c872 <_malloc_r+0xd2>
 801c81a:	6823      	ldr	r3, [r4, #0]
 801c81c:	442b      	add	r3, r5
 801c81e:	6023      	str	r3, [r4, #0]
 801c820:	e00e      	b.n	801c840 <_malloc_r+0xa0>
 801c822:	6822      	ldr	r2, [r4, #0]
 801c824:	1b52      	subs	r2, r2, r5
 801c826:	d41e      	bmi.n	801c866 <_malloc_r+0xc6>
 801c828:	2a0b      	cmp	r2, #11
 801c82a:	d916      	bls.n	801c85a <_malloc_r+0xba>
 801c82c:	1961      	adds	r1, r4, r5
 801c82e:	42a3      	cmp	r3, r4
 801c830:	6025      	str	r5, [r4, #0]
 801c832:	bf18      	it	ne
 801c834:	6059      	strne	r1, [r3, #4]
 801c836:	6863      	ldr	r3, [r4, #4]
 801c838:	bf08      	it	eq
 801c83a:	6031      	streq	r1, [r6, #0]
 801c83c:	5162      	str	r2, [r4, r5]
 801c83e:	604b      	str	r3, [r1, #4]
 801c840:	4638      	mov	r0, r7
 801c842:	f104 060b 	add.w	r6, r4, #11
 801c846:	f000 fb8d 	bl	801cf64 <__malloc_unlock>
 801c84a:	f026 0607 	bic.w	r6, r6, #7
 801c84e:	1d23      	adds	r3, r4, #4
 801c850:	1af2      	subs	r2, r6, r3
 801c852:	d0b6      	beq.n	801c7c2 <_malloc_r+0x22>
 801c854:	1b9b      	subs	r3, r3, r6
 801c856:	50a3      	str	r3, [r4, r2]
 801c858:	e7b3      	b.n	801c7c2 <_malloc_r+0x22>
 801c85a:	6862      	ldr	r2, [r4, #4]
 801c85c:	42a3      	cmp	r3, r4
 801c85e:	bf0c      	ite	eq
 801c860:	6032      	streq	r2, [r6, #0]
 801c862:	605a      	strne	r2, [r3, #4]
 801c864:	e7ec      	b.n	801c840 <_malloc_r+0xa0>
 801c866:	4623      	mov	r3, r4
 801c868:	6864      	ldr	r4, [r4, #4]
 801c86a:	e7b2      	b.n	801c7d2 <_malloc_r+0x32>
 801c86c:	4634      	mov	r4, r6
 801c86e:	6876      	ldr	r6, [r6, #4]
 801c870:	e7b9      	b.n	801c7e6 <_malloc_r+0x46>
 801c872:	230c      	movs	r3, #12
 801c874:	603b      	str	r3, [r7, #0]
 801c876:	4638      	mov	r0, r7
 801c878:	f000 fb74 	bl	801cf64 <__malloc_unlock>
 801c87c:	e7a1      	b.n	801c7c2 <_malloc_r+0x22>
 801c87e:	6025      	str	r5, [r4, #0]
 801c880:	e7de      	b.n	801c840 <_malloc_r+0xa0>
 801c882:	bf00      	nop
 801c884:	24034d30 	.word	0x24034d30

0801c888 <iprintf>:
 801c888:	b40f      	push	{r0, r1, r2, r3}
 801c88a:	4b0a      	ldr	r3, [pc, #40]	; (801c8b4 <iprintf+0x2c>)
 801c88c:	b513      	push	{r0, r1, r4, lr}
 801c88e:	681c      	ldr	r4, [r3, #0]
 801c890:	b124      	cbz	r4, 801c89c <iprintf+0x14>
 801c892:	69a3      	ldr	r3, [r4, #24]
 801c894:	b913      	cbnz	r3, 801c89c <iprintf+0x14>
 801c896:	4620      	mov	r0, r4
 801c898:	f7ff fe2a 	bl	801c4f0 <__sinit>
 801c89c:	ab05      	add	r3, sp, #20
 801c89e:	9a04      	ldr	r2, [sp, #16]
 801c8a0:	68a1      	ldr	r1, [r4, #8]
 801c8a2:	9301      	str	r3, [sp, #4]
 801c8a4:	4620      	mov	r0, r4
 801c8a6:	f000 fb8d 	bl	801cfc4 <_vfiprintf_r>
 801c8aa:	b002      	add	sp, #8
 801c8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c8b0:	b004      	add	sp, #16
 801c8b2:	4770      	bx	lr
 801c8b4:	240081cc 	.word	0x240081cc

0801c8b8 <_puts_r>:
 801c8b8:	b570      	push	{r4, r5, r6, lr}
 801c8ba:	460e      	mov	r6, r1
 801c8bc:	4605      	mov	r5, r0
 801c8be:	b118      	cbz	r0, 801c8c8 <_puts_r+0x10>
 801c8c0:	6983      	ldr	r3, [r0, #24]
 801c8c2:	b90b      	cbnz	r3, 801c8c8 <_puts_r+0x10>
 801c8c4:	f7ff fe14 	bl	801c4f0 <__sinit>
 801c8c8:	69ab      	ldr	r3, [r5, #24]
 801c8ca:	68ac      	ldr	r4, [r5, #8]
 801c8cc:	b913      	cbnz	r3, 801c8d4 <_puts_r+0x1c>
 801c8ce:	4628      	mov	r0, r5
 801c8d0:	f7ff fe0e 	bl	801c4f0 <__sinit>
 801c8d4:	4b2c      	ldr	r3, [pc, #176]	; (801c988 <_puts_r+0xd0>)
 801c8d6:	429c      	cmp	r4, r3
 801c8d8:	d120      	bne.n	801c91c <_puts_r+0x64>
 801c8da:	686c      	ldr	r4, [r5, #4]
 801c8dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c8de:	07db      	lsls	r3, r3, #31
 801c8e0:	d405      	bmi.n	801c8ee <_puts_r+0x36>
 801c8e2:	89a3      	ldrh	r3, [r4, #12]
 801c8e4:	0598      	lsls	r0, r3, #22
 801c8e6:	d402      	bmi.n	801c8ee <_puts_r+0x36>
 801c8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c8ea:	f7ff fec4 	bl	801c676 <__retarget_lock_acquire_recursive>
 801c8ee:	89a3      	ldrh	r3, [r4, #12]
 801c8f0:	0719      	lsls	r1, r3, #28
 801c8f2:	d51d      	bpl.n	801c930 <_puts_r+0x78>
 801c8f4:	6923      	ldr	r3, [r4, #16]
 801c8f6:	b1db      	cbz	r3, 801c930 <_puts_r+0x78>
 801c8f8:	3e01      	subs	r6, #1
 801c8fa:	68a3      	ldr	r3, [r4, #8]
 801c8fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c900:	3b01      	subs	r3, #1
 801c902:	60a3      	str	r3, [r4, #8]
 801c904:	bb39      	cbnz	r1, 801c956 <_puts_r+0x9e>
 801c906:	2b00      	cmp	r3, #0
 801c908:	da38      	bge.n	801c97c <_puts_r+0xc4>
 801c90a:	4622      	mov	r2, r4
 801c90c:	210a      	movs	r1, #10
 801c90e:	4628      	mov	r0, r5
 801c910:	f000 f906 	bl	801cb20 <__swbuf_r>
 801c914:	3001      	adds	r0, #1
 801c916:	d011      	beq.n	801c93c <_puts_r+0x84>
 801c918:	250a      	movs	r5, #10
 801c91a:	e011      	b.n	801c940 <_puts_r+0x88>
 801c91c:	4b1b      	ldr	r3, [pc, #108]	; (801c98c <_puts_r+0xd4>)
 801c91e:	429c      	cmp	r4, r3
 801c920:	d101      	bne.n	801c926 <_puts_r+0x6e>
 801c922:	68ac      	ldr	r4, [r5, #8]
 801c924:	e7da      	b.n	801c8dc <_puts_r+0x24>
 801c926:	4b1a      	ldr	r3, [pc, #104]	; (801c990 <_puts_r+0xd8>)
 801c928:	429c      	cmp	r4, r3
 801c92a:	bf08      	it	eq
 801c92c:	68ec      	ldreq	r4, [r5, #12]
 801c92e:	e7d5      	b.n	801c8dc <_puts_r+0x24>
 801c930:	4621      	mov	r1, r4
 801c932:	4628      	mov	r0, r5
 801c934:	f000 f958 	bl	801cbe8 <__swsetup_r>
 801c938:	2800      	cmp	r0, #0
 801c93a:	d0dd      	beq.n	801c8f8 <_puts_r+0x40>
 801c93c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c942:	07da      	lsls	r2, r3, #31
 801c944:	d405      	bmi.n	801c952 <_puts_r+0x9a>
 801c946:	89a3      	ldrh	r3, [r4, #12]
 801c948:	059b      	lsls	r3, r3, #22
 801c94a:	d402      	bmi.n	801c952 <_puts_r+0x9a>
 801c94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c94e:	f7ff fe93 	bl	801c678 <__retarget_lock_release_recursive>
 801c952:	4628      	mov	r0, r5
 801c954:	bd70      	pop	{r4, r5, r6, pc}
 801c956:	2b00      	cmp	r3, #0
 801c958:	da04      	bge.n	801c964 <_puts_r+0xac>
 801c95a:	69a2      	ldr	r2, [r4, #24]
 801c95c:	429a      	cmp	r2, r3
 801c95e:	dc06      	bgt.n	801c96e <_puts_r+0xb6>
 801c960:	290a      	cmp	r1, #10
 801c962:	d004      	beq.n	801c96e <_puts_r+0xb6>
 801c964:	6823      	ldr	r3, [r4, #0]
 801c966:	1c5a      	adds	r2, r3, #1
 801c968:	6022      	str	r2, [r4, #0]
 801c96a:	7019      	strb	r1, [r3, #0]
 801c96c:	e7c5      	b.n	801c8fa <_puts_r+0x42>
 801c96e:	4622      	mov	r2, r4
 801c970:	4628      	mov	r0, r5
 801c972:	f000 f8d5 	bl	801cb20 <__swbuf_r>
 801c976:	3001      	adds	r0, #1
 801c978:	d1bf      	bne.n	801c8fa <_puts_r+0x42>
 801c97a:	e7df      	b.n	801c93c <_puts_r+0x84>
 801c97c:	6823      	ldr	r3, [r4, #0]
 801c97e:	250a      	movs	r5, #10
 801c980:	1c5a      	adds	r2, r3, #1
 801c982:	6022      	str	r2, [r4, #0]
 801c984:	701d      	strb	r5, [r3, #0]
 801c986:	e7db      	b.n	801c940 <_puts_r+0x88>
 801c988:	24008508 	.word	0x24008508
 801c98c:	24008528 	.word	0x24008528
 801c990:	240084e8 	.word	0x240084e8

0801c994 <puts>:
 801c994:	4b02      	ldr	r3, [pc, #8]	; (801c9a0 <puts+0xc>)
 801c996:	4601      	mov	r1, r0
 801c998:	6818      	ldr	r0, [r3, #0]
 801c99a:	f7ff bf8d 	b.w	801c8b8 <_puts_r>
 801c99e:	bf00      	nop
 801c9a0:	240081cc 	.word	0x240081cc

0801c9a4 <cleanup_glue>:
 801c9a4:	b538      	push	{r3, r4, r5, lr}
 801c9a6:	460c      	mov	r4, r1
 801c9a8:	6809      	ldr	r1, [r1, #0]
 801c9aa:	4605      	mov	r5, r0
 801c9ac:	b109      	cbz	r1, 801c9b2 <cleanup_glue+0xe>
 801c9ae:	f7ff fff9 	bl	801c9a4 <cleanup_glue>
 801c9b2:	4621      	mov	r1, r4
 801c9b4:	4628      	mov	r0, r5
 801c9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c9ba:	f7ff be85 	b.w	801c6c8 <_free_r>
	...

0801c9c0 <_reclaim_reent>:
 801c9c0:	4b2c      	ldr	r3, [pc, #176]	; (801ca74 <_reclaim_reent+0xb4>)
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	4283      	cmp	r3, r0
 801c9c6:	b570      	push	{r4, r5, r6, lr}
 801c9c8:	4604      	mov	r4, r0
 801c9ca:	d051      	beq.n	801ca70 <_reclaim_reent+0xb0>
 801c9cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c9ce:	b143      	cbz	r3, 801c9e2 <_reclaim_reent+0x22>
 801c9d0:	68db      	ldr	r3, [r3, #12]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d14a      	bne.n	801ca6c <_reclaim_reent+0xac>
 801c9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c9d8:	6819      	ldr	r1, [r3, #0]
 801c9da:	b111      	cbz	r1, 801c9e2 <_reclaim_reent+0x22>
 801c9dc:	4620      	mov	r0, r4
 801c9de:	f7ff fe73 	bl	801c6c8 <_free_r>
 801c9e2:	6961      	ldr	r1, [r4, #20]
 801c9e4:	b111      	cbz	r1, 801c9ec <_reclaim_reent+0x2c>
 801c9e6:	4620      	mov	r0, r4
 801c9e8:	f7ff fe6e 	bl	801c6c8 <_free_r>
 801c9ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c9ee:	b111      	cbz	r1, 801c9f6 <_reclaim_reent+0x36>
 801c9f0:	4620      	mov	r0, r4
 801c9f2:	f7ff fe69 	bl	801c6c8 <_free_r>
 801c9f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c9f8:	b111      	cbz	r1, 801ca00 <_reclaim_reent+0x40>
 801c9fa:	4620      	mov	r0, r4
 801c9fc:	f7ff fe64 	bl	801c6c8 <_free_r>
 801ca00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ca02:	b111      	cbz	r1, 801ca0a <_reclaim_reent+0x4a>
 801ca04:	4620      	mov	r0, r4
 801ca06:	f7ff fe5f 	bl	801c6c8 <_free_r>
 801ca0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ca0c:	b111      	cbz	r1, 801ca14 <_reclaim_reent+0x54>
 801ca0e:	4620      	mov	r0, r4
 801ca10:	f7ff fe5a 	bl	801c6c8 <_free_r>
 801ca14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ca16:	b111      	cbz	r1, 801ca1e <_reclaim_reent+0x5e>
 801ca18:	4620      	mov	r0, r4
 801ca1a:	f7ff fe55 	bl	801c6c8 <_free_r>
 801ca1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ca20:	b111      	cbz	r1, 801ca28 <_reclaim_reent+0x68>
 801ca22:	4620      	mov	r0, r4
 801ca24:	f7ff fe50 	bl	801c6c8 <_free_r>
 801ca28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ca2a:	b111      	cbz	r1, 801ca32 <_reclaim_reent+0x72>
 801ca2c:	4620      	mov	r0, r4
 801ca2e:	f7ff fe4b 	bl	801c6c8 <_free_r>
 801ca32:	69a3      	ldr	r3, [r4, #24]
 801ca34:	b1e3      	cbz	r3, 801ca70 <_reclaim_reent+0xb0>
 801ca36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ca38:	4620      	mov	r0, r4
 801ca3a:	4798      	blx	r3
 801ca3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ca3e:	b1b9      	cbz	r1, 801ca70 <_reclaim_reent+0xb0>
 801ca40:	4620      	mov	r0, r4
 801ca42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca46:	f7ff bfad 	b.w	801c9a4 <cleanup_glue>
 801ca4a:	5949      	ldr	r1, [r1, r5]
 801ca4c:	b941      	cbnz	r1, 801ca60 <_reclaim_reent+0xa0>
 801ca4e:	3504      	adds	r5, #4
 801ca50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ca52:	2d80      	cmp	r5, #128	; 0x80
 801ca54:	68d9      	ldr	r1, [r3, #12]
 801ca56:	d1f8      	bne.n	801ca4a <_reclaim_reent+0x8a>
 801ca58:	4620      	mov	r0, r4
 801ca5a:	f7ff fe35 	bl	801c6c8 <_free_r>
 801ca5e:	e7ba      	b.n	801c9d6 <_reclaim_reent+0x16>
 801ca60:	680e      	ldr	r6, [r1, #0]
 801ca62:	4620      	mov	r0, r4
 801ca64:	f7ff fe30 	bl	801c6c8 <_free_r>
 801ca68:	4631      	mov	r1, r6
 801ca6a:	e7ef      	b.n	801ca4c <_reclaim_reent+0x8c>
 801ca6c:	2500      	movs	r5, #0
 801ca6e:	e7ef      	b.n	801ca50 <_reclaim_reent+0x90>
 801ca70:	bd70      	pop	{r4, r5, r6, pc}
 801ca72:	bf00      	nop
 801ca74:	240081cc 	.word	0x240081cc

0801ca78 <_sbrk_r>:
 801ca78:	b538      	push	{r3, r4, r5, lr}
 801ca7a:	4d06      	ldr	r5, [pc, #24]	; (801ca94 <_sbrk_r+0x1c>)
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	4604      	mov	r4, r0
 801ca80:	4608      	mov	r0, r1
 801ca82:	602b      	str	r3, [r5, #0]
 801ca84:	f7ee fba4 	bl	800b1d0 <_sbrk>
 801ca88:	1c43      	adds	r3, r0, #1
 801ca8a:	d102      	bne.n	801ca92 <_sbrk_r+0x1a>
 801ca8c:	682b      	ldr	r3, [r5, #0]
 801ca8e:	b103      	cbz	r3, 801ca92 <_sbrk_r+0x1a>
 801ca90:	6023      	str	r3, [r4, #0]
 801ca92:	bd38      	pop	{r3, r4, r5, pc}
 801ca94:	24034d38 	.word	0x24034d38

0801ca98 <__sread>:
 801ca98:	b510      	push	{r4, lr}
 801ca9a:	460c      	mov	r4, r1
 801ca9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801caa0:	f000 fd54 	bl	801d54c <_read_r>
 801caa4:	2800      	cmp	r0, #0
 801caa6:	bfab      	itete	ge
 801caa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801caaa:	89a3      	ldrhlt	r3, [r4, #12]
 801caac:	181b      	addge	r3, r3, r0
 801caae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cab2:	bfac      	ite	ge
 801cab4:	6563      	strge	r3, [r4, #84]	; 0x54
 801cab6:	81a3      	strhlt	r3, [r4, #12]
 801cab8:	bd10      	pop	{r4, pc}

0801caba <__swrite>:
 801caba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cabe:	461f      	mov	r7, r3
 801cac0:	898b      	ldrh	r3, [r1, #12]
 801cac2:	05db      	lsls	r3, r3, #23
 801cac4:	4605      	mov	r5, r0
 801cac6:	460c      	mov	r4, r1
 801cac8:	4616      	mov	r6, r2
 801caca:	d505      	bpl.n	801cad8 <__swrite+0x1e>
 801cacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cad0:	2302      	movs	r3, #2
 801cad2:	2200      	movs	r2, #0
 801cad4:	f000 f9c8 	bl	801ce68 <_lseek_r>
 801cad8:	89a3      	ldrh	r3, [r4, #12]
 801cada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cae2:	81a3      	strh	r3, [r4, #12]
 801cae4:	4632      	mov	r2, r6
 801cae6:	463b      	mov	r3, r7
 801cae8:	4628      	mov	r0, r5
 801caea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801caee:	f000 b869 	b.w	801cbc4 <_write_r>

0801caf2 <__sseek>:
 801caf2:	b510      	push	{r4, lr}
 801caf4:	460c      	mov	r4, r1
 801caf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cafa:	f000 f9b5 	bl	801ce68 <_lseek_r>
 801cafe:	1c43      	adds	r3, r0, #1
 801cb00:	89a3      	ldrh	r3, [r4, #12]
 801cb02:	bf15      	itete	ne
 801cb04:	6560      	strne	r0, [r4, #84]	; 0x54
 801cb06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cb0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cb0e:	81a3      	strheq	r3, [r4, #12]
 801cb10:	bf18      	it	ne
 801cb12:	81a3      	strhne	r3, [r4, #12]
 801cb14:	bd10      	pop	{r4, pc}

0801cb16 <__sclose>:
 801cb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb1a:	f000 b8d3 	b.w	801ccc4 <_close_r>
	...

0801cb20 <__swbuf_r>:
 801cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb22:	460e      	mov	r6, r1
 801cb24:	4614      	mov	r4, r2
 801cb26:	4605      	mov	r5, r0
 801cb28:	b118      	cbz	r0, 801cb32 <__swbuf_r+0x12>
 801cb2a:	6983      	ldr	r3, [r0, #24]
 801cb2c:	b90b      	cbnz	r3, 801cb32 <__swbuf_r+0x12>
 801cb2e:	f7ff fcdf 	bl	801c4f0 <__sinit>
 801cb32:	4b21      	ldr	r3, [pc, #132]	; (801cbb8 <__swbuf_r+0x98>)
 801cb34:	429c      	cmp	r4, r3
 801cb36:	d12b      	bne.n	801cb90 <__swbuf_r+0x70>
 801cb38:	686c      	ldr	r4, [r5, #4]
 801cb3a:	69a3      	ldr	r3, [r4, #24]
 801cb3c:	60a3      	str	r3, [r4, #8]
 801cb3e:	89a3      	ldrh	r3, [r4, #12]
 801cb40:	071a      	lsls	r2, r3, #28
 801cb42:	d52f      	bpl.n	801cba4 <__swbuf_r+0x84>
 801cb44:	6923      	ldr	r3, [r4, #16]
 801cb46:	b36b      	cbz	r3, 801cba4 <__swbuf_r+0x84>
 801cb48:	6923      	ldr	r3, [r4, #16]
 801cb4a:	6820      	ldr	r0, [r4, #0]
 801cb4c:	1ac0      	subs	r0, r0, r3
 801cb4e:	6963      	ldr	r3, [r4, #20]
 801cb50:	b2f6      	uxtb	r6, r6
 801cb52:	4283      	cmp	r3, r0
 801cb54:	4637      	mov	r7, r6
 801cb56:	dc04      	bgt.n	801cb62 <__swbuf_r+0x42>
 801cb58:	4621      	mov	r1, r4
 801cb5a:	4628      	mov	r0, r5
 801cb5c:	f000 f948 	bl	801cdf0 <_fflush_r>
 801cb60:	bb30      	cbnz	r0, 801cbb0 <__swbuf_r+0x90>
 801cb62:	68a3      	ldr	r3, [r4, #8]
 801cb64:	3b01      	subs	r3, #1
 801cb66:	60a3      	str	r3, [r4, #8]
 801cb68:	6823      	ldr	r3, [r4, #0]
 801cb6a:	1c5a      	adds	r2, r3, #1
 801cb6c:	6022      	str	r2, [r4, #0]
 801cb6e:	701e      	strb	r6, [r3, #0]
 801cb70:	6963      	ldr	r3, [r4, #20]
 801cb72:	3001      	adds	r0, #1
 801cb74:	4283      	cmp	r3, r0
 801cb76:	d004      	beq.n	801cb82 <__swbuf_r+0x62>
 801cb78:	89a3      	ldrh	r3, [r4, #12]
 801cb7a:	07db      	lsls	r3, r3, #31
 801cb7c:	d506      	bpl.n	801cb8c <__swbuf_r+0x6c>
 801cb7e:	2e0a      	cmp	r6, #10
 801cb80:	d104      	bne.n	801cb8c <__swbuf_r+0x6c>
 801cb82:	4621      	mov	r1, r4
 801cb84:	4628      	mov	r0, r5
 801cb86:	f000 f933 	bl	801cdf0 <_fflush_r>
 801cb8a:	b988      	cbnz	r0, 801cbb0 <__swbuf_r+0x90>
 801cb8c:	4638      	mov	r0, r7
 801cb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb90:	4b0a      	ldr	r3, [pc, #40]	; (801cbbc <__swbuf_r+0x9c>)
 801cb92:	429c      	cmp	r4, r3
 801cb94:	d101      	bne.n	801cb9a <__swbuf_r+0x7a>
 801cb96:	68ac      	ldr	r4, [r5, #8]
 801cb98:	e7cf      	b.n	801cb3a <__swbuf_r+0x1a>
 801cb9a:	4b09      	ldr	r3, [pc, #36]	; (801cbc0 <__swbuf_r+0xa0>)
 801cb9c:	429c      	cmp	r4, r3
 801cb9e:	bf08      	it	eq
 801cba0:	68ec      	ldreq	r4, [r5, #12]
 801cba2:	e7ca      	b.n	801cb3a <__swbuf_r+0x1a>
 801cba4:	4621      	mov	r1, r4
 801cba6:	4628      	mov	r0, r5
 801cba8:	f000 f81e 	bl	801cbe8 <__swsetup_r>
 801cbac:	2800      	cmp	r0, #0
 801cbae:	d0cb      	beq.n	801cb48 <__swbuf_r+0x28>
 801cbb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801cbb4:	e7ea      	b.n	801cb8c <__swbuf_r+0x6c>
 801cbb6:	bf00      	nop
 801cbb8:	24008508 	.word	0x24008508
 801cbbc:	24008528 	.word	0x24008528
 801cbc0:	240084e8 	.word	0x240084e8

0801cbc4 <_write_r>:
 801cbc4:	b538      	push	{r3, r4, r5, lr}
 801cbc6:	4d07      	ldr	r5, [pc, #28]	; (801cbe4 <_write_r+0x20>)
 801cbc8:	4604      	mov	r4, r0
 801cbca:	4608      	mov	r0, r1
 801cbcc:	4611      	mov	r1, r2
 801cbce:	2200      	movs	r2, #0
 801cbd0:	602a      	str	r2, [r5, #0]
 801cbd2:	461a      	mov	r2, r3
 801cbd4:	f7ee faab 	bl	800b12e <_write>
 801cbd8:	1c43      	adds	r3, r0, #1
 801cbda:	d102      	bne.n	801cbe2 <_write_r+0x1e>
 801cbdc:	682b      	ldr	r3, [r5, #0]
 801cbde:	b103      	cbz	r3, 801cbe2 <_write_r+0x1e>
 801cbe0:	6023      	str	r3, [r4, #0]
 801cbe2:	bd38      	pop	{r3, r4, r5, pc}
 801cbe4:	24034d38 	.word	0x24034d38

0801cbe8 <__swsetup_r>:
 801cbe8:	4b32      	ldr	r3, [pc, #200]	; (801ccb4 <__swsetup_r+0xcc>)
 801cbea:	b570      	push	{r4, r5, r6, lr}
 801cbec:	681d      	ldr	r5, [r3, #0]
 801cbee:	4606      	mov	r6, r0
 801cbf0:	460c      	mov	r4, r1
 801cbf2:	b125      	cbz	r5, 801cbfe <__swsetup_r+0x16>
 801cbf4:	69ab      	ldr	r3, [r5, #24]
 801cbf6:	b913      	cbnz	r3, 801cbfe <__swsetup_r+0x16>
 801cbf8:	4628      	mov	r0, r5
 801cbfa:	f7ff fc79 	bl	801c4f0 <__sinit>
 801cbfe:	4b2e      	ldr	r3, [pc, #184]	; (801ccb8 <__swsetup_r+0xd0>)
 801cc00:	429c      	cmp	r4, r3
 801cc02:	d10f      	bne.n	801cc24 <__swsetup_r+0x3c>
 801cc04:	686c      	ldr	r4, [r5, #4]
 801cc06:	89a3      	ldrh	r3, [r4, #12]
 801cc08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cc0c:	0719      	lsls	r1, r3, #28
 801cc0e:	d42c      	bmi.n	801cc6a <__swsetup_r+0x82>
 801cc10:	06dd      	lsls	r5, r3, #27
 801cc12:	d411      	bmi.n	801cc38 <__swsetup_r+0x50>
 801cc14:	2309      	movs	r3, #9
 801cc16:	6033      	str	r3, [r6, #0]
 801cc18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cc1c:	81a3      	strh	r3, [r4, #12]
 801cc1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cc22:	e03e      	b.n	801cca2 <__swsetup_r+0xba>
 801cc24:	4b25      	ldr	r3, [pc, #148]	; (801ccbc <__swsetup_r+0xd4>)
 801cc26:	429c      	cmp	r4, r3
 801cc28:	d101      	bne.n	801cc2e <__swsetup_r+0x46>
 801cc2a:	68ac      	ldr	r4, [r5, #8]
 801cc2c:	e7eb      	b.n	801cc06 <__swsetup_r+0x1e>
 801cc2e:	4b24      	ldr	r3, [pc, #144]	; (801ccc0 <__swsetup_r+0xd8>)
 801cc30:	429c      	cmp	r4, r3
 801cc32:	bf08      	it	eq
 801cc34:	68ec      	ldreq	r4, [r5, #12]
 801cc36:	e7e6      	b.n	801cc06 <__swsetup_r+0x1e>
 801cc38:	0758      	lsls	r0, r3, #29
 801cc3a:	d512      	bpl.n	801cc62 <__swsetup_r+0x7a>
 801cc3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cc3e:	b141      	cbz	r1, 801cc52 <__swsetup_r+0x6a>
 801cc40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cc44:	4299      	cmp	r1, r3
 801cc46:	d002      	beq.n	801cc4e <__swsetup_r+0x66>
 801cc48:	4630      	mov	r0, r6
 801cc4a:	f7ff fd3d 	bl	801c6c8 <_free_r>
 801cc4e:	2300      	movs	r3, #0
 801cc50:	6363      	str	r3, [r4, #52]	; 0x34
 801cc52:	89a3      	ldrh	r3, [r4, #12]
 801cc54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cc58:	81a3      	strh	r3, [r4, #12]
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	6063      	str	r3, [r4, #4]
 801cc5e:	6923      	ldr	r3, [r4, #16]
 801cc60:	6023      	str	r3, [r4, #0]
 801cc62:	89a3      	ldrh	r3, [r4, #12]
 801cc64:	f043 0308 	orr.w	r3, r3, #8
 801cc68:	81a3      	strh	r3, [r4, #12]
 801cc6a:	6923      	ldr	r3, [r4, #16]
 801cc6c:	b94b      	cbnz	r3, 801cc82 <__swsetup_r+0x9a>
 801cc6e:	89a3      	ldrh	r3, [r4, #12]
 801cc70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cc74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cc78:	d003      	beq.n	801cc82 <__swsetup_r+0x9a>
 801cc7a:	4621      	mov	r1, r4
 801cc7c:	4630      	mov	r0, r6
 801cc7e:	f000 f92b 	bl	801ced8 <__smakebuf_r>
 801cc82:	89a0      	ldrh	r0, [r4, #12]
 801cc84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cc88:	f010 0301 	ands.w	r3, r0, #1
 801cc8c:	d00a      	beq.n	801cca4 <__swsetup_r+0xbc>
 801cc8e:	2300      	movs	r3, #0
 801cc90:	60a3      	str	r3, [r4, #8]
 801cc92:	6963      	ldr	r3, [r4, #20]
 801cc94:	425b      	negs	r3, r3
 801cc96:	61a3      	str	r3, [r4, #24]
 801cc98:	6923      	ldr	r3, [r4, #16]
 801cc9a:	b943      	cbnz	r3, 801ccae <__swsetup_r+0xc6>
 801cc9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cca0:	d1ba      	bne.n	801cc18 <__swsetup_r+0x30>
 801cca2:	bd70      	pop	{r4, r5, r6, pc}
 801cca4:	0781      	lsls	r1, r0, #30
 801cca6:	bf58      	it	pl
 801cca8:	6963      	ldrpl	r3, [r4, #20]
 801ccaa:	60a3      	str	r3, [r4, #8]
 801ccac:	e7f4      	b.n	801cc98 <__swsetup_r+0xb0>
 801ccae:	2000      	movs	r0, #0
 801ccb0:	e7f7      	b.n	801cca2 <__swsetup_r+0xba>
 801ccb2:	bf00      	nop
 801ccb4:	240081cc 	.word	0x240081cc
 801ccb8:	24008508 	.word	0x24008508
 801ccbc:	24008528 	.word	0x24008528
 801ccc0:	240084e8 	.word	0x240084e8

0801ccc4 <_close_r>:
 801ccc4:	b538      	push	{r3, r4, r5, lr}
 801ccc6:	4d06      	ldr	r5, [pc, #24]	; (801cce0 <_close_r+0x1c>)
 801ccc8:	2300      	movs	r3, #0
 801ccca:	4604      	mov	r4, r0
 801cccc:	4608      	mov	r0, r1
 801ccce:	602b      	str	r3, [r5, #0]
 801ccd0:	f7ee fa49 	bl	800b166 <_close>
 801ccd4:	1c43      	adds	r3, r0, #1
 801ccd6:	d102      	bne.n	801ccde <_close_r+0x1a>
 801ccd8:	682b      	ldr	r3, [r5, #0]
 801ccda:	b103      	cbz	r3, 801ccde <_close_r+0x1a>
 801ccdc:	6023      	str	r3, [r4, #0]
 801ccde:	bd38      	pop	{r3, r4, r5, pc}
 801cce0:	24034d38 	.word	0x24034d38

0801cce4 <__sflush_r>:
 801cce4:	898a      	ldrh	r2, [r1, #12]
 801cce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccea:	4605      	mov	r5, r0
 801ccec:	0710      	lsls	r0, r2, #28
 801ccee:	460c      	mov	r4, r1
 801ccf0:	d458      	bmi.n	801cda4 <__sflush_r+0xc0>
 801ccf2:	684b      	ldr	r3, [r1, #4]
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	dc05      	bgt.n	801cd04 <__sflush_r+0x20>
 801ccf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	dc02      	bgt.n	801cd04 <__sflush_r+0x20>
 801ccfe:	2000      	movs	r0, #0
 801cd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd06:	2e00      	cmp	r6, #0
 801cd08:	d0f9      	beq.n	801ccfe <__sflush_r+0x1a>
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cd10:	682f      	ldr	r7, [r5, #0]
 801cd12:	602b      	str	r3, [r5, #0]
 801cd14:	d032      	beq.n	801cd7c <__sflush_r+0x98>
 801cd16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cd18:	89a3      	ldrh	r3, [r4, #12]
 801cd1a:	075a      	lsls	r2, r3, #29
 801cd1c:	d505      	bpl.n	801cd2a <__sflush_r+0x46>
 801cd1e:	6863      	ldr	r3, [r4, #4]
 801cd20:	1ac0      	subs	r0, r0, r3
 801cd22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cd24:	b10b      	cbz	r3, 801cd2a <__sflush_r+0x46>
 801cd26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cd28:	1ac0      	subs	r0, r0, r3
 801cd2a:	2300      	movs	r3, #0
 801cd2c:	4602      	mov	r2, r0
 801cd2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd30:	6a21      	ldr	r1, [r4, #32]
 801cd32:	4628      	mov	r0, r5
 801cd34:	47b0      	blx	r6
 801cd36:	1c43      	adds	r3, r0, #1
 801cd38:	89a3      	ldrh	r3, [r4, #12]
 801cd3a:	d106      	bne.n	801cd4a <__sflush_r+0x66>
 801cd3c:	6829      	ldr	r1, [r5, #0]
 801cd3e:	291d      	cmp	r1, #29
 801cd40:	d82c      	bhi.n	801cd9c <__sflush_r+0xb8>
 801cd42:	4a2a      	ldr	r2, [pc, #168]	; (801cdec <__sflush_r+0x108>)
 801cd44:	40ca      	lsrs	r2, r1
 801cd46:	07d6      	lsls	r6, r2, #31
 801cd48:	d528      	bpl.n	801cd9c <__sflush_r+0xb8>
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	6062      	str	r2, [r4, #4]
 801cd4e:	04d9      	lsls	r1, r3, #19
 801cd50:	6922      	ldr	r2, [r4, #16]
 801cd52:	6022      	str	r2, [r4, #0]
 801cd54:	d504      	bpl.n	801cd60 <__sflush_r+0x7c>
 801cd56:	1c42      	adds	r2, r0, #1
 801cd58:	d101      	bne.n	801cd5e <__sflush_r+0x7a>
 801cd5a:	682b      	ldr	r3, [r5, #0]
 801cd5c:	b903      	cbnz	r3, 801cd60 <__sflush_r+0x7c>
 801cd5e:	6560      	str	r0, [r4, #84]	; 0x54
 801cd60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cd62:	602f      	str	r7, [r5, #0]
 801cd64:	2900      	cmp	r1, #0
 801cd66:	d0ca      	beq.n	801ccfe <__sflush_r+0x1a>
 801cd68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cd6c:	4299      	cmp	r1, r3
 801cd6e:	d002      	beq.n	801cd76 <__sflush_r+0x92>
 801cd70:	4628      	mov	r0, r5
 801cd72:	f7ff fca9 	bl	801c6c8 <_free_r>
 801cd76:	2000      	movs	r0, #0
 801cd78:	6360      	str	r0, [r4, #52]	; 0x34
 801cd7a:	e7c1      	b.n	801cd00 <__sflush_r+0x1c>
 801cd7c:	6a21      	ldr	r1, [r4, #32]
 801cd7e:	2301      	movs	r3, #1
 801cd80:	4628      	mov	r0, r5
 801cd82:	47b0      	blx	r6
 801cd84:	1c41      	adds	r1, r0, #1
 801cd86:	d1c7      	bne.n	801cd18 <__sflush_r+0x34>
 801cd88:	682b      	ldr	r3, [r5, #0]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d0c4      	beq.n	801cd18 <__sflush_r+0x34>
 801cd8e:	2b1d      	cmp	r3, #29
 801cd90:	d001      	beq.n	801cd96 <__sflush_r+0xb2>
 801cd92:	2b16      	cmp	r3, #22
 801cd94:	d101      	bne.n	801cd9a <__sflush_r+0xb6>
 801cd96:	602f      	str	r7, [r5, #0]
 801cd98:	e7b1      	b.n	801ccfe <__sflush_r+0x1a>
 801cd9a:	89a3      	ldrh	r3, [r4, #12]
 801cd9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cda0:	81a3      	strh	r3, [r4, #12]
 801cda2:	e7ad      	b.n	801cd00 <__sflush_r+0x1c>
 801cda4:	690f      	ldr	r7, [r1, #16]
 801cda6:	2f00      	cmp	r7, #0
 801cda8:	d0a9      	beq.n	801ccfe <__sflush_r+0x1a>
 801cdaa:	0793      	lsls	r3, r2, #30
 801cdac:	680e      	ldr	r6, [r1, #0]
 801cdae:	bf08      	it	eq
 801cdb0:	694b      	ldreq	r3, [r1, #20]
 801cdb2:	600f      	str	r7, [r1, #0]
 801cdb4:	bf18      	it	ne
 801cdb6:	2300      	movne	r3, #0
 801cdb8:	eba6 0807 	sub.w	r8, r6, r7
 801cdbc:	608b      	str	r3, [r1, #8]
 801cdbe:	f1b8 0f00 	cmp.w	r8, #0
 801cdc2:	dd9c      	ble.n	801ccfe <__sflush_r+0x1a>
 801cdc4:	6a21      	ldr	r1, [r4, #32]
 801cdc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cdc8:	4643      	mov	r3, r8
 801cdca:	463a      	mov	r2, r7
 801cdcc:	4628      	mov	r0, r5
 801cdce:	47b0      	blx	r6
 801cdd0:	2800      	cmp	r0, #0
 801cdd2:	dc06      	bgt.n	801cde2 <__sflush_r+0xfe>
 801cdd4:	89a3      	ldrh	r3, [r4, #12]
 801cdd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cdda:	81a3      	strh	r3, [r4, #12]
 801cddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cde0:	e78e      	b.n	801cd00 <__sflush_r+0x1c>
 801cde2:	4407      	add	r7, r0
 801cde4:	eba8 0800 	sub.w	r8, r8, r0
 801cde8:	e7e9      	b.n	801cdbe <__sflush_r+0xda>
 801cdea:	bf00      	nop
 801cdec:	20400001 	.word	0x20400001

0801cdf0 <_fflush_r>:
 801cdf0:	b538      	push	{r3, r4, r5, lr}
 801cdf2:	690b      	ldr	r3, [r1, #16]
 801cdf4:	4605      	mov	r5, r0
 801cdf6:	460c      	mov	r4, r1
 801cdf8:	b913      	cbnz	r3, 801ce00 <_fflush_r+0x10>
 801cdfa:	2500      	movs	r5, #0
 801cdfc:	4628      	mov	r0, r5
 801cdfe:	bd38      	pop	{r3, r4, r5, pc}
 801ce00:	b118      	cbz	r0, 801ce0a <_fflush_r+0x1a>
 801ce02:	6983      	ldr	r3, [r0, #24]
 801ce04:	b90b      	cbnz	r3, 801ce0a <_fflush_r+0x1a>
 801ce06:	f7ff fb73 	bl	801c4f0 <__sinit>
 801ce0a:	4b14      	ldr	r3, [pc, #80]	; (801ce5c <_fflush_r+0x6c>)
 801ce0c:	429c      	cmp	r4, r3
 801ce0e:	d11b      	bne.n	801ce48 <_fflush_r+0x58>
 801ce10:	686c      	ldr	r4, [r5, #4]
 801ce12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d0ef      	beq.n	801cdfa <_fflush_r+0xa>
 801ce1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ce1c:	07d0      	lsls	r0, r2, #31
 801ce1e:	d404      	bmi.n	801ce2a <_fflush_r+0x3a>
 801ce20:	0599      	lsls	r1, r3, #22
 801ce22:	d402      	bmi.n	801ce2a <_fflush_r+0x3a>
 801ce24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce26:	f7ff fc26 	bl	801c676 <__retarget_lock_acquire_recursive>
 801ce2a:	4628      	mov	r0, r5
 801ce2c:	4621      	mov	r1, r4
 801ce2e:	f7ff ff59 	bl	801cce4 <__sflush_r>
 801ce32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ce34:	07da      	lsls	r2, r3, #31
 801ce36:	4605      	mov	r5, r0
 801ce38:	d4e0      	bmi.n	801cdfc <_fflush_r+0xc>
 801ce3a:	89a3      	ldrh	r3, [r4, #12]
 801ce3c:	059b      	lsls	r3, r3, #22
 801ce3e:	d4dd      	bmi.n	801cdfc <_fflush_r+0xc>
 801ce40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce42:	f7ff fc19 	bl	801c678 <__retarget_lock_release_recursive>
 801ce46:	e7d9      	b.n	801cdfc <_fflush_r+0xc>
 801ce48:	4b05      	ldr	r3, [pc, #20]	; (801ce60 <_fflush_r+0x70>)
 801ce4a:	429c      	cmp	r4, r3
 801ce4c:	d101      	bne.n	801ce52 <_fflush_r+0x62>
 801ce4e:	68ac      	ldr	r4, [r5, #8]
 801ce50:	e7df      	b.n	801ce12 <_fflush_r+0x22>
 801ce52:	4b04      	ldr	r3, [pc, #16]	; (801ce64 <_fflush_r+0x74>)
 801ce54:	429c      	cmp	r4, r3
 801ce56:	bf08      	it	eq
 801ce58:	68ec      	ldreq	r4, [r5, #12]
 801ce5a:	e7da      	b.n	801ce12 <_fflush_r+0x22>
 801ce5c:	24008508 	.word	0x24008508
 801ce60:	24008528 	.word	0x24008528
 801ce64:	240084e8 	.word	0x240084e8

0801ce68 <_lseek_r>:
 801ce68:	b538      	push	{r3, r4, r5, lr}
 801ce6a:	4d07      	ldr	r5, [pc, #28]	; (801ce88 <_lseek_r+0x20>)
 801ce6c:	4604      	mov	r4, r0
 801ce6e:	4608      	mov	r0, r1
 801ce70:	4611      	mov	r1, r2
 801ce72:	2200      	movs	r2, #0
 801ce74:	602a      	str	r2, [r5, #0]
 801ce76:	461a      	mov	r2, r3
 801ce78:	f7ee f99c 	bl	800b1b4 <_lseek>
 801ce7c:	1c43      	adds	r3, r0, #1
 801ce7e:	d102      	bne.n	801ce86 <_lseek_r+0x1e>
 801ce80:	682b      	ldr	r3, [r5, #0]
 801ce82:	b103      	cbz	r3, 801ce86 <_lseek_r+0x1e>
 801ce84:	6023      	str	r3, [r4, #0]
 801ce86:	bd38      	pop	{r3, r4, r5, pc}
 801ce88:	24034d38 	.word	0x24034d38

0801ce8c <__swhatbuf_r>:
 801ce8c:	b570      	push	{r4, r5, r6, lr}
 801ce8e:	460e      	mov	r6, r1
 801ce90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce94:	2900      	cmp	r1, #0
 801ce96:	b096      	sub	sp, #88	; 0x58
 801ce98:	4614      	mov	r4, r2
 801ce9a:	461d      	mov	r5, r3
 801ce9c:	da08      	bge.n	801ceb0 <__swhatbuf_r+0x24>
 801ce9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801cea2:	2200      	movs	r2, #0
 801cea4:	602a      	str	r2, [r5, #0]
 801cea6:	061a      	lsls	r2, r3, #24
 801cea8:	d410      	bmi.n	801cecc <__swhatbuf_r+0x40>
 801ceaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ceae:	e00e      	b.n	801cece <__swhatbuf_r+0x42>
 801ceb0:	466a      	mov	r2, sp
 801ceb2:	f000 fb5d 	bl	801d570 <_fstat_r>
 801ceb6:	2800      	cmp	r0, #0
 801ceb8:	dbf1      	blt.n	801ce9e <__swhatbuf_r+0x12>
 801ceba:	9a01      	ldr	r2, [sp, #4]
 801cebc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cec0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cec4:	425a      	negs	r2, r3
 801cec6:	415a      	adcs	r2, r3
 801cec8:	602a      	str	r2, [r5, #0]
 801ceca:	e7ee      	b.n	801ceaa <__swhatbuf_r+0x1e>
 801cecc:	2340      	movs	r3, #64	; 0x40
 801cece:	2000      	movs	r0, #0
 801ced0:	6023      	str	r3, [r4, #0]
 801ced2:	b016      	add	sp, #88	; 0x58
 801ced4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ced8 <__smakebuf_r>:
 801ced8:	898b      	ldrh	r3, [r1, #12]
 801ceda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cedc:	079d      	lsls	r5, r3, #30
 801cede:	4606      	mov	r6, r0
 801cee0:	460c      	mov	r4, r1
 801cee2:	d507      	bpl.n	801cef4 <__smakebuf_r+0x1c>
 801cee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cee8:	6023      	str	r3, [r4, #0]
 801ceea:	6123      	str	r3, [r4, #16]
 801ceec:	2301      	movs	r3, #1
 801ceee:	6163      	str	r3, [r4, #20]
 801cef0:	b002      	add	sp, #8
 801cef2:	bd70      	pop	{r4, r5, r6, pc}
 801cef4:	ab01      	add	r3, sp, #4
 801cef6:	466a      	mov	r2, sp
 801cef8:	f7ff ffc8 	bl	801ce8c <__swhatbuf_r>
 801cefc:	9900      	ldr	r1, [sp, #0]
 801cefe:	4605      	mov	r5, r0
 801cf00:	4630      	mov	r0, r6
 801cf02:	f7ff fc4d 	bl	801c7a0 <_malloc_r>
 801cf06:	b948      	cbnz	r0, 801cf1c <__smakebuf_r+0x44>
 801cf08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf0c:	059a      	lsls	r2, r3, #22
 801cf0e:	d4ef      	bmi.n	801cef0 <__smakebuf_r+0x18>
 801cf10:	f023 0303 	bic.w	r3, r3, #3
 801cf14:	f043 0302 	orr.w	r3, r3, #2
 801cf18:	81a3      	strh	r3, [r4, #12]
 801cf1a:	e7e3      	b.n	801cee4 <__smakebuf_r+0xc>
 801cf1c:	4b0d      	ldr	r3, [pc, #52]	; (801cf54 <__smakebuf_r+0x7c>)
 801cf1e:	62b3      	str	r3, [r6, #40]	; 0x28
 801cf20:	89a3      	ldrh	r3, [r4, #12]
 801cf22:	6020      	str	r0, [r4, #0]
 801cf24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf28:	81a3      	strh	r3, [r4, #12]
 801cf2a:	9b00      	ldr	r3, [sp, #0]
 801cf2c:	6163      	str	r3, [r4, #20]
 801cf2e:	9b01      	ldr	r3, [sp, #4]
 801cf30:	6120      	str	r0, [r4, #16]
 801cf32:	b15b      	cbz	r3, 801cf4c <__smakebuf_r+0x74>
 801cf34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf38:	4630      	mov	r0, r6
 801cf3a:	f000 fb2b 	bl	801d594 <_isatty_r>
 801cf3e:	b128      	cbz	r0, 801cf4c <__smakebuf_r+0x74>
 801cf40:	89a3      	ldrh	r3, [r4, #12]
 801cf42:	f023 0303 	bic.w	r3, r3, #3
 801cf46:	f043 0301 	orr.w	r3, r3, #1
 801cf4a:	81a3      	strh	r3, [r4, #12]
 801cf4c:	89a0      	ldrh	r0, [r4, #12]
 801cf4e:	4305      	orrs	r5, r0
 801cf50:	81a5      	strh	r5, [r4, #12]
 801cf52:	e7cd      	b.n	801cef0 <__smakebuf_r+0x18>
 801cf54:	0801c489 	.word	0x0801c489

0801cf58 <__malloc_lock>:
 801cf58:	4801      	ldr	r0, [pc, #4]	; (801cf60 <__malloc_lock+0x8>)
 801cf5a:	f7ff bb8c 	b.w	801c676 <__retarget_lock_acquire_recursive>
 801cf5e:	bf00      	nop
 801cf60:	24034d2c 	.word	0x24034d2c

0801cf64 <__malloc_unlock>:
 801cf64:	4801      	ldr	r0, [pc, #4]	; (801cf6c <__malloc_unlock+0x8>)
 801cf66:	f7ff bb87 	b.w	801c678 <__retarget_lock_release_recursive>
 801cf6a:	bf00      	nop
 801cf6c:	24034d2c 	.word	0x24034d2c

0801cf70 <__sfputc_r>:
 801cf70:	6893      	ldr	r3, [r2, #8]
 801cf72:	3b01      	subs	r3, #1
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	b410      	push	{r4}
 801cf78:	6093      	str	r3, [r2, #8]
 801cf7a:	da08      	bge.n	801cf8e <__sfputc_r+0x1e>
 801cf7c:	6994      	ldr	r4, [r2, #24]
 801cf7e:	42a3      	cmp	r3, r4
 801cf80:	db01      	blt.n	801cf86 <__sfputc_r+0x16>
 801cf82:	290a      	cmp	r1, #10
 801cf84:	d103      	bne.n	801cf8e <__sfputc_r+0x1e>
 801cf86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf8a:	f7ff bdc9 	b.w	801cb20 <__swbuf_r>
 801cf8e:	6813      	ldr	r3, [r2, #0]
 801cf90:	1c58      	adds	r0, r3, #1
 801cf92:	6010      	str	r0, [r2, #0]
 801cf94:	7019      	strb	r1, [r3, #0]
 801cf96:	4608      	mov	r0, r1
 801cf98:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf9c:	4770      	bx	lr

0801cf9e <__sfputs_r>:
 801cf9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfa0:	4606      	mov	r6, r0
 801cfa2:	460f      	mov	r7, r1
 801cfa4:	4614      	mov	r4, r2
 801cfa6:	18d5      	adds	r5, r2, r3
 801cfa8:	42ac      	cmp	r4, r5
 801cfaa:	d101      	bne.n	801cfb0 <__sfputs_r+0x12>
 801cfac:	2000      	movs	r0, #0
 801cfae:	e007      	b.n	801cfc0 <__sfputs_r+0x22>
 801cfb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfb4:	463a      	mov	r2, r7
 801cfb6:	4630      	mov	r0, r6
 801cfb8:	f7ff ffda 	bl	801cf70 <__sfputc_r>
 801cfbc:	1c43      	adds	r3, r0, #1
 801cfbe:	d1f3      	bne.n	801cfa8 <__sfputs_r+0xa>
 801cfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cfc4 <_vfiprintf_r>:
 801cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc8:	460d      	mov	r5, r1
 801cfca:	b09d      	sub	sp, #116	; 0x74
 801cfcc:	4614      	mov	r4, r2
 801cfce:	4698      	mov	r8, r3
 801cfd0:	4606      	mov	r6, r0
 801cfd2:	b118      	cbz	r0, 801cfdc <_vfiprintf_r+0x18>
 801cfd4:	6983      	ldr	r3, [r0, #24]
 801cfd6:	b90b      	cbnz	r3, 801cfdc <_vfiprintf_r+0x18>
 801cfd8:	f7ff fa8a 	bl	801c4f0 <__sinit>
 801cfdc:	4b89      	ldr	r3, [pc, #548]	; (801d204 <_vfiprintf_r+0x240>)
 801cfde:	429d      	cmp	r5, r3
 801cfe0:	d11b      	bne.n	801d01a <_vfiprintf_r+0x56>
 801cfe2:	6875      	ldr	r5, [r6, #4]
 801cfe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cfe6:	07d9      	lsls	r1, r3, #31
 801cfe8:	d405      	bmi.n	801cff6 <_vfiprintf_r+0x32>
 801cfea:	89ab      	ldrh	r3, [r5, #12]
 801cfec:	059a      	lsls	r2, r3, #22
 801cfee:	d402      	bmi.n	801cff6 <_vfiprintf_r+0x32>
 801cff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cff2:	f7ff fb40 	bl	801c676 <__retarget_lock_acquire_recursive>
 801cff6:	89ab      	ldrh	r3, [r5, #12]
 801cff8:	071b      	lsls	r3, r3, #28
 801cffa:	d501      	bpl.n	801d000 <_vfiprintf_r+0x3c>
 801cffc:	692b      	ldr	r3, [r5, #16]
 801cffe:	b9eb      	cbnz	r3, 801d03c <_vfiprintf_r+0x78>
 801d000:	4629      	mov	r1, r5
 801d002:	4630      	mov	r0, r6
 801d004:	f7ff fdf0 	bl	801cbe8 <__swsetup_r>
 801d008:	b1c0      	cbz	r0, 801d03c <_vfiprintf_r+0x78>
 801d00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d00c:	07dc      	lsls	r4, r3, #31
 801d00e:	d50e      	bpl.n	801d02e <_vfiprintf_r+0x6a>
 801d010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d014:	b01d      	add	sp, #116	; 0x74
 801d016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d01a:	4b7b      	ldr	r3, [pc, #492]	; (801d208 <_vfiprintf_r+0x244>)
 801d01c:	429d      	cmp	r5, r3
 801d01e:	d101      	bne.n	801d024 <_vfiprintf_r+0x60>
 801d020:	68b5      	ldr	r5, [r6, #8]
 801d022:	e7df      	b.n	801cfe4 <_vfiprintf_r+0x20>
 801d024:	4b79      	ldr	r3, [pc, #484]	; (801d20c <_vfiprintf_r+0x248>)
 801d026:	429d      	cmp	r5, r3
 801d028:	bf08      	it	eq
 801d02a:	68f5      	ldreq	r5, [r6, #12]
 801d02c:	e7da      	b.n	801cfe4 <_vfiprintf_r+0x20>
 801d02e:	89ab      	ldrh	r3, [r5, #12]
 801d030:	0598      	lsls	r0, r3, #22
 801d032:	d4ed      	bmi.n	801d010 <_vfiprintf_r+0x4c>
 801d034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d036:	f7ff fb1f 	bl	801c678 <__retarget_lock_release_recursive>
 801d03a:	e7e9      	b.n	801d010 <_vfiprintf_r+0x4c>
 801d03c:	2300      	movs	r3, #0
 801d03e:	9309      	str	r3, [sp, #36]	; 0x24
 801d040:	2320      	movs	r3, #32
 801d042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d046:	f8cd 800c 	str.w	r8, [sp, #12]
 801d04a:	2330      	movs	r3, #48	; 0x30
 801d04c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d210 <_vfiprintf_r+0x24c>
 801d050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d054:	f04f 0901 	mov.w	r9, #1
 801d058:	4623      	mov	r3, r4
 801d05a:	469a      	mov	sl, r3
 801d05c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d060:	b10a      	cbz	r2, 801d066 <_vfiprintf_r+0xa2>
 801d062:	2a25      	cmp	r2, #37	; 0x25
 801d064:	d1f9      	bne.n	801d05a <_vfiprintf_r+0x96>
 801d066:	ebba 0b04 	subs.w	fp, sl, r4
 801d06a:	d00b      	beq.n	801d084 <_vfiprintf_r+0xc0>
 801d06c:	465b      	mov	r3, fp
 801d06e:	4622      	mov	r2, r4
 801d070:	4629      	mov	r1, r5
 801d072:	4630      	mov	r0, r6
 801d074:	f7ff ff93 	bl	801cf9e <__sfputs_r>
 801d078:	3001      	adds	r0, #1
 801d07a:	f000 80aa 	beq.w	801d1d2 <_vfiprintf_r+0x20e>
 801d07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d080:	445a      	add	r2, fp
 801d082:	9209      	str	r2, [sp, #36]	; 0x24
 801d084:	f89a 3000 	ldrb.w	r3, [sl]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	f000 80a2 	beq.w	801d1d2 <_vfiprintf_r+0x20e>
 801d08e:	2300      	movs	r3, #0
 801d090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d098:	f10a 0a01 	add.w	sl, sl, #1
 801d09c:	9304      	str	r3, [sp, #16]
 801d09e:	9307      	str	r3, [sp, #28]
 801d0a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d0a4:	931a      	str	r3, [sp, #104]	; 0x68
 801d0a6:	4654      	mov	r4, sl
 801d0a8:	2205      	movs	r2, #5
 801d0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d0ae:	4858      	ldr	r0, [pc, #352]	; (801d210 <_vfiprintf_r+0x24c>)
 801d0b0:	f7eb fee6 	bl	8008e80 <memchr>
 801d0b4:	9a04      	ldr	r2, [sp, #16]
 801d0b6:	b9d8      	cbnz	r0, 801d0f0 <_vfiprintf_r+0x12c>
 801d0b8:	06d1      	lsls	r1, r2, #27
 801d0ba:	bf44      	itt	mi
 801d0bc:	2320      	movmi	r3, #32
 801d0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d0c2:	0713      	lsls	r3, r2, #28
 801d0c4:	bf44      	itt	mi
 801d0c6:	232b      	movmi	r3, #43	; 0x2b
 801d0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d0cc:	f89a 3000 	ldrb.w	r3, [sl]
 801d0d0:	2b2a      	cmp	r3, #42	; 0x2a
 801d0d2:	d015      	beq.n	801d100 <_vfiprintf_r+0x13c>
 801d0d4:	9a07      	ldr	r2, [sp, #28]
 801d0d6:	4654      	mov	r4, sl
 801d0d8:	2000      	movs	r0, #0
 801d0da:	f04f 0c0a 	mov.w	ip, #10
 801d0de:	4621      	mov	r1, r4
 801d0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d0e4:	3b30      	subs	r3, #48	; 0x30
 801d0e6:	2b09      	cmp	r3, #9
 801d0e8:	d94e      	bls.n	801d188 <_vfiprintf_r+0x1c4>
 801d0ea:	b1b0      	cbz	r0, 801d11a <_vfiprintf_r+0x156>
 801d0ec:	9207      	str	r2, [sp, #28]
 801d0ee:	e014      	b.n	801d11a <_vfiprintf_r+0x156>
 801d0f0:	eba0 0308 	sub.w	r3, r0, r8
 801d0f4:	fa09 f303 	lsl.w	r3, r9, r3
 801d0f8:	4313      	orrs	r3, r2
 801d0fa:	9304      	str	r3, [sp, #16]
 801d0fc:	46a2      	mov	sl, r4
 801d0fe:	e7d2      	b.n	801d0a6 <_vfiprintf_r+0xe2>
 801d100:	9b03      	ldr	r3, [sp, #12]
 801d102:	1d19      	adds	r1, r3, #4
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	9103      	str	r1, [sp, #12]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	bfbb      	ittet	lt
 801d10c:	425b      	neglt	r3, r3
 801d10e:	f042 0202 	orrlt.w	r2, r2, #2
 801d112:	9307      	strge	r3, [sp, #28]
 801d114:	9307      	strlt	r3, [sp, #28]
 801d116:	bfb8      	it	lt
 801d118:	9204      	strlt	r2, [sp, #16]
 801d11a:	7823      	ldrb	r3, [r4, #0]
 801d11c:	2b2e      	cmp	r3, #46	; 0x2e
 801d11e:	d10c      	bne.n	801d13a <_vfiprintf_r+0x176>
 801d120:	7863      	ldrb	r3, [r4, #1]
 801d122:	2b2a      	cmp	r3, #42	; 0x2a
 801d124:	d135      	bne.n	801d192 <_vfiprintf_r+0x1ce>
 801d126:	9b03      	ldr	r3, [sp, #12]
 801d128:	1d1a      	adds	r2, r3, #4
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	9203      	str	r2, [sp, #12]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	bfb8      	it	lt
 801d132:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d136:	3402      	adds	r4, #2
 801d138:	9305      	str	r3, [sp, #20]
 801d13a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d220 <_vfiprintf_r+0x25c>
 801d13e:	7821      	ldrb	r1, [r4, #0]
 801d140:	2203      	movs	r2, #3
 801d142:	4650      	mov	r0, sl
 801d144:	f7eb fe9c 	bl	8008e80 <memchr>
 801d148:	b140      	cbz	r0, 801d15c <_vfiprintf_r+0x198>
 801d14a:	2340      	movs	r3, #64	; 0x40
 801d14c:	eba0 000a 	sub.w	r0, r0, sl
 801d150:	fa03 f000 	lsl.w	r0, r3, r0
 801d154:	9b04      	ldr	r3, [sp, #16]
 801d156:	4303      	orrs	r3, r0
 801d158:	3401      	adds	r4, #1
 801d15a:	9304      	str	r3, [sp, #16]
 801d15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d160:	482c      	ldr	r0, [pc, #176]	; (801d214 <_vfiprintf_r+0x250>)
 801d162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d166:	2206      	movs	r2, #6
 801d168:	f7eb fe8a 	bl	8008e80 <memchr>
 801d16c:	2800      	cmp	r0, #0
 801d16e:	d03f      	beq.n	801d1f0 <_vfiprintf_r+0x22c>
 801d170:	4b29      	ldr	r3, [pc, #164]	; (801d218 <_vfiprintf_r+0x254>)
 801d172:	bb1b      	cbnz	r3, 801d1bc <_vfiprintf_r+0x1f8>
 801d174:	9b03      	ldr	r3, [sp, #12]
 801d176:	3307      	adds	r3, #7
 801d178:	f023 0307 	bic.w	r3, r3, #7
 801d17c:	3308      	adds	r3, #8
 801d17e:	9303      	str	r3, [sp, #12]
 801d180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d182:	443b      	add	r3, r7
 801d184:	9309      	str	r3, [sp, #36]	; 0x24
 801d186:	e767      	b.n	801d058 <_vfiprintf_r+0x94>
 801d188:	fb0c 3202 	mla	r2, ip, r2, r3
 801d18c:	460c      	mov	r4, r1
 801d18e:	2001      	movs	r0, #1
 801d190:	e7a5      	b.n	801d0de <_vfiprintf_r+0x11a>
 801d192:	2300      	movs	r3, #0
 801d194:	3401      	adds	r4, #1
 801d196:	9305      	str	r3, [sp, #20]
 801d198:	4619      	mov	r1, r3
 801d19a:	f04f 0c0a 	mov.w	ip, #10
 801d19e:	4620      	mov	r0, r4
 801d1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d1a4:	3a30      	subs	r2, #48	; 0x30
 801d1a6:	2a09      	cmp	r2, #9
 801d1a8:	d903      	bls.n	801d1b2 <_vfiprintf_r+0x1ee>
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d0c5      	beq.n	801d13a <_vfiprintf_r+0x176>
 801d1ae:	9105      	str	r1, [sp, #20]
 801d1b0:	e7c3      	b.n	801d13a <_vfiprintf_r+0x176>
 801d1b2:	fb0c 2101 	mla	r1, ip, r1, r2
 801d1b6:	4604      	mov	r4, r0
 801d1b8:	2301      	movs	r3, #1
 801d1ba:	e7f0      	b.n	801d19e <_vfiprintf_r+0x1da>
 801d1bc:	ab03      	add	r3, sp, #12
 801d1be:	9300      	str	r3, [sp, #0]
 801d1c0:	462a      	mov	r2, r5
 801d1c2:	4b16      	ldr	r3, [pc, #88]	; (801d21c <_vfiprintf_r+0x258>)
 801d1c4:	a904      	add	r1, sp, #16
 801d1c6:	4630      	mov	r0, r6
 801d1c8:	f3af 8000 	nop.w
 801d1cc:	4607      	mov	r7, r0
 801d1ce:	1c78      	adds	r0, r7, #1
 801d1d0:	d1d6      	bne.n	801d180 <_vfiprintf_r+0x1bc>
 801d1d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d1d4:	07d9      	lsls	r1, r3, #31
 801d1d6:	d405      	bmi.n	801d1e4 <_vfiprintf_r+0x220>
 801d1d8:	89ab      	ldrh	r3, [r5, #12]
 801d1da:	059a      	lsls	r2, r3, #22
 801d1dc:	d402      	bmi.n	801d1e4 <_vfiprintf_r+0x220>
 801d1de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d1e0:	f7ff fa4a 	bl	801c678 <__retarget_lock_release_recursive>
 801d1e4:	89ab      	ldrh	r3, [r5, #12]
 801d1e6:	065b      	lsls	r3, r3, #25
 801d1e8:	f53f af12 	bmi.w	801d010 <_vfiprintf_r+0x4c>
 801d1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d1ee:	e711      	b.n	801d014 <_vfiprintf_r+0x50>
 801d1f0:	ab03      	add	r3, sp, #12
 801d1f2:	9300      	str	r3, [sp, #0]
 801d1f4:	462a      	mov	r2, r5
 801d1f6:	4b09      	ldr	r3, [pc, #36]	; (801d21c <_vfiprintf_r+0x258>)
 801d1f8:	a904      	add	r1, sp, #16
 801d1fa:	4630      	mov	r0, r6
 801d1fc:	f000 f880 	bl	801d300 <_printf_i>
 801d200:	e7e4      	b.n	801d1cc <_vfiprintf_r+0x208>
 801d202:	bf00      	nop
 801d204:	24008508 	.word	0x24008508
 801d208:	24008528 	.word	0x24008528
 801d20c:	240084e8 	.word	0x240084e8
 801d210:	2400854c 	.word	0x2400854c
 801d214:	24008556 	.word	0x24008556
 801d218:	00000000 	.word	0x00000000
 801d21c:	0801cf9f 	.word	0x0801cf9f
 801d220:	24008552 	.word	0x24008552

0801d224 <_printf_common>:
 801d224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d228:	4616      	mov	r6, r2
 801d22a:	4699      	mov	r9, r3
 801d22c:	688a      	ldr	r2, [r1, #8]
 801d22e:	690b      	ldr	r3, [r1, #16]
 801d230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d234:	4293      	cmp	r3, r2
 801d236:	bfb8      	it	lt
 801d238:	4613      	movlt	r3, r2
 801d23a:	6033      	str	r3, [r6, #0]
 801d23c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d240:	4607      	mov	r7, r0
 801d242:	460c      	mov	r4, r1
 801d244:	b10a      	cbz	r2, 801d24a <_printf_common+0x26>
 801d246:	3301      	adds	r3, #1
 801d248:	6033      	str	r3, [r6, #0]
 801d24a:	6823      	ldr	r3, [r4, #0]
 801d24c:	0699      	lsls	r1, r3, #26
 801d24e:	bf42      	ittt	mi
 801d250:	6833      	ldrmi	r3, [r6, #0]
 801d252:	3302      	addmi	r3, #2
 801d254:	6033      	strmi	r3, [r6, #0]
 801d256:	6825      	ldr	r5, [r4, #0]
 801d258:	f015 0506 	ands.w	r5, r5, #6
 801d25c:	d106      	bne.n	801d26c <_printf_common+0x48>
 801d25e:	f104 0a19 	add.w	sl, r4, #25
 801d262:	68e3      	ldr	r3, [r4, #12]
 801d264:	6832      	ldr	r2, [r6, #0]
 801d266:	1a9b      	subs	r3, r3, r2
 801d268:	42ab      	cmp	r3, r5
 801d26a:	dc26      	bgt.n	801d2ba <_printf_common+0x96>
 801d26c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d270:	1e13      	subs	r3, r2, #0
 801d272:	6822      	ldr	r2, [r4, #0]
 801d274:	bf18      	it	ne
 801d276:	2301      	movne	r3, #1
 801d278:	0692      	lsls	r2, r2, #26
 801d27a:	d42b      	bmi.n	801d2d4 <_printf_common+0xb0>
 801d27c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d280:	4649      	mov	r1, r9
 801d282:	4638      	mov	r0, r7
 801d284:	47c0      	blx	r8
 801d286:	3001      	adds	r0, #1
 801d288:	d01e      	beq.n	801d2c8 <_printf_common+0xa4>
 801d28a:	6823      	ldr	r3, [r4, #0]
 801d28c:	68e5      	ldr	r5, [r4, #12]
 801d28e:	6832      	ldr	r2, [r6, #0]
 801d290:	f003 0306 	and.w	r3, r3, #6
 801d294:	2b04      	cmp	r3, #4
 801d296:	bf08      	it	eq
 801d298:	1aad      	subeq	r5, r5, r2
 801d29a:	68a3      	ldr	r3, [r4, #8]
 801d29c:	6922      	ldr	r2, [r4, #16]
 801d29e:	bf0c      	ite	eq
 801d2a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d2a4:	2500      	movne	r5, #0
 801d2a6:	4293      	cmp	r3, r2
 801d2a8:	bfc4      	itt	gt
 801d2aa:	1a9b      	subgt	r3, r3, r2
 801d2ac:	18ed      	addgt	r5, r5, r3
 801d2ae:	2600      	movs	r6, #0
 801d2b0:	341a      	adds	r4, #26
 801d2b2:	42b5      	cmp	r5, r6
 801d2b4:	d11a      	bne.n	801d2ec <_printf_common+0xc8>
 801d2b6:	2000      	movs	r0, #0
 801d2b8:	e008      	b.n	801d2cc <_printf_common+0xa8>
 801d2ba:	2301      	movs	r3, #1
 801d2bc:	4652      	mov	r2, sl
 801d2be:	4649      	mov	r1, r9
 801d2c0:	4638      	mov	r0, r7
 801d2c2:	47c0      	blx	r8
 801d2c4:	3001      	adds	r0, #1
 801d2c6:	d103      	bne.n	801d2d0 <_printf_common+0xac>
 801d2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2d0:	3501      	adds	r5, #1
 801d2d2:	e7c6      	b.n	801d262 <_printf_common+0x3e>
 801d2d4:	18e1      	adds	r1, r4, r3
 801d2d6:	1c5a      	adds	r2, r3, #1
 801d2d8:	2030      	movs	r0, #48	; 0x30
 801d2da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d2de:	4422      	add	r2, r4
 801d2e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d2e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d2e8:	3302      	adds	r3, #2
 801d2ea:	e7c7      	b.n	801d27c <_printf_common+0x58>
 801d2ec:	2301      	movs	r3, #1
 801d2ee:	4622      	mov	r2, r4
 801d2f0:	4649      	mov	r1, r9
 801d2f2:	4638      	mov	r0, r7
 801d2f4:	47c0      	blx	r8
 801d2f6:	3001      	adds	r0, #1
 801d2f8:	d0e6      	beq.n	801d2c8 <_printf_common+0xa4>
 801d2fa:	3601      	adds	r6, #1
 801d2fc:	e7d9      	b.n	801d2b2 <_printf_common+0x8e>
	...

0801d300 <_printf_i>:
 801d300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d304:	7e0f      	ldrb	r7, [r1, #24]
 801d306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d308:	2f78      	cmp	r7, #120	; 0x78
 801d30a:	4691      	mov	r9, r2
 801d30c:	4680      	mov	r8, r0
 801d30e:	460c      	mov	r4, r1
 801d310:	469a      	mov	sl, r3
 801d312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d316:	d807      	bhi.n	801d328 <_printf_i+0x28>
 801d318:	2f62      	cmp	r7, #98	; 0x62
 801d31a:	d80a      	bhi.n	801d332 <_printf_i+0x32>
 801d31c:	2f00      	cmp	r7, #0
 801d31e:	f000 80d8 	beq.w	801d4d2 <_printf_i+0x1d2>
 801d322:	2f58      	cmp	r7, #88	; 0x58
 801d324:	f000 80a3 	beq.w	801d46e <_printf_i+0x16e>
 801d328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d32c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d330:	e03a      	b.n	801d3a8 <_printf_i+0xa8>
 801d332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d336:	2b15      	cmp	r3, #21
 801d338:	d8f6      	bhi.n	801d328 <_printf_i+0x28>
 801d33a:	a101      	add	r1, pc, #4	; (adr r1, 801d340 <_printf_i+0x40>)
 801d33c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d340:	0801d399 	.word	0x0801d399
 801d344:	0801d3ad 	.word	0x0801d3ad
 801d348:	0801d329 	.word	0x0801d329
 801d34c:	0801d329 	.word	0x0801d329
 801d350:	0801d329 	.word	0x0801d329
 801d354:	0801d329 	.word	0x0801d329
 801d358:	0801d3ad 	.word	0x0801d3ad
 801d35c:	0801d329 	.word	0x0801d329
 801d360:	0801d329 	.word	0x0801d329
 801d364:	0801d329 	.word	0x0801d329
 801d368:	0801d329 	.word	0x0801d329
 801d36c:	0801d4b9 	.word	0x0801d4b9
 801d370:	0801d3dd 	.word	0x0801d3dd
 801d374:	0801d49b 	.word	0x0801d49b
 801d378:	0801d329 	.word	0x0801d329
 801d37c:	0801d329 	.word	0x0801d329
 801d380:	0801d4db 	.word	0x0801d4db
 801d384:	0801d329 	.word	0x0801d329
 801d388:	0801d3dd 	.word	0x0801d3dd
 801d38c:	0801d329 	.word	0x0801d329
 801d390:	0801d329 	.word	0x0801d329
 801d394:	0801d4a3 	.word	0x0801d4a3
 801d398:	682b      	ldr	r3, [r5, #0]
 801d39a:	1d1a      	adds	r2, r3, #4
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	602a      	str	r2, [r5, #0]
 801d3a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d3a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d3a8:	2301      	movs	r3, #1
 801d3aa:	e0a3      	b.n	801d4f4 <_printf_i+0x1f4>
 801d3ac:	6820      	ldr	r0, [r4, #0]
 801d3ae:	6829      	ldr	r1, [r5, #0]
 801d3b0:	0606      	lsls	r6, r0, #24
 801d3b2:	f101 0304 	add.w	r3, r1, #4
 801d3b6:	d50a      	bpl.n	801d3ce <_printf_i+0xce>
 801d3b8:	680e      	ldr	r6, [r1, #0]
 801d3ba:	602b      	str	r3, [r5, #0]
 801d3bc:	2e00      	cmp	r6, #0
 801d3be:	da03      	bge.n	801d3c8 <_printf_i+0xc8>
 801d3c0:	232d      	movs	r3, #45	; 0x2d
 801d3c2:	4276      	negs	r6, r6
 801d3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d3c8:	485e      	ldr	r0, [pc, #376]	; (801d544 <_printf_i+0x244>)
 801d3ca:	230a      	movs	r3, #10
 801d3cc:	e019      	b.n	801d402 <_printf_i+0x102>
 801d3ce:	680e      	ldr	r6, [r1, #0]
 801d3d0:	602b      	str	r3, [r5, #0]
 801d3d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d3d6:	bf18      	it	ne
 801d3d8:	b236      	sxthne	r6, r6
 801d3da:	e7ef      	b.n	801d3bc <_printf_i+0xbc>
 801d3dc:	682b      	ldr	r3, [r5, #0]
 801d3de:	6820      	ldr	r0, [r4, #0]
 801d3e0:	1d19      	adds	r1, r3, #4
 801d3e2:	6029      	str	r1, [r5, #0]
 801d3e4:	0601      	lsls	r1, r0, #24
 801d3e6:	d501      	bpl.n	801d3ec <_printf_i+0xec>
 801d3e8:	681e      	ldr	r6, [r3, #0]
 801d3ea:	e002      	b.n	801d3f2 <_printf_i+0xf2>
 801d3ec:	0646      	lsls	r6, r0, #25
 801d3ee:	d5fb      	bpl.n	801d3e8 <_printf_i+0xe8>
 801d3f0:	881e      	ldrh	r6, [r3, #0]
 801d3f2:	4854      	ldr	r0, [pc, #336]	; (801d544 <_printf_i+0x244>)
 801d3f4:	2f6f      	cmp	r7, #111	; 0x6f
 801d3f6:	bf0c      	ite	eq
 801d3f8:	2308      	moveq	r3, #8
 801d3fa:	230a      	movne	r3, #10
 801d3fc:	2100      	movs	r1, #0
 801d3fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d402:	6865      	ldr	r5, [r4, #4]
 801d404:	60a5      	str	r5, [r4, #8]
 801d406:	2d00      	cmp	r5, #0
 801d408:	bfa2      	ittt	ge
 801d40a:	6821      	ldrge	r1, [r4, #0]
 801d40c:	f021 0104 	bicge.w	r1, r1, #4
 801d410:	6021      	strge	r1, [r4, #0]
 801d412:	b90e      	cbnz	r6, 801d418 <_printf_i+0x118>
 801d414:	2d00      	cmp	r5, #0
 801d416:	d04d      	beq.n	801d4b4 <_printf_i+0x1b4>
 801d418:	4615      	mov	r5, r2
 801d41a:	fbb6 f1f3 	udiv	r1, r6, r3
 801d41e:	fb03 6711 	mls	r7, r3, r1, r6
 801d422:	5dc7      	ldrb	r7, [r0, r7]
 801d424:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d428:	4637      	mov	r7, r6
 801d42a:	42bb      	cmp	r3, r7
 801d42c:	460e      	mov	r6, r1
 801d42e:	d9f4      	bls.n	801d41a <_printf_i+0x11a>
 801d430:	2b08      	cmp	r3, #8
 801d432:	d10b      	bne.n	801d44c <_printf_i+0x14c>
 801d434:	6823      	ldr	r3, [r4, #0]
 801d436:	07de      	lsls	r6, r3, #31
 801d438:	d508      	bpl.n	801d44c <_printf_i+0x14c>
 801d43a:	6923      	ldr	r3, [r4, #16]
 801d43c:	6861      	ldr	r1, [r4, #4]
 801d43e:	4299      	cmp	r1, r3
 801d440:	bfde      	ittt	le
 801d442:	2330      	movle	r3, #48	; 0x30
 801d444:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d448:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d44c:	1b52      	subs	r2, r2, r5
 801d44e:	6122      	str	r2, [r4, #16]
 801d450:	f8cd a000 	str.w	sl, [sp]
 801d454:	464b      	mov	r3, r9
 801d456:	aa03      	add	r2, sp, #12
 801d458:	4621      	mov	r1, r4
 801d45a:	4640      	mov	r0, r8
 801d45c:	f7ff fee2 	bl	801d224 <_printf_common>
 801d460:	3001      	adds	r0, #1
 801d462:	d14c      	bne.n	801d4fe <_printf_i+0x1fe>
 801d464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d468:	b004      	add	sp, #16
 801d46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d46e:	4835      	ldr	r0, [pc, #212]	; (801d544 <_printf_i+0x244>)
 801d470:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d474:	6829      	ldr	r1, [r5, #0]
 801d476:	6823      	ldr	r3, [r4, #0]
 801d478:	f851 6b04 	ldr.w	r6, [r1], #4
 801d47c:	6029      	str	r1, [r5, #0]
 801d47e:	061d      	lsls	r5, r3, #24
 801d480:	d514      	bpl.n	801d4ac <_printf_i+0x1ac>
 801d482:	07df      	lsls	r7, r3, #31
 801d484:	bf44      	itt	mi
 801d486:	f043 0320 	orrmi.w	r3, r3, #32
 801d48a:	6023      	strmi	r3, [r4, #0]
 801d48c:	b91e      	cbnz	r6, 801d496 <_printf_i+0x196>
 801d48e:	6823      	ldr	r3, [r4, #0]
 801d490:	f023 0320 	bic.w	r3, r3, #32
 801d494:	6023      	str	r3, [r4, #0]
 801d496:	2310      	movs	r3, #16
 801d498:	e7b0      	b.n	801d3fc <_printf_i+0xfc>
 801d49a:	6823      	ldr	r3, [r4, #0]
 801d49c:	f043 0320 	orr.w	r3, r3, #32
 801d4a0:	6023      	str	r3, [r4, #0]
 801d4a2:	2378      	movs	r3, #120	; 0x78
 801d4a4:	4828      	ldr	r0, [pc, #160]	; (801d548 <_printf_i+0x248>)
 801d4a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d4aa:	e7e3      	b.n	801d474 <_printf_i+0x174>
 801d4ac:	0659      	lsls	r1, r3, #25
 801d4ae:	bf48      	it	mi
 801d4b0:	b2b6      	uxthmi	r6, r6
 801d4b2:	e7e6      	b.n	801d482 <_printf_i+0x182>
 801d4b4:	4615      	mov	r5, r2
 801d4b6:	e7bb      	b.n	801d430 <_printf_i+0x130>
 801d4b8:	682b      	ldr	r3, [r5, #0]
 801d4ba:	6826      	ldr	r6, [r4, #0]
 801d4bc:	6961      	ldr	r1, [r4, #20]
 801d4be:	1d18      	adds	r0, r3, #4
 801d4c0:	6028      	str	r0, [r5, #0]
 801d4c2:	0635      	lsls	r5, r6, #24
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	d501      	bpl.n	801d4cc <_printf_i+0x1cc>
 801d4c8:	6019      	str	r1, [r3, #0]
 801d4ca:	e002      	b.n	801d4d2 <_printf_i+0x1d2>
 801d4cc:	0670      	lsls	r0, r6, #25
 801d4ce:	d5fb      	bpl.n	801d4c8 <_printf_i+0x1c8>
 801d4d0:	8019      	strh	r1, [r3, #0]
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	6123      	str	r3, [r4, #16]
 801d4d6:	4615      	mov	r5, r2
 801d4d8:	e7ba      	b.n	801d450 <_printf_i+0x150>
 801d4da:	682b      	ldr	r3, [r5, #0]
 801d4dc:	1d1a      	adds	r2, r3, #4
 801d4de:	602a      	str	r2, [r5, #0]
 801d4e0:	681d      	ldr	r5, [r3, #0]
 801d4e2:	6862      	ldr	r2, [r4, #4]
 801d4e4:	2100      	movs	r1, #0
 801d4e6:	4628      	mov	r0, r5
 801d4e8:	f7eb fcca 	bl	8008e80 <memchr>
 801d4ec:	b108      	cbz	r0, 801d4f2 <_printf_i+0x1f2>
 801d4ee:	1b40      	subs	r0, r0, r5
 801d4f0:	6060      	str	r0, [r4, #4]
 801d4f2:	6863      	ldr	r3, [r4, #4]
 801d4f4:	6123      	str	r3, [r4, #16]
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d4fc:	e7a8      	b.n	801d450 <_printf_i+0x150>
 801d4fe:	6923      	ldr	r3, [r4, #16]
 801d500:	462a      	mov	r2, r5
 801d502:	4649      	mov	r1, r9
 801d504:	4640      	mov	r0, r8
 801d506:	47d0      	blx	sl
 801d508:	3001      	adds	r0, #1
 801d50a:	d0ab      	beq.n	801d464 <_printf_i+0x164>
 801d50c:	6823      	ldr	r3, [r4, #0]
 801d50e:	079b      	lsls	r3, r3, #30
 801d510:	d413      	bmi.n	801d53a <_printf_i+0x23a>
 801d512:	68e0      	ldr	r0, [r4, #12]
 801d514:	9b03      	ldr	r3, [sp, #12]
 801d516:	4298      	cmp	r0, r3
 801d518:	bfb8      	it	lt
 801d51a:	4618      	movlt	r0, r3
 801d51c:	e7a4      	b.n	801d468 <_printf_i+0x168>
 801d51e:	2301      	movs	r3, #1
 801d520:	4632      	mov	r2, r6
 801d522:	4649      	mov	r1, r9
 801d524:	4640      	mov	r0, r8
 801d526:	47d0      	blx	sl
 801d528:	3001      	adds	r0, #1
 801d52a:	d09b      	beq.n	801d464 <_printf_i+0x164>
 801d52c:	3501      	adds	r5, #1
 801d52e:	68e3      	ldr	r3, [r4, #12]
 801d530:	9903      	ldr	r1, [sp, #12]
 801d532:	1a5b      	subs	r3, r3, r1
 801d534:	42ab      	cmp	r3, r5
 801d536:	dcf2      	bgt.n	801d51e <_printf_i+0x21e>
 801d538:	e7eb      	b.n	801d512 <_printf_i+0x212>
 801d53a:	2500      	movs	r5, #0
 801d53c:	f104 0619 	add.w	r6, r4, #25
 801d540:	e7f5      	b.n	801d52e <_printf_i+0x22e>
 801d542:	bf00      	nop
 801d544:	2400855d 	.word	0x2400855d
 801d548:	2400856e 	.word	0x2400856e

0801d54c <_read_r>:
 801d54c:	b538      	push	{r3, r4, r5, lr}
 801d54e:	4d07      	ldr	r5, [pc, #28]	; (801d56c <_read_r+0x20>)
 801d550:	4604      	mov	r4, r0
 801d552:	4608      	mov	r0, r1
 801d554:	4611      	mov	r1, r2
 801d556:	2200      	movs	r2, #0
 801d558:	602a      	str	r2, [r5, #0]
 801d55a:	461a      	mov	r2, r3
 801d55c:	f7ed fdca 	bl	800b0f4 <_read>
 801d560:	1c43      	adds	r3, r0, #1
 801d562:	d102      	bne.n	801d56a <_read_r+0x1e>
 801d564:	682b      	ldr	r3, [r5, #0]
 801d566:	b103      	cbz	r3, 801d56a <_read_r+0x1e>
 801d568:	6023      	str	r3, [r4, #0]
 801d56a:	bd38      	pop	{r3, r4, r5, pc}
 801d56c:	24034d38 	.word	0x24034d38

0801d570 <_fstat_r>:
 801d570:	b538      	push	{r3, r4, r5, lr}
 801d572:	4d07      	ldr	r5, [pc, #28]	; (801d590 <_fstat_r+0x20>)
 801d574:	2300      	movs	r3, #0
 801d576:	4604      	mov	r4, r0
 801d578:	4608      	mov	r0, r1
 801d57a:	4611      	mov	r1, r2
 801d57c:	602b      	str	r3, [r5, #0]
 801d57e:	f7ed fdfe 	bl	800b17e <_fstat>
 801d582:	1c43      	adds	r3, r0, #1
 801d584:	d102      	bne.n	801d58c <_fstat_r+0x1c>
 801d586:	682b      	ldr	r3, [r5, #0]
 801d588:	b103      	cbz	r3, 801d58c <_fstat_r+0x1c>
 801d58a:	6023      	str	r3, [r4, #0]
 801d58c:	bd38      	pop	{r3, r4, r5, pc}
 801d58e:	bf00      	nop
 801d590:	24034d38 	.word	0x24034d38

0801d594 <_isatty_r>:
 801d594:	b538      	push	{r3, r4, r5, lr}
 801d596:	4d06      	ldr	r5, [pc, #24]	; (801d5b0 <_isatty_r+0x1c>)
 801d598:	2300      	movs	r3, #0
 801d59a:	4604      	mov	r4, r0
 801d59c:	4608      	mov	r0, r1
 801d59e:	602b      	str	r3, [r5, #0]
 801d5a0:	f7ed fdfd 	bl	800b19e <_isatty>
 801d5a4:	1c43      	adds	r3, r0, #1
 801d5a6:	d102      	bne.n	801d5ae <_isatty_r+0x1a>
 801d5a8:	682b      	ldr	r3, [r5, #0]
 801d5aa:	b103      	cbz	r3, 801d5ae <_isatty_r+0x1a>
 801d5ac:	6023      	str	r3, [r4, #0]
 801d5ae:	bd38      	pop	{r3, r4, r5, pc}
 801d5b0:	24034d38 	.word	0x24034d38

0801d5b4 <_init>:
 801d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5b6:	bf00      	nop
 801d5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d5ba:	bc08      	pop	{r3}
 801d5bc:	469e      	mov	lr, r3
 801d5be:	4770      	bx	lr

0801d5c0 <_fini>:
 801d5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5c2:	bf00      	nop
 801d5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d5c6:	bc08      	pop	{r3}
 801d5c8:	469e      	mov	lr, r3
 801d5ca:	4770      	bx	lr
